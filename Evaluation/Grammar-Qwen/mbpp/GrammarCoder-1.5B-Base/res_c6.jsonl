{"task_id": "Mbpp/2", "solution": "def similar_elements ( list1 , list2 ) : \n    return set ( list1 ) . intersection ( set ( list2 ) ) \n\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime ( n ) : \n    if n <= 1 : \n        return True \n    \n    for i in range ( 2 , n ) : \n        if n % i == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest ( lst , n ) : \n    largest_items = sorted ( lst , reverse = True ) [ : n ] \n    \n    return largest_items \n\n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos ( a , b ) : \n    xor_result = a ^ b \n    \n    bit_position = 0 \n    \n    while xor_result != 0 : \n        if xor_result & 1 == 1 : \n            return ( a & 1 ) != ( b & 1 ) \n        \n        xor_result >>= 1 \n        bit_position += 1 \n    \n    return False \n\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long ( s ) : \n    return set ( word for word in s . split ( ) if len ( word ) >= 4 ) \n\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums ( nums ) : \n    result = [ ] \n    \n    for num in nums : \n        result . append ( num ** 2 ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations ( s ) : \n    n = len ( s ) \n    \n    for i in range ( 1 , n + 1 ) : \n        if s == s [ i : ] + s [ : i ] : \n            return i \n        \n    \n    return n \n\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ ( str1 , char ) : \n    first_occurrence = str1 . find ( char ) \n    \n    last_occurrence = str1 . rfind ( char ) \n    \n    if first_occurrence == - 1 or last_occurrence == - 1 : \n        return str1 \n    else : \n        return str1 [ : first_occurrence ] + str1 [ last_occurrence + 1 : ] \n    \n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix ( matrix ) : \n    row_sums = [ sum ( row ) for row in matrix ] \n    \n    sorted_matrix = [ matrix [ i ] for i in sorted ( range ( len ( matrix ) ) , key = lambda i : row_sums [ i ] ) ] \n    \n    return sorted_matrix \n\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume ( a , b , c ) : \n    volume = ( 1 / 3 ) * a * b * c \n    \n    return volume \n\n"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore ( input_string ) : \n    if input_string . islower ( ) : \n        return True \n    elif input_string [ 0 ] . islower ( ) and input_string [ 1 : ] . islower ( ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter ( side_length ) : \n    return side_length * 4 \n\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars ( str1 , str2 ) : \n    result = \"\" \n    \n    for char in str1 : \n        if char not in str2 : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate ( arr ) : \n    seen = set ( ) \n    \n    for num in arr : \n        if num in seen : \n            return True \n        \n        seen . add ( num ) \n    \n    return False \n\n"}
{"task_id": "Mbpp/20", "solution": "def is_woodall ( n ) : \n    if n == 1 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/56", "solution": "def check ( n ) : \n    rev = int ( str ( n ) [ : : - 1 ] ) \n    \n    return True if n - rev == - 1 else False \n\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num ( nums ) : \n    nums = list ( map ( str , nums ) ) \n    \n    nums . sort ( reverse = True ) \n    result = '' . join ( nums ) \n    \n    return int ( result ) \n"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs ( a , b ) : \n    if a * b < 0 : \n        return True \n    else : \n        return False \n    \n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal ( n ) : \n    return n * ( 3 * n - 2 ) \n\n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings ( s ) : \n    n = len ( s ) \n    \n    count = 0 \n    \n    for i in range ( n ) : \n        sum = 0 \n        \n        for j in range ( i , n ) : \n            sum += int ( s [ j ] ) \n            if sum == j - i : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num ( lst ) : \n    return min ( lst ) \n\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference ( test_list ) : \n    max_diff = 0 \n    \n    for i in range ( len ( test_list ) ) : \n        for j in range ( i + 1 , len ( test_list ) ) : \n            diff = abs ( test_list [ i ] [ 0 ] - test_list [ j ] [ 0 ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks ( lst ) : \n    return sorted ( lst , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum ( lst ) : \n    total = 0 \n    \n    for item in lst : \n        if type ( item ) == list : \n            total += recursive_list_sum ( item ) \n        else : \n            total += item \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count ( lst ) : \n    count = 0 \n    \n    for i in lst : \n        if i > 0 : \n            count += 1 \n        \n    \n    return count \n"}
{"task_id": "Mbpp/67", "solution": "def bell_number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic ( arr ) : \n    increasing = decreasing = True \n    \n    \n    for i in range ( len ( arr ) - 1 ) : \n        if arr [ i ] > arr [ i + 1 ] : \n            increasing = False \n            \n        \n        if arr [ i ] < arr [ i + 1 ] : \n            decreasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist ( l1 , l2 ) : \n    return len ( l2 ) <= len ( l1 ) \n\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal ( tup ) : \n    length = len ( tup [ 0 ] ) \n    \n    for i in tup : \n        if len ( i ) != length : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort ( lst ) : \n    n = len ( lst ) \n    \n    for i in range ( n ) : \n        min_idx = i \n        \n        for j in range ( i + 1 , n ) : \n            if lst [ j ] < lst [ min_idx ] : \n                min_idx = j \n                \n            \n        \n        lst [ i ] , lst [ min_idx ] = lst [ min_idx ] , lst [ i ] \n        \n    \n    return lst \n\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square ( n ) : \n    a = 0 \n    \n    while a * a <= n : \n        b = int ( ( n - a * a ) ** 0.5 ) \n        \n        if a * a + b * b == n : \n            return True \n        \n        a += 1 \n    \n    return False \n\n"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns ( patterns ) : \n    d = { } \n    \n    d2 = { } \n    \n    for i in range ( len ( patterns ) ) : \n        if patterns [ i ] in d : \n            if d [ patterns [ i ] ] != patterns [ i ] : \n                return False \n            \n        else : \n            d [ patterns [ i ] ] = patterns [ i ] \n            \n        \n        if patterns [ i ] in d2 : \n            if d2 [ patterns [ i ] ] != patterns [ i ] : \n                return False \n            \n        else : \n            d2 [ patterns [ i ] ] = patterns [ i ] \n            \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples ( lst , k ) : \n    result = [ ] \n    \n    for tup in lst : \n        if all ( elem % k == 0 for elem in tup ) : \n            result . append ( tup ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/77", "solution": "def is_Diff ( num ) : \n    if num % 11 == 0 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/79", "solution": "def word_len ( word ) : \n    if len ( word ) % 2 != 0 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number ( n ) : \n    return n * ( n + 1 ) * ( n + 2 ) // 6 \n\n"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere ( radius ) : \n    pi = 3.141592653589793 \n    \n    volume = ( 4 / 3 ) * pi * ( radius ** 3 ) \n    \n    return volume \n\n"}
{"task_id": "Mbpp/84", "solution": "def sequence ( n ) : \n    sequence = [ 0 , 1 , 2 ] \n    \n    for i in range ( 3 , n + 1 ) : \n        sequence . append ( sequence [ i - 1 ] + sequence [ i - 2 ] ) \n    \n    return sequence [ n ] \n\n"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere ( radius ) : \n    pi = 3.141592653589793 \n    \n    surface_area = 4 * pi * radius ** 2 \n    \n    return surface_area \n\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number ( n ) : \n    return 3 * n * n - 3 * n + 1 \n\n"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three ( dict1 , dict2 , dict3 ) : \n    return { ** dict1 , ** dict2 , ** dict3 } \n\n"}
{"task_id": "Mbpp/88", "solution": "def freq_count ( lst ) : \n    freq_dict = { } \n    \n    for item in lst : \n        if item in freq_dict : \n            freq_dict [ item ] += 1 \n        else : \n            freq_dict [ item ] = 1 \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num ( n ) : \n    for i in range ( n - 1 , 0 , - 1 ) : \n        if n % i == 0 : \n            return i \n        \n    \n\n"}
{"task_id": "Mbpp/90", "solution": "def len_log ( log ) : \n    max_len = 0 \n    \n    for word in log : \n        if len ( word ) > max_len : \n            max_len = len ( word ) \n            \n        \n    \n    return max_len \n\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring ( lst , sub ) : \n    for i in lst : \n        if sub in i : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating ( n ) : \n    str_n = str ( n ) \n    \n    for i in range ( 1 , len ( str_n ) - 1 ) : \n        if str_n [ i ] == str_n [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/93", "solution": "def power ( a , b ) : \n    return a ** b \n\n"}
{"task_id": "Mbpp/94", "solution": "def index_minimum ( lst ) : \n    return min ( lst , key = lambda x : x [ 1 ] ) [ 0 ] \n\n"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length ( list_of_lists ) : \n    min_length = float ( 'inf' ) \n    \n    for sublist in list_of_lists : \n        if len ( sublist ) < min_length : \n            min_length = len ( sublist ) \n            \n        \n    \n    return min_length \n\n"}
{"task_id": "Mbpp/96", "solution": "def divisor ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists ( lists ) : \n    freq_dict = { } \n    \n    for sublist in lists : \n        for item in sublist : \n            if item in freq_dict : \n                freq_dict [ item ] += 1 \n            else : \n                freq_dict [ item ] = 1 \n                \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/98", "solution": "def multiply_num ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product / len ( lst ) \n\n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary ( n ) : \n    return bin ( n ) [ 2 : ] \n\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome ( n ) : \n    n = n + 1 \n    \n    while str ( n ) != str ( n ) [ : : - 1 ] : \n        n += 1 \n    \n    return n \n\n"}
{"task_id": "Mbpp/101", "solution": "def kth_element ( arr , k ) : \n    return arr [ k - 1 ] \n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel ( snake_str ) : \n    components = snake_str . split ( '_' ) \n    \n    return components [ 0 ] + '' . join ( x . title ( ) for x in components [ 1 : ] ) \n\n"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num ( n , m ) : \n    if n == m : \n        return 1 \n    else : \n        return ( n - m ) * eulerian_num ( n - 1 , m ) \n    \n\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n"}
{"task_id": "Mbpp/105", "solution": "def count ( lst ) : \n    count = 0 \n    \n    for i in lst : \n        if i : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists ( list1 , tuple1 ) : \n    return tuple1 + list1 \n"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list ( list1 , list2 , list3 ) : \n    merged_list = [ ] \n    \n    i = j = k = 0 \n    \n    \n    \n    while i < len ( list1 ) and j < len ( list2 ) and k < len ( list3 ) : \n        if list1 [ i ] < list2 [ j ] : \n            merged_list . append ( list1 [ i ] ) \n            i += 1 \n        elif list1 [ i ] > list2 [ j ] : \n            merged_list . append ( list2 [ j ] ) \n            j += 1 \n        else : \n            merged_list . append ( list1 [ i ] ) \n            i += 1 \n            j += 1 \n        \n    \n    while i < len ( list1 ) : \n        merged_list . append ( list1 [ i ] ) \n        i += 1 \n    \n    while j < len ( list2 ) : \n        merged_list . append ( list2 [ j ] ) \n        j += 1 \n    \n    while k < len ( list3 ) : \n        merged_list . append ( list3 [ k ] ) \n        k += 1 \n    \n    return merged_list \n\n"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent ( s , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        s = s [ 1 : ] + s [ 0 ] \n        \n        if int ( s , 2 ) % 2 != 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists ( lists ) : \n    common = set ( lists [ 0 ] ) \n    \n    for lst in lists [ 1 : ] : \n        common &= set ( lst ) \n    \n    return common \n\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer ( s ) : \n    try : \n        int ( s ) \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int ( tup ) : \n    result = 0 \n    \n    for i in tup : \n        result = result * 10 + i \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list ( s ) : \n    return s . split ( ) \n\n"}
{"task_id": "Mbpp/119", "solution": "def search ( arr ) : \n    low = 0 \n    \n    high = len ( arr ) - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if ( mid == 0 or arr [ mid - 1 ] != arr [ mid ] ) and ( mid == len ( arr ) - 1 or arr [ mid + 1 ] != arr [ mid ] ) : \n            return arr [ mid ] \n        elif mid > 0 and arr [ mid - 1 ] == arr [ mid ] : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return - 1 \n\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple ( lst ) : \n    max_product = float ( '-inf' ) \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            product = lst [ i ] [ 0 ] * lst [ j ] [ 1 ] \n            \n            max_product = max ( max_product , abs ( product ) ) \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum ( n ) : \n    def sum_of_divisors ( x ) : \n        result = 1 \n        \n        i = 2 \n        \n        while i * i <= x : \n            if x % i == 0 : \n                if i == ( x // i ) : \n                    result += i \n                else : \n                    result += ( i + x // i ) \n                \n            \n            i += 1 \n        \n        return result \n    \n    amicable_sum = 0 \n    \n    for i in range ( 1 , n ) : \n        j = sum_of_divisors ( i ) \n        \n        if j != i and sum_of_divisors ( j ) == i : \n            amicable_sum += i \n        \n    \n    return amicable_sum \n\n"}
{"task_id": "Mbpp/124", "solution": "def angle_complex ( real , imag ) : \n    import math \n    return math . atan2 ( imag , real ) \n\n"}
{"task_id": "Mbpp/125", "solution": "def find_length ( s ) : \n    count_0 = 0 \n    \n    count_1 = 0 \n    \n    max_diff = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] == '0' : \n            count_0 += 1 \n        else : \n            count_1 += 1 \n        \n        diff = count_0 - count_1 \n        \n        if diff > max_diff : \n            max_diff = diff \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/126", "solution": "def sum ( a , b ) : \n    sum = 0 \n    \n    for i in range ( 1 , min ( a , b ) + 1 ) : \n        if a % i == 0 and b % i == 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int ( a , b ) : \n    return a * b \n\n"}
{"task_id": "Mbpp/128", "solution": "def long_words ( n , words ) : \n    result = [ ] \n    \n    for word in words : \n        if len ( word ) > n : \n            result . append ( word ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test ( matrix ) : \n    n = len ( matrix ) \n    \n    if n == 0 : \n        return False \n    \n    magic_sum = sum ( matrix [ 0 ] ) \n    \n    for i in range ( n ) : \n        if sum ( matrix [ i ] ) != magic_sum : \n            return False \n        \n        if sum ( matrix [ j ] [ i ] for j in range ( n ) ) != magic_sum : \n            return False \n        \n    \n    if sum ( matrix [ i ] [ i ] for i in range ( n ) ) != magic_sum : \n        return False \n    \n    if sum ( matrix [ i ] [ n - i - 1 ] for i in range ( n ) ) != magic_sum : \n        return False \n    \n    return True \n\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences ( lst ) : \n    freq = { } \n    \n    for item in lst : \n        if item in freq : \n            freq [ item ] += 1 \n        else : \n            freq [ item ] = 1 \n            \n        \n    \n    max_freq = max ( freq . values ( ) ) \n    \n    max_items = [ item for item , count in freq . items ( ) if count == max_freq ] \n    \n    return max_items [ 0 ] \n\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels ( s ) : \n    vowels = \"aeiouAEIOU\" \n    \n    s = list ( s ) \n    \n    left , right = 0 , len ( s ) - 1 \n    \n    while left < right : \n        if s [ left ] not in vowels : \n            left += 1 \n        elif s [ right ] not in vowels : \n            right -= 1 \n        else : \n            s [ left ] , s [ right ] = s [ right ] , s [ left ] \n            \n            left += 1 \n            right -= 1 \n        \n    \n    return \"\" . join ( s ) \n\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string ( tup ) : \n    str1 = \"\" \n    \n    for i in tup : \n        str1 += str ( i ) \n    \n    return str1 \n\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum ( list1 ) : \n    sum = 0 \n    \n    for i in list1 : \n        if i < 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num ( n ) : \n    return n * ( 2 * n - 1 ) \n\n"}
{"task_id": "Mbpp/137", "solution": "def zero_count ( arr ) : \n    count = 0 \n    \n    for i in arr : \n        if i == 0 : \n            count += 1 \n        \n    \n    return count / len ( arr ) \n\n"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two ( n ) : \n    while n > 0 : \n        if n % 2 == 1 : \n            return False \n        \n        n = n // 2 \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference ( radius ) : \n    return 2 * 3.14 * radius \n\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly ( list_of_lists ) : \n    flattened_set = set ( ) \n    \n    for sublist in list_of_lists : \n        for item in sublist : \n            flattened_set . add ( item ) \n        \n    \n    return flattened_set \n\n"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort ( arr ) : \n    result = [ ] \n    \n    for i in range ( len ( arr ) ) : \n        max_index = arr . index ( max ( arr [ : len ( arr ) - i ] ) ) \n        \n        arr = arr [ : max_index + 1 ] [ : : - 1 ] + arr [ max_index + 1 : ] \n        \n        arr = arr [ : len ( arr ) - i ] [ : : - 1 ] + arr [ len ( arr ) - i : ] \n        \n        result . append ( max_index + 1 ) \n        result . append ( len ( arr ) - i ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair ( list1 , list2 , list3 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] and list1 [ i ] == list3 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff ( arr ) : \n    max_diff = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            diff = abs ( arr [ i ] - arr [ j ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/160", "solution": "def find_solution ( a , b , n ) : \n    if n % a == 0 : \n        y = n // a \n        \n        return ( a , y ) \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements ( list1 , list2 ) : \n    return [ i for i in list1 if i not in list2 ] \n\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series ( n ) : \n    sum = 0 \n    \n    for i in range ( n ) : \n        if i < n // 2 : \n            sum += n - 2 * i \n        else : \n            sum += n - 2 * ( n - i ) \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] . lower ( ) == chr ( i + 97 ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair ( lst ) : \n    count = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            if ( lst [ i ] ^ lst [ j ] ) % 2 == 0 : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2 ( n ) : \n    power = 1 \n    \n    while power < n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/168", "solution": "def frequency ( lst , num ) : \n    return lst . count ( num ) \n\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list ( lst , start , end ) : \n    return sum ( lst [ start : end + 1 ] ) \n\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon ( side_length ) : \n    return 5 * side_length \n\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance ( string ) : \n    count = 0 \n    \n    for char in string : \n        if char == 'std' : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/222", "solution": "def check_type ( tup ) : \n    data_type = type ( tup [ 0 ] ) \n    \n    for i in tup : \n        if type ( i ) != data_type : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority ( arr , n , x ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        if arr [ i ] == x : \n            count += 1 \n        \n    \n    if count > n // 2 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits ( n ) : \n    count = 0 \n    \n    while n : \n        count += n & 1 \n        n >>= 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string ( s ) : \n    result = \"\" \n    \n    for i in range ( len ( s ) ) : \n        if i % 2 == 0 : \n            result += s [ i ] \n        \n    \n    return result \n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three ( a , b , c ) : \n    return min ( a , b , c ) \n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank ( string , char ) : \n    return string . replace ( \" \" , char ) \n"}
{"task_id": "Mbpp/232", "solution": "def large_nums ( list1 , n ) : \n    sorted_list = sorted ( list1 , reverse = True ) \n    \n    return sorted_list [ : n ] \n\n"}
{"task_id": "Mbpp/233", "solution": "def lateral_surface_area_cylinder ( radius , height ) : \n    lateral_surface_area = 2 * 3.14159 * radius * ( radius + height ) \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube ( side_length ) : \n    return side_length ** 3 \n\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number ( n ) : \n    return n | ( n >> 1 ) \n\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences ( lst ) : \n    result = { } \n    \n    for item in lst : \n        if item in result : \n            result [ item ] += 1 \n        else : \n            result [ item ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        for j in range ( i + 1 , len ( s ) + 1 ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences ( m , n ) : \n    dp = [ 0 ] * ( m + 1 ) \n    \n    dp [ 0 ] = 1 \n    \n    for i in range ( 1 , m + 1 ) : \n        for j in range ( i , m + 1 ) : \n            if i <= j <= 2 * i : \n                dp [ j ] += dp [ i ] \n            \n        \n    \n    return dp [ m ] \n\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list ( lst1 , lst2 ) : \n    lst1 [ - 1 : ] = lst2 \n    \n    return lst1 \n\n"}
{"task_id": "Mbpp/242", "solution": "def count_charac ( s ) : \n    return len ( s ) \n"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square ( n ) : \n    i = n + 1 \n    \n    while i ** 0.5 != int ( i ** 0.5 ) : \n        i += 1 \n    \n    return i ** 2 \n"}
{"task_id": "Mbpp/245", "solution": "def max_sum ( arr ) : \n    n = len ( arr ) \n    \n    inc = [ 0 ] * n \n    \n    dec = [ 0 ] * n \n    \n    inc [ 0 ] = arr [ 0 ] \n    \n    dec [ n - 1 ] = arr [ n - 1 ] \n    \n    for i in range ( 1 , n ) : \n        inc [ i ] = max ( arr [ i ] , inc [ i - 1 ] + arr [ i ] ) \n        \n    \n    for i in range ( n - 2 , - 1 , - 1 ) : \n        dec [ i ] = max ( arr [ i ] , dec [ i + 1 ] + arr [ i ] ) \n        \n    \n    max_sum = 0 \n    \n    for i in range ( 1 , n - 1 ) : \n        max_sum = max ( max_sum , inc [ i - 1 ] + dec [ i + 1 ] ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/247", "solution": "def lps ( s ) : \n    n = len ( s ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    for i in range ( n - 1 , - 1 , - 1 ) : \n        dp [ i ] [ i ] = 1 \n        \n        for j in range ( i + 1 , n ) : \n            if s [ i ] == s [ j ] : \n                dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 \n                \n            else : \n                dp [ i ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ j - 1 ] ) \n                \n            \n        \n    \n    return dp [ 0 ] [ n - 1 ] \n\n"}
{"task_id": "Mbpp/250", "solution": "def count_X ( tup , element ) : \n    return tup . count ( element ) \n"}
{"task_id": "Mbpp/251", "solution": "def insert_element ( lst , element ) : \n    result = [ ] \n    \n    for i in lst : \n        result . append ( element ) \n        result . append ( i ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/252", "solution": "def convert ( num ) : \n    r = abs ( num ) \n    \n    theta = math . atan ( complex ( 0 , 1 ) ) \n    \n    return ( r , theta ) \n\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer ( lst ) : \n    return sum ( isinstance ( i , int ) for i in lst ) \n\n"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors ( colors , n ) : \n    result = [ ] \n    \n    for i in range ( len ( colors ) ) : \n        for j in range ( i + 1 , len ( colors ) ) : \n            for k in range ( j + 1 , len ( colors ) ) : \n                result . append ( ( colors [ i ] , colors [ j ] , colors [ k ] ) ) \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums ( n ) : \n    primes = [ True for i in range ( n + 1 ) ] \n    \n    p = 2 \n    \n    while ( p * p <= n ) : \n        if ( primes [ p ] == True ) : \n            for i in range ( p * p , n + 1 , p ) : \n                primes [ i ] = False \n                \n            \n        \n        p += 1 \n    \n    count = 0 \n    \n    for p in range ( 2 , n ) : \n        if primes [ p ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers ( num1 , num2 ) : \n    return ( num2 , num1 ) \n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements ( tup1 , tup2 ) : \n    res1 = sorted ( tup1 , key = lambda x : x [ 1 ] ) \n    \n    res2 = sorted ( tup2 , key = lambda x : x [ 1 ] ) \n    \n    return ( res1 [ 0 ] , res2 [ 0 ] ) \n\n"}
{"task_id": "Mbpp/260", "solution": "def is_prime ( n ) : \n    if n <= 1 : \n        return False \n    \n    if n <= 3 : \n        return True \n    \n    if n % 2 == 0 or n % 3 == 0 : \n        return False \n    \n    i = 5 \n    \n    while i * i <= n : \n        if n % i == 0 or n % ( i + 2 ) == 0 : \n            return False \n        \n        i += 6 \n    \n    return True \n"}
{"task_id": "Mbpp/261", "solution": "def division_elements ( tuple1 , tuple2 ) : \n    return tuple ( a / b for a , b in zip ( tuple1 , tuple2 ) ) \n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts ( lst , L ) : \n    part1 = lst [ : L ] \n    \n    part2 = lst [ L : ] \n    \n    return ( part1 , part2 ) \n\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age ( age ) : \n    dog_years = age * 7 \n    \n    return dog_years \n"}
{"task_id": "Mbpp/265", "solution": "def list_split ( lst , n ) : \n    return [ lst [ i : i + n ] for i in range ( 0 , len ( lst ) , n ) ] \n\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_area ( side_length ) : \n    return 6 * ( side_length ** 2 ) \n\n"}
{"task_id": "Mbpp/267", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num ( n ) : \n    star_num = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        star_num += i * ( 2 * i - 1 ) * ( 2 * i - 2 ) \n    \n    return star_num \n\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value ( char ) : \n    return ord ( char ) \n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index ( lst ) : \n    sum = 0 \n    \n    for i in range ( len ( lst ) ) : \n        if i % 2 == 0 and lst [ i ] % 2 == 0 : \n            sum += lst [ i ] \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += ( 2 * i ) ** 5 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract ( test_list ) : \n    result = [ ] \n    \n    for tup in test_list : \n        result . append ( tup [ 2 ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/273", "solution": "def substract_elements ( tuple1 , tuple2 ) : \n    result = tuple ( a - b for a , b in zip ( tuple1 , tuple2 ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 0 , n + 1 , 2 ) : \n        sum += binomial_Coeff ( n , i ) \n    \n    return sum \n"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder ( radius , height ) : \n    return math . pi * radius * radius * height \n\n"}
{"task_id": "Mbpp/277", "solution": "def dict_filter ( dictionary , n ) : \n    return { key : value for key , value in dictionary . items ( ) if value >= n } \n\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements ( tup ) : \n    count = 0 \n    \n    for i in tup : \n        if type ( i ) == tuple : \n            break \n        \n        count += 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal ( n ) : \n    return 3 * n * n - n \n\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search ( array , element ) : \n    for i in range ( len ( array ) ) : \n        if array [ i ] == element : \n            return ( True , i ) \n        \n    \n    return ( False , - 1 ) \n\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique ( lst ) : \n    unique_elements = set ( ) \n    \n    for element in lst : \n        if element in unique_elements : \n            return False \n        \n        unique_elements . add ( element ) \n    \n    return True \n\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list ( list1 , list2 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] - list2 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/283", "solution": "def validate ( n ) : \n    str_n = str ( n ) \n    \n    freq = { } \n    \n    for i in str_n : \n        if i in freq : \n            freq [ i ] += 1 \n        else : \n            freq [ i ] = 1 \n            \n        \n    \n    for key , value in freq . items ( ) : \n        if value > int ( key ) : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/284", "solution": "def check_element ( lst , element ) : \n    return len ( set ( lst ) ) == 1 \n\n"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three ( text ) : \n    if \"ab\" in text : \n        if \"a\" in text and ( \"b\" in text and text . count ( \"b\" ) in [ 2 , 3 ] ) : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated ( nums , k , n ) : \n    MOD = 10 ** 9 + 7 \n    \n    max_sum = float ( '-inf' ) \n    \n    for i in range ( len ( nums ) ) : \n        current_sum = nums [ i ] \n        \n        for j in range ( i + 1 , len ( nums ) ) : \n            current_sum += nums [ j ] \n            max_sum = max ( max_sum , current_sum ) \n            \n        \n    \n    return ( max_sum + ( k - 1 ) * sum ( nums ) ) % MOD \n\n"}
{"task_id": "Mbpp/287", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += ( 2 * i ) ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/290", "solution": "def max_length ( list_of_lists ) : \n    max_length = 0 \n    \n    max_list = [ ] \n    \n    for lst in list_of_lists : \n        if len ( lst ) > max_length : \n            max_length = len ( lst ) \n            \n            max_list = lst \n            \n        \n    \n    return ( max_length , max_list ) \n\n"}
{"task_id": "Mbpp/292", "solution": "def find ( a , b ) : \n    return a // b \n\n"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle ( a , b ) : \n    c = ( a ** 2 + b ** 2 ) ** 0.5 \n    \n    return c \n\n"}
{"task_id": "Mbpp/294", "solution": "def max_val ( lst ) : \n    max_val = lst [ 0 ] \n    \n    for i in lst : \n        if type ( i ) == int : \n            if i > max_val : \n                max_val = i \n                \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count ( arr ) : \n    count = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if arr [ i ] > arr [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list ( lst ) : \n    flat_list = [ ] \n    \n    for item in lst : \n        if isinstance ( item , list ) : \n            flat_list . extend ( flatten_list ( item ) ) \n        else : \n            flat_list . append ( item ) \n        \n    \n    return flat_list \n\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate ( lst ) : \n    max_tuple = max ( lst , key = lambda x : x [ 1 ] ) \n    \n    return max_tuple \n"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq ( n ) : \n    if n == 0 : \n        return 1 \n    \n    if n == 1 : \n        return 2 \n    \n    count = 0 \n    \n    for i in range ( 2 ** n ) : \n        binary = bin ( i ) [ 2 : ] \n        \n        if sum ( [ int ( bit ) for bit in binary ] ) == sum ( [ int ( bit ) for bit in binary [ : : - 1 ] ] ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth ( d , depth = 1 ) : \n    if isinstance ( d , dict ) : \n        return max ( [ dict_depth ( v , depth + 1 ) for v in d . values ( ) ] ) \n    else : \n        return depth \n    \n\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp ( word_list ) : \n    p_words = [ word for word in word_list if word . startswith ( 'p' ) ] \n    \n    return ( p_words [ 0 ] , p_words [ 1 ] ) \n\n"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq ( arr , k , i , n ) : \n    dp = [ 0 ] * ( n + 1 ) \n    \n    dp [ 0 ] = 0 \n    \n    dp [ 1 ] = arr [ 0 ] \n    \n    for j in range ( 2 , n + 1 ) : \n        dp [ j ] = max ( dp [ j - 1 ] , arr [ j - 1 ] + dp [ j - k ] ) \n        \n    \n    return dp [ n ] \n\n"}
{"task_id": "Mbpp/308", "solution": "def large_product ( list1 , list2 , num ) : \n    product_list = [ i * j for i in list1 for j in list2 ] \n    \n    product_list . sort ( reverse = True ) \n    return product_list [ : num ] \n\n"}
{"task_id": "Mbpp/309", "solution": "def maximum ( a , b ) : \n    if a > b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple ( s ) : \n    return tuple ( s ) \n\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit ( n ) : \n    return n & ~ ( n - 1 ) \n\n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone ( radius , height ) : \n    pi = 3.14159 \n    \n    volume = ( 1 / 3 ) * pi * radius ** 2 * height \n    \n    return volume \n\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2 ( n ) : \n    power = 1 \n    \n    while power * 2 <= n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas ( n ) : \n    if n == 0 : \n        return 2 \n    elif n == 1 : \n        return 1 \n    else : \n        return find_lucas ( n - 1 ) + find_lucas ( n - 2 ) \n    \n\n"}
{"task_id": "Mbpp/390", "solution": "def add_string ( lst , format_string ) : \n    return [ format_string . format ( i ) for i in lst ] \n\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary ( list1 , list2 , list3 ) : \n    dictionary = { } \n    \n    for i in range ( len ( list1 ) ) : \n        dictionary [ list1 [ i ] ] = { list2 [ i ] : list3 [ i ] } \n        \n    \n    return dictionary \n\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum ( n ) : \n    memo = { } \n    \n    def helper ( n ) : \n        if n in memo : \n            return memo [ n ] \n        \n        if n <= 0 : \n            return 0 \n        \n        res = max ( helper ( n // 2 ) + helper ( n // 3 ) + helper ( n // 4 ) + helper ( n // 5 ) , n ) \n        \n        memo [ n ] = res \n        \n        return res \n    \n    return helper ( n ) \n\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct ( tup ) : \n    seen = set ( ) \n    \n    for item in tup : \n        if item in seen : \n            return False \n        \n        seen . add ( item ) \n    \n    return True \n\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character ( s ) : \n    char_count = { } \n    \n    for char in s : \n        if char in char_count : \n            char_count [ char ] += 1 \n        else : \n            char_count [ char ] = 1 \n            \n        \n    \n    for char in s : \n        if char_count [ char ] == 1 : \n            return char \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers ( a , b , c ) : \n    numbers = [ a , b , c ] \n    \n    numbers . sort ( ) \n    return numbers [ 1 ] \n\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits ( lst ) : \n    result = [ ] \n    \n    for num in lst : \n        str_num = str ( num ) \n        \n        sum_digits = 0 \n        \n        for digit in str_num : \n            sum_digits += int ( digit ) \n        \n        result . append ( sum_digits ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/404", "solution": "def minimum ( a , b ) : \n    return a if a < b else b \n\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex ( tuplex , element ) : \n    return element in tuplex \n\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity ( n ) : \n    return n % 2 != 0 \n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple ( lst ) : \n    return min ( a * b for a , b in lst ) \n\n"}
{"task_id": "Mbpp/410", "solution": "def min_val ( lst ) : \n    min_val = lst [ 0 ] \n    \n    for i in lst : \n        if type ( i ) == int : \n            if i < min_val : \n                min_val = i \n                \n            \n        \n    \n    return min_val \n\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd ( lst ) : \n    return [ i for i in lst if i % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element ( lst , n ) : \n    return [ sublst [ n ] for sublst in lst ] \n\n"}
{"task_id": "Mbpp/414", "solution": "def overlapping ( seq1 , seq2 ) : \n    for i in seq1 : \n        if i in seq2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product ( arr ) : \n    arr . sort ( ) \n    return ( arr [ - 2 ] , arr [ - 1 ] ) \n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max ( lst ) : \n    max_len = max ( len ( sublist ) for sublist in lst ) \n    \n    return lst [ lst . index ( max_len ) ] \n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum ( lst ) : \n    total_sum = sum ( lst ) \n    \n    rounded_sum = round ( total_sum ) \n    \n    return rounded_sum * len ( lst ) \n\n"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += ( 2 * i ) ** 3 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple ( tup ) : \n    res = '' \n    \n    for i in tup : \n        res += i \n    \n    return res \n\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i ** 3 \n    \n    return sum / n \n\n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear ( test_tup ) : \n    result = [ ] \n    \n    for tup in test_tup : \n        result . append ( tup [ - 1 ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list ( lst , element ) : \n    return sum ( 1 for sublist in lst if element in sublist ) \n\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers ( numbers ) : \n    return [ num for num in numbers if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format ( date ) : \n    date_list = date . split ( '-' ) \n    \n    new_date = date_list [ 1 ] + '-' + date_list [ 0 ] + '-' + date_list [ 2 ] \n    \n    return new_date \n\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort ( arr ) : \n    n = len ( arr ) \n    \n    gap = n // 2 \n    \n    while gap > 0 : \n        for i in range ( gap , n ) : \n            temp = arr [ i ] \n            \n            j = i \n            \n            while j >= gap and arr [ j - gap ] > temp : \n                arr [ j ] = arr [ j - gap ] \n                \n                j -= gap \n            \n            arr [ j ] = temp \n            \n        \n        gap //= 2 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/429", "solution": "def tuples ( tup1 , tup2 ) : \n    return ( sum ( a * b for a , b in zip ( tup1 , tup2 ) ) , tuple ( a + b for a , b in zip ( tup1 , tup2 ) ) , tuple ( a - b for a , b in zip ( tup1 , tup2 ) ) , tuple ( a // b for a , b in zip ( tup1 , tup2 ) ) ) \n\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix ( a , b , c ) : \n    D = b ** 2 - 4 * a * c \n    \n    if D < 0 : \n        return None \n    else : \n        x1 = ( - b + D ** 0.5 ) / ( 2 * a ) \n        \n        x2 = ( - b - D ** 0.5 ) / ( 2 * a ) \n        \n        return x1 , x2 \n    \n\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium ( a , b , c ) : \n    s = ( a + b + c ) / 2 \n    \n    return s \n\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater ( arr , num ) : \n    for i in arr : \n        if i > num : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/435", "solution": "def last_Digit ( num ) : \n    return num % 10 \n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos ( list1 ) : \n    neg_list = [ ] \n    \n    for i in list1 : \n        if i < 0 : \n            neg_list . append ( i ) \n        \n    \n    return neg_list \n\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd ( s ) : \n    result = \"\" \n    \n    for i in range ( len ( s ) ) : \n        if i % 2 == 0 : \n            result += s [ i ] \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single ( lst ) : \n    result = 0 \n    \n    for num in lst : \n        result = result * 10 + num \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position ( sentence ) : \n    adverbs = [ \"clearly\" , \"seriously\" , \"unfortunately\" ] \n    \n    adverb_positions = [ ] \n    \n    for i in range ( len ( sentence ) ) : \n        if sentence [ i : i + len ( adverbs [ 0 ] ) ] == adverbs [ 0 ] : \n            adverb_positions . append ( ( i , i + len ( adverbs [ 0 ] ) , 'clearly' ) ) \n        \n        if sentence [ i : i + len ( adverbs [ 1 ] ) ] == adverbs [ 1 ] : \n            adverb_positions . append ( ( i , i + len ( adverbs [ 1 ] ) , 'seriously' ) ) \n        \n        if sentence [ i : i + len ( adverbs [ 2 ] ) ] == adverbs [ 2 ] : \n            adverb_positions . append ( ( i , i + len ( adverbs [ 2 ] ) , 'unfortunately' ) ) \n        \n    \n    return adverb_positions \n\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube ( size ) : \n    return 6 * ( size ** 2 ) \n\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication ( test_tup1 , test_tup2 ) : \n    res = tuple ( tuple ( a * b for a , b in zip ( tup1 , tup2 ) ) for tup1 , tup2 in zip ( test_tup1 , test_tup2 ) ) \n    \n    return ( res ) \n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence ( tup , lst ) : \n    count = 0 \n    \n    for i in lst : \n        count += tup . count ( i ) \n    \n    return count \n\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums ( nums ) : \n    result = [ ] \n    \n    for num in nums : \n        result . append ( num ** 3 ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/448", "solution": "def cal_sum ( n ) : \n    perrin = [ 3 , 0 , 2 ] \n    \n    if n < 3 : \n        return perrin [ n ] \n    else : \n        for i in range ( 3 , n + 1 ) : \n            perrin . append ( perrin [ i - 1 ] + perrin [ i - 2 ] + perrin [ i - 3 ] ) \n        \n        return perrin [ n ] \n    \n\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string ( string_list , size ) : \n    return [ string [ : size ] for string in string_list ] \n\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces ( s ) : \n    return s . replace ( \" \" , \"\" ) \n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz ( text ) : \n    pattern = r'^[a-zA-Z]*z\\.[a-zA-Z]*$' \n    \n    if re . match ( pattern , text ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number ( month ) : \n    if month == 5 : \n        return True \n    elif month == 2 : \n        return False \n    elif month == 6 : \n        return False \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list ( lst ) : \n    return [ s [ : : - 1 ] for s in lst ] \n\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min ( lst ) : \n    min_len = min ( len ( sublist ) for sublist in lst ) \n    \n    return [ sublist for sublist in lst if len ( sublist ) == min_len ] \n\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area ( length , width ) : \n    return length * width \n\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase ( s ) : \n    result = '' \n    \n    for char in s : \n        if char . islower ( ) : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/460", "solution": "def Extract ( list1 ) : \n    return [ i [ 0 ] for i in list1 ] \n\n"}
{"task_id": "Mbpp/462", "solution": "def combinations_list ( lst ) : \n    if len ( lst ) == 0 : \n        return [ [ ] ] \n    \n    result = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        rest = lst [ i + 1 : ] \n        \n        sub_combinations = combinations_list ( rest ) \n        \n        for combination in sub_combinations : \n            result . append ( [ lst [ i ] ] + combination ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product ( nums ) : \n    max_product = nums [ 0 ] \n    \n    min_product = nums [ 0 ] \n    \n    result = nums [ 0 ] \n    \n    for i in range ( 1 , len ( nums ) ) : \n        if nums [ i ] < 0 : \n            max_product , min_product = min_product , max_product \n            \n        \n        max_product = max ( nums [ i ] , max_product * nums [ i ] ) \n        \n        min_product = min ( nums [ i ] , min_product * nums [ i ] ) \n        \n        result = max ( result , max_product ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty ( d ) : \n    return { k : v for k , v in d . items ( ) if v } \n\n"}
{"task_id": "Mbpp/468", "solution": "def max_product ( arr ) : \n    n = len ( arr ) \n    \n    max_product = [ 0 ] * n \n    \n    max_product [ 0 ] = arr [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        max_product [ i ] = arr [ i ] \n        \n        for j in range ( i ) : \n            if arr [ j ] < arr [ i ] and max_product [ i ] < max_product [ j ] * arr [ i ] : \n                max_product [ i ] = max_product [ j ] * arr [ i ] \n                \n            \n        \n    \n    return max ( max_product ) \n\n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise ( tup ) : \n    result = tuple ( tup [ i ] + tup [ i + 1 ] for i in range ( len ( tup ) - 1 ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder ( arr , n ) : \n    product = 1 \n    \n    for i in arr : \n        product = ( product * i ) % n \n        \n    \n    return product \n\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive ( lst ) : \n    return all ( lst [ i ] + 1 == lst [ i + 1 ] for i in range ( len ( lst ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection ( test_list1 , test_list2 ) : \n    res = set ( ) \n    \n    for i in test_list1 : \n        for j in test_list2 : \n            if i == j : \n                res . add ( i ) \n            \n        \n    \n    return res \n\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char ( string , char1 , char2 ) : \n    new_string = \"\" \n    \n    for i in string : \n        if i == char1 : \n            new_string += char2 \n        else : \n            new_string += i \n        \n    \n    return new_string \n\n"}
{"task_id": "Mbpp/475", "solution": "def sort_counter ( d ) : \n    return sorted ( d . items ( ) , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum ( arr ) : \n    return max ( arr ) + min ( arr ) \n\n"}
{"task_id": "Mbpp/477", "solution": "def is_lower ( s ) : \n    return s . islower ( ) \n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase ( s ) : \n    result = \"\" \n    \n    for char in s : \n        if char . isupper ( ) : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/479", "solution": "def first_Digit ( n ) : \n    return int ( str ( n ) [ 0 ] ) \n\n"}
{"task_id": "Mbpp/554", "solution": "def Split ( list1 ) : \n    odd_list = [ ] \n    \n    for i in list1 : \n        if i % 2 != 0 : \n            odd_list . append ( i ) \n        \n    \n    return odd_list \n\n"}
{"task_id": "Mbpp/555", "solution": "def difference ( n ) : \n    sum_of_cubes = sum ( [ i ** 3 for i in range ( 1 , n + 1 ) ] ) \n    \n    sum_of_numbers = sum ( range ( 1 , n + 1 ) ) \n    \n    return sum_of_cubes - sum_of_numbers + 1 \n\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair ( arr ) : \n    odd_count = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if ( arr [ i ] ^ arr [ j ] ) % 2 != 0 : \n                odd_count += 1 \n            \n        \n    \n    return odd_count \n\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string ( s ) : \n    return s . swapcase ( ) \n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums ( num1 , num2 ) : \n    str1 = str ( num1 ) \n    \n    str2 = str ( num2 ) \n    \n    sum_diff = 0 \n    \n    for i in range ( len ( str1 ) ) : \n        for j in range ( len ( str2 ) ) : \n            diff = abs ( int ( str1 [ i ] ) - int ( str2 [ j ] ) ) \n            \n            sum_diff += diff \n        \n    \n    return sum_diff \n\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum ( arr , k ) : \n    max_sum = float ( '-inf' ) \n    \n    window_sum = 0 \n    \n    window_start = 0 \n    \n    for window_end in range ( len ( arr ) ) : \n        window_sum += arr [ window_end ] \n        if window_end >= k - 1 : \n            max_sum = max ( max_sum , window_sum ) \n            \n            window_sum -= arr [ window_start ] \n            window_start += 1 \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements ( tup1 , tup2 ) : \n    union_set = set ( tup1 + tup2 ) \n    \n    return sorted ( list ( union_set ) ) \n\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length ( lst ) : \n    max_length = 0 \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n        \n    \n    return max_length \n"}
{"task_id": "Mbpp/563", "solution": "def extract_values ( s ) : \n    values = [ ] \n    \n    value = '' \n    \n    for char in s : \n        if char == '\"' : \n            if value : \n                values . append ( value ) \n                value = '' \n                \n            \n        else : \n            value += char \n        \n    \n    if value : \n        values . append ( value ) \n    \n    return values \n\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs ( arr , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if arr [ i ] != arr [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/565", "solution": "def split ( string ) : \n    return list ( string ) \n\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits ( n ) : \n    sum = 0 \n    \n    while n > 0 : \n        sum += n % 10 \n        n = n // 10 \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/567", "solution": "def issort_list ( lst ) : \n    return all ( lst [ i ] <= lst [ i + 1 ] for i in range ( len ( lst ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list ( n ) : \n    return [ { } for _ in range ( n ) ] \n\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums ( nums ) : \n    unique_nums = [ ] \n    \n    for num in nums : \n        if num not in unique_nums : \n            unique_nums . append ( num ) \n        \n    \n    return unique_nums \n\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product ( lst ) : \n    unique_nums = set ( lst ) \n    \n    product = 1 \n    \n    for num in unique_nums : \n        product *= num \n    \n    return product \n\n"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array ( arr1 , arr2 ) : \n    len1 = len ( arr1 ) \n    \n    len2 = len ( arr2 ) \n    \n    if len1 < len2 : \n        return False \n    \n    for i in range ( len1 - len2 + 1 ) : \n        if arr1 [ i : i + len2 ] == arr2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial ( n ) : \n    if n < 10 : \n        return 1 \n    else : \n        return n % 10 \n    \n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists ( list1 , list2 , list3 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] ) \n        result . append ( list2 [ i ] ) \n        result . append ( list3 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar ( tuple1 , tuple2 ) : \n    diff_tuple = tuple ( set ( tuple1 ) ^ set ( tuple2 ) ) \n    \n    return diff_tuple \n\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even ( t ) : \n    res = [ ] \n    \n    for i in t : \n        if isinstance ( i , tuple ) : \n            res . append ( extract_even ( i ) ) \n        elif isinstance ( i , int ) and i % 2 == 0 : \n            res . append ( i ) \n        \n    \n    return tuple ( res ) \n\n"}
{"task_id": "Mbpp/581", "solution": "def surface_Area ( base , height ) : \n    return 2 * base * height + 2 * base * base \n\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number ( n ) : \n    if n <= 1 : \n        return 1 \n    \n    catalan = [ 0 for i in range ( n + 1 ) ] \n    \n    catalan [ 0 ] = 1 \n    \n    catalan [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        catalan [ i ] = 0 \n        \n        for j in range ( i ) : \n            catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] \n            \n        \n    \n    return catalan [ n ] \n\n"}
{"task_id": "Mbpp/585", "solution": "def expensive_items ( dataset , n ) : \n    sorted_dataset = sorted ( dataset , key = lambda x : x [ 'price' ] , reverse = True ) \n    \n    return sorted_dataset [ : n ] \n\n"}
{"task_id": "Mbpp/586", "solution": "def split_Arr ( arr , n ) : \n    return arr [ : n ] + arr [ n + 1 : ] \n\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple ( lst ) : \n    return tuple ( lst ) \n\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff ( nums ) : \n    return max ( nums ) - min ( nums ) \n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares ( start , end ) : \n    squares = [ ] \n    \n    root = int ( start ** 0.5 ) \n    \n    while root ** 2 <= end : \n        squares . append ( root ** 2 ) \n        root += 1 \n    \n    return squares \n\n"}
{"task_id": "Mbpp/590", "solution": "def polar_rect ( r , theta ) : \n    x = r * cos ( theta ) \n    \n    y = r * sin ( theta ) \n    \n    return ( x , y ) \n\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List ( lst ) : \n    lst [ 0 ] , lst [ - 1 ] = lst [ - 1 ] , lst [ 0 ] \n    \n    return lst \n"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        binomial_coefficient = math . factorial ( 2 * n ) // ( math . factorial ( n + 1 ) * math . factorial ( n ) ) \n        \n        sum += binomial_coefficient * ( ( - 1 ) ** ( i % 2 ) ) \n    \n    return sum \n\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip ( ip ) : \n    ip = ip . lstrip ( '0' ) \n    \n    return ip \n\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd ( lst ) : \n    even_count = 0 \n    \n    odd_count = 0 \n    \n    for num in lst : \n        if num % 2 == 0 : \n            even_count += 1 \n        else : \n            odd_count += 1 \n        \n    \n    return even_count - odd_count \n\n"}
{"task_id": "Mbpp/596", "solution": "def tuple_size ( t ) : \n    return sys . getsizeof ( t ) \n\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth ( arr1 , arr2 , k ) : \n    len1 = len ( arr1 ) \n    \n    len2 = len ( arr2 ) \n    \n    i = 0 \n    \n    j = 0 \n    \n    count = 0 \n    \n    while i < len1 and j < len2 : \n        if arr1 [ i ] < arr2 [ j ] : \n            if count == k - 1 : \n                return arr1 [ i ] \n            \n            i += 1 \n        else : \n            if count == k - 1 : \n                return arr2 [ j ] \n            \n            j += 1 \n        \n        count += 1 \n    \n    while i < len1 : \n        if count == k - 1 : \n            return arr1 [ i ] \n        \n        i += 1 \n        count += 1 \n    \n    while j < len2 : \n        if count == k - 1 : \n            return arr2 [ j ] \n        \n        j += 1 \n        count += 1 \n    \n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number ( num ) : \n    temp = num \n    \n    sum = 0 \n    \n    order = len ( str ( num ) ) \n    \n    while temp > 0 : \n        digit = temp % 10 \n        \n        sum += digit ** order \n        temp //= 10 \n    \n    if num == sum : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average ( n ) : \n    sum = 0 \n    \n    average = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i \n    \n    average = sum / n \n    \n    return ( sum , average ) \n\n"}
{"task_id": "Mbpp/600", "solution": "def is_Even ( n ) : \n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char ( s ) : \n    seen = set ( ) \n    \n    for char in s : \n        if char in seen : \n            return char \n        \n        seen . add ( char ) \n    \n    return None \n\n"}
{"task_id": "Mbpp/603", "solution": "def get_ludic ( n ) : \n    l = [ ] \n    \n    for i in range ( 1 , n + 1 ) : \n        temp = i \n        \n        sum = 0 \n        \n        while temp > 0 : \n            sum += ( temp % 10 ) ** 2 \n            temp //= 10 \n        \n        if sum == 1 : \n            l . append ( i ) \n        \n    \n    return l \n\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words ( s ) : \n    words = s . split ( ) \n    \n    reversed_words = words [ : : - 1 ] \n    \n    reversed_string = ' ' . join ( reversed_words ) \n    \n    return reversed_string \n\n"}
{"task_id": "Mbpp/605", "solution": "def prime_num ( n ) : \n    if n < 2 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/606", "solution": "def radian_degree ( degree ) : \n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286 \n    \n    return ( degree * pi ) / 180 \n\n"}
{"task_id": "Mbpp/607", "solution": "def find_literals ( string , pattern ) : \n    match = re . search ( pattern , string ) \n    \n    if match : \n        return ( match . group ( ) , match . start ( ) , match . end ( ) ) \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/608", "solution": "def bell_Number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element ( lst , k ) : \n    return lst [ : k ] + lst [ k + 1 : ] \n\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth ( matrix , n ) : \n    max_val = matrix [ 0 ] [ n ] \n    \n    for row in matrix : \n        if row [ n ] > max_val : \n            max_val = row [ n ] \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/612", "solution": "def merge ( lst ) : \n    first = [ sub [ 0 ] for sub in lst ] \n    \n    second = [ sub [ 1 ] for sub in lst ] \n    \n    return [ first , second ] \n"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum ( test_list ) : \n    total = 0 \n    \n    for tup in test_list : \n        for num in tup : \n            total += num \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/615", "solution": "def average_tuple ( tup ) : \n    result = [ ] \n    \n    for tup in tup : \n        avg = sum ( tup ) / len ( tup ) \n        \n        result . append ( avg ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo ( test_tup1 , test_tup2 ) : \n    res = tuple ( ele1 % ele2 for ele1 , ele2 in zip ( test_tup1 , test_tup2 ) ) \n    \n    return res \n"}
{"task_id": "Mbpp/618", "solution": "def div_list ( list1 , list2 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        try : \n            result . append ( list1 [ i ] / list2 [ i ] ) \n        except ZeroDivisionError : \n            result . append ( 0 ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/619", "solution": "def move_num ( s ) : \n    num = '0123456789' \n    \n    num_list = [ ] \n    \n    str_list = [ ] \n    \n    for i in s : \n        if i in num : \n            num_list . append ( i ) \n        else : \n            str_list . append ( i ) \n        \n    \n    return '' . join ( str_list ) + '' . join ( num_list ) \n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset ( nums ) : \n    nums . sort ( ) \n    dp = [ 1 ] * len ( nums ) \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i ) : \n            if nums [ i ] % nums [ j ] == 0 and dp [ i ] < dp [ j ] + 1 : \n                dp [ i ] = dp [ j ] + 1 \n                \n            \n        \n    \n    return max ( dp ) \n\n"}
{"task_id": "Mbpp/622", "solution": "def get_median ( list1 , list2 , size ) : \n    merged_list = [ ] \n    \n    i = 0 \n    \n    j = 0 \n    \n    while i < size and j < size : \n        if list1 [ i ] < list2 [ j ] : \n            merged_list . append ( list1 [ i ] ) \n            i += 1 \n        else : \n            merged_list . append ( list2 [ j ] ) \n            j += 1 \n        \n    \n    while i < size : \n        merged_list . append ( list1 [ i ] ) \n        i += 1 \n    \n    while j < size : \n        merged_list . append ( list2 [ j ] ) \n        j += 1 \n    \n    mid = size // 2 \n    \n    if size % 2 == 0 : \n        return ( merged_list [ mid - 1 ] + merged_list [ mid ] ) / 2 \n    else : \n        return merged_list [ mid ] \n    \n\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums ( nums , n ) : \n    return [ num ** n for num in nums ] \n\n"}
{"task_id": "Mbpp/624", "solution": "def is_upper ( s ) : \n    return s . isupper ( ) \n"}
{"task_id": "Mbpp/626", "solution": "def triangle_area ( side ) : \n    if side < 0 or side > 1000000 : \n        return None \n    else : \n        return ( side ** 2 * ( 1 / 2 ) ** 2 ) / 2 \n    \n\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces ( string ) : \n    return string . replace ( \" \" , \"%20\" ) \n"}
{"task_id": "Mbpp/629", "solution": "def Split ( list1 ) : \n    list2 = [ ] \n    \n    for i in list1 : \n        if i % 2 == 0 : \n            list2 . append ( i ) \n        \n    \n    return list2 \n\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates ( coord ) : \n    coordinates = [ ] \n    \n    for i in range ( coord [ 0 ] - 1 , coord [ 0 ] + 2 ) : \n        for j in range ( coord [ 1 ] - 1 , coord [ 1 ] + 2 ) : \n            if 0 <= i < 8 and 0 <= j < 8 : \n                coordinates . append ( [ i , j ] ) \n            \n        \n    \n    return coordinates \n\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces ( s ) : \n    return s . replace ( ' ' , '_' ) . replace ( '_' , ' ' ) \n"}
{"task_id": "Mbpp/632", "solution": "def move_zero ( nums ) : \n    zero = 0 \n    \n    for i in range ( len ( nums ) ) : \n        if nums [ i ] != 0 : \n            nums [ i ] , nums [ zero ] = nums [ zero ] , nums [ i ] \n            \n            zero += 1 \n        \n    \n    return nums \n\n"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum ( arr , n ) : \n    sum = 0 \n    \n    for i in range ( 0 , len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            sum += arr [ i ] ^ arr [ j ] \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/635", "solution": "def heapify ( arr , n , i ) : \n    largest = i \n    \n    l = 2 * i + 1 \n    \n    r = 2 * i + 2 \n    \n    if l < n and arr [ i ] < arr [ l ] : \n        largest = l \n        \n    \n    if r < n and arr [ largest ] < arr [ r ] : \n        largest = r \n        \n    \n    if largest != i : \n        arr [ i ] , arr [ largest ] = arr [ largest ] , arr [ i ] \n        \n        heapify ( arr , n , largest ) \n    \n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss ( profit , loss ) : \n    if profit == 0 and loss == 0 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/638", "solution": "def wind_chill ( wind , temp ) : \n    windchill = 35.74 + ( 0.6215 * temp ) - ( 35.75 * ( wind ** 0.16 ) ) + ( 0.4275 * temp * ( wind ** 0.16 ) ) \n    \n    return round ( windchill ) \n\n"}
{"task_id": "Mbpp/639", "solution": "def sample_nam ( names ) : \n    count = 0 \n    \n    for name in names : \n        if name [ 0 ] . isupper ( ) : \n            count += len ( name ) \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal ( n ) : \n    return 3 * n * n - 3 * n + 1 \n\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle ( text ) : \n    if len ( text ) > 1 and text [ 0 ] == 'z' : \n        if len ( text ) > 2 and text [ - 1 ] == 'z' : \n            return True \n        else : \n            return False \n        \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K ( arr , k ) : \n    left = 0 \n    \n    right = k - 1 \n    \n    while left < right : \n        arr [ left ] , arr [ right ] = arr [ right ] , arr [ left ] \n        \n        left += 1 \n        right -= 1 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple ( tup , dict ) : \n    tup = tup + ( dict , ) \n    \n    return tup \n\n"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath ( matrix ) : \n    N = len ( matrix ) \n    \n    dp = [ [ 0 for _ in range ( N ) ] for _ in range ( N ) ] \n    \n    dp [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] \n    \n    for i in range ( 1 , N ) : \n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] \n        \n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + matrix [ 0 ] [ i ] \n        \n    \n    for i in range ( 1 , N ) : \n        for j in range ( 1 , N ) : \n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + matrix [ i ] [ j ] \n            \n        \n    \n    return dp [ N - 1 ] [ N - 1 ] / ( N * N ) \n\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data ( data , min_height , min_weight ) : \n    filtered_data = { } \n    \n    for student , height , weight in data . values ( ) : \n        if height > min_height and weight > min_weight : \n            filtered_data [ student ] = ( height , weight ) \n            \n        \n    \n    return filtered_data \n\n"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair ( list1 , list2 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum ( base , power ) : \n    sum = 0 \n    \n    for i in range ( power ) : \n        sum += base ** ( i + 1 ) \n    \n    return sum \n\n"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation ( s ) : \n    quotation_marks = [ '\"' , \"'\" ] \n    \n    quotation_values = [ ] \n    \n    temp_value = \"\" \n    \n    for char in s : \n        if char in quotation_marks : \n            if temp_value : \n                quotation_values . append ( temp_value ) \n                temp_value = \"\" \n                \n            \n            quotation_values . append ( char ) \n        else : \n            temp_value += char \n        \n    \n    if temp_value : \n        quotation_values . append ( temp_value ) \n    \n    return quotation_values \n\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements ( t ) : \n    return tuple ( i * j for i , j in zip ( t [ : - 1 ] , t [ 1 : ] ) ) \n\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list ( a , b ) : \n    return [ x + y for x , y in zip ( a , b ) ] \n\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates ( lst ) : \n    return [ x for i , x in enumerate ( lst ) if i == 0 or x != lst [ i - 1 ] ] \n\n"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone ( r , h ) : \n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286 \n    \n    lateral_surface_area = 2 * pi * r * h + 2 * pi * r * r \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar ( s ) : \n    return s . replace ( ' ' , ':' ) . replace ( ',' , ':' ) . replace ( '.' , ':' ) \n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence ( arr , target ) : \n    left , right = 0 , len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            right = mid - 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod ( arr ) : \n    total_sum = 0 \n    \n    for i in range ( len ( arr ) ) : \n        product = 1 \n        \n        for j in range ( i , len ( arr ) ) : \n            product *= arr [ j ] \n            total_sum += product \n        \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits ( n ) : \n    return n ^ ( 1 << ( n . bit_length ( ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion ( arr , val ) : \n    left = 0 \n    \n    right = len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] < val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"task_id": "Mbpp/737", "solution": "def check_str ( str ) : \n    import re \n    pattern = r\"^[aeiouAEIOU]\" \n    \n    if re . match ( pattern , str ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/739", "solution": "def find_Index ( n ) : \n    i = 1 \n    \n    while True : \n        triangular_number = ( i * ( i + 1 ) ) // 2 \n        \n        if len ( str ( triangular_number ) ) == n : \n            return i \n        \n        i += 1 \n    \n\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict ( tup ) : \n    return dict ( zip ( tup [ : : 2 ] , tup [ 1 : : 2 ] ) ) \n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same ( s ) : \n    char_set = set ( s ) \n    \n    if len ( char_set ) == 1 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron ( s ) : \n    return ( 3 ** 0.5 / 4 * s ** 2 ) / 2 \n\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right ( lst , n ) : \n    n = n % len ( lst ) \n    \n    return lst [ - n : ] + lst [ : - n ] \n\n"}
{"task_id": "Mbpp/744", "solution": "def check_none ( tup ) : \n    if None in tup : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits ( startnum , endnum ) : \n    result = [ ] \n    \n    for num in range ( startnum , endnum + 1 ) : \n        digits = [ int ( d ) for d in str ( num ) ] \n        \n        if all ( num % d == 0 for d in digits ) : \n            result . append ( num ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces ( s ) : \n    result = \"\" \n    \n    for word in s . split ( ) : \n        if word [ 0 ] . isupper ( ) : \n            result += \" \" + word \n        else : \n            result += word \n        \n    \n    return result . strip ( ) \n\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings ( lst ) : \n    return sorted ( lst , key = lambda x : int ( x ) ) \n\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple ( tuple1 , tuple2 ) : \n    new_tuple = [ ] \n    \n    for i in range ( len ( tuple1 ) ) : \n        if i < len ( tuple2 ) : \n            new_tuple . append ( tuple1 [ i ] + tuple2 [ i ] ) \n        else : \n            new_tuple . append ( tuple1 [ i ] ) \n        \n    \n    return new_tuple \n\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        left_child = 2 * i + 1 \n        \n        right_child = 2 * i + 2 \n        \n        if left_child < n and arr [ left_child ] < arr [ i ] : \n            return False \n        \n        if right_child < n and arr [ right_child ] < arr [ i ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n == 2 : \n        return 1 \n    else : \n        jacobsthal = [ 0 , 1 , 1 ] \n        \n        for i in range ( 3 , n + 1 ) : \n            jacobsthal . append ( 2 * jacobsthal [ i - 1 ] + jacobsthal [ i - 2 ] ) \n        \n        return jacobsthal [ n ] \n    \n\n"}
{"task_id": "Mbpp/753", "solution": "def min_k_records ( lst , k ) : \n    return sorted ( lst , key = lambda x : x [ 1 ] ) [ : k ] \n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list ( l1 , l2 , l3 ) : \n    common_elements = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        if l1 [ i ] in l2 and l1 [ i ] in l3 : \n            common_elements . append ( l1 [ i ] ) \n        \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest ( numbers ) : \n    if len ( numbers ) < 2 : \n        return None \n    \n    smallest = second_smallest = float ( 'inf' ) \n    \n    \n    for num in numbers : \n        if num < smallest : \n            second_smallest = smallest \n            \n            smallest = num \n            \n        elif num < second_smallest and num != smallest : \n            second_smallest = num \n            \n        \n    \n    return second_smallest if second_smallest != float ( 'inf' ) else None \n\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs ( lst ) : \n    count = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            if lst [ i ] == lst [ j ] [ : : - 1 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists ( lst ) : \n    result = { } \n    \n    for sublist in lst : \n        sublist_tuple = tuple ( sublist ) \n        \n        if sublist_tuple in result : \n            result [ sublist_tuple ] += 1 \n        else : \n            result [ sublist_tuple ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/759", "solution": "def is_decimal ( s ) : \n    try : \n        float ( s ) \n        if s . count ( '.' ) == 1 : \n            parts = s . split ( '.' ) \n            \n            if len ( parts [ 0 ] ) == 1 and len ( parts [ 1 ] ) == 2 : \n                return True \n            \n        \n    except ValueError : \n        pass \n    \n    return False \n\n"}
{"task_id": "Mbpp/760", "solution": "def unique_Element ( nums ) : \n    return len ( set ( nums ) ) == 1 \n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number ( month ) : \n    if month == 6 : \n        return True \n    elif month == 2 : \n        return False \n    elif month == 12 : \n        return False \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff ( arr , k ) : \n    arr . sort ( ) \n    min_diff = float ( 'inf' ) \n    \n    for i in range ( len ( arr ) - 1 ) : \n        diff = arr [ i + 1 ] - arr [ i ] \n        \n        if diff < min_diff : \n            min_diff = diff \n            \n        \n    \n    return min_diff if min_diff <= k else - 1 \n\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr ( s ) : \n    count = 0 \n    \n    for i in s : \n        if i . isdigit ( ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/765", "solution": "def is_polite ( n ) : \n    if n == 1 : \n        return 1 \n    \n    i = 1 \n    \n    count = 0 \n    \n    while True : \n        if len ( str ( i * n ) ) == len ( str ( i ) ) : \n            count += 1 \n        \n        if count == n : \n            return i \n        \n        i += 1 \n    \n\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise ( lst ) : \n    return [ ( lst [ i ] , lst [ i + 1 ] ) for i in range ( len ( lst ) - 1 ) ] \n\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count ( arr , sum ) : \n    count = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if arr [ i ] + arr [ j ] == sum : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/769", "solution": "def Diff ( list1 , list2 ) : \n    return [ i for i in list1 + list2 if i not in list1 or i not in list2 ] \n\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 4 \n    \n    return sum \n"}
{"task_id": "Mbpp/771", "solution": "def check_expression ( expression ) : \n    stack = [ ] \n    \n    opening_brackets = [ '{' , '[' , '(' ] \n    \n    closing_brackets = [ '}' , ']' , ')' ] \n    \n    bracket_pairs = { ')' : '(' , ']' : '[' , '}' : '{' } \n    \n    for char in expression : \n        if char in opening_brackets : \n            stack . append ( char ) \n        elif char in closing_brackets : \n            if not stack or stack . pop ( ) != bracket_pairs [ char ] : \n                return False \n            \n        \n    \n    return not stack \n\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length ( str , k ) : \n    str = str . split ( ) \n    \n    result = [ word for word in str if len ( word ) != k ] \n    \n    return ' ' . join ( result ) \n"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring ( string , substring ) : \n    index = string . find ( substring ) \n    \n    if index == - 1 : \n        return None \n    else : \n        return ( substring , index , index + len ( substring ) ) \n    \n\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position ( lst ) : \n    for i in range ( 1 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum ( lst ) : \n    count_dict = { } \n    \n    for num in lst : \n        if num in count_dict : \n            count_dict [ num ] += 1 \n        else : \n            count_dict [ num ] = 1 \n            \n        \n    \n    sum = 0 \n    \n    for key , value in count_dict . items ( ) : \n        if value == 1 : \n            sum += key \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    i = 0 \n    \n    while i < len ( lst ) : \n        count = 1 \n        \n        while i + 1 < len ( lst ) and lst [ i ] == lst [ i + 1 ] : \n            i += 1 \n            count += 1 \n        \n        result . append ( lst [ i ] ) \n        result . append ( count ) \n        i += 1 \n    \n    return result \n\n"}
{"task_id": "Mbpp/780", "solution": "def find_combinations ( tup_list ) : \n    result = [ ] \n    \n    for i in range ( len ( tup_list ) ) : \n        for j in range ( len ( tup_list [ i ] ) ) : \n            for k in range ( len ( tup_list [ i ] ) ) : \n                if i != k : \n                    result . append ( ( tup_list [ i ] [ j ] , tup_list [ i ] [ k ] ) ) \n                \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count % 2 == 0 \n\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum ( arr ) : \n    total_sum = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        total_sum += arr [ i ] * ( ( ( i + 1 ) * ( n - i ) ) + 1 ) \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd ( lst ) : \n    even = None \n    \n    odd = None \n    \n    for i in lst : \n        if i % 2 == 0 : \n            if even is None : \n                even = i \n                \n            else : \n                even = even * i \n                \n            \n        else : \n            if odd is None : \n                odd = i \n                \n            else : \n                odd = odd * i \n                \n            \n        \n    \n    return even * odd \n\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int ( s ) : \n    s = s . strip ( \"()\" ) . split ( \", \" ) \n    \n    return tuple ( map ( int , s ) ) \n\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion ( lst , val ) : \n    low = 0 \n    \n    high = len ( lst ) - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if lst [ mid ] < val : \n            low = mid + 1 \n            \n        elif lst [ mid ] > val : \n            high = mid - 1 \n            \n        else : \n            return mid \n        \n    \n    return low \n\n"}
{"task_id": "Mbpp/787", "solution": "def text_match_three ( text ) : \n    patterns = '^a.*bb{3}$' \n    \n    if re . search ( patterns , text ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple ( lst , str ) : \n    new_tuple = tuple ( lst + [ str ] ) \n    \n    return new_tuple \n\n"}
{"task_id": "Mbpp/790", "solution": "def even_position ( lst ) : \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 != 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested ( tup ) : \n    res = [ ] \n    \n    for i in tup : \n        if isinstance ( i , tuple ) : \n            continue \n        else : \n            res . append ( i ) \n        \n    \n    return tuple ( res ) \n\n"}
{"task_id": "Mbpp/792", "solution": "def count_list ( list1 ) : \n    return len ( list1 ) \n"}
{"task_id": "Mbpp/793", "solution": "def last ( arr , x ) : \n    low = 0 \n    \n    high = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if arr [ mid ] == x : \n            result = mid \n            \n            low = mid + 1 \n            \n        elif arr [ mid ] < x : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb ( text ) : \n    if 'a' in text and text [ - 1 ] == 'b' : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/796", "solution": "def return_sum ( dictionary ) : \n    sum = 0 \n    \n    for value in dictionary . values ( ) : \n        sum += value \n    \n    return sum \n\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range ( l , r ) : \n    sum = 0 \n    \n    for i in range ( l , r + 1 ) : \n        if i % 2 != 0 : \n            sum += i \n        \n    \n    return sum \n"}
{"task_id": "Mbpp/798", "solution": "def _sum ( arr ) : \n    sum = 0 \n    \n    for i in arr : \n        sum += i \n    \n    return sum \n\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate ( n , d ) : \n    return ( ( n << d ) | ( n >> ( 32 - d ) ) ) & 0xFFFFFFFF \n\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces ( string ) : \n    return string . replace ( \" \" , \"\" ) \n"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal ( a , b , c ) : \n    count = 0 \n    \n    if a == b == c : \n        count = 3 \n        \n    elif a == b or b == c or a == c : \n        count = 2 \n        \n    else : \n        count = 0 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square ( n ) : \n    if n < 0 : \n        return False \n    \n    root = int ( n ** 0.5 ) \n    \n    return root * root == n \n\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product % 2 == 0 \n\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list ( lst ) : \n    return max ( lst , key = sum ) \n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase ( s ) : \n    max_run = 0 \n    \n    current_run = 0 \n    \n    for char in s : \n        if char . isupper ( ) : \n            current_run += 1 \n            max_run = max ( max_run , current_run ) \n            \n        else : \n            current_run = 0 \n            \n        \n    \n    return max_run \n\n"}
{"task_id": "Mbpp/807", "solution": "def first_odd ( lst ) : \n    for num in lst : \n        if num % 2 != 0 : \n            return num \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/808", "solution": "def check_K ( tup , k ) : \n    tup = list ( tup ) \n    \n    tup . sort ( ) \n    return k in tup \n\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller ( test_tuple1 , test_tuple2 ) : \n    return all ( test_tuple2 [ i ] > test_tuple1 [ i ] for i in range ( len ( test_tuple1 ) ) ) \n\n"}
