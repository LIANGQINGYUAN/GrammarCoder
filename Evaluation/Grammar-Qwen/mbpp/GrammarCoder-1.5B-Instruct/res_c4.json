{"prompt": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n", "task_id": "Mbpp/2", "test": "\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4428, 22801, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 738, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 738, 152831, 152128, 152430, 1140, 16, 151703, 151740, 152902, 152911, 151879, 151845, 738, 152831, 152128, 152430, 1140, 17, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n", "task_id": "Mbpp/3", "test": "\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 7913, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_not_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n", "task_id": "Mbpp/4", "test": "\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 17364, 10841, 907, 32381, 152069, 153011, 151983, 10307, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 7772, 51875, 152955, 152339, 152061, 151879, 151845, 10615, 152831, 152128, 152430, 10307, 153001, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 151684, 152771, 152503, 152121, 152539, 308, 152085, 151773, 152987, 151773, 152208, 151886, 152588, 7772, 51875, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80_queue_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80argest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n", "task_id": "Mbpp/6", "test": "\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1745, 55581, 68201, 1668, 275, 44246, 152069, 153011, 151983, 1629, 16, 152297, 151983, 1629, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 53941, 5287, 153081, 152456, 152440, 1629, 16, 152030, 152370, 1629, 17, 152208, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152067, 152685, 152652, 53941, 5287, 151876, 152677, 153037, 152682, 152440, 1760, 152936, 153081, 152456, 152440, 53941, 5287, 152902, 152071, 220, 16, 152208, 152677, 153037, 152682, 152440, 53941, 5287, 152579, 152071, 220, 16, 152208, 151953, 152996, 151886, 152029, 152528, 1760, 152622, 151683, 152114, 220, 16, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120differ_ter\ud83d\ude80^\ud83d\ude80_At_ter\ud83d\ude80^\ud83d\ude80_One_ter\ud83d\ude80^\ud83d\ude80_B_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80_Pos_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xor_ter\ud83d\ude80^\ud83d\ude80_result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xor_ter\ud83d\ude80^\ud83d\ude80_result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xor_ter\ud83d\ude80^\ud83d\ude80_result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xor_ter\ud83d\ude80^\ud83d\ude80_result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n", "task_id": "Mbpp/7", "test": "\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 9232, 17799, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4244, 152911, 151879, 153033, 152036, 152136, 914, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 3409, 152370, 4244, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 152622, 152927, 152114, 220, 19, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 3409, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_long_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "task_id": "Mbpp/8", "test": "\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9334, 51875, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152285, 152456, 152440, 1629, 151940, 152071, 220, 17, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 10307, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n", "task_id": "Mbpp/9", "test": "\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 2568, 354, 804, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 45620, 153081, 152456, 152441, 152339, 152602, 274, 151684, 152771, 152503, 152539, 600, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 274, 151684, 152771, 152503, 152121, 152539, 600, 152085, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 45620, 152622, 151683, 152528, 274, 152361, 152380, 152451, 152819, 151886, 152588, 600, 151953, 152415, 151953, 152996, 151886, 152588, 308, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_R_ter\ud83d\ude80^\ud83d\ude80ot_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rotated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rotated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n", "task_id": "Mbpp/11", "test": "\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 2232, 638, 152069, 153011, 151983, 914, 152297, 151983, 1161, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1156, 3560, 152911, 151879, 153033, 152036, 152136, 914, 152411, 1477, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1156, 3560, 152622, 151683, 151874, 151878, 152780, 152763, 220, 16, 152361, 152380, 152451, 152819, 151886, 152588, 914, 151953, 152415, 152677, 152929, 152891, 152440, 1537, 3560, 153081, 152456, 152321, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 152780, 152071, 220, 16, 152780, 152911, 151879, 153033, 152036, 151780, 152339, 152602, 914, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152411, 1477, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151886, 152331, 152456, 152441, 152339, 152602, 914, 151684, 152771, 152503, 152121, 152539, 1156, 3560, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 914, 151684, 152771, 152503, 153067, 152456, 152440, 1537, 3560, 152328, 152071, 220, 16, 152121, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_O_ter\ud83d\ude80^\ud83d\ude80cc_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n", "task_id": "Mbpp/12", "test": "\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3378, 10193, 152069, 153011, 151983, 6172, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10615, 10193, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 6172, 153001, 152076, 152695, 151792, 1376, 152602, 2629, 151703, 151740, 152208, 151886, 152588, 10615, 10193, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "task_id": "Mbpp/14", "test": "\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 2334, 4661, 152069, 153011, 151983, 2331, 152297, 151983, 2608, 152297, 151983, 93610, 30862, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 8123, 153081, 152456, 151839, 152925, 152456, 152321, 152456, 152440, 2331, 151894, 152370, 2608, 151894, 152370, 93610, 30862, 152144, 152071, 220, 18, 152208, 151886, 152588, 8123, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_V_ter\ud83d\ude80^\ud83d\ude80olume_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120prism_ter\ud83d\ude80^\ud83d\ude80_side_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prism_ter\ud83d\ude80^\ud83d\ude80_side_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n", "task_id": "Mbpp/16", "test": "\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1467, 93129, 62, 53933, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 15769, 819, 152911, 151879, 153033, 152036, 152136, 1467, 152411, 6718, 152831, 152128, 152928, 35302, 151666, 151703, 151740, 152208, 152980, 152205, 152440, 38449, 152370, 15769, 819, 151876, 151923, 152557, 152592, 152191, 152412, 152058, 151989, 152805, 151879, 153033, 152036, 152136, 38449, 152411, 374, 14772, 152831, 152128, 151703, 151740, 151742, 152509, 151989, 152805, 151879, 153033, 152036, 152136, 38449, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80_lowercase_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80underscore_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substr_ter\ud83d\ude80^\ud83d\ude80ings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substr_ter\ud83d\ude80^\ud83d\ude80ings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n", "task_id": "Mbpp/17", "test": "\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9334, 5678, 25334, 152069, 153011, 151983, 3108, 5118, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152468, 220, 19, 151894, 152370, 3108, 5118, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80_per_ter\ud83d\ude80^\ud83d\ude80imeter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n", "task_id": "Mbpp/18", "test": "\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 63642, 37418, 152069, 153011, 151983, 607, 16, 152297, 151983, 607, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 151887, 1591, 151666, 152208, 152980, 152205, 152440, 1161, 152370, 607, 16, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 152442, 152839, 152528, 607, 17, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1161, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_dirty_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "task_id": "Mbpp/19", "test": "\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1273, 70434, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 3884, 152911, 151879, 151845, 738, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152607, 152528, 3884, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 3884, 152411, 912, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80_duplicate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n", "task_id": "Mbpp/20", "test": "\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 62, 6660, 541, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 152029, 152988, 152456, 152440, 1629, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80wood_ter\ud83d\ude80^\ud83d\ude80all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "task_id": "Mbpp/56", "test": "\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 27437, 1089, 152911, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152061, 151879, 151845, 607, 152831, 152128, 152430, 308, 151703, 151740, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 151886, 152029, 152988, 152456, 152440, 308, 152780, 152071, 220, 16, 152622, 151683, 152528, 27437, 1089, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n", "task_id": "Mbpp/57", "test": "\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 58843, 61883, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 10307, 152411, 3378, 152831, 152128, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1932, 4273, 152911, 151879, 151845, 526, 152831, 152128, 151865, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 151865, 151879, 151845, 2415, 152831, 152128, 152430, 607, 153001, 152430, 10307, 151703, 151740, 151703, 151740, 151703, 151740, 152208, 151886, 152588, 1932, 4273, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_Max_ter\ud83d\ude80^\ud83d\ude80_Num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n", "task_id": "Mbpp/58", "test": "\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14002, 1098, 622, 82, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 151886, 153084, 152412, 151839, 151708, 152412, 152749, 152528, 264, 152622, 152668, 152114, 220, 15, 152361, 152857, 152983, 152528, 293, 152622, 152706, 152114, 220, 15, 152361, 151742, 152879, 151708, 152412, 152749, 152528, 264, 152622, 152706, 152114, 220, 15, 152361, 152857, 152983, 152528, 293, 152622, 152668, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120opposite_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80ign_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n", "task_id": "Mbpp/59", "test": "\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 70135, 23450, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 308, 151894, 152879, 152925, 152456, 152321, 152456, 152468, 220, 18, 151894, 152370, 308, 152780, 152071, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_oct_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n", "task_id": "Mbpp/61", "test": "\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 36359, 18594, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 152911, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152602, 274, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 2629, 152622, 151683, 152988, 152456, 152321, 152456, 152440, 502, 152780, 152370, 600, 152328, 152071, 220, 16, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_Sub_ter\ud83d\ude80^\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "task_id": "Mbpp/62", "test": "\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 24632, 4273, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1308, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n", "task_id": "Mbpp/63", "test": "\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 47525, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 15850, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 3638, 152911, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152441, 152339, 152344, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152780, 152955, 152339, 152344, 152339, 152602, 18845, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 3638, 152622, 152706, 152528, 1932, 15850, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 15850, 152370, 3638, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1932, 15850, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "task_id": "Mbpp/64", "test": "\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3832, 74204, 152069, 153011, 151983, 15423, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 15423, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152996, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120subject_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n", "task_id": "Mbpp/65", "test": "\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 30819, 2019, 10160, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2790, 152071, 220, 15, 152208, 152980, 152205, 152440, 1509, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 943, 152831, 152128, 152430, 1509, 151703, 151740, 152622, 151683, 152528, 1140, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2790, 152936, 152911, 151879, 151845, 30819, 2019, 10160, 152831, 152128, 152430, 1509, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 2790, 152936, 152370, 1509, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 2790, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120recursive_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120recursive_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "task_id": "Mbpp/66", "test": "\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1133, 3180, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 18845, 151764, 152355, 152257, 152528, 1629, 152622, 152706, 152114, 220, 15, 152361, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pos_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "task_id": "Mbpp/67", "test": "\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 28419, 5500, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 28419, 152474, 152817, 153002, 152063, 152817, 153002, 152153, 220, 15, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152071, 220, 16, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152955, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152208, 151953, 152996, 151953, 152996, 151886, 152480, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "task_id": "Mbpp/68", "test": "\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 1245, 263, 354, 14011, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 7703, 152470, 152891, 152440, 43549, 151909, 153046, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 43549, 152713, 152488, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152819, 152677, 152929, 152891, 152440, 7703, 152713, 152488, 152208, 151953, 152415, 151953, 152996, 151886, 153084, 152412, 152440, 7703, 151742, 152370, 43549, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_M_ter\ud83d\ude80^\ud83d\ude80on_ter\ud83d\ude80^\ud83d\ude80ot_ter\ud83d\ude80^\ud83d\ude80onic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "task_id": "Mbpp/69", "test": "\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 5228, 1607, 152069, 153011, 151983, 18845, 152297, 151983, 93893, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152321, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152780, 152370, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 18845, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152370, 308, 152085, 151773, 152987, 151773, 152622, 151683, 152528, 93893, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n", "task_id": "Mbpp/70", "test": "\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 11478, 152069, 153011, 151983, 45225, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 678, 151733, 152828, 151722, 152142, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 259, 151703, 151740, 152622, 151683, 151917, 151879, 151845, 2422, 152831, 152128, 151697, 152339, 152602, 45225, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152361, 152996, 152186, 152581, 152899, 152440, 259, 151918, 152237, 152370, 45225, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_equal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "task_id": "Mbpp/71", "test": "\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3614, 18435, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10615, 31983, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 18845, 151703, 151740, 152208, 151886, 152588, 10615, 31983, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120comb_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "task_id": "Mbpp/72", "test": "\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1396, 1098, 5151, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 31340, 152474, 152817, 153002, 152285, 152456, 152440, 600, 151940, 152071, 220, 17, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152208, 152980, 152205, 152440, 600, 152370, 31340, 151876, 152980, 152205, 152440, 502, 152370, 31340, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 152780, 152370, 502, 152622, 151683, 152528, 308, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dif_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80quare_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n", "task_id": "Mbpp/74", "test": "\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 33574, 64923, 152069, 153011, 151983, 607, 16, 152297, 151983, 5383, 16, 152297, 151983, 607, 17, 152297, 151983, 5383, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 607, 16, 64923, 152911, 151879, 153033, 152036, 152136, 607, 16, 152411, 6718, 152831, 152128, 152928, 15553, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 5383, 16, 64923, 152911, 151879, 153033, 152036, 152136, 5383, 16, 152411, 6718, 152831, 152128, 152928, 15553, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 607, 17, 64923, 152911, 151879, 153033, 152036, 152136, 607, 17, 152411, 6718, 152831, 152128, 152928, 15553, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 5383, 17, 64923, 152911, 151879, 153033, 152036, 152136, 5383, 17, 152411, 6718, 152831, 152128, 152928, 15553, 151666, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 607, 16, 64923, 151703, 151740, 152622, 152238, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 5383, 16, 64923, 151703, 151740, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 607, 17, 64923, 151703, 151740, 152622, 152238, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 5383, 17, 64923, 151703, 151740, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 607, 16, 64923, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 151696, 152339, 152602, 607, 16, 64923, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152442, 152839, 152528, 5383, 16, 64923, 152361, 151742, 152983, 151696, 152339, 152602, 607, 17, 64923, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152442, 152839, 152528, 5383, 17, 64923, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_same_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80_patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n", "task_id": "Mbpp/75", "test": "\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 89269, 152069, 153011, 151983, 18845, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 57385, 152996, 152673, 152581, 152899, 152440, 57385, 151918, 152237, 152370, 18845, 151764, 151880, 152598, 151879, 151845, 678, 151733, 152828, 151722, 152142, 152988, 152456, 152440, 10510, 151702, 152370, 595, 152622, 151683, 152114, 220, 15, 152361, 152996, 152186, 152581, 152899, 152440, 10510, 151918, 152237, 152370, 57385, 151764, 152194, 152734, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ele_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ele_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n", "task_id": "Mbpp/77", "test": "\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 1557, 3092, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 152029, 152988, 152456, 152440, 1629, 151702, 152071, 220, 16, 16, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_D_ter\ud83d\ude80^\ud83d\ude80iff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "task_id": "Mbpp/79", "test": "\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3409, 6043, 152069, 153011, 151983, 3409, 151775, 153051, 153051, 151876, 151886, 152029, 152988, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n", "task_id": "Mbpp/80", "test": "\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 27853, 32507, 35520, 5500, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152440, 308, 151894, 152879, 152925, 152456, 152440, 308, 152328, 152071, 220, 16, 151894, 152879, 152925, 152456, 152440, 308, 152328, 152071, 220, 17, 152542, 152071, 220, 21, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tet_ter\ud83d\ude80^\ud83d\ude80rah_ter\ud83d\ude80^\ud83d\ude80edral_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/82", "test": "import math\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8123, 86973, 152069, 153011, 151983, 10578, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 151839, 152925, 152456, 152468, 220, 19, 152144, 152071, 220, 18, 151894, 152897, 220, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 18, 151894, 152879, 152925, 152456, 152440, 10578, 151940, 152071, 220, 18, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80_sphere_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "task_id": "Mbpp/84", "test": "\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8500, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 151832, 220, 17, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 153101, 151879, 151845, 8500, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 151703, 151740, 152328, 152911, 151879, 151845, 8500, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 17, 151703, 151740, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/85", "test": "import math\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7329, 4798, 86973, 152069, 153011, 151983, 10578, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152468, 220, 19, 151894, 152897, 220, 18, 13, 16, 19, 16, 20, 24, 151894, 153081, 152456, 152440, 10578, 151940, 152071, 220, 17, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120surface_ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80_sphere_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n", "task_id": "Mbpp/86", "test": "\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 30188, 32655, 23450, 5500, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152321, 152456, 152468, 220, 18, 151894, 152370, 308, 151894, 152370, 308, 152780, 153081, 152456, 152468, 220, 18, 151894, 152370, 308, 152328, 152071, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120centered_ter\ud83d\ude80^\ud83d\ude80_hex_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n", "task_id": "Mbpp/87", "test": "\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10880, 814, 44192, 50016, 152069, 153011, 151983, 6451, 16, 152297, 151983, 6451, 17, 152297, 151983, 6451, 18, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 26001, 5243, 152023, 152892, 152189, 151700, 6451, 16, 152645, 152189, 151700, 6451, 17, 152645, 152189, 151700, 6451, 18, 152244, 152631, 152208, 151886, 152588, 26001, 5243, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merge_ter\ud83d\ude80^\ud83d\ude80_d_ter\ud83d\ude80^\ud83d\ude80ictionaries_ter\ud83d\ude80^\ud83d\ude80_three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80dictionary_splat_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80dictionary_splat_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80dictionary_splat_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n", "task_id": "Mbpp/88", "test": "\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 20895, 3180, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 20895, 5243, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152607, 152528, 20895, 5243, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 20895, 5243, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 20895, 5243, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 20895, 5243, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n", "task_id": "Mbpp/89", "test": "\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 18093, 4273, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 153001, 152228, 220, 15, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152528, 600, 152622, 152706, 152114, 220, 15, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 152780, 152370, 600, 152622, 152668, 152988, 152456, 152440, 600, 152780, 152071, 220, 16, 152361, 152380, 152451, 152819, 151886, 152588, 600, 151953, 152415, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 308, 151953, 152996, 152415, 151953, 152996, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n", "task_id": "Mbpp/90", "test": "\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2422, 5224, 152069, 153011, 151983, 4244, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1932, 151733, 152828, 151722, 152957, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 4244, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80_log_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n", "task_id": "Mbpp/91", "test": "\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 5228, 917, 152069, 153011, 151983, 18845, 152297, 151983, 38449, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 1509, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 38449, 152622, 152607, 152528, 1509, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n", "task_id": "Mbpp/92", "test": "\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 62, 1241, 15486, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1629, 2895, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1629, 2895, 151703, 151740, 152622, 152668, 152114, 220, 18, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 1629, 2895, 151703, 151740, 152780, 152071, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 1629, 2895, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 1629, 2895, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 17, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80und_ter\ud83d\ude80^\ud83d\ude80ulating_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n", "task_id": "Mbpp/93", "test": "\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2355, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 264, 151940, 152370, 293, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n", "task_id": "Mbpp/94", "test": "\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1922, 84855, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 152480, 152339, 152061, 151879, 151845, 1308, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152996, 151703, 151740, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80_minimum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "task_id": "Mbpp/95", "test": "\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7379, 62122, 81620, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1308, 151733, 152828, 151722, 152957, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 18845, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80_Min_ter\ud83d\ude80^\ud83d\ude80_Length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n", "task_id": "Mbpp/96", "test": "\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 49109, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120divisor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n", "task_id": "Mbpp/97", "test": "\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 11639, 37288, 152069, 153011, 151983, 1140, 3575, 37288, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 20895, 5243, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 93893, 152370, 1140, 3575, 37288, 151876, 152980, 152205, 152440, 1509, 152370, 93893, 151876, 151923, 152557, 152592, 152583, 152528, 1509, 152622, 152607, 152528, 20895, 5243, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 20895, 5243, 151684, 152771, 151881, 1509, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 20895, 5243, 151684, 152771, 151881, 1509, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 20895, 5243, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/98", "test": "import math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 30270, 4273, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 152677, 153037, 152682, 152440, 1985, 153092, 152370, 1629, 152208, 151953, 152996, 151886, 152331, 152456, 152440, 1985, 152144, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n", "task_id": "Mbpp/99", "test": "\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 12122, 2346, 31761, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 7868, 151887, 1591, 151666, 152208, 152067, 152685, 152583, 152528, 308, 152622, 152706, 152114, 220, 15, 152361, 151876, 152677, 152929, 152891, 152440, 7868, 153081, 152456, 153101, 151879, 151845, 607, 152831, 152128, 151766, 152456, 152440, 308, 151702, 152071, 220, 17, 151703, 151740, 152328, 152370, 7868, 152208, 152677, 152929, 152891, 152440, 308, 153081, 152456, 152440, 308, 152542, 152071, 220, 17, 152208, 151953, 152996, 151886, 152588, 7868, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n", "task_id": "Mbpp/100", "test": "\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1790, 15874, 19236, 73310, 36058, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152496, 152559, 151792, 374, 73310, 36058, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 152622, 151683, 151696, 152339, 152061, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 151953, 152996, 152677, 153037, 152682, 152440, 308, 152936, 152071, 220, 16, 152208, 152067, 152685, 151852, 151989, 152805, 151879, 151845, 374, 73310, 36058, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 308, 152936, 152071, 220, 16, 152208, 151953, 152996, 151886, 152588, 308, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n", "task_id": "Mbpp/101", "test": "\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 595, 339, 7894, 152069, 153011, 151983, 2890, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151886, 152480, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 595, 152780, 152071, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n", "task_id": "Mbpp/102", "test": "\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 25265, 2346, 666, 35562, 152069, 153011, 151983, 25265, 2895, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 6813, 152911, 151879, 153033, 152036, 152136, 25265, 2895, 152411, 6718, 152831, 152128, 152928, 35302, 151666, 151703, 151740, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 151733, 152828, 151722, 152957, 151879, 153033, 152036, 152136, 856, 152411, 2265, 152831, 152128, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 856, 151918, 152237, 152370, 6813, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120snake_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80amel_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120snake_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120components_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120snake_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120title_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120components_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n", "task_id": "Mbpp/103", "test": "\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 90970, 1103, 4273, 152069, 153011, 151983, 308, 152297, 151983, 296, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 296, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152588, 308, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 152321, 152456, 152440, 308, 151894, 152911, 151879, 151845, 90970, 1103, 4273, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 153001, 152430, 296, 151703, 151740, 152328, 152911, 151879, 151845, 90970, 1103, 4273, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 17, 153001, 151766, 152456, 152440, 296, 152780, 152071, 220, 16, 151703, 151740, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120euler_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120euler_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120euler_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "task_id": "Mbpp/104", "test": "\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3378, 5228, 17575, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152957, 151879, 151845, 10615, 152831, 152128, 152430, 93893, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "task_id": "Mbpp/105", "test": "\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "task_id": "Mbpp/106", "test": "\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 912, 37288, 152069, 153011, 151983, 18845, 152297, 151983, 57385, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 57385, 152328, 152911, 151879, 151845, 14405, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "task_id": "Mbpp/108", "test": "\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10880, 41277, 2019, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 152297, 151983, 1140, 18, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 26001, 2019, 153081, 152456, 152321, 152456, 152440, 1140, 16, 152328, 152370, 1140, 17, 152328, 152370, 1140, 18, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 26001, 2019, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 151886, 152588, 26001, 2019, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merge_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "task_id": "Mbpp/109", "test": "\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10322, 2089, 446, 11769, 152069, 153011, 151983, 7868, 3904, 152297, 151983, 69201, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 7868, 3904, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 45620, 153081, 152456, 152441, 152339, 152602, 7868, 3904, 151684, 152771, 152503, 152539, 600, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 7868, 3904, 151684, 152771, 152503, 152121, 152539, 600, 152085, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 153101, 151879, 151845, 526, 152831, 152128, 152430, 45620, 153001, 152228, 220, 17, 151703, 151740, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_E_ter\ud83d\ude80^\ud83d\ude80qu_ter\ud83d\ude80^\ud83d\ude80ivalent_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120rotations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rotated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120rotated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n", "task_id": "Mbpp/111", "test": "\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4185, 1243, 66279, 37288, 152069, 153011, 151983, 24034, 37288, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4185, 22801, 152911, 151879, 151845, 738, 152831, 152128, 151697, 152339, 152602, 24034, 37288, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 152980, 152205, 152440, 93893, 152955, 152339, 152602, 24034, 37288, 151684, 152771, 152503, 152158, 220, 16, 152121, 152085, 151773, 152987, 151773, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 4185, 22801, 152411, 19246, 8882, 152831, 152128, 152430, 93893, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 4185, 22801, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_in_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80_update_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "task_id": "Mbpp/113", "test": "\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 31725, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152949, 152934, 152428, 152419, 151876, 152677, 152082, 151879, 151845, 526, 152831, 152128, 152430, 914, 151703, 151740, 152208, 151886, 152301, 153046, 151953, 152996, 151849, 152385, 15402, 151886, 152116, 152488, 151953, 151854, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80try_statement_py\ud83d\ude80try_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80except_clause_py\ud83d\ude80except_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ValueError_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n", "task_id": "Mbpp/116", "test": "\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14405, 2346, 4042, 152069, 153011, 151983, 57385, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 57385, 151876, 152677, 152929, 152891, 152440, 1102, 153081, 152456, 152321, 152456, 152440, 1102, 151894, 152071, 220, 16, 15, 152328, 152370, 1629, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n", "task_id": "Mbpp/118", "test": "\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 914, 2346, 2019, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 152928, 364, 364, 151666, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n", "task_id": "Mbpp/119", "test": "\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2711, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2115, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1290, 153081, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 152780, 152071, 220, 16, 152208, 152067, 152685, 152583, 152528, 2115, 152622, 152668, 152528, 1290, 152361, 151876, 152677, 152929, 152891, 152440, 5099, 153081, 152456, 151839, 152925, 152456, 152440, 2115, 152328, 152370, 1290, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 5099, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 10307, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 10307, 151684, 152771, 151903, 152456, 152440, 5099, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 2115, 153081, 152456, 152440, 5099, 152328, 152071, 220, 17, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1290, 152370, 5099, 152208, 151953, 152996, 152415, 151953, 152221, 152729, 152515, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 10307, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 10307, 151684, 152771, 151903, 152456, 152440, 5099, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 2115, 153081, 152456, 152440, 5099, 152328, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1290, 152370, 5099, 152208, 151953, 152996, 152415, 151953, 152996, 152415, 151953, 152996, 151886, 152480, 152339, 152602, 10307, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n", "task_id": "Mbpp/120", "test": "\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 9840, 21773, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 9840, 152071, 220, 15, 152208, 152980, 152205, 152440, 57385, 152370, 18845, 151876, 152677, 152929, 152891, 152440, 1985, 153081, 152456, 152441, 152339, 152602, 57385, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151894, 152955, 152339, 152602, 57385, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 1985, 152622, 152706, 152528, 1932, 9840, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 9840, 152370, 1985, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1932, 9840, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n", "task_id": "Mbpp/123", "test": "\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1079, 74338, 32964, 10160, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 2629, 3575, 16237, 41214, 152071, 220, 15, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 600, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152370, 502, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 3575, 16237, 41214, 152936, 152370, 502, 152208, 151953, 152415, 151953, 152996, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 2629, 3575, 16237, 41214, 152622, 152238, 152528, 600, 152361, 152857, 152983, 152528, 2629, 3575, 16237, 41214, 152622, 152668, 152528, 308, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 600, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120am_ter\ud83d\ude80^\ud83d\ude80icable_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/124", "test": "import math\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9210, 41522, 152069, 153011, 151983, 1931, 152297, 151983, 6532, 151775, 153051, 153051, 151876, 152511, 152043, 152844, 151836, 152650, 6888, 152024, 151726, 152677, 152929, 152891, 152440, 9210, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 57846, 17, 152831, 152128, 152430, 6532, 153001, 152430, 1931, 151703, 151740, 152208, 151886, 152588, 9210, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120angle_ter\ud83d\ude80^\ud83d\ude80_complex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120imag_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120angle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120atan_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120imag_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120angle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n", "task_id": "Mbpp/125", "test": "\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 5118, 152069, 153011, 151983, 7868, 3904, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 15850, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 7868, 3904, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1760, 62, 15, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1760, 62, 16, 152071, 220, 15, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 7868, 3904, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 7868, 3904, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152622, 151683, 152461, 364, 15, 6, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 62, 15, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 1760, 62, 16, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 152677, 152929, 152891, 152440, 3638, 153081, 152456, 152440, 1760, 62, 15, 152780, 152370, 1760, 62, 16, 152208, 151923, 152557, 152592, 152583, 152528, 3638, 152622, 152706, 152528, 1932, 15850, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 15850, 152370, 3638, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1932, 15850, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "task_id": "Mbpp/126", "test": "\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 152069, 153011, 151983, 856, 152297, 151983, 379, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 153101, 151879, 151845, 1308, 152831, 152128, 152430, 856, 153001, 152430, 379, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 856, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152857, 152983, 152988, 152456, 152440, 379, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 600, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n", "task_id": "Mbpp/127", "test": "\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 30270, 4042, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 264, 151894, 152370, 293, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n", "task_id": "Mbpp/128", "test": "\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1293, 18981, 152069, 153011, 151983, 308, 152297, 151983, 4244, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 3409, 152996, 152673, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 4244, 151764, 151880, 152257, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 152622, 152706, 152528, 308, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "task_id": "Mbpp/129", "test": "\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10963, 39794, 4452, 152069, 153011, 151983, 6172, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 6172, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 10963, 34967, 152911, 151879, 151845, 2629, 152831, 152128, 151697, 152339, 152602, 6172, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 152980, 152205, 152440, 2802, 152370, 6172, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2629, 152831, 152128, 152430, 2802, 151703, 151740, 152622, 152238, 152528, 10963, 34967, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 152980, 152205, 152440, 1375, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2629, 151733, 152828, 151722, 152846, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151881, 2802, 151773, 152987, 151773, 151684, 152771, 151881, 1375, 151773, 152987, 151773, 152996, 152186, 152581, 152899, 152440, 2802, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 152194, 152734, 152622, 152238, 152528, 10963, 34967, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2629, 151733, 152828, 151722, 152846, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 152194, 152734, 152622, 152238, 152528, 10963, 34967, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2629, 151733, 152828, 151722, 152846, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152321, 152456, 152440, 308, 152780, 152370, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 152194, 152734, 152622, 152238, 152528, 10963, 34967, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80_square_ter\ud83d\ude80^\ud83d\ude80_test_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80_constant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80_constant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120col_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120col_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80_constant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80_constant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80_constant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n", "task_id": "Mbpp/130", "test": "\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 57291, 33246, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 20895, 5243, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1509, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 1509, 152622, 152607, 152528, 20895, 5243, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 20895, 5243, 151684, 152771, 151881, 1509, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 20895, 5243, 151684, 152771, 151881, 1509, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 152677, 152929, 152891, 152440, 1932, 21790, 152911, 151879, 151845, 1932, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 20895, 5243, 152411, 2750, 152831, 152128, 151703, 151740, 151703, 151740, 152208, 152980, 152205, 152731, 151810, 1376, 152554, 151810, 897, 152455, 152911, 151879, 153033, 152036, 152136, 20895, 5243, 152411, 3589, 152831, 152128, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152528, 897, 152622, 151683, 152528, 1932, 21790, 152361, 152380, 152451, 152819, 151886, 152588, 1376, 151953, 152415, 151953, 152996, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_occ_ter\ud83d\ude80^\ud83d\ude80urrences_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "task_id": "Mbpp/131", "test": "\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9931, 2273, 363, 2010, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 78456, 152911, 151879, 151845, 738, 152831, 152128, 152928, 364, 5918, 98255, 13669, 3810, 52, 6, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 274, 2019, 152911, 151879, 151845, 1140, 152831, 152128, 152430, 274, 151703, 151740, 152208, 152677, 152929, 152891, 152731, 151810, 2115, 152554, 151810, 1290, 152455, 152482, 152869, 220, 15, 152192, 151796, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 274, 2019, 151703, 151740, 152780, 152071, 220, 16, 151741, 152208, 152067, 152685, 152583, 152528, 2115, 152622, 152668, 152528, 1290, 152361, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 274, 2019, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 152622, 152442, 152839, 152528, 78456, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2115, 152936, 152071, 220, 16, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 274, 2019, 151684, 152771, 151881, 1290, 151773, 152987, 151773, 152622, 152442, 152839, 152528, 78456, 152361, 152819, 152677, 153037, 152682, 152440, 1290, 151962, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152731, 152225, 152339, 152602, 274, 2019, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 152554, 152225, 152339, 152602, 274, 2019, 151684, 152771, 151881, 1290, 151773, 152987, 151773, 152455, 152482, 151770, 152339, 152602, 274, 2019, 151684, 152771, 151881, 1290, 151773, 152987, 151773, 152192, 151770, 152339, 152602, 274, 2019, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 151741, 152208, 152677, 153037, 152682, 152440, 2115, 152936, 152071, 220, 16, 152208, 152677, 153037, 152682, 152440, 1290, 151962, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152430, 274, 2019, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80AE_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n", "task_id": "Mbpp/132", "test": "\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 57385, 3904, 152069, 153011, 151983, 57385, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152430, 57385, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "task_id": "Mbpp/133", "test": "\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 28209, 266, 2071, 372, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152396, 1629, 152996, 152186, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 10307, 151764, 152355, 152257, 152528, 1629, 152622, 152668, 152114, 220, 15, 152361, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_neg_ter\ud83d\ude80^\ud83d\ude80at_ter\ud83d\ude80^\ud83d\ude80iven_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n", "task_id": "Mbpp/135", "test": "\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 12371, 23450, 4273, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 308, 151894, 152879, 152925, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 308, 152780, 152071, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120hex_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/137", "test": "import math\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7168, 3180, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152331, 152456, 152440, 1760, 152144, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "task_id": "Mbpp/138", "test": "\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 1098, 372, 89355, 1088, 15965, 89355, 82989, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152067, 152685, 152583, 152528, 308, 152622, 152706, 152114, 220, 15, 152361, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 308, 153081, 152456, 152440, 308, 152542, 152071, 220, 17, 152208, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_P_ter\ud83d\ude80^\ud83d\ude80owers_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_Two_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/139", "test": "import math\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 12671, 666, 2437, 372, 2202, 152069, 153011, 151983, 10578, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152468, 220, 17, 151894, 152897, 220, 18, 13, 16, 19, 16, 20, 24, 151894, 152370, 10578, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120circle_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80irc_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80ference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n", "task_id": "Mbpp/140", "test": "\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 643, 11307, 152069, 153011, 151983, 1140, 3575, 37288, 151775, 153051, 153051, 151876, 151886, 152358, 152044, 151760, 152396, 1509, 152996, 153078, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 1140, 3575, 37288, 151764, 153078, 152581, 152899, 152440, 1509, 151918, 152237, 152370, 93893, 151764, 153049, 152547, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_s_ter\ud83d\ude80^\ud83d\ude80ingly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80set_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n", "task_id": "Mbpp/141", "test": "\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 53474, 726, 18435, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1379, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 592, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 1379, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1932, 3560, 152911, 151879, 153033, 152036, 152136, 2890, 152411, 1922, 152831, 152128, 151865, 151879, 151845, 1932, 152831, 152128, 151697, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 153067, 152456, 152440, 1379, 152780, 152370, 600, 152085, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 592, 152411, 8737, 152831, 152128, 151766, 152456, 152440, 1932, 3560, 152328, 152071, 220, 16, 151703, 151740, 152208, 152677, 152929, 152891, 152441, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 153067, 152456, 152440, 1932, 3560, 152328, 152071, 220, 16, 152085, 151773, 152987, 151773, 152911, 151879, 151845, 27437, 152831, 152128, 151697, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 153067, 152456, 152440, 1932, 3560, 152328, 152071, 220, 16, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152929, 152891, 152441, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 153067, 152456, 152440, 1379, 152780, 152370, 600, 152085, 151773, 152987, 151773, 152911, 151879, 151845, 27437, 152831, 152128, 151697, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 153067, 152456, 152440, 1379, 152780, 152370, 600, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 2890, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120panc_ter\ud83d\ude80^\ud83d\ude80ake_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n", "task_id": "Mbpp/142", "test": "\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 33574, 12670, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 152297, 151983, 1140, 18, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 1140, 16, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 151696, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 1140, 17, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152857, 152983, 151696, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 1140, 18, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_same_ter\ud83d\ude80^\ud83d\ude80pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n", "task_id": "Mbpp/145", "test": "\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 1566, 1279, 1557, 3092, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1308, 7894, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1932, 7894, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 151886, 151816, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152440, 1932, 7894, 152780, 152370, 1308, 7894, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80bs_ter\ud83d\ude80^\ud83d\ude80_D_ter\ud83d\ude80^\ud83d\ude80iff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n", "task_id": "Mbpp/160", "test": "\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 50274, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 856, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152321, 152456, 152440, 308, 152542, 152370, 264, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 379, 153081, 152456, 152440, 308, 152780, 153081, 152456, 152440, 264, 151894, 152370, 856, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 379, 152622, 152927, 152114, 220, 15, 152361, 152857, 152983, 152988, 152456, 152440, 379, 151702, 152370, 293, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152457, 152913, 152785, 856, 152968, 152865, 152456, 152440, 379, 152542, 152370, 293, 151958, 152717, 151953, 152415, 151953, 152996, 151886, 152755, 152086, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_solution_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n", "task_id": "Mbpp/161", "test": "\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 22801, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 600, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152370, 1140, 16, 151764, 151880, 152257, 152528, 600, 152622, 152442, 152839, 152528, 1140, 17, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n", "task_id": "Mbpp/162", "test": "\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 35015, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152321, 152456, 152440, 308, 152542, 152071, 220, 17, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 308, 152780, 153081, 152456, 152468, 220, 17, 151894, 152370, 600, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_series_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "task_id": "Mbpp/165", "test": "\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 9232, 9661, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1161, 152911, 151879, 153033, 152036, 152136, 1161, 152411, 4722, 152831, 152128, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 151683, 151696, 152339, 152602, 1161, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n", "task_id": "Mbpp/166", "test": "\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 68347, 14445, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 151839, 152925, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152030, 152955, 152339, 152602, 18845, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80_pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n", "task_id": "Mbpp/167", "test": "\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1790, 20421, 3575, 62, 17, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152415, 152677, 152929, 152891, 152440, 2355, 152071, 220, 16, 152208, 152067, 152685, 152583, 152528, 2355, 152622, 152668, 152528, 308, 152361, 151876, 152677, 153037, 152682, 152440, 2355, 153092, 152071, 220, 17, 152208, 151953, 152996, 151886, 152588, 2355, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n", "task_id": "Mbpp/168", "test": "\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 11639, 152069, 153011, 151983, 18845, 152297, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 18845, 152411, 1760, 152831, 152128, 152430, 1629, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n", "task_id": "Mbpp/170", "test": "\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 9698, 2019, 152069, 153011, 151983, 18845, 152297, 151983, 1191, 152297, 151983, 835, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 151697, 152339, 152602, 18845, 151684, 152771, 152503, 152539, 1191, 152121, 153067, 152456, 152440, 835, 152328, 152071, 220, 16, 152085, 151773, 152987, 151773, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_range_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n", "task_id": "Mbpp/171", "test": "\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 46342, 620, 306, 6113, 152069, 153011, 151983, 3108, 5118, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152468, 220, 20, 151894, 152370, 3108, 5118, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120perimeter_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80ent_ter\ud83d\ude80^\ud83d\ude80agon_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "task_id": "Mbpp/172", "test": "\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 49648, 2352, 681, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 914, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152071, 220, 18, 152085, 151773, 152987, 151773, 152622, 151683, 152461, 364, 1834, 6, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80ance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80std_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n", "task_id": "Mbpp/222", "test": "\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 1819, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 151865, 151879, 151845, 2415, 152831, 152128, 152430, 943, 153001, 152430, 259, 151703, 151740, 151703, 151740, 151703, 151740, 152622, 151683, 152114, 220, 16, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "task_id": "Mbpp/223", "test": "\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 47916, 487, 152069, 153011, 151983, 2890, 152297, 151983, 308, 152297, 151983, 856, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 151683, 152528, 856, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152029, 152528, 1760, 152622, 152706, 152988, 152456, 152440, 308, 152144, 152071, 220, 17, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_major_ter\ud83d\ude80^\ud83d\ude80ity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "task_id": "Mbpp/224", "test": "\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 14812, 1668, 1199, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152067, 152685, 152652, 308, 151876, 152677, 153037, 152682, 152440, 1760, 152936, 153081, 152456, 152440, 308, 152902, 152071, 220, 16, 152208, 152677, 153037, 152682, 152440, 308, 152579, 152071, 220, 16, 152208, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_Set_ter\ud83d\ude80^\ud83d\ude80_B_ter\ud83d\ude80^\ud83d\ude80its_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "task_id": "Mbpp/226", "test": "\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10322, 9146, 3904, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152846, 152339, 152602, 914, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 151703, 151740, 151764, 151880, 152257, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_values_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n", "task_id": "Mbpp/227", "test": "\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1308, 3575, 50016, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1308, 152831, 152128, 152430, 264, 153001, 151865, 151879, 151845, 1308, 152831, 152128, 152430, 293, 153001, 152430, 272, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n", "task_id": "Mbpp/230", "test": "\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8290, 56103, 152069, 153011, 151983, 914, 152297, 151983, 1161, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8290, 152831, 152128, 152928, 330, 330, 151666, 153001, 152430, 1161, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80_blank_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n", "task_id": "Mbpp/232", "test": "\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3460, 1089, 2413, 152069, 153011, 151983, 18845, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152480, 152339, 152061, 151879, 151845, 10615, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 151684, 152771, 152503, 152121, 152539, 308, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120large_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/233", "test": "import math\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 44469, 31030, 15030, 666, 22868, 152069, 153011, 151983, 10578, 152297, 151983, 2608, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152468, 220, 17, 151894, 152897, 220, 18, 13, 16, 19, 16, 20, 24, 151894, 152370, 10578, 151894, 152879, 152925, 152456, 152440, 10578, 152328, 152370, 2608, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80_surface_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80ylinder_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n", "task_id": "Mbpp/234", "test": "\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8123, 64065, 152069, 153011, 151983, 3108, 5118, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 3108, 5118, 151940, 152071, 220, 18, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80_cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "task_id": "Mbpp/235", "test": "\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1496, 13996, 2602, 5500, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 1629, 152133, 152879, 152925, 152456, 152440, 1629, 151888, 152071, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_bit_ter\ud83d\ude80^\ud83d\ude80_set_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n", "task_id": "Mbpp/237", "test": "\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 57291, 552, 98162, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1509, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 1509, 152622, 152607, 152528, 1102, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 1102, 151684, 152771, 151881, 1509, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1102, 151684, 152771, 151881, 1509, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_occ_ter\ud83d\ude80^\ud83d\ude80ure_ter\ud83d\ude80^\ud83d\ude80nces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "task_id": "Mbpp/238", "test": "\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1372, 3575, 5228, 18594, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152208, 151886, 152331, 152456, 151839, 152925, 152456, 152440, 308, 151894, 152879, 152925, 152456, 152440, 308, 152328, 152071, 220, 16, 152542, 152071, 220, 17, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n", "task_id": "Mbpp/239", "test": "\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 10784, 5500, 3575, 58732, 152069, 153011, 151983, 296, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 11329, 152474, 152817, 153002, 152063, 152817, 153002, 152153, 220, 15, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 296, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 296, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 296, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152208, 151953, 152996, 151953, 152996, 151886, 152480, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151684, 152771, 151881, 296, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_total_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_sequences_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n", "task_id": "Mbpp/240", "test": "\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8290, 2019, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1140, 16, 151684, 152771, 152503, 152079, 151878, 152780, 152763, 220, 16, 152121, 152085, 151773, 152987, 151773, 152370, 1140, 17, 152208, 151886, 152588, 1140, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n", "task_id": "Mbpp/242", "test": "\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 9232, 580, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80ac_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n", "task_id": "Mbpp/244", "test": "\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1790, 53918, 3751, 1098, 5151, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 600, 152911, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151894, 152370, 600, 152622, 152706, 152528, 308, 152361, 152380, 152451, 152819, 151886, 152331, 152456, 151839, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 151940, 152071, 220, 17, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 151839, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 151940, 152071, 220, 17, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_Per_ter\ud83d\ude80^\ud83d\ude80fect_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80quare_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n", "task_id": "Mbpp/245", "test": "\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 10160, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1932, 10160, 152955, 152339, 152602, 2890, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 3625, 10160, 153081, 152456, 153029, 153062, 153088, 220, 15, 152222, 151847, 151894, 152370, 308, 152208, 152677, 152929, 152891, 152440, 1622, 10160, 153081, 152456, 153029, 153062, 153088, 220, 15, 152222, 151847, 151894, 152370, 308, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152602, 3625, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152602, 3625, 10160, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 3625, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152996, 152415, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 17, 153001, 152573, 151878, 152780, 152763, 220, 16, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152602, 1622, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152602, 1622, 10160, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1622, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152996, 152415, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 151696, 152339, 152602, 3625, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 1622, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152857, 152983, 151696, 152339, 152602, 3625, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 152528, 1932, 10160, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 10160, 152955, 152339, 152602, 3625, 10160, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1932, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dec_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dec_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dec_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dec_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dec_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inc_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n", "task_id": "Mbpp/247", "test": "\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 326, 1690, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 11329, 152474, 152817, 153002, 152285, 152456, 153029, 153062, 153088, 220, 15, 152222, 151847, 151894, 152370, 308, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 151868, 152329, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 153001, 152573, 151878, 152780, 152763, 220, 16, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152071, 220, 16, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 274, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 274, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152071, 220, 17, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152911, 151879, 151845, 1932, 152831, 152128, 151697, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153001, 151697, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151953, 152996, 151886, 152480, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 308, 152780, 152071, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ps_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n", "task_id": "Mbpp/250", "test": "\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 6859, 152069, 153011, 151983, 57385, 152297, 151983, 2392, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 57385, 152411, 1760, 152831, 152128, 152430, 2392, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_X_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n", "task_id": "Mbpp/251", "test": "\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5656, 7894, 152069, 153011, 151983, 18845, 152297, 151983, 2392, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152422, 152766, 2392, 152476, 152836, 152528, 600, 152622, 151683, 152114, 220, 15, 152361, 152641, 152766, 1509, 152106, 152996, 152673, 152581, 152899, 152731, 151810, 600, 152554, 151810, 1509, 152455, 151918, 152237, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 18845, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120insert_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "task_id": "Mbpp/252", "test": "\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5508, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1931, 10495, 152911, 151879, 151845, 3647, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 6532, 10495, 153081, 152456, 152440, 1629, 152144, 152911, 151879, 151845, 3647, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151886, 152457, 152913, 152785, 1931, 10495, 152968, 152785, 6532, 10495, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120imag_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120imag_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n", "task_id": "Mbpp/253", "test": "\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 31725, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 151764, 152355, 152598, 151879, 151845, 11402, 152831, 152128, 152430, 600, 153001, 152430, 526, 151703, 151740, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n", "task_id": "Mbpp/255", "test": "\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 27459, 33670, 152069, 153011, 151983, 18845, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 595, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 502, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152262, 152913, 151856, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152968, 151856, 152339, 152602, 18845, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152968, 151856, 152339, 152602, 18845, 151684, 152771, 151881, 595, 151773, 152987, 151773, 151958, 152717, 151703, 151740, 152208, 151953, 152996, 151953, 152996, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80_colors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "task_id": "Mbpp/256", "test": "\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 32716, 1733, 51875, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152415, 152677, 152929, 152891, 152440, 49433, 153081, 152456, 153029, 153062, 152527, 153046, 152222, 151847, 151894, 152370, 308, 152208, 152677, 152929, 152891, 152441, 152339, 152602, 49433, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152470, 152891, 152441, 152339, 152602, 49433, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152713, 152488, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152906, 152339, 152602, 49433, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152380, 152451, 152819, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 151894, 152370, 600, 153001, 152430, 308, 153001, 152430, 600, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 49433, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152713, 152488, 152208, 151953, 152996, 151953, 152415, 151953, 152996, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 152430, 49433, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_Pr_ter\ud83d\ude80^\ud83d\ude80imes_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "task_id": "Mbpp/257", "test": "\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14291, 32964, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 151886, 152457, 152913, 152785, 293, 152968, 152785, 264, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n", "task_id": "Mbpp/259", "test": "\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 34508, 22801, 152069, 153011, 151983, 57385, 16, 152297, 151983, 57385, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 592, 16, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 57385, 16, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 592, 17, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 57385, 17, 151703, 151740, 152208, 151886, 152976, 152608, 592, 16, 152192, 152608, 592, 17, 151741, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120maximize_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n", "task_id": "Mbpp/260", "test": "\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 151750, 152559, 151792, 501, 1515, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 49433, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1629, 152071, 220, 17, 152208, 152067, 152685, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 49433, 151703, 151740, 152622, 152668, 152528, 308, 152361, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 374, 38217, 152831, 152128, 152430, 1629, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 49433, 152411, 8737, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151953, 152415, 152677, 153037, 152682, 152440, 1629, 152936, 152071, 220, 16, 152208, 151953, 152996, 151886, 152480, 152339, 152602, 49433, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 151953, 152996, 152129, 152082, 151879, 151845, 1173, 152831, 152128, 151865, 151879, 151845, 501, 1515, 38217, 152831, 152128, 152228, 220, 18, 151703, 151740, 151703, 151740, 152208, 152129, 152082, 151879, 151845, 1173, 152831, 152128, 151865, 151879, 151845, 501, 1515, 38217, 152831, 152128, 152228, 220, 19, 151703, 151740, 151703, 151740, 152208, 152129, 152082, 151879, 151845, 1173, 152831, 152128, 151865, 151879, 151845, 501, 1515, 38217, 152831, 152128, 152228, 220, 20, 151703, 151740, 151703, 151740, 152208, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80man_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120print_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80man_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120print_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80man_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120print_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80man_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n", "task_id": "Mbpp/261", "test": "\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 12804, 22801, 152069, 153011, 151983, 57385, 16, 152297, 151983, 57385, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152285, 152456, 152440, 10510, 16, 152144, 152370, 10510, 17, 152996, 152186, 152581, 152899, 152731, 151810, 10510, 16, 152554, 151810, 10510, 17, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 57385, 16, 153001, 152430, 57385, 17, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120division_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ele_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ele_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ele_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ele_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n", "task_id": "Mbpp/262", "test": "\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6718, 23241, 33217, 152069, 153011, 151983, 18845, 152297, 151983, 444, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 949, 16, 152955, 152339, 152602, 18845, 151684, 152771, 152503, 152121, 152539, 444, 152085, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 949, 17, 152955, 152339, 152602, 18845, 151684, 152771, 152503, 152539, 444, 152121, 152085, 151773, 152987, 151773, 152208, 151886, 152457, 152913, 152785, 949, 16, 152968, 152785, 949, 17, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80_two_ter\ud83d\ude80^\ud83d\ude80_parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120L_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120L_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120L_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n", "task_id": "Mbpp/264", "test": "\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5562, 32053, 152069, 153011, 151983, 5562, 74490, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 3738, 74490, 153081, 152456, 152440, 5562, 74490, 151894, 152071, 220, 22, 152208, 151886, 152588, 3738, 74490, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dog_ter\ud83d\ude80^\ud83d\ude80_age_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dog_ter\ud83d\ude80^\ud83d\ude80_years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120human_ter\ud83d\ude80^\ud83d\ude80_years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dog_ter\ud83d\ude80^\ud83d\ude80_years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120human_ter\ud83d\ude80^\ud83d\ude80_years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n", "task_id": "Mbpp/265", "test": "\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1140, 17052, 152069, 153011, 151983, 18845, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152846, 152339, 152602, 18845, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152370, 308, 152085, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 153001, 152430, 308, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "task_id": "Mbpp/266", "test": "\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2937, 1127, 10509, 64065, 152069, 153011, 151983, 3108, 5118, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152440, 3108, 5118, 151894, 152370, 3108, 5118, 151894, 152071, 220, 21, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120later_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80urface_ter\ud83d\ude80^\ud83d\ude80_cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "task_id": "Mbpp/267", "test": "\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9334, 1098, 372, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152468, 220, 17, 151894, 152370, 308, 153001, 152228, 220, 17, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 600, 151940, 152071, 220, 17, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "task_id": "Mbpp/268", "test": "\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 31681, 4273, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 6774, 4273, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 600, 152071, 220, 16, 152208, 152067, 152685, 152583, 152528, 600, 152622, 152668, 152528, 308, 152361, 151876, 152677, 153037, 152682, 152440, 6774, 4273, 152936, 152071, 220, 16, 152208, 152677, 153037, 152682, 152440, 600, 153092, 152071, 220, 20, 152208, 151953, 152996, 151886, 152588, 6774, 4273, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_star_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120star_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120star_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120star_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n", "task_id": "Mbpp/269", "test": "\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 47120, 3142, 152069, 153011, 151983, 1161, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 6013, 152831, 152128, 152430, 1161, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ascii_ter\ud83d\ude80^\ud83d\ude80_value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n", "task_id": "Mbpp/270", "test": "\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 68347, 8378, 68347, 3560, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152846, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151764, 152355, 152257, 152988, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80_and_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "task_id": "Mbpp/271", "test": "\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1496, 1088, 1202, 1098, 372, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1496, 4273, 153081, 152456, 152468, 220, 17, 151894, 152370, 600, 152208, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 1496, 4273, 151940, 152071, 220, 20, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_P_ter\ud83d\ude80^\ud83d\ude80ower_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n", "task_id": "Mbpp/272", "test": "\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14639, 39123, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152846, 152339, 152602, 57385, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 57385, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rear_ter\ud83d\ude80^\ud83d\ude80_extract_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "task_id": "Mbpp/273", "test": "\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1186, 4339, 22801, 152069, 153011, 151983, 14405, 16, 152297, 151983, 14405, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152285, 152456, 152440, 264, 152780, 152370, 293, 152996, 152186, 152581, 152899, 152731, 151810, 264, 152554, 151810, 293, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 14405, 16, 153001, 152430, 14405, 17, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80stract_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n", "task_id": "Mbpp/274", "test": "\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1496, 21816, 20855, 31990, 5385, 10160, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 153001, 152228, 220, 17, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 152911, 151879, 151845, 9544, 20855, 31990, 5385, 152831, 152128, 152430, 600, 153001, 151766, 152456, 152440, 308, 152780, 152370, 600, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 151750, 152559, 151792, 9544, 20855, 31990, 5385, 152069, 153011, 151983, 308, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 595, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152528, 595, 152622, 151683, 152528, 308, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152415, 152677, 152929, 152891, 152440, 17593, 152474, 152817, 153002, 152063, 152817, 153002, 152153, 220, 15, 152996, 152673, 152581, 152899, 152440, 856, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 595, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152996, 152673, 152581, 152899, 152440, 856, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 1308, 152831, 152128, 152430, 600, 153001, 152430, 595, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 502, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152528, 502, 152622, 151683, 152528, 600, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 17593, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 17593, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 17593, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 17593, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152208, 151953, 152996, 152415, 151953, 152996, 151953, 152996, 151886, 152480, 152339, 152344, 152339, 152602, 17593, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151684, 152771, 151881, 595, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_bin_ter\ud83d\ude80^\ud83d\ude80omial_ter\ud83d\ude80^\ud83d\ude80_coeff_ter\ud83d\ude80^\ud83d\ude80icient_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80omial_ter\ud83d\ude80^\ud83d\ude80_coeff_ter\ud83d\ude80^\ud83d\ude80icient_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80omial_ter\ud83d\ude80^\ud83d\ude80_coeff_ter\ud83d\ude80^\ud83d\ude80icient_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/276", "test": "import math\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8123, 666, 22868, 152069, 153011, 151983, 10578, 152297, 151983, 2608, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152169, 220, 18, 13, 16, 19, 16, 20, 24, 151894, 152879, 152925, 152456, 152440, 10578, 151940, 152071, 220, 17, 151894, 152370, 2608, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80ylinder_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n", "task_id": "Mbpp/277", "test": "\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6451, 8727, 152069, 153011, 151983, 10997, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152132, 152736, 152541, 152843, 152449, 152811, 1376, 152602, 897, 152996, 152788, 152581, 152899, 152731, 151810, 1376, 152554, 151810, 897, 152455, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 10997, 152411, 3589, 152831, 152128, 151703, 151740, 151764, 151842, 152257, 152528, 897, 152622, 152927, 152528, 308, 152361, 151808, 152610, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80_filter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n", "task_id": "Mbpp/278", "test": "\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 12978, 22801, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152370, 259, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 11402, 152831, 152128, 152430, 600, 153001, 152430, 14405, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152911, 151879, 151845, 1760, 12978, 22801, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_first_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_first_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n", "task_id": "Mbpp/279", "test": "\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 4273, 13783, 23450, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152440, 308, 151894, 152879, 152925, 152456, 152321, 152456, 152468, 220, 22, 151894, 152370, 308, 152780, 152071, 220, 20, 152542, 152071, 220, 17, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80_dec_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "task_id": "Mbpp/280", "test": "\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 51000, 10716, 152069, 153011, 151983, 2890, 152297, 151983, 2392, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 152528, 2392, 152361, 152380, 152451, 152819, 151886, 152457, 152913, 152056, 153046, 152968, 152785, 600, 151958, 152717, 151953, 152415, 151953, 152996, 151886, 152457, 152913, 151717, 152488, 152968, 152890, 151878, 152780, 152763, 220, 16, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequential_ter\ud83d\ude80^\ud83d\ude80_search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n", "task_id": "Mbpp/281", "test": "\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 678, 21218, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152622, 151683, 151917, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80_unique_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "task_id": "Mbpp/282", "test": "\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1186, 2019, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152285, 152456, 152440, 264, 152780, 152370, 293, 152996, 152673, 152581, 152899, 152731, 151810, 264, 152554, 151810, 293, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 1140, 16, 153001, 152430, 1140, 17, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n", "task_id": "Mbpp/283", "test": "\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9593, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 607, 1089, 152911, 151879, 151845, 607, 152831, 152128, 152430, 308, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 20895, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 15723, 152370, 607, 1089, 151876, 151923, 152557, 152592, 152583, 152528, 15723, 152622, 152607, 152528, 20895, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 20895, 151684, 152771, 151881, 15723, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 20895, 151684, 152771, 151881, 15723, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 607, 1089, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152602, 607, 1089, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152622, 152706, 151696, 152339, 152602, 20895, 151684, 152771, 152771, 152339, 152602, 607, 1089, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120validate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n", "task_id": "Mbpp/284", "test": "\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 7894, 152069, 153011, 151983, 18845, 152297, 151983, 2392, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 678, 151733, 152828, 151722, 152142, 152528, 1509, 152622, 151683, 152528, 2392, 152361, 152996, 152186, 152581, 152899, 152440, 1509, 151918, 152237, 152370, 18845, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n", "task_id": "Mbpp/285", "test": "\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1467, 10708, 23241, 50016, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152461, 364, 370, 6, 151666, 152622, 152607, 152528, 1467, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80_two_ter\ud83d\ude80^\ud83d\ude80_three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "task_id": "Mbpp/286", "test": "\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 5228, 3858, 10160, 1288, 41954, 152069, 153011, 151983, 2890, 152297, 151983, 595, 152297, 151983, 259, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2890, 153081, 152456, 152440, 2890, 151894, 152370, 259, 152208, 152677, 152929, 152891, 152440, 1932, 10160, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 7788, 13573, 6, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1482, 10160, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 152677, 152929, 152891, 152440, 1482, 10160, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1629, 153001, 151766, 152456, 152440, 1482, 10160, 152328, 152370, 1629, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1932, 10160, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1932, 10160, 153001, 152430, 1482, 10160, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1932, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_re_ter\ud83d\ude80^\ud83d\ude80peated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "task_id": "Mbpp/287", "test": "\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9334, 1098, 372, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1496, 4273, 153081, 152456, 152468, 220, 17, 151894, 152370, 600, 152208, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 1496, 4273, 151940, 152071, 220, 17, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "task_id": "Mbpp/290", "test": "\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 5118, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 6043, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1932, 2019, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 93893, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152622, 152706, 152528, 1932, 6043, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 6043, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1932, 2019, 152370, 93893, 152208, 151953, 152415, 151953, 152996, 151886, 152976, 152608, 1932, 6043, 152192, 152608, 1932, 2019, 151741, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n", "task_id": "Mbpp/292", "test": "\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 152069, 153011, 151983, 45880, 152297, 151983, 49109, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 45880, 152542, 152370, 49109, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dividend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120divisor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dividend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120divisor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n", "task_id": "Mbpp/293", "test": "\nassert math.isclose(otherside_rightangle(7,8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3,4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7,15), 16.55294535724685, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3800, 577, 10539, 4044, 152069, 153011, 151983, 264, 152297, 151983, 305, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 151839, 152925, 152456, 152321, 152456, 152440, 264, 151940, 152071, 220, 17, 152328, 153081, 152456, 152440, 305, 151940, 152071, 220, 17, 151940, 152897, 220, 15, 13, 20, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120others_ter\ud83d\ude80^\ud83d\ude80ide_ter\ud83d\ude80^\ud83d\ude80_right_ter\ud83d\ude80^\ud83d\ude80angle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "task_id": "Mbpp/294", "test": "\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 6189, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 6189, 152083, 152086, 152208, 152980, 152205, 152440, 1509, 152370, 18845, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 1932, 6189, 152622, 151698, 151877, 152086, 152361, 151742, 152983, 152528, 1509, 152622, 152706, 152528, 1932, 6189, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 6189, 152370, 1509, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1932, 6189, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n", "task_id": "Mbpp/296", "test": "\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 62, 15174, 50775, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Inv_ter\ud83d\ude80^\ud83d\ude80_Count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "task_id": "Mbpp/297", "test": "\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 45343, 2019, 152069, 153011, 151983, 24034, 2019, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10063, 2019, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1509, 152370, 24034, 2019, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 11402, 152831, 152128, 152430, 1509, 153001, 152430, 1140, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 10063, 2019, 152411, 13036, 152831, 152128, 151865, 151879, 151845, 45343, 2019, 152831, 152128, 152430, 1509, 151703, 151740, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 10063, 2019, 152411, 8737, 152831, 152128, 152430, 1509, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 10063, 2019, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flatten_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flatten_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n", "task_id": "Mbpp/299", "test": "\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 20587, 14240, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 21773, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152996, 151703, 151740, 152208, 151886, 152588, 1932, 21773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_ag_ter\ud83d\ude80^\ud83d\ude80gregate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/300", "test": "import math\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 31761, 14486, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2790, 3180, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152468, 220, 17, 151940, 152370, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1156, 1089, 20034, 152911, 151879, 153033, 152036, 152089, 151879, 151845, 9544, 152831, 152128, 152430, 600, 151703, 151740, 152411, 1760, 152831, 152128, 152928, 364, 16, 6, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1537, 1089, 20034, 152911, 151879, 153033, 152036, 152089, 151879, 151845, 9544, 152831, 152128, 151766, 152456, 152321, 152456, 152321, 152456, 152468, 220, 17, 151940, 152370, 308, 152780, 152071, 220, 16, 152780, 152370, 600, 151703, 151740, 152411, 1760, 152831, 152128, 152928, 364, 16, 6, 151666, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1156, 1089, 20034, 152622, 151683, 152528, 1537, 1089, 20034, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2790, 3180, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2790, 3180, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_binary_ter\ud83d\ude80^\ud83d\ude80_seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80_bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80_bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80_bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80_bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n", "task_id": "Mbpp/301", "test": "\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6451, 19061, 152069, 153011, 151983, 294, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 11402, 152831, 152128, 152430, 294, 153001, 152430, 6451, 151703, 151740, 152380, 152451, 152819, 151886, 152331, 152456, 152468, 220, 16, 152328, 152879, 152660, 152956, 151879, 151845, 1932, 151733, 152828, 151722, 152957, 151879, 151845, 6451, 19061, 152831, 152128, 152430, 348, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 348, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 294, 152411, 2750, 152831, 152128, 151703, 151740, 151764, 152194, 152734, 152476, 152766, 294, 152641, 152448, 220, 15, 152106, 151953, 152415, 151886, 151832, 220, 15, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n", "task_id": "Mbpp/305", "test": "\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1191, 6615, 79, 152069, 153011, 151983, 4244, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1790, 152831, 152128, 152214, 152828, 151722, 152957, 151879, 153033, 152036, 152136, 3409, 152411, 6718, 152831, 152128, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 4244, 151764, 152355, 152598, 151879, 153033, 152036, 152136, 3409, 152411, 1191, 22177, 152831, 152128, 152928, 364, 79, 6, 151666, 151703, 151740, 152194, 152734, 153001, 152284, 153062, 152222, 151847, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80_with_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80swith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "task_id": "Mbpp/306", "test": "\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 10160, 1243, 75462, 5228, 13262, 152069, 153011, 151983, 2890, 152297, 151983, 595, 152297, 151983, 600, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 10160, 152071, 220, 15, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 10160, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1932, 10160, 153001, 151766, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152328, 152911, 151879, 151845, 1932, 10160, 1243, 75462, 5228, 13262, 152831, 152128, 152430, 2890, 153001, 152430, 595, 153001, 152430, 502, 151703, 151740, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152331, 152456, 152440, 1932, 10160, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_in_ter\ud83d\ude80^\ud83d\ude80creasing_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_in_ter\ud83d\ude80^\ud83d\ude80creasing_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n", "task_id": "Mbpp/308", "test": "\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3460, 9840, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152370, 1140, 16, 151876, 152980, 152205, 152440, 502, 152370, 1140, 17, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151766, 152456, 152440, 600, 151894, 152370, 502, 151703, 151740, 152208, 151953, 152996, 151953, 152996, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 3378, 152831, 152128, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 152208, 151886, 152480, 152339, 152602, 1102, 151684, 152771, 152503, 152121, 152539, 308, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120large_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "task_id": "Mbpp/309", "test": "\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7192, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 264, 152622, 152706, 152528, 293, 152361, 152380, 152451, 152819, 151886, 152588, 264, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 293, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "task_id": "Mbpp/310", "test": "\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 914, 2346, 21773, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 152831, 152128, 152430, 914, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "task_id": "Mbpp/311", "test": "\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 738, 9579, 81416, 98109, 13996, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 308, 152133, 152879, 152789, 151878, 152780, 152801, 308, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80_left_ter\ud83d\ude80^\ud83d\ude80_most_ter\ud83d\ude80^\ud83d\ude80_unset_ter\ud83d\ude80^\ud83d\ude80_bit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/312", "test": "import math\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8123, 3382, 68, 152069, 153011, 151983, 10578, 152297, 151983, 2608, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152321, 152456, 151839, 152925, 152456, 152468, 220, 16, 152144, 152071, 220, 18, 151894, 152897, 220, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 17, 151894, 152370, 10578, 151894, 152370, 10578, 151894, 152370, 2608, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80_con_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "task_id": "Mbpp/388", "test": "\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8426, 1088, 1202, 3575, 62, 17, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2355, 152071, 220, 16, 152208, 152067, 152685, 152583, 152988, 152456, 152440, 2355, 151894, 152071, 220, 17, 152622, 152533, 152528, 308, 152361, 151876, 152677, 153037, 152682, 152440, 2355, 153092, 152071, 220, 17, 152208, 151953, 152996, 151886, 152588, 2355, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120highest_ter\ud83d\ude80^\ud83d\ude80_P_ter\ud83d\ude80^\ud83d\ude80ower_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n", "task_id": "Mbpp/389", "test": "\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 907, 48846, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 17, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152819, 151886, 151832, 220, 16, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 25927, 300, 152445, 153062, 153088, 220, 17, 152793, 153088, 220, 16, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 25927, 300, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 25927, 300, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 25927, 300, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152480, 152339, 152602, 25927, 300, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80ucas_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n", "task_id": "Mbpp/390", "test": "\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 912, 3904, 152069, 153011, 151983, 18845, 152297, 151983, 3561, 3904, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152957, 151879, 153033, 152036, 152136, 3561, 3904, 152411, 3561, 152831, 152128, 152430, 600, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n", "task_id": "Mbpp/391", "test": "\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5508, 2019, 42605, 152069, 153011, 151983, 6894, 152297, 151983, 2750, 152297, 151983, 1140, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 6894, 151703, 151740, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 153073, 152892, 152680, 152449, 151965, 152339, 152602, 6894, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152327, 152892, 152680, 152449, 151965, 152339, 152602, 2750, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152344, 152339, 152602, 1140, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152244, 152631, 152244, 152631, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80_dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "task_id": "Mbpp/392", "test": "\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 6345, 10160, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152415, 152677, 152929, 152891, 152440, 11329, 153081, 152456, 153029, 153062, 153088, 220, 15, 152222, 151847, 151894, 152879, 152925, 152456, 152440, 308, 152328, 152071, 220, 16, 152208, 152677, 152929, 152891, 152441, 152339, 152602, 11329, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152071, 220, 16, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152911, 151879, 151845, 1932, 152831, 152128, 151766, 152456, 152321, 152456, 152321, 152456, 152441, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152542, 152071, 220, 17, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152542, 152071, 220, 18, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152542, 152071, 220, 19, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152542, 152071, 220, 20, 151773, 152987, 151773, 153001, 152430, 600, 151703, 151740, 152208, 151953, 152996, 151886, 152480, 152339, 152602, 11329, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "task_id": "Mbpp/394", "test": "\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 16031, 7800, 152069, 153011, 151983, 1946, 21773, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 1946, 21773, 151703, 151740, 151703, 151740, 152622, 151683, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1946, 21773, 151703, 151740, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dist_ter\ud83d\ude80^\ud83d\ude80inct_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "task_id": "Mbpp/395", "test": "\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1156, 21637, 1288, 64877, 40988, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1161, 3180, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1161, 152370, 914, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 152607, 152528, 1161, 3180, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 1161, 3180, 151684, 152771, 151881, 1161, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1161, 3180, 151684, 152771, 151881, 1161, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 152980, 152205, 152440, 1161, 152370, 914, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 1161, 3180, 151684, 152771, 151881, 1161, 151773, 152987, 151773, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152588, 1161, 151953, 152415, 151953, 152996, 151886, 152755, 152086, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_non_ter\ud83d\ude80^\ud83d\ude80_re_ter\ud83d\ude80^\ud83d\ude80peating_ter\ud83d\ude80^\ud83d\ude80_character_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n", "task_id": "Mbpp/397", "test": "\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 22553, 32964, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 5109, 152445, 153062, 152281, 264, 152793, 152281, 293, 152793, 152281, 272, 152222, 151847, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 5109, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 151886, 152480, 152339, 152602, 5109, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n", "task_id": "Mbpp/398", "test": "\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 3575, 41432, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 11402, 152831, 152128, 152430, 1629, 153001, 152430, 1140, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 151865, 151879, 151845, 2629, 152831, 152128, 152430, 1629, 151703, 151740, 151703, 151740, 151764, 152355, 152598, 151879, 153033, 152036, 152136, 15723, 152411, 374, 34934, 152831, 152128, 151703, 151740, 152194, 152734, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 151764, 152355, 152598, 151879, 153033, 152036, 152136, 15723, 152411, 374, 34934, 152831, 152128, 151703, 151740, 152194, 152734, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n", "task_id": "Mbpp/404", "test": "\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8028, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 264, 152622, 152668, 152528, 293, 152361, 152380, 152451, 152819, 151886, 152588, 264, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 293, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "task_id": "Mbpp/405", "test": "\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 528, 454, 2571, 152069, 153011, 151983, 57385, 2571, 152297, 151983, 2392, 151775, 153051, 153051, 151876, 151886, 152029, 152528, 2392, 152622, 152607, 152528, 57385, 2571, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80lex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80lex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80lex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n", "task_id": "Mbpp/406", "test": "\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 1088, 10748, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 152029, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_P_ter\ud83d\ude80^\ud83d\ude80arity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n", "task_id": "Mbpp/409", "test": "\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1308, 9840, 21773, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1308, 9840, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 364, 13573, 6, 151666, 151703, 151740, 152208, 152980, 152205, 152440, 57385, 152370, 18845, 151876, 152677, 152929, 152891, 152440, 1985, 153081, 152456, 152441, 152339, 152602, 57385, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151894, 152955, 152339, 152602, 57385, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 1985, 152622, 152668, 152528, 1308, 9840, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1308, 9840, 152370, 1985, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1308, 9840, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n", "task_id": "Mbpp/410", "test": "\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1308, 6189, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1308, 6189, 152911, 151879, 151845, 1308, 152831, 152128, 152919, 152817, 153002, 152396, 600, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 151764, 151880, 152598, 151879, 151845, 11402, 152831, 152128, 152430, 600, 153001, 152262, 152913, 152785, 526, 152968, 152785, 2224, 151958, 152717, 151703, 151740, 151868, 152329, 151703, 151740, 152208, 151886, 152588, 1308, 6189, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "task_id": "Mbpp/412", "test": "\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 74668, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 856, 152996, 152673, 152581, 152899, 152440, 856, 151918, 152237, 152370, 18845, 151764, 151880, 152257, 152988, 152456, 152440, 856, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n", "task_id": "Mbpp/413", "test": "\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 78342, 7894, 152069, 153011, 151983, 18845, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152846, 152339, 152602, 57385, 151684, 152771, 151881, 308, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 57385, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_nth_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "task_id": "Mbpp/414", "test": "\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 49817, 152069, 153011, 151983, 12981, 16, 152297, 151983, 12981, 17, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 600, 152370, 12981, 16, 151876, 151923, 152557, 152592, 152583, 152528, 600, 152622, 152607, 152528, 12981, 17, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120overlapping_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seq_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seq_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seq_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seq_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "task_id": "Mbpp/415", "test": "\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 44017, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 16, 152470, 152891, 152440, 1932, 17, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 7788, 13573, 6, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1308, 16, 152470, 152891, 152440, 1308, 17, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 364, 13573, 6, 151666, 151703, 151740, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152706, 152528, 1932, 16, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 17, 152370, 1932, 16, 152208, 152677, 152929, 152891, 152440, 1932, 16, 152370, 1629, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1629, 152622, 152706, 152528, 1932, 17, 152361, 152819, 152677, 152929, 152891, 152440, 1932, 17, 152370, 1629, 152208, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152668, 152528, 1308, 16, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1308, 17, 152370, 1308, 16, 152208, 152677, 152929, 152891, 152440, 1308, 16, 152370, 1629, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1629, 152622, 152668, 152528, 1308, 17, 152361, 152819, 152677, 152929, 152891, 152440, 1308, 17, 152370, 1629, 152208, 151953, 152415, 151953, 152996, 151886, 152457, 152913, 152540, 151879, 151845, 1932, 152831, 152128, 152430, 1932, 16, 153001, 151766, 152456, 152440, 1932, 16, 151894, 152370, 1932, 17, 151703, 151740, 152968, 152540, 151879, 151845, 1308, 152831, 152128, 152430, 1308, 16, 153001, 151766, 152456, 152440, 1308, 16, 151894, 152370, 1308, 17, 151703, 151740, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_Product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "task_id": "Mbpp/418", "test": "\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7379, 58843, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1932, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 1376, 152602, 2422, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80_Max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n", "task_id": "Mbpp/419", "test": "\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4778, 8378, 10160, 152069, 153011, 151983, 5109, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 17976, 32964, 152474, 152817, 153002, 152957, 151879, 151845, 4778, 152831, 152128, 152430, 1629, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 5109, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 2790, 10160, 152911, 151879, 151845, 2629, 152831, 152128, 152430, 17976, 32964, 151703, 151740, 152208, 151886, 152331, 152456, 152440, 2790, 10160, 151894, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 5109, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80_and_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "task_id": "Mbpp/420", "test": "\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 23739, 10160, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1496, 4273, 153081, 152456, 152468, 220, 17, 151894, 152370, 600, 152208, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 1496, 4273, 151940, 152071, 220, 18, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n", "task_id": "Mbpp/421", "test": "\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 77784, 21773, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152870, 20672, 151666, 152411, 5138, 152831, 152128, 151865, 151879, 151845, 2415, 152831, 152128, 152430, 607, 153001, 152430, 259, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120concatenate_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n", "task_id": "Mbpp/422", "test": "\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 1566, 4355, 89355, 920, 3760, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 600, 151940, 152071, 220, 18, 152208, 151953, 152996, 151886, 152331, 152456, 152440, 2629, 152144, 152370, 308, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80verage_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_C_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n", "task_id": "Mbpp/424", "test": "\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 1288, 277, 152069, 153011, 151983, 1946, 21773, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152846, 152339, 152602, 3409, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 1946, 21773, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_re_ter\ud83d\ude80^\ud83d\ude80ar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n", "task_id": "Mbpp/425", "test": "\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 7894, 1243, 2019, 152069, 153011, 151983, 18845, 152297, 151983, 2392, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 93893, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 2392, 152622, 152607, 152528, 93893, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80_in_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n", "task_id": "Mbpp/426", "test": "\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4051, 74668, 37378, 152069, 153011, 151983, 5109, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 1629, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 5109, 151764, 151880, 152257, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "task_id": "Mbpp/427", "test": "\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2297, 4164, 8955, 152069, 153011, 151983, 2400, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2400, 33217, 152911, 151879, 153033, 152036, 152136, 2400, 152411, 6718, 152831, 152128, 152928, 20672, 151666, 151703, 151740, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 20672, 151666, 152411, 5138, 152831, 152128, 151865, 151879, 151845, 27437, 152831, 152128, 152430, 2400, 33217, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80_format_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80_parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80_parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n", "task_id": "Mbpp/428", "test": "\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 12528, 18435, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 12929, 153081, 152456, 152440, 308, 152542, 152071, 220, 17, 152208, 152067, 152685, 152583, 152528, 12929, 152622, 152706, 152114, 220, 15, 152361, 151876, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 12929, 153001, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 2730, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 502, 152370, 600, 152208, 152067, 152685, 152191, 152412, 152749, 152528, 502, 152622, 152927, 152528, 12929, 152361, 152857, 152983, 151696, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152370, 12929, 151773, 152987, 151773, 152622, 152706, 152528, 2730, 152361, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152955, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152370, 12929, 151773, 152987, 151773, 152208, 152677, 153037, 152682, 152440, 502, 151962, 152370, 12929, 152208, 151953, 152996, 152677, 152929, 152891, 152441, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152370, 2730, 152208, 151953, 152996, 152677, 153037, 152682, 152440, 12929, 152409, 152071, 220, 17, 152208, 151953, 152996, 151886, 152588, 2890, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shell_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "task_id": "Mbpp/429", "test": "\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 323, 89269, 152069, 153011, 151983, 259, 16, 152297, 151983, 259, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152285, 152456, 152440, 264, 152780, 152370, 293, 152996, 152186, 152581, 152899, 152731, 151810, 264, 152554, 151810, 293, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 259, 16, 153001, 152430, 259, 17, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80_tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n", "task_id": "Mbpp/430", "test": "\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1346, 370, 7924, 32871, 18356, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152883, 151878, 152780, 152801, 264, 151894, 152370, 264, 151894, 152879, 152925, 152456, 152321, 152456, 152440, 293, 151894, 152370, 293, 152328, 153081, 152456, 152440, 272, 151894, 152370, 272, 152144, 152879, 152925, 152456, 152468, 220, 19, 151894, 152879, 152925, 152456, 152440, 264, 151894, 152370, 264, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120par_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80ola_ter\ud83d\ude80^\ud83d\ude80_direct_ter\ud83d\ude80^\ud83d\ude80rix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n", "task_id": "Mbpp/432", "test": "\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 22553, 3547, 2027, 89, 2356, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 274, 153081, 152456, 151839, 152925, 152456, 152440, 264, 152328, 152370, 293, 152144, 152071, 220, 17, 152208, 151886, 152588, 274, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80_tr_ter\ud83d\ude80^\ud83d\ude80ape_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80ium_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n", "task_id": "Mbpp/433", "test": "\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 97994, 152069, 153011, 151983, 2890, 152297, 151983, 1629, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 600, 152370, 2890, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152533, 152528, 600, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_greater_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "task_id": "Mbpp/435", "test": "\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1537, 1557, 12597, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 153101, 151879, 151845, 3647, 152831, 152128, 152430, 308, 151703, 151740, 151702, 152071, 220, 16, 15, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_D_ter\ud83d\ude80^\ud83d\ude80igit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n", "task_id": "Mbpp/436", "test": "\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4184, 1089, 436, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 1629, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 18845, 151764, 151880, 152257, 152528, 1629, 152622, 152668, 152114, 220, 15, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120neg_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80os_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n", "task_id": "Mbpp/437", "test": "\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 74668, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152396, 1161, 152996, 152673, 152581, 152899, 152731, 151810, 1922, 152554, 151810, 1161, 152455, 151918, 152237, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 914, 151703, 151740, 151764, 151880, 152257, 152988, 152456, 152440, 1922, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n", "task_id": "Mbpp/439", "test": "\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5248, 2346, 19487, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 152677, 152929, 152891, 152440, 1102, 153081, 152456, 152321, 152456, 152440, 1102, 151894, 152071, 220, 16, 15, 152328, 152370, 1629, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_single_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n", "task_id": "Mbpp/440", "test": "\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 10027, 22328, 9661, 152069, 153011, 151983, 11652, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 993, 54939, 152445, 153062, 152834, 330, 7422, 398, 1, 151666, 152793, 152834, 330, 799, 13307, 1, 151666, 152793, 152834, 330, 359, 11029, 1, 151666, 152793, 152834, 330, 18532, 525, 1, 151666, 152793, 152834, 330, 34576, 1, 151666, 152793, 152834, 330, 82, 6255, 1, 151666, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 9892, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 11652, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 11652, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 38449, 152955, 152339, 152602, 11652, 151684, 152771, 152503, 152539, 600, 152121, 152539, 502, 152085, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 38449, 152622, 152607, 152528, 993, 54939, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 9892, 152411, 8737, 152831, 152128, 152262, 152913, 152785, 600, 152968, 152785, 502, 152968, 152785, 38449, 151958, 152717, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151923, 152557, 152592, 152652, 9892, 152380, 152451, 152819, 151886, 152480, 152339, 152602, 9892, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151953, 152221, 152729, 152515, 151876, 151886, 152755, 152086, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_ad_ter\ud83d\ude80^\ud83d\ude80verb_ter\ud83d\ude80^\ud83d\ude80_position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ad_ter\ud83d\ude80^\ud83d\ude80verbs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80clear_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ser_ter\ud83d\ude80^\ud83d\ude80iously_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80un_ter\ud83d\ude80^\ud83d\ude80fortunately_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80many_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80ita_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ad_ter\ud83d\ude80^\ud83d\ude80verbs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n", "task_id": "Mbpp/441", "test": "\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7329, 4798, 64065, 152069, 153011, 151983, 1379, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152440, 1379, 151894, 152370, 1379, 151894, 152071, 220, 21, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120surface_ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80_cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n", "task_id": "Mbpp/445", "test": "\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1922, 91802, 1693, 152069, 153011, 151983, 57385, 16, 152297, 151983, 57385, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152957, 151879, 151845, 14405, 151733, 152828, 151722, 152285, 152456, 152440, 264, 151894, 152370, 293, 152996, 152186, 152581, 152899, 152731, 151810, 264, 152554, 151810, 293, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 57385, 16, 153001, 152430, 57385, 17, 151703, 151740, 151764, 152194, 152734, 152996, 152186, 152581, 152899, 152731, 151810, 57385, 16, 152554, 151810, 57385, 17, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 57385, 16, 153001, 152430, 57385, 17, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80_multip_ter\ud83d\ude80^\ud83d\ude80lication_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "task_id": "Mbpp/446", "test": "\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 2232, 638, 20559, 152069, 153011, 151983, 18845, 152297, 151983, 57385, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 600, 152622, 152607, 152528, 57385, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_O_ter\ud83d\ude80^\ud83d\ude80cc_ter\ud83d\ude80^\ud83d\ude80urrence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "task_id": "Mbpp/447", "test": "\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 23739, 51875, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152285, 152456, 152440, 1629, 151940, 152071, 220, 18, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 10307, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "task_id": "Mbpp/448", "test": "\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1620, 10160, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152819, 151886, 151832, 220, 16, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 151832, 220, 17, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 281, 615, 258, 152445, 153062, 153088, 220, 15, 152793, 153088, 220, 16, 152793, 153088, 220, 17, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 18, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 281, 615, 258, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 281, 615, 258, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 281, 615, 258, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 152430, 281, 615, 258, 151703, 151740, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cal_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80err_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80err_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80err_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80err_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80err_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n", "task_id": "Mbpp/450", "test": "\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 3904, 152069, 153011, 151983, 18845, 152297, 151983, 1379, 151775, 153051, 153051, 151876, 151886, 152480, 152339, 152602, 18845, 151684, 152771, 152503, 152121, 152539, 1379, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n", "task_id": "Mbpp/451", "test": "\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 36225, 3611, 27338, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8290, 152831, 152128, 152928, 330, 330, 151666, 153001, 152928, 1591, 151666, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_wh_ter\ud83d\ude80^\ud83d\ude80ites_ter\ud83d\ude80^\ud83d\ude80paces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n", "task_id": "Mbpp/453", "test": "\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 1055, 97769, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 600, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80Factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n", "task_id": "Mbpp/454", "test": "\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1467, 10708, 13533, 89, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 151886, 152029, 152461, 364, 89, 6, 151666, 152622, 152607, 152528, 1467, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80_word_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "task_id": "Mbpp/455", "test": "\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 18933, 2413, 65, 5500, 152069, 153011, 151983, 2254, 2413, 65, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152191, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 152749, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 16, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 18, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 20, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 22, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 23, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 16, 15, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 16, 17, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 151968, 152103, 152191, 152412, 151793, 152412, 151793, 152412, 152749, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 19, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 21, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 24, 152361, 151742, 152983, 152528, 2254, 2413, 65, 152622, 151683, 152114, 220, 16, 16, 152361, 152819, 151886, 152116, 152488, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n", "task_id": "Mbpp/456", "test": "\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9931, 3904, 2019, 152069, 153011, 151983, 914, 2019, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152846, 152339, 152602, 274, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 274, 151918, 152237, 152370, 914, 2019, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "task_id": "Mbpp/457", "test": "\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7379, 62122, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1308, 6043, 152911, 151879, 151845, 1308, 151733, 152828, 151722, 152957, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 18845, 151764, 152194, 152734, 152208, 152980, 152205, 152440, 93893, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152622, 151683, 152528, 1308, 6043, 152361, 152380, 152451, 152819, 151886, 152588, 93893, 151953, 152415, 151953, 152996, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80_Min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n", "task_id": "Mbpp/458", "test": "\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 22756, 15030, 152069, 153011, 151983, 3084, 152297, 151983, 2374, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 3084, 151894, 152370, 2374, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rectangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120width_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120width_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n", "task_id": "Mbpp/459", "test": "\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 34445, 5638, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 151887, 1591, 151666, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 14772, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1161, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "task_id": "Mbpp/460", "test": "\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 22826, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152846, 152339, 152602, 93893, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Extract_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "task_id": "Mbpp/462", "test": "\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 27459, 2019, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 151852, 151989, 152801, 18845, 152380, 152451, 152819, 151886, 151948, 153062, 152431, 153062, 152222, 151847, 152222, 151847, 151953, 152415, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 152980, 152205, 152440, 3614, 152911, 151879, 151845, 27459, 2019, 152831, 152128, 151697, 152339, 152602, 18845, 151684, 152771, 152503, 152158, 220, 16, 152121, 152085, 151773, 152987, 151773, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151766, 152456, 153029, 153062, 152295, 152339, 152602, 18845, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152222, 151847, 152328, 152370, 3614, 151703, 151740, 152208, 151953, 152996, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120comb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120comb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "task_id": "Mbpp/463", "test": "\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 5228, 1653, 9840, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 151852, 151989, 152801, 10307, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152415, 152677, 152929, 152891, 152440, 1932, 9840, 152470, 152891, 152440, 1308, 9840, 152470, 152891, 152440, 1102, 152955, 152339, 152602, 10307, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152731, 151810, 1932, 9840, 152554, 151810, 1308, 9840, 152455, 152482, 152608, 1308, 9840, 152192, 152608, 1932, 9840, 151741, 152208, 151953, 152415, 152677, 152929, 152891, 152440, 1932, 9840, 152911, 151879, 151845, 1932, 152831, 152128, 151697, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 153001, 151766, 152456, 152440, 1932, 9840, 151894, 152955, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1308, 9840, 152911, 151879, 151845, 1308, 152831, 152128, 151697, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 153001, 151766, 152456, 152440, 1308, 9840, 151894, 152955, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1102, 153001, 152430, 1932, 9840, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n", "task_id": "Mbpp/465", "test": "\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5943, 15124, 152069, 153011, 151983, 10997, 151775, 153051, 153051, 151876, 151886, 152132, 152736, 152541, 152843, 152449, 152811, 1376, 152602, 897, 152996, 152788, 152581, 152899, 152731, 151810, 1376, 152554, 151810, 897, 152455, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 10997, 152411, 3589, 152831, 152128, 151703, 151740, 151764, 151842, 152257, 152528, 897, 152622, 152676, 152694, 151877, 152086, 152361, 151808, 152610, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120drop_ter\ud83d\ude80^\ud83d\ude80_empty_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_not_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n", "task_id": "Mbpp/468", "test": "\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 9840, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 9840, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1985, 153081, 152456, 152441, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151894, 152955, 152339, 152602, 10307, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 1985, 152622, 152706, 152528, 1932, 9840, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 9840, 152370, 1985, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1932, 9840, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n", "task_id": "Mbpp/470", "test": "\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 912, 14445, 4482, 152069, 153011, 151983, 1946, 21773, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 1946, 21773, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 1946, 21773, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 1946, 21773, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 151816, 151879, 151845, 14405, 152831, 152128, 152430, 1102, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80_pair_ter\ud83d\ude80^\ud83d\ude80wise_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n", "task_id": "Mbpp/471", "test": "\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 86607, 1107, 152069, 153011, 151983, 2890, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 152677, 153037, 152682, 152440, 1985, 153092, 152370, 1629, 152208, 151953, 152996, 151886, 152331, 152456, 152440, 1985, 151702, 152370, 308, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_remain_ter\ud83d\ude80^\ud83d\ude80der_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "task_id": "Mbpp/472", "test": "\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 15100, 85780, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10615, 31983, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 18845, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 10615, 31983, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152441, 152339, 152602, 10615, 31983, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152780, 152955, 152339, 152602, 10615, 31983, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152238, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_Con_ter\ud83d\ude80^\ud83d\ude80secutive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n", "task_id": "Mbpp/473", "test": "\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14405, 82558, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 738, 16, 152911, 151879, 151845, 738, 152831, 152128, 151865, 151879, 151845, 2415, 152831, 152128, 152430, 14405, 153001, 152430, 1140, 16, 151703, 151740, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 738, 17, 152911, 151879, 151845, 738, 152831, 152128, 151865, 151879, 151845, 2415, 152831, 152128, 152430, 14405, 153001, 152430, 1140, 17, 151703, 151740, 151703, 151740, 152208, 151886, 151816, 151879, 153033, 152036, 152136, 738, 16, 152411, 19246, 152831, 152128, 152430, 738, 17, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n", "task_id": "Mbpp/474", "test": "\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8290, 9232, 152069, 153011, 151983, 914, 152297, 151983, 2310, 9232, 152297, 151983, 501, 9232, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8290, 152831, 152128, 152430, 2310, 9232, 153001, 152430, 501, 9232, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120old_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120old_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n", "task_id": "Mbpp/475", "test": "\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3378, 15730, 152069, 153011, 151983, 294, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 294, 152411, 3589, 152831, 152128, 151703, 151740, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152996, 153001, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_counter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "task_id": "Mbpp/476", "test": "\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2409, 10160, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 153101, 151879, 151845, 1932, 152831, 152128, 152430, 2890, 151703, 151740, 152328, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 2890, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120big_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "task_id": "Mbpp/477", "test": "\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 30425, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 374, 14772, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "task_id": "Mbpp/478", "test": "\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 93129, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 151887, 1591, 151666, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1161, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_lowercase_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "task_id": "Mbpp/479", "test": "\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1156, 1557, 12597, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152061, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_D_ter\ud83d\ude80^\ud83d\ude80igit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n", "task_id": "Mbpp/554", "test": "\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 27810, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 1629, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 18845, 151764, 151880, 152257, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n", "task_id": "Mbpp/555", "test": "\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6672, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 3575, 666, 50625, 152911, 151879, 151845, 2629, 152831, 152128, 152919, 152817, 153002, 152285, 152456, 152440, 600, 151940, 152071, 220, 18, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 2629, 3575, 32964, 152911, 151879, 151845, 2629, 152831, 152128, 151865, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151703, 151740, 152208, 151886, 152331, 152456, 152440, 2629, 3575, 666, 50625, 152780, 152370, 2629, 3575, 32964, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120difference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80ubes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80ubes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n", "task_id": "Mbpp/556", "test": "\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 2232, 631, 1088, 1310, 152069, 153011, 151983, 2890, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10322, 36430, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 151839, 152925, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152030, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 10322, 36430, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 10322, 36430, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_O_ter\ud83d\ude80^\ud83d\ude80dd_ter\ud83d\ude80^\ud83d\ude80_P_ter\ud83d\ude80^\ud83d\ude80air_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_pairs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_pairs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_pairs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n", "task_id": "Mbpp/557", "test": "\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14999, 3904, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 274, 152411, 14291, 5638, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120toggle_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n", "task_id": "Mbpp/558", "test": "\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 15723, 19464, 51875, 152069, 153011, 151983, 1629, 16, 152297, 151983, 1629, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1629, 16, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 16, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1629, 17, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 17, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 2629, 15850, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 1629, 16, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 3638, 152911, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152602, 1629, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152780, 152911, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152602, 1629, 17, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 2629, 15850, 152936, 152370, 3638, 152208, 151953, 152996, 151886, 152588, 2629, 15850, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_distance_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n", "task_id": "Mbpp/559", "test": "\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 5228, 3858, 10160, 152069, 153011, 151983, 2890, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 10160, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1482, 10160, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 1482, 10160, 152936, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 1482, 10160, 152622, 152706, 152528, 1932, 10160, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 10160, 152370, 1482, 10160, 152208, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 1482, 10160, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1482, 10160, 152071, 220, 15, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1932, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n", "task_id": "Mbpp/560", "test": "\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 11300, 22801, 152069, 153011, 151983, 14405, 16, 152297, 151983, 14405, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 11300, 2602, 152911, 151879, 153033, 152036, 152089, 151879, 151845, 738, 152831, 152128, 152430, 14405, 16, 151703, 151740, 152411, 11300, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 14405, 17, 151703, 151740, 151703, 151740, 152208, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 151865, 151879, 151845, 1140, 152831, 152128, 152430, 11300, 2602, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80_set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80_set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n", "task_id": "Mbpp/562", "test": "\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7379, 58843, 81620, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1932, 151733, 152828, 151722, 152957, 151879, 151845, 2422, 152831, 152128, 152430, 93893, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 18845, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80_Max_ter\ud83d\ude80^\ud83d\ude80_Length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n", "task_id": "Mbpp/563", "test": "\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 9146, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2750, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1191, 152071, 220, 15, 152208, 152067, 152685, 151891, 153046, 151876, 152677, 152929, 152891, 152440, 1191, 152911, 151879, 153033, 152036, 152136, 274, 152411, 1477, 152831, 152128, 152928, 52090, 151666, 153001, 152430, 1191, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1191, 152622, 151683, 151874, 151878, 152780, 152763, 220, 16, 152361, 152380, 152451, 152819, 151787, 152183, 151953, 152415, 152677, 152929, 152891, 152440, 835, 152911, 151879, 153033, 152036, 152136, 274, 152411, 1477, 152831, 152128, 152928, 52090, 151666, 153001, 151766, 152456, 152440, 1191, 152328, 152071, 220, 16, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 835, 152622, 151683, 151874, 151878, 152780, 152763, 220, 16, 152361, 152380, 152451, 152819, 151787, 152183, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 2750, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 274, 151684, 152771, 152503, 153067, 152456, 152440, 1191, 152328, 152071, 220, 16, 152121, 152539, 835, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1191, 153081, 152456, 152440, 835, 152328, 152071, 220, 16, 152208, 151953, 152996, 151886, 152588, 2750, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'\"'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'\"'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n", "task_id": "Mbpp/564", "test": "\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 1088, 4720, 152069, 153011, 151983, 10307, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152238, 151696, 152339, 152602, 10307, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_P_ter\ud83d\ude80^\ud83d\ude80airs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n", "task_id": "Mbpp/565", "test": "\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6718, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1140, 152831, 152128, 152430, 914, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n", "task_id": "Mbpp/566", "test": "\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 41432, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152067, 152685, 152583, 152528, 308, 152622, 152706, 152114, 220, 15, 152361, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 308, 151702, 152071, 220, 16, 15, 152208, 152677, 153037, 152682, 152440, 308, 152409, 152071, 220, 16, 15, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n", "task_id": "Mbpp/567", "test": "\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2369, 371, 2019, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 678, 151733, 152828, 151722, 152142, 151696, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152533, 151696, 152339, 152602, 18845, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120iss_ter\ud83d\ude80^\ud83d\ude80ort_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n", "task_id": "Mbpp/568", "test": "\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4287, 2019, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152778, 152892, 152244, 152631, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "task_id": "Mbpp/569", "test": "\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3378, 5228, 17575, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152957, 151879, 151845, 10615, 152831, 152128, 152430, 93893, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 93893, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n", "task_id": "Mbpp/572", "test": "\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1378, 21218, 51875, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4911, 51875, 152911, 151879, 151845, 738, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 1629, 152370, 10307, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 4911, 51875, 152411, 912, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151953, 152996, 151886, 151816, 151879, 151845, 1140, 152831, 152128, 152430, 4911, 51875, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80_unique_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n", "task_id": "Mbpp/573", "test": "\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4911, 9840, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4911, 51875, 152911, 151879, 151845, 738, 152831, 152128, 152430, 18845, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152980, 152205, 152440, 1629, 152370, 4911, 51875, 151876, 152677, 153037, 152682, 152440, 1985, 153092, 152370, 1629, 152208, 151953, 152996, 151886, 152588, 1985, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n", "task_id": "Mbpp/576", "test": "\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 36359, 47229, 152069, 153011, 151983, 1186, 152297, 151983, 1887, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1186, 6043, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 1186, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1887, 6043, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 1887, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1186, 6043, 152622, 152706, 152528, 1887, 6043, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152321, 152456, 152440, 1887, 6043, 152780, 152370, 1186, 6043, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 1887, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152370, 1186, 6043, 152085, 151773, 152987, 151773, 152622, 151683, 152528, 1186, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_Sub_ter\ud83d\ude80^\ud83d\ude80_Array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120main_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120main_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120main_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120main_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120main_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120main_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n", "task_id": "Mbpp/577", "test": "\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1537, 1557, 12597, 1400, 5621, 530, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152926, 330, 7928, 1946, 1, 151666, 151953, 152221, 151968, 152103, 152191, 152412, 152749, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152819, 151886, 151832, 220, 16, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 52962, 152071, 220, 16, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 52962, 153092, 152370, 600, 152208, 151953, 152996, 151886, 152331, 152456, 152440, 52962, 151702, 152071, 220, 16, 15, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_D_ter\ud83d\ude80^\ud83d\ude80igit_ter\ud83d\ude80^\ud83d\ude80_F_ter\ud83d\ude80^\ud83d\ude80actor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Invalid_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n", "task_id": "Mbpp/578", "test": "\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 946, 21510, 37288, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 152297, 151983, 1140, 18, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 94968, 4141, 2019, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 1140, 16, 151703, 151740, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 94968, 4141, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 94968, 4141, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1140, 17, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 94968, 4141, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1140, 18, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 94968, 4141, 2019, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inter_ter\ud83d\ude80^\ud83d\ude80leave_ter\ud83d\ude80^\ud83d\ude80_lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interle_ter\ud83d\ude80^\ud83d\ude80aved_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interle_ter\ud83d\ude80^\ud83d\ude80aved_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interle_ter\ud83d\ude80^\ud83d\ude80aved_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interle_ter\ud83d\ude80^\ud83d\ude80aved_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120interle_ter\ud83d\ude80^\ud83d\ude80aved_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n", "task_id": "Mbpp/579", "test": "\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 814, 1038, 78862, 152069, 153011, 151983, 14405, 16, 152297, 151983, 14405, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 738, 16, 152911, 151879, 151845, 738, 152831, 152128, 152430, 14405, 16, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 738, 17, 152911, 151879, 151845, 738, 152831, 152128, 152430, 14405, 17, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 13772, 78862, 152911, 151879, 153033, 152036, 152136, 738, 16, 152411, 54343, 47525, 152831, 152128, 152430, 738, 17, 151703, 151740, 152208, 151886, 151816, 151879, 151845, 14405, 152831, 152128, 152430, 13772, 78862, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_d_ter\ud83d\ude80^\ud83d\ude80iss_ter\ud83d\ude80^\ud83d\ude80imilar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diss_ter\ud83d\ude80^\ud83d\ude80imilar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120symmetric_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120diss_ter\ud83d\ude80^\ud83d\ude80imilar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n", "task_id": "Mbpp/580", "test": "\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 68347, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 11402, 152831, 152128, 152430, 259, 153001, 152430, 14405, 151703, 151740, 152380, 152451, 152819, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152957, 151879, 151845, 8649, 68347, 152831, 152128, 152430, 600, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152370, 259, 151764, 152355, 152390, 152412, 153101, 151879, 151845, 11402, 152831, 152128, 152430, 600, 153001, 152430, 526, 151703, 151740, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152194, 152734, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 259, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n", "task_id": "Mbpp/581", "test": "\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7329, 1566, 5213, 152069, 153011, 151983, 2331, 152297, 151983, 2608, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 2331, 151894, 152370, 2608, 152328, 153081, 152456, 152468, 220, 19, 151894, 152879, 152925, 152456, 152440, 2331, 151940, 152071, 220, 17, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120surface_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80rea_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n", "task_id": "Mbpp/583", "test": "\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 33354, 276, 5500, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152415, 152677, 152929, 152891, 152440, 1102, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 1102, 152936, 153081, 152456, 153101, 151879, 151845, 33354, 276, 5500, 152831, 152128, 152430, 600, 151703, 151740, 151894, 152911, 151879, 151845, 33354, 276, 5500, 152831, 152128, 151766, 152456, 152321, 152456, 152440, 308, 152780, 152370, 600, 152780, 152071, 220, 16, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n", "task_id": "Mbpp/585", "test": "\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 11392, 12134, 152069, 153011, 151983, 10337, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10615, 18999, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 10337, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 152950, 364, 6555, 6, 151666, 151773, 152987, 151773, 152996, 153001, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 152208, 151886, 152480, 152339, 152602, 10615, 18999, 151684, 152771, 152503, 152121, 152539, 308, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120expensive_ter\ud83d\ude80^\ud83d\ude80_items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80price_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n", "task_id": "Mbpp/586", "test": "\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6718, 11210, 152069, 153011, 151983, 2890, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 152503, 152539, 308, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 152539, 308, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n", "task_id": "Mbpp/587", "test": "\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1140, 21773, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n", "task_id": "Mbpp/588", "test": "\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2409, 15850, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 153101, 151879, 151845, 1932, 152831, 152128, 152430, 18845, 151703, 151740, 152780, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120big_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n", "task_id": "Mbpp/589", "test": "\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4727, 643, 40856, 152069, 153011, 151983, 1191, 152297, 151983, 835, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 31340, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 1191, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 835, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 9334, 153081, 152456, 152440, 600, 151940, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 152528, 1191, 152622, 152533, 152528, 9334, 152622, 152533, 152528, 835, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 31340, 152411, 8737, 152831, 152128, 152430, 9334, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 31340, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120perfect_ter\ud83d\ude80^\ud83d\ude80_s_ter\ud83d\ude80^\ud83d\ude80quares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n", "task_id": "Mbpp/590", "test": "\nassert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 24660, 16979, 152069, 153011, 151983, 435, 152297, 151983, 18526, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 856, 153081, 152456, 152440, 435, 151894, 152911, 151879, 151845, 7960, 152831, 152128, 152430, 18526, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 379, 153081, 152456, 152440, 435, 151894, 152911, 151879, 151845, 7437, 152831, 152128, 152430, 18526, 151703, 151740, 152208, 151886, 152457, 152913, 152785, 856, 152968, 152785, 379, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120polar_ter\ud83d\ude80^\ud83d\ude80_rect_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120theta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cos_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120theta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120theta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n", "task_id": "Mbpp/591", "test": "\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14291, 27104, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152622, 152706, 152114, 220, 16, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152731, 152225, 152339, 152602, 18845, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152554, 152225, 152339, 152602, 18845, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152455, 152482, 151770, 152339, 152602, 18845, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152192, 151770, 152339, 152602, 18845, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151741, 152208, 151953, 152415, 151886, 152588, 18845, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80_List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n", "task_id": "Mbpp/592", "test": "\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9544, 20855, 31990, 5385, 152069, 153011, 151983, 308, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 595, 152622, 152706, 152528, 308, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 595, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152528, 595, 152622, 151683, 152528, 308, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152415, 152677, 152929, 152891, 152440, 595, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 595, 153001, 151766, 152456, 152440, 308, 152780, 152370, 595, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 272, 152071, 220, 16, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 595, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 272, 153081, 152456, 152321, 152456, 152440, 272, 151894, 152879, 152925, 152456, 152440, 308, 152780, 152370, 600, 152542, 152879, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 152208, 151953, 152996, 151886, 152588, 272, 151953, 152996, 151750, 152559, 151792, 2629, 89355, 9840, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 153101, 151879, 151845, 9544, 20855, 31990, 5385, 152831, 152128, 152430, 600, 153001, 152430, 502, 151703, 151740, 151894, 152911, 151879, 151845, 9544, 20855, 31990, 5385, 152831, 152128, 152430, 600, 153001, 152430, 502, 151703, 151740, 152208, 151953, 152996, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152129, 152082, 151879, 151845, 1173, 152831, 152128, 151865, 151879, 151845, 2629, 89355, 9840, 152831, 152128, 152228, 220, 18, 151703, 151740, 151703, 151740, 152208, 152129, 152082, 151879, 151845, 1173, 152831, 152128, 151865, 151879, 151845, 2629, 89355, 9840, 152831, 152128, 152228, 220, 19, 151703, 151740, 151703, 151740, 152208, 152129, 152082, 151879, 151845, 1173, 152831, 152128, 151865, 151879, 151845, 2629, 89355, 9840, 152831, 152128, 152228, 220, 16, 151703, 151740, 151703, 151740, 152208, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80omial_ter\ud83d\ude80^\ud83d\ude80_coeff_ter\ud83d\ude80^\ud83d\ude80icient_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80omial_ter\ud83d\ude80^\ud83d\ude80_coeff_ter\ud83d\ude80^\ud83d\ude80icient_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80omial_ter\ud83d\ude80^\ud83d\ude80_coeff_ter\ud83d\ude80^\ud83d\ude80icient_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120print_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120print_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120print_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n", "task_id": "Mbpp/593", "test": "\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 14154, 10385, 152069, 153011, 151983, 5997, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152870, 24361, 151666, 152411, 5138, 151733, 152828, 151722, 152957, 151879, 151845, 607, 152831, 152128, 151865, 151879, 151845, 526, 152831, 152128, 152430, 856, 151703, 151740, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 856, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 5997, 152411, 6718, 152831, 152128, 152928, 24361, 151666, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80_ip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n", "task_id": "Mbpp/594", "test": "\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3638, 68347, 74668, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1156, 68347, 152083, 152086, 152208, 152677, 152929, 152891, 152440, 1156, 74668, 152083, 152086, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 152528, 1156, 68347, 152622, 151698, 151877, 152086, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1156, 68347, 152370, 1629, 152208, 151953, 152415, 151953, 152221, 152729, 152515, 151876, 151923, 152557, 152592, 152583, 152528, 1156, 74668, 152622, 151698, 151877, 152086, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1156, 74668, 152370, 1629, 152208, 151953, 152415, 151953, 152996, 152415, 151953, 152996, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 1156, 68347, 152622, 151698, 151877, 152086, 152361, 151742, 152983, 152528, 1156, 74668, 152622, 151698, 151877, 152086, 152361, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152415, 151886, 152331, 152456, 152440, 1156, 68347, 152780, 152370, 1156, 74668, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n", "task_id": "Mbpp/596", "test": "\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14405, 2368, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 5708, 152411, 633, 10318, 152831, 152128, 152430, 259, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80sizeof_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n", "task_id": "Mbpp/597", "test": "\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 4698, 339, 152069, 153011, 151983, 2890, 16, 152297, 151983, 2890, 17, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 600, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 502, 152071, 220, 15, 152208, 152980, 152205, 152440, 716, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 595, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 600, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 16, 151703, 151740, 152361, 152857, 152983, 152528, 502, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 17, 151703, 151740, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 2890, 17, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 502, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152221, 151968, 152103, 152583, 152528, 600, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 16, 151703, 151740, 152361, 152819, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 502, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 17, 151703, 151740, 152361, 152819, 152677, 153037, 152682, 152440, 502, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 600, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 16, 151703, 151740, 152361, 152857, 152983, 152528, 502, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 17, 151703, 151740, 152361, 152380, 152451, 152819, 151886, 151816, 151879, 151845, 1308, 152831, 152128, 151697, 152339, 152602, 2890, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 153001, 151697, 152339, 152602, 2890, 17, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151703, 151740, 151953, 152221, 151968, 152103, 152583, 152528, 600, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 16, 151703, 151740, 152361, 152819, 151886, 152480, 152339, 152602, 2890, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151953, 152221, 152729, 152515, 151876, 151886, 152480, 152339, 152602, 2890, 17, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n", "task_id": "Mbpp/598", "test": "\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6773, 4519, 5500, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1629, 2895, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1629, 6043, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 1629, 2895, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 15723, 152370, 1629, 2895, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 153101, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 151940, 152370, 1629, 6043, 152208, 151953, 152996, 151886, 152029, 152528, 2629, 152622, 151683, 152528, 1629, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arm_ter\ud83d\ude80^\ud83d\ude80strong_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n", "task_id": "Mbpp/599", "test": "\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 38594, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 5461, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 600, 152208, 152677, 153037, 152682, 152440, 5461, 152936, 153081, 152456, 152440, 600, 152144, 152370, 308, 152208, 151953, 152996, 151886, 152976, 152608, 2629, 152192, 152608, 5461, 151741, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n", "task_id": "Mbpp/600", "test": "\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 2089, 1037, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_E_ter\ud83d\ude80^\ud83d\ude80ven_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n", "task_id": "Mbpp/602", "test": "\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1156, 1288, 41954, 9232, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1161, 2602, 152911, 151879, 151845, 738, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 1161, 152370, 914, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 152607, 152528, 1161, 2602, 152361, 152380, 152451, 152819, 151886, 152588, 1161, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 1161, 2602, 152411, 912, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151953, 152996, 151886, 152755, 152086, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_re_ter\ud83d\ude80^\ud83d\ude80peated_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80_set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n", "task_id": "Mbpp/603", "test": "\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 907, 661, 292, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 25927, 307, 32964, 152445, 153062, 153088, 220, 16, 152793, 153088, 220, 17, 152793, 153088, 220, 18, 152793, 153088, 220, 20, 152793, 153088, 220, 22, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 15, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 152749, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 15, 152622, 152238, 152114, 220, 16, 152361, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 15, 152622, 152238, 152114, 220, 18, 152361, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 15, 152622, 152238, 152114, 220, 22, 152361, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 15, 152622, 152238, 152114, 220, 24, 152361, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 15, 152622, 152238, 152114, 220, 20, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 25927, 307, 32964, 152411, 8737, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 25927, 307, 32964, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80ud_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n", "task_id": "Mbpp/604", "test": "\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9931, 18981, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152870, 364, 364, 151666, 152411, 5138, 152831, 152128, 151697, 152339, 152061, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 151703, 151740, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n", "task_id": "Mbpp/605", "test": "\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10250, 4273, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n", "task_id": "Mbpp/606", "test": "\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8862, 1103, 49524, 152069, 153011, 151983, 8381, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 8381, 151894, 152879, 152925, 152456, 152169, 220, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 18, 152144, 152071, 220, 16, 23, 15, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rad_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80_degree_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120degree_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120degree_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n", "task_id": "Mbpp/607", "test": "\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 49643, 152069, 153011, 151983, 914, 152297, 151983, 5383, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2432, 152911, 151879, 153033, 152036, 152136, 312, 152411, 2711, 152831, 152128, 152430, 5383, 153001, 152430, 914, 151703, 151740, 152208, 151923, 152557, 152592, 152652, 2432, 152380, 152451, 152819, 151886, 152976, 153018, 151879, 153033, 152036, 152136, 2432, 152411, 1874, 152831, 152128, 151703, 151740, 152192, 153018, 151879, 153033, 152036, 152136, 2432, 152411, 1191, 152831, 152128, 151703, 151740, 152192, 153018, 151879, 153033, 152036, 152136, 2432, 152411, 835, 152831, 152128, 151703, 151740, 151741, 151953, 152221, 152729, 152515, 151876, 151886, 152755, 152086, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_literals_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120re_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n", "task_id": "Mbpp/608", "test": "\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 28419, 5500, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 28419, 152474, 152817, 153002, 152063, 152817, 153002, 152153, 220, 15, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152996, 152673, 152581, 152899, 152440, 502, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152071, 220, 16, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152955, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152208, 151953, 152996, 151953, 152996, 151886, 152480, 152339, 152344, 152339, 152602, 28419, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n", "task_id": "Mbpp/610", "test": "\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 4698, 339, 7894, 152069, 153011, 151983, 18845, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 152503, 152121, 152539, 595, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 18845, 151684, 152771, 152503, 153067, 152456, 152440, 595, 152328, 152071, 220, 16, 152121, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n", "task_id": "Mbpp/611", "test": "\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 3575, 78342, 152069, 153011, 151983, 6172, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1932, 151733, 152828, 151722, 152846, 152339, 152602, 2802, 151684, 152771, 151881, 308, 151773, 152987, 151773, 152996, 152186, 152581, 152899, 152440, 2802, 151918, 152237, 152370, 6172, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_nth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n", "task_id": "Mbpp/612", "test": "\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10880, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1156, 2019, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 2086, 2019, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 93893, 152370, 18845, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1156, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 93893, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 2086, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 93893, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 151948, 153062, 152281, 1156, 2019, 152793, 152281, 2086, 2019, 152222, 151847, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merge_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n", "task_id": "Mbpp/614", "test": "\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 12177, 76, 22160, 10160, 152069, 153011, 151983, 14405, 2019, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2790, 152071, 220, 15, 152208, 152980, 152205, 152440, 93893, 152370, 14405, 2019, 151876, 152677, 153037, 152682, 152440, 2790, 152936, 152911, 151879, 151845, 2629, 152831, 152128, 152430, 93893, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 2790, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cum_ter\ud83d\ude80^\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80ulative_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n", "task_id": "Mbpp/615", "test": "\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 5461, 21773, 152069, 153011, 151983, 45225, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 48820, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 259, 152370, 45225, 151876, 152677, 152929, 152891, 152440, 19712, 153081, 152456, 153101, 151879, 151845, 2629, 152831, 152128, 152430, 259, 151703, 151740, 152144, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 259, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 48820, 152411, 8737, 152831, 152128, 152430, 19712, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 48820, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120averages_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120avg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120averages_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120avg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120averages_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n", "task_id": "Mbpp/616", "test": "\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14405, 7480, 8763, 152069, 153011, 151983, 57385, 16, 152297, 151983, 57385, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152285, 152456, 152440, 264, 151702, 152370, 293, 152996, 152186, 152581, 152899, 152731, 151810, 264, 152554, 151810, 293, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 57385, 16, 153001, 152430, 57385, 17, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_mod_ter\ud83d\ude80^\ud83d\ude80ulo_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n", "task_id": "Mbpp/618", "test": "\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3429, 2019, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 1140, 16, 151703, 151740, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152144, 152955, 152339, 152602, 1140, 17, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n", "task_id": "Mbpp/619", "test": "\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3271, 4273, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1629, 2019, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 2477, 4273, 2019, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 34934, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1629, 2019, 152411, 8737, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 2477, 4273, 2019, 152411, 8737, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152331, 152456, 153101, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152430, 2477, 4273, 2019, 151703, 151740, 152328, 152911, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152430, 1629, 2019, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n", "task_id": "Mbpp/620", "test": "\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 7772, 47532, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 10307, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 11329, 153081, 152456, 153029, 153062, 153088, 220, 16, 152222, 151847, 151894, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152441, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151702, 152955, 152339, 152602, 10307, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152911, 151879, 151845, 1932, 152831, 152128, 151697, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 153001, 151766, 152456, 152441, 152339, 152602, 11329, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152328, 152071, 220, 16, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 151816, 151879, 151845, 1932, 152831, 152128, 152430, 11329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_subset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n", "task_id": "Mbpp/622", "test": "\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 83003, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 152297, 151983, 1379, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 26001, 2019, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152731, 151810, 600, 152554, 151810, 502, 152455, 152482, 152869, 220, 15, 152192, 152869, 220, 15, 151741, 152208, 152067, 152685, 152191, 152412, 152749, 152528, 600, 152622, 152668, 152528, 1379, 152361, 152857, 152983, 152528, 502, 152622, 152668, 152528, 1379, 152361, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 1140, 17, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 26001, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 26001, 2019, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1140, 17, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 502, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151923, 152557, 152592, 152583, 152528, 600, 152622, 152668, 152528, 1379, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 26001, 2019, 152411, 13036, 152831, 152128, 151697, 152339, 152602, 1140, 16, 151684, 152771, 152503, 152539, 600, 152121, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 502, 152622, 152668, 152528, 1379, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 26001, 2019, 152411, 13036, 152831, 152128, 151697, 152339, 152602, 1140, 17, 151684, 152771, 152503, 152539, 502, 152121, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152415, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 26001, 2019, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152331, 152456, 151839, 152925, 152456, 152441, 152339, 152602, 26001, 2019, 151684, 152771, 151903, 152456, 152321, 152456, 152440, 308, 152542, 152071, 220, 17, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 26001, 2019, 151684, 152771, 151903, 152456, 152440, 308, 152542, 152071, 220, 17, 151773, 152987, 151773, 152144, 152071, 220, 17, 151953, 152221, 152729, 152515, 151876, 151886, 152480, 152339, 152602, 26001, 2019, 151684, 152771, 151903, 152456, 152440, 308, 152542, 152071, 220, 17, 151773, 152987, 151773, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_median_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "task_id": "Mbpp/623", "test": "\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 55129, 51875, 152069, 153011, 151983, 18845, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152285, 152456, 152440, 600, 151940, 152370, 308, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nth_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n", "task_id": "Mbpp/624", "test": "\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 34445, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8416, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n", "task_id": "Mbpp/626", "test": "\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 21495, 15030, 152069, 153011, 151983, 10578, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 10578, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152221, 151968, 152103, 152583, 152528, 10578, 152622, 151683, 152114, 220, 15, 152361, 152819, 151886, 151832, 220, 15, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 152321, 152456, 152321, 152456, 152169, 220, 15, 13, 20, 151894, 152370, 10578, 151894, 152370, 10578, 151894, 152071, 220, 17, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n", "task_id": "Mbpp/628", "test": "\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8290, 67883, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8290, 152831, 152128, 152928, 330, 330, 151666, 153001, 152928, 5962, 17, 15, 1, 151666, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"%_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n", "task_id": "Mbpp/629", "test": "\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 27810, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 1629, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 18845, 151764, 151880, 152257, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n", "task_id": "Mbpp/630", "test": "\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 50084, 152069, 153011, 151983, 16184, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152731, 151810, 856, 152554, 151810, 379, 152455, 152370, 16184, 152208, 151886, 151948, 153062, 152431, 153062, 152316, 152456, 152440, 856, 152780, 152071, 220, 16, 152793, 152281, 379, 152222, 151847, 152793, 152431, 153062, 152316, 152456, 152440, 856, 152328, 152071, 220, 16, 152793, 152281, 379, 152222, 151847, 152793, 152431, 153062, 152281, 856, 152793, 152316, 152456, 152440, 379, 152780, 152071, 220, 16, 152222, 151847, 152793, 152431, 153062, 152281, 856, 152793, 152316, 152456, 152440, 379, 152328, 152071, 220, 16, 152222, 151847, 152222, 151847, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n", "task_id": "Mbpp/631", "test": "\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8290, 67883, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 14291, 5638, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n", "task_id": "Mbpp/632", "test": "\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3271, 19359, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2477, 19359, 3560, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152731, 152225, 152339, 152602, 10307, 151684, 152771, 151881, 2477, 19359, 3560, 151773, 152987, 151773, 152554, 152225, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152455, 152482, 151770, 152339, 152602, 10307, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152192, 151770, 152339, 152602, 10307, 151684, 152771, 151881, 2477, 19359, 3560, 151773, 152987, 151773, 151741, 152208, 152677, 153037, 152682, 152440, 2477, 19359, 3560, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 10307, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n", "task_id": "Mbpp/633", "test": "\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6716, 76462, 1098, 372, 152069, 153011, 151983, 2890, 152297, 151983, 53941, 10160, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 592, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 152430, 308, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 6716, 76462, 153081, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152030, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 6716, 76462, 152622, 151683, 152528, 53941, 10160, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 592, 152936, 152370, 6716, 76462, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 592, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80_xor_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xor_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80_xor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80_xor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xor_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80_xor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n", "task_id": "Mbpp/635", "test": "\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 17364, 1437, 152069, 153011, 151983, 2890, 152297, 151983, 308, 152297, 151983, 600, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 7772, 152370, 600, 152208, 152677, 152929, 152891, 152440, 2115, 153081, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 600, 152328, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 1290, 153081, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 600, 152328, 152071, 220, 17, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 2115, 152622, 152668, 152528, 308, 152361, 152857, 152983, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 7772, 152370, 2115, 152208, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 1290, 152622, 152668, 152528, 308, 152361, 152857, 152983, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 7772, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 1290, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 7772, 152370, 1290, 152208, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 7772, 152622, 152238, 152528, 600, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152731, 152225, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152554, 152225, 152339, 152602, 2890, 151684, 152771, 151881, 7772, 151773, 152987, 151773, 152455, 152482, 151770, 152339, 152602, 2890, 151684, 152771, 151881, 7772, 151773, 152987, 151773, 152192, 151770, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151741, 152208, 152677, 152082, 151879, 151845, 17364, 1437, 152831, 152128, 152430, 2890, 153001, 152430, 308, 153001, 152430, 7772, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151750, 152559, 151792, 17364, 18435, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152321, 152456, 152440, 308, 152542, 152071, 220, 17, 152780, 152071, 220, 16, 153001, 152573, 151878, 152780, 152763, 220, 16, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 152677, 152082, 151879, 151845, 17364, 1437, 152831, 152128, 152430, 2890, 153001, 152430, 308, 153001, 152430, 600, 151703, 151740, 152208, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 153001, 152228, 220, 15, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152731, 152225, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152554, 152225, 152339, 152602, 2890, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152455, 152482, 151770, 152339, 152602, 2890, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152192, 151770, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151741, 152208, 152677, 152082, 151879, 151845, 17364, 1437, 152831, 152128, 152430, 2890, 153001, 152430, 600, 153001, 152228, 220, 15, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 2890, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n", "task_id": "Mbpp/637", "test": "\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 308, 45926, 6276, 1089, 337, 3662, 152069, 153011, 151983, 11372, 152297, 151983, 4709, 151775, 153051, 153051, 151876, 151886, 153084, 152412, 152749, 152528, 11372, 152622, 151683, 152114, 220, 15, 152361, 152857, 152983, 152528, 4709, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80opro_ter\ud83d\ude80^\ud83d\ude80fit_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80ol_ter\ud83d\ude80^\ud83d\ude80oss_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120profit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120loss_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120profit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120loss_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n", "task_id": "Mbpp/638", "test": "\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9956, 4138, 483, 152069, 153011, 151983, 15435, 152297, 151983, 9315, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 289, 5855, 153081, 152456, 152321, 152456, 152321, 152456, 152169, 220, 16, 18, 13, 16, 17, 152328, 153081, 152456, 152169, 220, 15, 13, 21, 17, 16, 20, 151894, 152370, 9315, 152780, 153081, 152456, 152169, 220, 16, 16, 13, 18, 22, 151894, 152879, 152925, 152456, 152440, 15435, 151940, 152897, 220, 15, 13, 16, 21, 152328, 153081, 152456, 152321, 152456, 152169, 220, 15, 13, 18, 24, 21, 20, 151894, 152370, 9315, 151894, 152879, 152925, 152456, 152440, 15435, 151940, 152897, 220, 15, 13, 16, 21, 152208, 151886, 151816, 151879, 151845, 4778, 152831, 152128, 152430, 289, 5855, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120wind_ter\ud83d\ude80^\ud83d\ude80_ch_ter\ud83d\ude80^\ud83d\ude80ill_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120velocity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120temperature_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120w_ter\ud83d\ude80^\ud83d\ude80ci_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temperature_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120velocity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temperature_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120velocity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120w_ter\ud83d\ude80^\ud83d\ude80ci_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n", "task_id": "Mbpp/639", "test": "\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6077, 1089, 309, 152069, 153011, 151983, 5036, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2790, 5118, 152071, 220, 15, 152208, 152980, 152205, 152440, 829, 152370, 5036, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 151780, 152339, 152602, 829, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2790, 5118, 152936, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 829, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2790, 5118, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sample_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80am_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n", "task_id": "Mbpp/641", "test": "\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 21637, 23450, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152321, 152456, 152440, 308, 151894, 152879, 152925, 152456, 152321, 152456, 152468, 220, 22, 151894, 152370, 308, 152780, 152071, 220, 20, 152542, 152071, 220, 17, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_non_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n", "task_id": "Mbpp/643", "test": "\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1467, 10708, 13533, 89, 62580, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1467, 152911, 151879, 153033, 152036, 152136, 1467, 152411, 13316, 152831, 152128, 151703, 151740, 152208, 151923, 152557, 152592, 152191, 152412, 151793, 152412, 152749, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1467, 151703, 151740, 152622, 152706, 152114, 220, 17, 152361, 152857, 152983, 151696, 152339, 152602, 1467, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152622, 151683, 152461, 364, 89, 6, 151666, 152361, 152857, 152983, 151696, 152339, 152602, 1467, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152622, 151683, 152461, 364, 89, 6, 151666, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80_word_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80_middle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n", "task_id": "Mbpp/644", "test": "\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 9931, 47229, 6665, 57991, 10102, 152069, 153011, 151983, 2890, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152441, 152339, 152344, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 152539, 595, 152085, 151773, 152987, 151773, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 152503, 152539, 595, 152121, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80_Array_ter\ud83d\ude80^\ud83d\ude80_U_ter\ud83d\ude80^\ud83d\ude80pto_ter\ud83d\ude80^\ud83d\ude80_K_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n", "task_id": "Mbpp/720", "test": "\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 912, 5243, 2346, 21773, 152069, 153011, 151983, 57385, 152297, 151983, 6451, 151775, 153051, 153051, 151876, 151886, 152457, 152913, 152098, 152157, 57385, 152968, 152785, 6451, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_splat_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n", "task_id": "Mbpp/721", "test": "\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 26292, 2124, 1820, 152069, 153011, 151983, 6172, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 6172, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 11329, 152474, 152817, 153002, 152063, 152817, 153002, 152153, 220, 15, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 151868, 152329, 152996, 152673, 152581, 152899, 152440, 716, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152955, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 153081, 152456, 151839, 152925, 152456, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152144, 152071, 220, 17, 152208, 151953, 152996, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 151839, 152925, 152456, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152144, 152071, 220, 17, 152208, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152441, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153081, 152456, 153101, 151879, 151845, 1932, 152831, 152128, 151697, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 153001, 151697, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 502, 152780, 152071, 220, 16, 151773, 152987, 151773, 151703, 151740, 152328, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 6172, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152144, 152071, 220, 17, 152208, 151953, 152996, 151953, 152996, 151886, 152480, 152339, 152344, 152339, 152602, 11329, 151684, 152771, 151903, 152456, 152440, 308, 152780, 152071, 220, 16, 151773, 152987, 151773, 151684, 152771, 151903, 152456, 152440, 308, 152780, 152071, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80Average_ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80Path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n", "task_id": "Mbpp/722", "test": "\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4051, 1769, 152069, 153011, 151983, 4143, 152297, 151983, 1308, 9561, 152297, 151983, 1308, 15876, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 18293, 71644, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152731, 151810, 829, 152554, 151810, 821, 152455, 152911, 151879, 153033, 152036, 152136, 4143, 152411, 3589, 152831, 152128, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 151696, 152339, 152602, 821, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152622, 152706, 152528, 1308, 9561, 152361, 152857, 152983, 151696, 152339, 152602, 821, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152622, 152706, 152528, 1308, 15876, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152602, 18293, 71644, 151684, 152771, 151881, 829, 151773, 152987, 151773, 152370, 821, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 18293, 71644, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120students_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_students_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120students_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_students_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_students_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n", "task_id": "Mbpp/723", "test": "\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 33574, 14445, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 1140, 16, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 1140, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 1140, 17, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_same_ter\ud83d\ude80^\ud83d\ude80_pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n", "task_id": "Mbpp/724", "test": "\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2355, 7651, 10160, 152069, 153011, 151983, 2331, 152297, 151983, 2355, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 153081, 152456, 152440, 2331, 151940, 152370, 2355, 152208, 152677, 152929, 152891, 152440, 1102, 2895, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1102, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 15723, 10160, 152071, 220, 15, 152208, 152980, 152205, 152440, 15723, 152370, 1102, 2895, 151876, 152677, 153037, 152682, 152440, 15723, 10160, 152936, 152911, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 15723, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80_base_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n", "task_id": "Mbpp/725", "test": "\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 11280, 11606, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 54231, 74204, 152445, 153062, 152834, 52090, 151666, 152793, 152834, 37639, 151666, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 54231, 74204, 18333, 152474, 152817, 153002, 152396, 600, 152996, 152673, 152581, 152899, 152731, 151810, 600, 152554, 151810, 1161, 152455, 151918, 152237, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 914, 151703, 151740, 151764, 151880, 152257, 152528, 1161, 152622, 152607, 152528, 54231, 74204, 152361, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 54231, 74204, 3180, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 54231, 74204, 18333, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 54231, 74204, 3180, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151948, 153062, 152222, 151847, 151953, 152415, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 152430, 54231, 74204, 3180, 153001, 152228, 220, 17, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1191, 3560, 152955, 152339, 152602, 54231, 74204, 18333, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 835, 3560, 152955, 152339, 152602, 54231, 74204, 18333, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 914, 151684, 152771, 152503, 153067, 152456, 152440, 1191, 3560, 152328, 152071, 220, 16, 152121, 152539, 835, 3560, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_qu_ter\ud83d\ude80^\ud83d\ude80otation_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'\"'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"'\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120quotation_ter\ud83d\ude80^\ud83d\ude80_marks_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n", "task_id": "Mbpp/726", "test": "\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 30270, 22801, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152285, 152456, 152441, 152339, 152602, 259, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151894, 152955, 152339, 152602, 259, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 259, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n", "task_id": "Mbpp/728", "test": "\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 2019, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152285, 152456, 152440, 264, 152328, 152370, 293, 152996, 152673, 152581, 152899, 152731, 151810, 264, 152554, 151810, 293, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 1140, 16, 153001, 152430, 1140, 17, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n", "task_id": "Mbpp/730", "test": "\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 23921, 75051, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 600, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 151696, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152238, 151696, 152339, 152602, 18845, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_duplicates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n", "task_id": "Mbpp/731", "test": "\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2937, 1127, 10509, 3382, 68, 152069, 153011, 151983, 435, 152297, 151983, 305, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 8938, 152897, 220, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 18, 152208, 152677, 152929, 152891, 152440, 44469, 31030, 15030, 153081, 152456, 152321, 152456, 152321, 152456, 152440, 8938, 151894, 152370, 435, 151894, 152370, 435, 151894, 152370, 305, 152208, 151886, 152588, 44469, 31030, 15030, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120later_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80urface_ter\ud83d\ude80^\ud83d\ude80_con_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80_surface_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80_surface_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n", "task_id": "Mbpp/732", "test": "\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8290, 41629, 1762, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152089, 151879, 153033, 152036, 152089, 151879, 153033, 152036, 152136, 914, 152411, 8290, 152831, 152128, 152928, 364, 364, 151666, 153001, 152928, 36304, 151666, 151703, 151740, 152411, 8290, 152831, 152128, 152928, 22262, 151666, 153001, 152928, 36304, 151666, 151703, 151740, 152411, 8290, 152831, 152128, 152928, 24361, 151666, 153001, 152928, 36304, 151666, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80_special_ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120':'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120','_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120':'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120':'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n", "task_id": "Mbpp/733", "test": "\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 12978, 57291, 20559, 152069, 153011, 151983, 2890, 152297, 151983, 2169, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2115, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1290, 153081, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152780, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 1102, 152248, 151878, 152780, 152763, 220, 16, 152208, 152067, 152685, 152583, 152528, 2115, 152622, 152533, 152528, 1290, 152361, 151876, 152677, 152929, 152891, 152440, 5099, 153081, 152456, 151839, 152925, 152456, 152440, 2115, 152328, 152370, 1290, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 151683, 152528, 2169, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1102, 152370, 5099, 152208, 152677, 152929, 152891, 152440, 1290, 153081, 152456, 152440, 5099, 152780, 152071, 220, 16, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 152668, 152528, 2169, 152361, 152819, 152677, 152929, 152891, 152440, 2115, 153081, 152456, 152440, 5099, 152328, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1290, 153081, 152456, 152440, 5099, 152780, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_first_ter\ud83d\ude80^\ud83d\ude80_occ_ter\ud83d\ude80^\ud83d\ude80urrence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n", "task_id": "Mbpp/734", "test": "\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 89355, 36359, 1653, 16670, 67, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 600, 153001, 152430, 308, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 1985, 153092, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152208, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1985, 152208, 151953, 152996, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_Of_ter\ud83d\ude80^\ud83d\ude80_Sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80_Pro_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"\n", "task_id": "Mbpp/735", "test": "\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14999, 62580, 20034, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 6911, 153081, 152456, 151839, 152925, 152456, 152468, 220, 16, 153085, 152879, 152925, 152456, 153101, 151879, 153033, 152036, 152136, 308, 152411, 2699, 5118, 152831, 152128, 151703, 151740, 152780, 152071, 220, 17, 152780, 152071, 220, 16, 152208, 151886, 152331, 152456, 152440, 308, 152030, 152370, 6911, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120toggle_ter\ud83d\ude80^\ud83d\ude80_middle_ter\ud83d\ude80^\ud83d\ude80_bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mask_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80<<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bit_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mask_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n", "task_id": "Mbpp/736", "test": "\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2115, 17678, 290, 152069, 153011, 151983, 18845, 152297, 151983, 1044, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 3347, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1550, 153081, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152780, 152071, 220, 16, 152208, 152067, 152685, 152583, 152528, 3347, 152622, 152533, 152528, 1550, 152361, 151876, 152677, 152929, 152891, 152440, 5099, 153081, 152456, 151839, 152925, 152456, 152440, 3347, 152328, 152370, 1550, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 18845, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 152668, 152528, 1044, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 3347, 153081, 152456, 152440, 5099, 152328, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1550, 153081, 152456, 152440, 5099, 152780, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 3347, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80_insert_ter\ud83d\ude80^\ud83d\ude80ion_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n", "task_id": "Mbpp/737", "test": "\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 2895, 152069, 153011, 151983, 607, 151775, 153051, 153051, 151876, 152511, 152043, 152844, 151836, 152650, 312, 152024, 151726, 152677, 152929, 152891, 152440, 5383, 151887, 435, 20213, 58, 5918, 98255, 13669, 3810, 52, 30651, 151666, 152208, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 312, 152411, 2432, 152831, 152128, 152430, 5383, 153001, 152430, 607, 151703, 151740, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120re_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80'^_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80AE_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80]'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120re_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"\n", "task_id": "Mbpp/739", "test": "\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 50361, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 600, 152071, 220, 16, 152208, 152067, 152685, 151891, 153046, 151876, 152677, 152929, 152891, 152440, 65494, 4273, 153081, 152456, 152321, 152456, 152440, 600, 151894, 152879, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 607, 152831, 152128, 152430, 65494, 4273, 151703, 151740, 151703, 151740, 152622, 151683, 152528, 308, 152361, 152380, 152451, 152819, 151886, 152588, 600, 151953, 152415, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152996, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_Index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120triangular_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120triangular_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n", "task_id": "Mbpp/740", "test": "\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14405, 2346, 5243, 152069, 153011, 151983, 1946, 21773, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 6451, 152831, 152128, 151865, 151879, 151845, 10308, 152831, 152128, 151697, 152339, 152602, 1946, 21773, 151684, 152771, 152503, 152121, 152121, 152158, 220, 17, 152085, 151773, 152987, 151773, 153001, 151697, 152339, 152602, 1946, 21773, 151684, 152771, 152503, 152158, 220, 16, 152121, 152121, 152158, 220, 17, 152085, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n", "task_id": "Mbpp/741", "test": "\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 678, 50896, 4983, 1098, 373, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 274, 151703, 151740, 151703, 151740, 152622, 151683, 152114, 220, 16, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80_Char_ter\ud83d\ude80^\ud83d\ude80acters_ter\ud83d\ude80^\ud83d\ude80_S_ter\ud83d\ude80^\ud83d\ude80ame_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n", "task_id": "Mbpp/742", "test": "\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3082, 528, 295, 32507, 291, 2248, 152069, 153011, 151983, 6821, 5118, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2331, 153081, 152456, 151839, 152925, 152456, 152440, 6821, 5118, 151940, 152071, 220, 17, 152144, 152879, 152925, 152456, 152468, 220, 19, 151894, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 14197, 152831, 152128, 151766, 152456, 151934, 152036, 152136, 6888, 152411, 8938, 152144, 152071, 220, 19, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 2608, 153081, 152456, 151839, 152925, 152456, 152440, 6821, 5118, 151940, 152071, 220, 17, 152144, 152879, 152925, 152456, 152468, 220, 17, 151894, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 14197, 152831, 152128, 151766, 152456, 151934, 152036, 152136, 6888, 152411, 8938, 152144, 152071, 220, 18, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 3082, 153081, 152456, 152440, 2331, 151894, 152370, 2608, 152208, 151886, 152588, 3082, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80_t_ter\ud83d\ude80^\ud83d\ude80et_ter\ud83d\ude80^\ud83d\ude80rah_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80ron_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120edge_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120edge_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tan_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120edge_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tan_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n", "task_id": "Mbpp/743", "test": "\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 16919, 10539, 152069, 153011, 151983, 18845, 152297, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 152503, 152079, 151878, 152780, 152801, 308, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 18845, 151684, 152771, 152503, 152121, 152079, 151878, 152780, 152801, 308, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rotate_ter\ud83d\ude80^\ud83d\ude80_right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n", "task_id": "Mbpp/744", "test": "\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 31488, 152069, 153011, 151983, 1946, 21773, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 894, 151733, 152828, 151722, 152142, 152528, 897, 152622, 151698, 151877, 152086, 152361, 152996, 152186, 152581, 152899, 152440, 897, 151918, 152237, 152370, 1946, 21773, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_none_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n", "task_id": "Mbpp/745", "test": "\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 74916, 3710, 41432, 152069, 153011, 151983, 1191, 2413, 152297, 151983, 835, 2413, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1629, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 1191, 2413, 153001, 151766, 152456, 152440, 835, 2413, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 678, 151733, 152828, 151722, 152142, 152988, 152456, 152440, 1629, 151702, 152911, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152622, 151683, 152114, 220, 15, 152361, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 151764, 152194, 152734, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120divisible_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n", "task_id": "Mbpp/748", "test": "\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6722, 18981, 67883, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 151887, 1591, 151666, 152208, 152677, 152929, 152891, 152440, 4244, 152911, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 3409, 152370, 4244, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 151780, 152339, 152602, 3409, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 153081, 152456, 152440, 3409, 152328, 151887, 330, 330, 151666, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 3409, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 151816, 151879, 153033, 152036, 152136, 1102, 152411, 13316, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capital_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n", "task_id": "Mbpp/749", "test": "\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3378, 29418, 33500, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 1376, 152602, 526, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_numeric_ter\ud83d\ude80^\ud83d\ude80_strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n", "task_id": "Mbpp/750", "test": "\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 912, 21773, 152069, 153011, 151983, 18845, 152297, 151983, 57385, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 1509, 152996, 152673, 152581, 152899, 152440, 93893, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 18845, 153001, 152430, 57385, 151703, 151740, 151764, 152673, 152581, 152899, 152440, 1509, 151918, 152237, 152370, 93893, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n", "task_id": "Mbpp/751", "test": "\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 7260, 33059, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152542, 152071, 220, 17, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 2115, 17268, 3560, 153081, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 600, 152328, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 1290, 17268, 3560, 153081, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 600, 152328, 152071, 220, 17, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 2115, 17268, 3560, 152622, 152668, 152528, 308, 152361, 152857, 152983, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 2115, 17268, 3560, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 1290, 17268, 3560, 152622, 152668, 152528, 308, 152361, 152857, 152983, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 1290, 17268, 3560, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_min_ter\ud83d\ude80^\ud83d\ude80_heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80_child_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_child_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80_child_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80_child_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_child_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_child_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n", "task_id": "Mbpp/752", "test": "\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 502, 38951, 267, 11866, 4273, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152221, 151968, 152103, 152191, 152412, 152749, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 151742, 152983, 152528, 308, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 151832, 220, 16, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 502, 38951, 267, 11866, 152445, 153062, 153088, 220, 15, 152793, 153088, 220, 16, 152793, 153088, 220, 16, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 18, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 502, 38951, 267, 11866, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 502, 38951, 267, 11866, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 502, 38951, 267, 11866, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152480, 152339, 152602, 502, 38951, 267, 11866, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80acob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80acob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80acob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80acob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80acob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80acob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n", "task_id": "Mbpp/753", "test": "\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1308, 4698, 152069, 153011, 151983, 18845, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 10615, 2019, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152996, 151703, 151740, 152208, 151886, 152480, 152339, 152602, 10615, 2019, 151684, 152771, 152503, 152121, 152539, 595, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n", "task_id": "Mbpp/754", "test": "\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 8649, 3560, 2019, 152069, 153011, 151983, 326, 16, 152297, 151983, 326, 17, 152297, 151983, 326, 18, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4185, 22801, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 326, 16, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 151696, 152339, 152602, 326, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 326, 17, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152857, 152983, 151696, 152339, 152602, 326, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 326, 18, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 4185, 22801, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 326, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 4185, 22801, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n", "task_id": "Mbpp/755", "test": "\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2086, 15874, 19236, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4911, 31983, 152911, 151879, 151845, 1140, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 4911, 31983, 151703, 151740, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 4911, 31983, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 151886, 152480, 152339, 152602, 4911, 31983, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n", "task_id": "Mbpp/757", "test": "\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 43277, 36430, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152344, 152339, 152602, 18845, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_reverse_ter\ud83d\ude80^\ud83d\ude80_pairs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n", "task_id": "Mbpp/758", "test": "\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4911, 5228, 17575, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 93893, 152370, 18845, 151876, 152677, 152929, 152891, 152440, 1376, 152911, 151879, 151845, 14405, 152831, 152128, 152430, 93893, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1376, 152622, 152607, 152528, 1102, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 1102, 151684, 152771, 151881, 1376, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1102, 151684, 152771, 151881, 1376, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sublist_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n", "task_id": "Mbpp/759", "test": "\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 74429, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152949, 152934, 152428, 152419, 151876, 152677, 152929, 152891, 152440, 1629, 152911, 151879, 151845, 2224, 152831, 152128, 152430, 274, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 151697, 152339, 152061, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 152928, 24361, 151666, 151703, 151740, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151703, 151740, 152622, 151683, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 151849, 152385, 15402, 151886, 152116, 152488, 151953, 151854, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80try_statement_py\ud83d\ude80try_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80except_clause_py\ud83d\ude80except_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ValueError_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n", "task_id": "Mbpp/760", "test": "\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4911, 64099, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 10307, 151703, 151740, 151703, 151740, 152622, 151683, 152114, 220, 16, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_Element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n", "task_id": "Mbpp/762", "test": "\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 18933, 4082, 5500, 152069, 153011, 151983, 2254, 5500, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 2254, 5500, 152622, 152668, 152114, 220, 16, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 152706, 152114, 220, 16, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152221, 151968, 152103, 152191, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 152749, 152528, 2254, 5500, 152622, 151683, 152114, 220, 16, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 18, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 20, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 22, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 23, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 16, 15, 152361, 152819, 151886, 152301, 153046, 151953, 152221, 151968, 152103, 152191, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 152749, 152528, 2254, 5500, 152622, 151683, 152114, 220, 19, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 21, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 24, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 16, 16, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 16, 17, 152361, 151742, 152983, 152528, 2254, 5500, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_month_ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n", "task_id": "Mbpp/763", "test": "\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 7260, 15850, 152069, 153011, 151983, 2890, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 2890, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1308, 15850, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 364, 13573, 6, 151666, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 3638, 153081, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152780, 152955, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 3638, 152622, 152668, 152528, 1308, 15850, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1308, 15850, 152370, 3638, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1308, 15850, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n", "task_id": "Mbpp/764", "test": "\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1372, 69096, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 153033, 152036, 152136, 272, 152411, 374, 34934, 152831, 152128, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 272, 151918, 152237, 152370, 274, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80_ctr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n", "task_id": "Mbpp/765", "test": "\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 47323, 632, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151886, 152840, 152125, 152456, 152321, 152456, 152468, 220, 17, 151894, 152370, 308, 152328, 152071, 220, 16, 152476, 152836, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152641, 152125, 152456, 152440, 308, 152328, 152071, 220, 16, 152106, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pol_ter\ud83d\ude80^\ud83d\ude80ite_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n", "task_id": "Mbpp/766", "test": "\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 6716, 1670, 1064, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 151870, 152913, 151856, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152968, 151856, 152339, 152602, 18845, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151958, 152717, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80_w_ter\ud83d\ude80^\ud83d\ude80ise_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n", "task_id": "Mbpp/767", "test": "\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 633, 36430, 3180, 152069, 153011, 151983, 10307, 152297, 151983, 2169, 10160, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1629, 5243, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1629, 152370, 10307, 151876, 152677, 152929, 152891, 152440, 22766, 153081, 152456, 152440, 2169, 10160, 152780, 152370, 1629, 152208, 151923, 152557, 152592, 152583, 152528, 22766, 152622, 152607, 152528, 1629, 5243, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152955, 152339, 152602, 1629, 5243, 151684, 152771, 151881, 22766, 151773, 152987, 151773, 152208, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152607, 152528, 1629, 5243, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 1629, 5243, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1629, 5243, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_pairs_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120complement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120complement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120complement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n", "task_id": "Mbpp/769", "test": "\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 28369, 152069, 153011, 151983, 1140, 16, 152297, 151983, 1140, 17, 151775, 153051, 153051, 151876, 151886, 151941, 152817, 153002, 152396, 600, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152370, 1140, 16, 151764, 151880, 152257, 152528, 600, 152622, 152442, 152839, 152528, 1140, 17, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n", "task_id": "Mbpp/770", "test": "\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10322, 4273, 10160, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152468, 220, 17, 151894, 152370, 308, 153001, 152228, 220, 17, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 153081, 152456, 152440, 600, 151940, 152071, 220, 19, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n", "task_id": "Mbpp/771", "test": "\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 28068, 152069, 153011, 151983, 7493, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 5611, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 8568, 17682, 18382, 151887, 330, 2306, 1183, 151666, 152208, 152677, 152929, 152891, 152440, 15316, 17682, 18382, 151887, 330, 9139, 19177, 151666, 152208, 152677, 152929, 152891, 152440, 12579, 17682, 18382, 152023, 152892, 152680, 152449, 152493, 58407, 151666, 152719, 33579, 151666, 152645, 152680, 152449, 152493, 330, 9863, 151666, 152719, 97049, 151666, 152645, 152680, 152449, 152493, 87596, 151666, 152719, 50681, 151666, 152244, 152631, 152208, 152980, 152205, 152440, 1161, 152370, 7493, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 152607, 152528, 8568, 17682, 18382, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 8737, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1161, 152622, 152607, 152528, 15316, 17682, 18382, 152361, 152819, 151923, 152557, 152592, 152191, 152412, 152058, 151989, 152801, 5611, 151742, 152983, 151696, 152339, 152602, 5611, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152622, 152238, 151696, 152339, 152602, 12579, 17682, 18382, 151684, 152771, 151881, 1161, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 2420, 152831, 152128, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 151976, 151989, 152801, 5611, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80({_ter\ud83d\ude80^\ud83d\ude80[\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80)}_ter\ud83d\ude80^\ud83d\ude80]\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matching_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\")\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"(\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80}\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"{\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"]\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"[\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matching_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pop_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n", "task_id": "Mbpp/772", "test": "\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 5118, 152069, 153011, 151983, 914, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 4244, 152911, 151879, 153033, 152036, 152136, 914, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 18293, 18981, 152474, 152817, 153002, 152396, 3409, 152996, 152673, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 4244, 151764, 151880, 152257, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 152622, 152238, 152528, 595, 152361, 151868, 152329, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 364, 364, 151666, 152411, 5138, 152831, 152128, 152430, 18293, 18981, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n", "task_id": "Mbpp/773", "test": "\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2983, 5771, 5228, 917, 152069, 153011, 151983, 914, 152297, 151983, 38449, 152297, 151983, 1191, 152297, 151983, 835, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1922, 152911, 151879, 153033, 152036, 152136, 914, 152411, 1477, 152831, 152128, 152430, 38449, 153001, 152430, 1191, 153001, 152430, 835, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1922, 152622, 151683, 151874, 151878, 152780, 152763, 220, 16, 152361, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152221, 152729, 152515, 151876, 151886, 152457, 152913, 152785, 38449, 152968, 152785, 1922, 152968, 152865, 152456, 152440, 1922, 152328, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 38449, 151703, 151740, 151958, 152717, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120occ_ter\ud83d\ude80^\ud83d\ude80urance_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n", "task_id": "Mbpp/775", "test": "\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10322, 9661, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n", "task_id": "Mbpp/777", "test": "\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 10160, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 5243, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152607, 152528, 1760, 5243, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 1760, 5243, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 1760, 5243, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152731, 151810, 1629, 152554, 151810, 1760, 152455, 152911, 151879, 153033, 152036, 152136, 1760, 5243, 152411, 3589, 152831, 152128, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152528, 1760, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 1629, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n", "task_id": "Mbpp/778", "test": "\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 3769, 3382, 85780, 75051, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1482, 6288, 152445, 153062, 152295, 152339, 152602, 18845, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 18845, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1482, 6288, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1482, 6288, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1482, 6288, 152445, 153062, 152295, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152222, 151847, 152208, 151953, 152996, 152415, 151953, 152996, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1482, 6288, 151703, 151740, 152208, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pack_ter\ud83d\ude80^\ud83d\ude80_con_ter\ud83d\ude80^\ud83d\ude80secutive_ter\ud83d\ude80^\ud83d\ude80_duplicates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n", "task_id": "Mbpp/780", "test": "\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1477, 34454, 12634, 152069, 153011, 151983, 14405, 2019, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 14405, 2019, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 14405, 2019, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 2629, 34454, 153081, 152456, 152441, 152339, 152344, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 152980, 152205, 152440, 595, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 151697, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 151876, 152980, 152205, 152440, 326, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 151697, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152441, 152339, 152344, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 595, 151773, 152987, 151773, 152328, 152955, 152339, 152344, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151684, 152771, 151881, 326, 151773, 152987, 151773, 152622, 151683, 152528, 2629, 34454, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152262, 152913, 151856, 152339, 152344, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 595, 151773, 152987, 151773, 152968, 151856, 152339, 152344, 152339, 152602, 14405, 2019, 151684, 152771, 151881, 502, 151773, 152987, 151773, 151684, 152771, 151881, 326, 151773, 152987, 151773, 151958, 152717, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151953, 152996, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_comb_ter\ud83d\ude80^\ud83d\ude80inations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_comb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_comb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"\n", "task_id": "Mbpp/781", "test": "\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 16237, 41214, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152029, 152988, 152456, 152440, 1760, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n", "task_id": "Mbpp/782", "test": "\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 10322, 5118, 10160, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2790, 10160, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2790, 10160, 152936, 153081, 152456, 152321, 152456, 151839, 152925, 152456, 152321, 152456, 151839, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 151894, 152879, 152925, 152456, 152440, 308, 152780, 152370, 600, 152328, 152071, 220, 16, 152542, 152071, 220, 17, 151894, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152996, 151886, 152588, 2790, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "task_id": "Mbpp/784", "test": "\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 15602, 68347, 74668, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1496, 3180, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 10322, 3180, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1496, 3180, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 10322, 3180, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152331, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 152503, 152121, 152539, 1496, 3180, 152085, 151773, 152987, 151773, 151894, 152955, 152339, 152602, 18845, 151684, 152771, 152503, 152121, 152539, 10322, 3180, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mul_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n", "task_id": "Mbpp/785", "test": "\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 14405, 2895, 4042, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 14405, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 856, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 856, 151918, 152237, 152911, 151879, 153033, 152036, 152089, 151879, 153033, 152036, 152136, 274, 152411, 13316, 152831, 152128, 152928, 330, 35065, 151666, 151703, 151740, 152411, 6718, 152831, 152128, 152928, 15553, 151666, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80_str_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80()\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n", "task_id": "Mbpp/786", "test": "\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1290, 17678, 290, 152069, 153011, 151983, 2890, 152297, 151983, 1044, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152731, 151810, 2115, 152554, 151810, 1290, 152455, 152482, 152869, 220, 15, 152192, 153018, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 151741, 152208, 152067, 152685, 152583, 152528, 2115, 152622, 152668, 152528, 1290, 152361, 151876, 152677, 152929, 152891, 152440, 5099, 153081, 152456, 151839, 152925, 152456, 152440, 2115, 152328, 152370, 1290, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 152668, 152528, 1044, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 2115, 153081, 152456, 152440, 5099, 152328, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1290, 152370, 5099, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 2115, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_insert_ter\ud83d\ude80^\ud83d\ude80ion_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n", "task_id": "Mbpp/787", "test": "\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1467, 10708, 50016, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 1467, 151703, 151740, 152780, 152071, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 151793, 152412, 152749, 151696, 152339, 152602, 1467, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 152461, 364, 64, 6, 151666, 152361, 152857, 152983, 151696, 152339, 152602, 1467, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152622, 151683, 152461, 364, 65, 6, 151666, 152361, 152857, 152983, 151696, 152339, 152602, 1467, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 17, 151773, 152987, 151773, 152622, 151683, 152461, 364, 65, 6, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152029, 152528, 1760, 152622, 152706, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80_three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n", "task_id": "Mbpp/788", "test": "\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 501, 21773, 152069, 153011, 151983, 18845, 152297, 151983, 914, 151775, 153051, 153051, 151876, 151886, 152331, 152456, 152440, 18845, 152328, 151693, 152913, 152785, 914, 152968, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n", "task_id": "Mbpp/790", "test": "\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1496, 9661, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n", "task_id": "Mbpp/791", "test": "\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 66279, 152069, 153011, 151983, 259, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152370, 259, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 11402, 152831, 152128, 152430, 600, 153001, 152430, 14405, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 151845, 4057, 66279, 152831, 152128, 152430, 600, 151703, 151740, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 151816, 151879, 151845, 14405, 152831, 152128, 152430, 1102, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n", "task_id": "Mbpp/792", "test": "\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1760, 2019, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n", "task_id": "Mbpp/793", "test": "\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1537, 152069, 153011, 151983, 2890, 152297, 151983, 856, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 3347, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1550, 153081, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152780, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 1102, 152248, 151878, 152780, 152763, 220, 16, 152208, 152067, 152685, 152583, 152528, 3347, 152622, 152533, 152528, 1550, 152361, 151876, 152677, 152929, 152891, 152440, 5099, 153081, 152456, 151839, 152925, 152456, 152440, 3347, 152328, 152370, 1550, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 151683, 152528, 856, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1102, 152370, 5099, 152208, 152677, 152929, 152891, 152440, 3347, 153081, 152456, 152440, 5099, 152328, 152071, 220, 16, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152622, 152668, 152528, 856, 152361, 152819, 152677, 152929, 152891, 152440, 3347, 153081, 152456, 152440, 5099, 152328, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1550, 153081, 152456, 152440, 5099, 152780, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120low_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n", "task_id": "Mbpp/794", "test": "\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1467, 4906, 64, 6213, 65, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152191, 152412, 153101, 151879, 153033, 152036, 152136, 1467, 152411, 1191, 22177, 152831, 152128, 152928, 364, 64, 6, 151666, 151703, 151740, 152857, 152911, 151879, 153033, 152036, 152136, 1467, 152411, 835, 22177, 152831, 152128, 152928, 364, 65, 6, 151666, 151703, 151740, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80_start_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80_end_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80swith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80swith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n", "task_id": "Mbpp/796", "test": "\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 470, 10160, 152069, 153011, 151983, 10997, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 897, 152911, 151879, 153033, 152036, 152136, 10997, 152411, 2750, 152831, 152128, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 897, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n", "task_id": "Mbpp/797", "test": "\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2629, 1243, 9698, 152069, 153011, 151983, 326, 152297, 151983, 435, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 326, 153001, 151766, 152456, 152440, 435, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152370, 600, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_in_ter\ud83d\ude80^\ud83d\ude80_range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n", "task_id": "Mbpp/798", "test": "\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 716, 1242, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 152430, 2890, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n", "task_id": "Mbpp/799", "test": "\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 2115, 60834, 152069, 153011, 151983, 308, 152297, 151983, 294, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 294, 153081, 152456, 152440, 294, 151702, 152071, 220, 18, 17, 152208, 151886, 152331, 152456, 151839, 152925, 152456, 151839, 152925, 152456, 152440, 308, 153085, 152370, 294, 152133, 152879, 152925, 152456, 152440, 308, 151888, 152879, 152925, 152456, 152468, 220, 18, 17, 152780, 152370, 294, 152902, 152071, 220, 15, 22620, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80_rotate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80<<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80xFFFFFFFF_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n", "task_id": "Mbpp/800", "test": "\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 4057, 5705, 67883, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8290, 152831, 152128, 152928, 330, 330, 151666, 153001, 152928, 1591, 151666, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_all_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n", "task_id": "Mbpp/801", "test": "\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1273, 50016, 11478, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1932, 152831, 152128, 151865, 151879, 153033, 152036, 152384, 153062, 152281, 264, 152793, 152281, 293, 152793, 152281, 272, 152222, 151847, 152411, 1760, 152831, 152128, 152430, 264, 151703, 151740, 153001, 151865, 151879, 153033, 152036, 152384, 153062, 152281, 264, 152793, 152281, 293, 152793, 152281, 272, 152222, 151847, 152411, 1760, 152831, 152128, 152430, 293, 151703, 151740, 153001, 151865, 151879, 153033, 152036, 152384, 153062, 152281, 264, 152793, 152281, 293, 152793, 152281, 272, 152222, 151847, 152411, 1760, 152831, 152128, 152430, 272, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80_three_ter\ud83d\ude80^\ud83d\ude80_equal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"\n", "task_id": "Mbpp/803", "test": "\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 5678, 3751, 39794, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 3704, 152911, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152208, 151886, 152029, 152988, 152456, 152440, 3704, 151894, 152370, 3704, 152622, 151683, 152528, 308, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_per_ter\ud83d\ude80^\ud83d\ude80fect_ter\ud83d\ude80^\ud83d\ude80_square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n", "task_id": "Mbpp/804", "test": "\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 374, 9840, 68347, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 152677, 153037, 152682, 152440, 1985, 153092, 152370, 1629, 152208, 151953, 152996, 151886, 152029, 152988, 152456, 152440, 1985, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n", "task_id": "Mbpp/805", "test": "\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 10160, 2019, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 1932, 152831, 152128, 152430, 18845, 153001, 152076, 152695, 151792, 1376, 152602, 2629, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n", "task_id": "Mbpp/806", "test": "\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1932, 14007, 34445, 5638, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 1932, 14007, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1482, 14007, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152370, 914, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1482, 14007, 152936, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 1932, 14007, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1932, 14007, 153001, 152430, 1482, 14007, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 1482, 14007, 152071, 220, 15, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1932, 14007, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n", "task_id": "Mbpp/807", "test": "\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1156, 74668, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152980, 152205, 152440, 1629, 152370, 10307, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152588, 1629, 151953, 152415, 151953, 152996, 151886, 152755, 152086, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n", "task_id": "Mbpp/808", "test": "\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 10102, 152069, 153011, 151983, 57385, 152297, 151983, 595, 151775, 153051, 153051, 151876, 151886, 152029, 152528, 595, 152622, 152607, 152528, 57385, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_K_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tup_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
{"prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n", "task_id": "Mbpp/809", "test": "\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True\n", "outrulelist": [151667, 152526, 151750, 152559, 151792, 1779, 15874, 13956, 152069, 153011, 151983, 14405, 16, 152297, 151983, 14405, 17, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 678, 151733, 152828, 151722, 152142, 152528, 856, 152622, 152668, 152528, 379, 152361, 152996, 152186, 152581, 152899, 152731, 151810, 856, 152554, 151810, 379, 152455, 151918, 152237, 152911, 151879, 151845, 10308, 152831, 152128, 152430, 14405, 16, 153001, 152430, 14405, 17, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80aller_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80"}
