{"task_id": "Mbpp/2", "solution": "def similar_elements ( list1 , list2 ) : \n    return set ( set ( list1 ) & set ( list2 ) ) \n\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime ( n ) : \n    if n <= 1 : \n        return True \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest ( nums , n ) : \n    largest_nums = sorted ( nums , reverse = True ) [ : n ] \n    \n    return largest_nums \n\n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos ( num1 , num2 ) : \n    xor_result = num1 ^ num2 \n    \n    count = 0 \n    \n    while xor_result : \n        count += xor_result & 1 \n        xor_result >>= 1 \n    \n    return count == 1 \n\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long ( string ) : \n    words = string . split ( ) \n    \n    result = [ ] \n    \n    for word in words : \n        if len ( word ) >= 4 : \n            result . append ( word ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums ( nums ) : \n    return [ num ** 2 for num in nums ] \n\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations ( s ) : \n    n = len ( s ) \n    \n    for i in range ( 1 , n + 1 ) : \n        rotated = s [ i : ] + s [ : i ] \n        \n        if rotated == s : \n            return i \n        \n    \n    return n \n\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ ( string , char ) : \n    first_index = string . find ( char ) \n    \n    if first_index == - 1 : \n        return string \n    \n    last_index = len ( string ) - 1 - string [ : : - 1 ] . find ( char ) \n    \n    return string [ : first_index ] + string [ last_index + 1 : ] \n\n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix ( matrix ) : \n    sorted_matrix = sorted ( matrix , key = sum ) \n    \n    return sorted_matrix \n\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume ( base , height , prism_side ) : \n    volume = ( base * height * prism_side ) / 3 \n    \n    return volume \n\n"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore ( text ) : \n    substrings = text . split ( '_' ) \n    \n    for substring in substrings : \n        if not substring . islower ( ) or not substring . isalpha ( ) : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter ( side_length ) : \n    return 4 * side_length \n\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars ( str1 , str2 ) : \n    result = \"\" \n    \n    for char in str1 : \n        if char not in str2 : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate ( arr ) : \n    seen = set ( ) \n    \n    for num in arr : \n        if num in seen : \n            return True \n        \n        seen . add ( num ) \n    \n    return False \n\n"}
{"task_id": "Mbpp/20", "solution": "def is_woodall ( num ) : \n    return num % 3 == 0 \n\n"}
{"task_id": "Mbpp/56", "solution": "def check ( n ) : \n    reversed_n = int ( str ( n ) [ : : - 1 ] ) \n    \n    return n - 1 == reversed_n \n\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num ( nums ) : \n    nums . sort ( reverse = True ) \n    max_num = int ( '' . join ( map ( str , nums ) ) ) \n    \n    return max_num \n\n"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs ( a , b ) : \n    return ( a < 0 and b > 0 ) or ( a > 0 and b < 0 ) \n\n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal ( n ) : \n    return n * ( 3 * n - 1 ) \n\n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        sum = 0 \n        \n        for j in range ( i , len ( s ) ) : \n            sum += int ( s [ j ] ) \n            if sum == j - i + 1 : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num ( lst ) : \n    return min ( lst ) \n\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference ( lst ) : \n    max_diff = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            diff = abs ( lst [ i ] [ 1 ] - lst [ j ] [ 0 ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks ( marks ) : \n    return sorted ( marks , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum ( lst ) : \n    total = 0 \n    \n    for item in lst : \n        if type ( item ) == list : \n            total += recursive_list_sum ( item ) \n        else : \n            total += item \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count ( lst ) : \n    return sum ( 1 for num in lst if num > 0 ) \n\n"}
{"task_id": "Mbpp/67", "solution": "def bell_number ( n ) : \n    bell = [ [ 0 for _ in range ( n + 1 ) ] for _ in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic ( arr ) : \n    increasing = decreasing = True \n    \n    \n    for i in range ( 1 , len ( arr ) ) : \n        if arr [ i ] > arr [ i - 1 ] : \n            decreasing = False \n            \n        elif arr [ i ] < arr [ i - 1 ] : \n            increasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist ( lst , sublist ) : \n    n = len ( sublist ) \n    \n    for i in range ( len ( lst ) - n + 1 ) : \n        if lst [ i : i + n ] == sublist : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal ( tuples ) : \n    return all ( len ( t ) == len ( tuples [ 0 ] ) for t in tuples ) \n\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort ( lst ) : \n    sorted_lst = sorted ( lst ) \n    \n    return sorted_lst \n\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square ( n ) : \n    squares = [ i ** 2 for i in range ( int ( n ** 0.5 ) + 1 ) ] \n    \n    for i in squares : \n        for j in squares : \n            if i - j == n : \n                return True \n            \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/74", "solution": "def is_same_patterns ( str1 , pattern1 , str2 , pattern2 ) : \n    str1_patterns = str1 . split ( \",\" ) \n    \n    pattern1_patterns = pattern1 . split ( \",\" ) \n    \n    str2_patterns = str2 . split ( \",\" ) \n    \n    pattern2_patterns = pattern2 . split ( \",\" ) \n    \n    if len ( str1_patterns ) != len ( pattern1_patterns ) : \n        return False \n    \n    if len ( str2_patterns ) != len ( pattern2_patterns ) : \n        return False \n    \n    for i in range ( len ( str1_patterns ) ) : \n        if str1_patterns [ i ] not in pattern1_patterns or str2_patterns [ i ] not in pattern2_patterns : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples ( lst , k ) : \n    return [ tup for tup in lst if all ( ele % k == 0 for ele in tup ) ] \n\n"}
{"task_id": "Mbpp/77", "solution": "def is_Diff ( num ) : \n    return num % 11 == 0 \n\n"}
{"task_id": "Mbpp/79", "solution": "def word_len ( word ) : \n    return len ( word ) % 2 != 0 \n\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number ( n ) : \n    return n * ( n + 1 ) * ( n + 2 ) // 6 \n\n"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere ( radius ) : \n    return ( 4 / 3 ) * 3.141592653589793 * ( radius ** 3 ) \n\n"}
{"task_id": "Mbpp/84", "solution": "def sequence ( n ) : \n    if n == 1 : \n        return 1 \n    elif n == 2 : \n        return 2 \n    else : \n        return sequence ( n - 1 ) + sequence ( n - 2 ) \n    \n\n"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere ( radius ) : \n    return 4 * 3.14159 * radius ** 2 \n\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number ( n ) : \n    return 3 * n * n - 3 * n + 1 \n\n"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three ( dict1 , dict2 , dict3 ) : \n    merged_dict = { ** dict1 , ** dict2 , ** dict3 } \n    \n    return merged_dict \n\n"}
{"task_id": "Mbpp/88", "solution": "def freq_count ( lst ) : \n    freq_dict = { } \n    \n    for num in lst : \n        if num in freq_dict : \n            freq_dict [ num ] += 1 \n        else : \n            freq_dict [ num ] = 1 \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num ( n ) : \n    for i in range ( n - 1 , 0 , - 1 ) : \n        if i > 0 : \n            if n - i < i - 1 : \n                return i \n            \n        else : \n            return n \n        \n    \n\n"}
{"task_id": "Mbpp/90", "solution": "def len_log ( words ) : \n    return max ( len ( word ) for word in words ) \n\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring ( lst , substring ) : \n    for item in lst : \n        if substring in item : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating ( num ) : \n    num_str = str ( num ) \n    \n    if len ( num_str ) < 3 : \n        return False \n    \n    for i in range ( len ( num_str ) - 2 ) : \n        if num_str [ i ] == num_str [ i + 2 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/93", "solution": "def power ( a , b ) : \n    return a ** b \n\n"}
{"task_id": "Mbpp/94", "solution": "def index_minimum ( lst ) : \n    return min ( lst , key = lambda x : x [ 1 ] ) [ 0 ] \n\n"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length ( lst ) : \n    return min ( len ( sublist ) for sublist in lst ) \n\n"}
{"task_id": "Mbpp/96", "solution": "def divisor ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists ( list_of_lists ) : \n    freq_dict = { } \n    \n    for sublist in list_of_lists : \n        for item in sublist : \n            if item in freq_dict : \n                freq_dict [ item ] += 1 \n            else : \n                freq_dict [ item ] = 1 \n                \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/98", "solution": "def multiply_num ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product / len ( lst ) \n\n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary ( n ) : \n    binary = \"\" \n    \n    while n > 0 : \n        binary = str ( n % 2 ) + binary \n        \n        n = n // 2 \n        \n    \n    return binary \n\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome ( n ) : \n    def is_palindrome ( num ) : \n        return str ( num ) == str ( num ) [ : : - 1 ] \n    \n    n += 1 \n    while not is_palindrome ( n ) : \n        n += 1 \n    \n    return n \n\n"}
{"task_id": "Mbpp/101", "solution": "def kth_element ( arr , k ) : \n    return arr [ k - 1 ] \n\n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel ( snake_str ) : \n    components = snake_str . split ( '_' ) \n    \n    return '' . join ( x . title ( ) for x in components ) \n\n"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num ( n , m ) : \n    if m == 1 : \n        return n \n    else : \n        return n * eulerian_num ( n - 1 , m ) + eulerian_num ( n - 2 , m - 1 ) \n    \n\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/105", "solution": "def count ( lst ) : \n    return sum ( lst ) \n\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists ( lst , tup ) : \n    return tup + tuple ( lst ) \n\n"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list ( list1 , list2 , list3 ) : \n    merged_list = list1 + list2 + list3 \n    \n    merged_list . sort ( ) \n    return merged_list \n\n"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent ( binary_string , rotations ) : \n    count = 0 \n    \n    for i in range ( len ( binary_string ) ) : \n        rotated = binary_string [ i : ] + binary_string [ : i ] \n        \n        if int ( rotated , 2 ) % 2 == 1 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists ( nested_lists ) : \n    common_elements = set ( nested_lists [ 0 ] ) \n    \n    for sublist in nested_lists [ 1 : ] : \n        common_elements . intersection_update ( sublist ) \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer ( string ) : \n    try : \n        int ( string ) \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int ( tup ) : \n    result = 0 \n    \n    for num in tup : \n        result = result * 10 + num \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list ( s ) : \n    return s . split ( ' ' ) \n\n"}
{"task_id": "Mbpp/119", "solution": "def search ( nums ) : \n    left = 0 \n    \n    right = len ( nums ) - 1 \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if mid % 2 == 0 : \n            if nums [ mid ] == nums [ mid + 1 ] : \n                left = mid + 2 \n                \n            else : \n                right = mid \n                \n            \n        else : \n            if nums [ mid ] == nums [ mid - 1 ] : \n                left = mid + 1 \n                \n            else : \n                right = mid \n                \n            \n        \n    \n    return nums [ left ] \n\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple ( lst ) : \n    max_product = 0 \n    \n    for tup in lst : \n        product = tup [ 0 ] * tup [ 1 ] \n        \n        if product > max_product : \n            max_product = product \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum_of_divisors = 0 \n        \n        for j in range ( 1 , i ) : \n            if i % j == 0 : \n                sum_of_divisors += j \n            \n        \n        if sum_of_divisors != i and sum_of_divisors < n : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/124", "solution": "def angle_complex ( real , imag ) : \n    import math \n    angle = math . atan2 ( imag , real ) \n    \n    return angle \n\n"}
{"task_id": "Mbpp/125", "solution": "def find_length ( binary_string ) : \n    max_diff = 0 \n    \n    for i in range ( len ( binary_string ) ) : \n        count_0 = 0 \n        \n        count_1 = 0 \n        \n        for j in range ( i , len ( binary_string ) ) : \n            if binary_string [ j ] == '0' : \n                count_0 += 1 \n            else : \n                count_1 += 1 \n            \n            diff = count_0 - count_1 \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/126", "solution": "def sum ( x , y ) : \n    sum = 0 \n    \n    for i in range ( 1 , min ( x , y ) + 1 ) : \n        if x % i == 0 and y % i == 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int ( a , b ) : \n    return a * b \n\n"}
{"task_id": "Mbpp/128", "solution": "def long_words ( n , words ) : \n    return [ word for word in words if len ( word ) > n ] \n\n"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test ( matrix ) : \n    n = len ( matrix ) \n    \n    magic_constant = sum ( matrix [ 0 ] ) \n    \n    for row in matrix : \n        if sum ( row ) != magic_constant : \n            return False \n        \n    \n    for col in range ( n ) : \n        if sum ( matrix [ row ] [ col ] for row in range ( n ) ) != magic_constant : \n            return False \n        \n    \n    if sum ( matrix [ i ] [ i ] for i in range ( n ) ) != magic_constant : \n        return False \n    \n    if sum ( matrix [ i ] [ n - i - 1 ] for i in range ( n ) ) != magic_constant : \n        return False \n    \n    return True \n\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences ( lst ) : \n    freq_dict = { } \n    \n    for item in lst : \n        if item in freq_dict : \n            freq_dict [ item ] += 1 \n        else : \n            freq_dict [ item ] = 1 \n            \n        \n    \n    max_freq = max ( freq_dict . values ( ) ) \n    \n    for key , value in freq_dict . items ( ) : \n        if value == max_freq : \n            return key \n        \n    \n\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels ( s ) : \n    vowels = set ( 'aeiouAEIOU' ) \n    \n    s_list = list ( s ) \n    \n    left , right = 0 , len ( s_list ) - 1 \n    \n    while left < right : \n        if s_list [ left ] not in vowels : \n            left += 1 \n        elif s_list [ right ] not in vowels : \n            right -= 1 \n        else : \n            s_list [ left ] , s_list [ right ] = s_list [ right ] , s_list [ left ] \n            \n            left += 1 \n            right -= 1 \n        \n    \n    return '' . join ( s_list ) \n\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string ( tup ) : \n    return '' . join ( tup ) \n\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum ( nums ) : \n    return sum ( num for num in nums if num < 0 ) \n\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num ( n ) : \n    return n * ( 2 * n - 1 ) \n\n"}
{"task_id": "Mbpp/137", "solution": "def zero_count ( arr ) : \n    count = 0 \n    \n    for num in arr : \n        if num == 0 : \n            count += 1 \n        \n    \n    return count / len ( arr ) \n\n"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two ( n ) : \n    while n > 0 : \n        if n % 2 == 1 : \n            return False \n        \n        n = n // 2 \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference ( radius ) : \n    return 2 * 3.14159 * radius \n\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly ( list_of_lists ) : \n    return { item for sublist in list_of_lists for item in sublist } \n\n"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort ( arr ) : \n    size = len ( arr ) \n    \n    res = [ ] \n    \n    for i in range ( size ) : \n        max_index = arr . index ( max ( arr [ : size - i ] ) ) \n        \n        res . append ( max_index + 1 ) \n        arr [ : max_index + 1 ] = reversed ( arr [ : max_index + 1 ] ) \n        \n        arr [ : size - i ] = reversed ( arr [ : size - i ] ) \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair ( list1 , list2 , list3 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] and list1 [ i ] == list3 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff ( arr ) : \n    min_element = min ( arr ) \n    \n    max_element = max ( arr ) \n    \n    return abs ( max_element - min_element ) \n\n"}
{"task_id": "Mbpp/160", "solution": "def find_solution ( a , b , n ) : \n    for x in range ( n // a + 1 ) : \n        y = n - a * x \n        \n        if y >= 0 and y % b == 0 : \n            return ( x , y // b ) \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements ( list1 , list2 ) : \n    return [ i for i in list1 if i not in list2 ] \n\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series ( n ) : \n    sum = 0 \n    \n    for i in range ( n // 2 + 1 ) : \n        sum += n - 2 * i \n    \n    return sum \n\n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position ( s ) : \n    count = 0 \n    \n    for char in s : \n        if char . isalpha ( ) : \n            char = char . lower ( ) \n            \n            if char == char [ 0 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair ( lst ) : \n    count = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            if ( lst [ i ] ^ lst [ j ] ) % 2 == 0 : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2 ( n ) : \n    if n == 0 : \n        return 1 \n    \n    power = 1 \n    \n    while power < n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/168", "solution": "def frequency ( lst , num ) : \n    return lst . count ( num ) \n\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list ( lst , start , end ) : \n    return sum ( lst [ start : end + 1 ] ) \n\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon ( side_length ) : \n    return 5 * side_length \n\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance ( string ) : \n    count = 0 \n    \n    for i in range ( len ( string ) - 1 ) : \n        if string [ i : i + 3 ] == 'std' : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/222", "solution": "def check_type ( t ) : \n    return len ( set ( map ( type , t ) ) ) == 1 \n\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority ( arr , n , x ) : \n    count = 0 \n    \n    for num in arr : \n        if num == x : \n            count += 1 \n        \n    \n    return count > n / 2 \n\n"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits ( n ) : \n    count = 0 \n    \n    while n : \n        count += n & 1 \n        n >>= 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string ( string ) : \n    return '' . join ( [ string [ i ] for i in range ( len ( string ) ) if i % 2 == 0 ] ) \n\n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three ( a , b , c ) : \n    return min ( a , min ( b , c ) ) \n\n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank ( string , char ) : \n    return string . replace ( \" \" , char ) \n\n"}
{"task_id": "Mbpp/232", "solution": "def large_nnum ( lst , n ) : \n    return sorted ( lst , reverse = True ) [ : n ] \n\n"}
{"task_id": "Mbpp/233", "solution": "def lateral_surface_area_cylinder ( radius , height ) : \n    return 2 * 3.14159 * radius * ( radius + height ) \n\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube ( side_length ) : \n    return side_length ** 3 \n\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number ( num ) : \n    return num | ( num >> 1 ) \n\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences ( lst ) : \n    result = { } \n    \n    for item in lst : \n        if item in result : \n            result [ item ] += 1 \n        else : \n            result [ item ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings ( s ) : \n    n = len ( s ) \n    \n    return ( n * ( n + 1 ) ) // 2 \n\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences ( m , n ) : \n    dp = [ [ 0 for _ in range ( m + 1 ) ] for _ in range ( n + 1 ) ] \n    \n    for i in range ( 1 , m + 1 ) : \n        dp [ 1 ] [ i ] = 1 \n        \n    \n    for i in range ( 2 , n + 1 ) : \n        for j in range ( 1 , m + 1 ) : \n            dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] \n            \n        \n    \n    return dp [ n ] [ m ] \n\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list ( list1 , list2 ) : \n    list1 [ - 1 : ] = list2 \n    \n    return list1 \n\n"}
{"task_id": "Mbpp/242", "solution": "def count_charac ( string ) : \n    return len ( string ) \n\n"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square ( n ) : \n    i = int ( n ** 0.5 ) \n    \n    if i * i > n : \n        return ( i + 1 ) ** 2 \n    else : \n        return ( i + 1 ) ** 2 \n    \n\n"}
{"task_id": "Mbpp/245", "solution": "def max_sum ( arr ) : \n    n = len ( arr ) \n    \n    max_sum = arr [ 0 ] \n    \n    inc_sum = [ 0 ] * n \n    \n    dec_sum = [ 0 ] * n \n    \n    for i in range ( 1 , n ) : \n        if arr [ i ] > arr [ i - 1 ] : \n            inc_sum [ i ] = inc_sum [ i - 1 ] + arr [ i ] \n            \n        else : \n            inc_sum [ i ] = arr [ i ] \n            \n        \n    \n    for i in range ( n - 2 , - 1 , - 1 ) : \n        if arr [ i ] > arr [ i + 1 ] : \n            dec_sum [ i ] = dec_sum [ i + 1 ] + arr [ i ] \n            \n        else : \n            dec_sum [ i ] = arr [ i ] \n            \n        \n    \n    for i in range ( 1 , n - 1 ) : \n        if inc_sum [ i ] > dec_sum [ i ] and inc_sum [ i ] > max_sum : \n            max_sum = inc_sum [ i ] \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/247", "solution": "def lps ( s ) : \n    n = len ( s ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    for i in range ( n - 1 , - 1 , - 1 ) : \n        dp [ i ] [ i ] = 1 \n        \n        for j in range ( i + 1 , n ) : \n            if s [ i ] == s [ j ] : \n                dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 \n                \n            else : \n                dp [ i ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ j - 1 ] ) \n                \n            \n        \n    \n    return dp [ 0 ] [ n - 1 ] \n\n"}
{"task_id": "Mbpp/250", "solution": "def count_X ( tup , element ) : \n    return tup . count ( element ) \n\n"}
{"task_id": "Mbpp/251", "solution": "def insert_element ( lst , element ) : \n    return [ element if i == 0 else item for i , item in enumerate ( lst ) ] \n\n"}
{"task_id": "Mbpp/252", "solution": "def convert ( num ) : \n    real_part = abs ( num ) \n    \n    imag_part = num / abs ( num ) \n    \n    return ( real_part , imag_part ) \n\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer ( lst ) : \n    return sum ( 1 for i in lst if isinstance ( i , int ) ) \n\n"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors ( lst , n ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i , len ( lst ) ) : \n            for k in range ( j , len ( lst ) ) : \n                result . append ( ( lst [ i ] , lst [ j ] , lst [ k ] ) ) \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums ( n ) : \n    if n <= 2 : \n        return 0 \n    \n    primes = [ True ] * n \n    \n    primes [ 0 ] = primes [ 1 ] = False \n    \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if primes [ i ] : \n            for j in range ( i * i , n , i ) : \n                primes [ j ] = False \n                \n            \n        \n    \n    return sum ( primes ) \n\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers ( a , b ) : \n    return ( b , a ) \n\n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements ( tup1 , tup2 ) : \n    res1 = max ( tup1 ) \n    \n    res2 = max ( tup2 ) \n    \n    return res1 , res2 \n\n"}
{"task_id": "Mbpp/260", "solution": "def is_prime ( n ) : \n    if n < 2 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n"}
{"task_id": "Mbpp/261", "solution": "def division_elements ( tup1 , tup2 ) : \n    return tuple ( ele1 / ele2 for ele1 , ele2 in zip ( tup1 , tup2 ) ) \n\n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts ( lst , L ) : \n    part1 = lst [ : L ] \n    \n    part2 = lst [ L : ] \n    \n    return ( part1 , part2 ) \n\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age ( dog_years ) : \n    human_years = dog_years * 7 \n    \n    return human_years \n\n"}
{"task_id": "Mbpp/265", "solution": "def list_split ( lst , n ) : \n    return [ lst [ i : i + n ] for i in range ( 0 , len ( lst ) , n ) ] \n\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube ( side_length ) : \n    return side_length * side_length * 6 \n\n"}
{"task_id": "Mbpp/267", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num ( n ) : \n    star_num = 1 \n    \n    i = 1 \n    \n    while i < n : \n        star_num += 1 \n        i *= 5 \n    \n    return star_num \n\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value ( char ) : \n    return ord ( char ) \n\n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index ( lst ) : \n    return sum ( lst [ i ] for i in range ( 0 , len ( lst ) , 2 ) if lst [ i ] % 2 == 0 ) \n\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num ** 5 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract ( lst ) : \n    return [ tup [ - 1 ] for tup in lst ] \n\n"}
{"task_id": "Mbpp/273", "solution": "def substract_elements ( tuple1 , tuple2 ) : \n    return tuple ( a - b for a , b in zip ( tuple1 , tuple2 ) ) \n\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_coefficient_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 0 , n + 1 , 2 ) : \n        sum += binomial_coefficient ( i , n - i ) \n    \n    return sum \n"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder ( radius , height ) : \n    return 3.14159 * ( radius ** 2 ) * height \n\n"}
{"task_id": "Mbpp/277", "solution": "def dict_filter ( dictionary , n ) : \n    return { key : value for key , value in dictionary . items ( ) if value >= n } \n\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements ( t ) : \n    count = 0 \n    \n    for i in t : \n        if isinstance ( i , tuple ) : \n            count += count_first_elements ( i ) \n        else : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal ( n ) : \n    return n * ( 7 * n - 5 ) // 2 \n\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search ( arr , element ) : \n    for i in range ( len ( arr ) ) : \n        if arr [ i ] == element : \n            return ( True , i ) \n        \n    \n    return ( False , - 1 ) \n\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique ( lst ) : \n    return len ( lst ) == len ( set ( lst ) ) \n\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list ( list1 , list2 ) : \n    return [ a - b for a , b in zip ( list1 , list2 ) ] \n\n"}
{"task_id": "Mbpp/283", "solution": "def validate ( n ) : \n    str_n = str ( n ) \n    \n    freq = { } \n    \n    for digit in str_n : \n        if digit in freq : \n            freq [ digit ] += 1 \n        else : \n            freq [ digit ] = 1 \n            \n        \n    \n    for i in range ( len ( str_n ) ) : \n        if int ( str_n [ i ] ) > freq [ str_n [ i ] ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/284", "solution": "def check_element ( lst , element ) : \n    return all ( item == element for item in lst ) \n\n"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three ( text ) : \n    if 'ab' in text : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated ( arr , k , t ) : \n    arr = arr * t \n    \n    max_sum = float ( '-inf' ) \n    \n    current_sum = 0 \n    \n    for num in arr : \n        current_sum = max ( num , current_sum + num ) \n        \n        max_sum = max ( max_sum , current_sum ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/287", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/290", "solution": "def max_length ( lst ) : \n    max_len = 0 \n    \n    max_list = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) > max_len : \n            max_len = len ( sublist ) \n            \n            max_list = sublist \n            \n        \n    \n    return max_len , max_list \n\n"}
{"task_id": "Mbpp/292", "solution": "def find ( dividend , divisor ) : \n    return dividend // divisor \n\n"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle ( a , h ) : \n    return ( a ** 2 + h ** 2 ) ** 0.5 \n\n"}
{"task_id": "Mbpp/294", "solution": "def max_val ( lst ) : \n    max_val = None \n    \n    for item in lst : \n        if max_val is None or item > max_val : \n            max_val = item \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count ( arr ) : \n    count = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if arr [ i ] > arr [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list ( nested_list ) : \n    flat_list = [ ] \n    \n    for item in nested_list : \n        if isinstance ( item , list ) : \n            flat_list . extend ( flatten_list ( item ) ) \n        else : \n            flat_list . append ( item ) \n        \n    \n    return flat_list \n\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate ( lst ) : \n    max_tuple = max ( lst , key = lambda x : x [ 1 ] ) \n    \n    return max_tuple \n\n"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq ( n ) : \n    total_count = 0 \n    \n    for i in range ( 2 ** n ) : \n        first_n_bits = bin ( i ) . count ( '1' ) \n        \n        last_n_bits = bin ( 2 ** n - 1 - i ) . count ( '1' ) \n        \n        if first_n_bits == last_n_bits : \n            total_count += 1 \n        \n    \n    return total_count \n\n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth ( d ) : \n    if isinstance ( d , dict ) : \n        return 1 + ( max ( dict_depth ( v ) for v in d . values ( ) ) if d else 0 ) \n    \n    return 0 \n\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp ( words ) : \n    return next ( ( word . split ( ) for word in words if word . startswith ( 'p' ) ) , [ ] ) \n\n"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq ( arr , k , i ) : \n    max_sum = 0 \n    \n    for j in range ( i ) : \n        if arr [ j ] < arr [ i ] : \n            max_sum = max ( max_sum , arr [ j ] + max_sum_increasing_subseq ( arr , k , j ) ) \n            \n        \n    \n    return max_sum + arr [ i ] \n\n"}
{"task_id": "Mbpp/308", "solution": "def large_product ( list1 , list2 , n ) : \n    result = [ ] \n    \n    for i in list1 : \n        for j in list2 : \n            result . append ( i * j ) \n        \n    \n    result . sort ( reverse = True ) \n    return result [ : n ] \n\n"}
{"task_id": "Mbpp/309", "solution": "def maximum ( a , b ) : \n    if a > b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple ( string ) : \n    return tuple ( string ) \n\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit ( n ) : \n    return n | ( - n ) \n\n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone ( radius , height ) : \n    return ( 1 / 3 ) * 3.141592653589792 * radius * radius * height \n\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2 ( n ) : \n    power = 1 \n    \n    while power * 2 <= n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas ( n ) : \n    if n == 0 : \n        return 2 \n    elif n == 1 : \n        return 1 \n    else : \n        lucas = [ 2 , 1 ] \n        \n        for i in range ( 2 , n + 1 ) : \n            lucas . append ( lucas [ i - 1 ] + lucas [ i - 2 ] ) \n        \n        return lucas [ n ] \n    \n\n"}
{"task_id": "Mbpp/390", "solution": "def add_string ( lst , format_string ) : \n    return [ format_string . format ( i ) for i in lst ] \n\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary ( keys , values , list ) : \n    result = [ ] \n    \n    for i in range ( len ( keys ) ) : \n        result . append ( { keys [ i ] : { values [ i ] : list [ i ] } } ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum ( n ) : \n    if n <= 0 : \n        return 0 \n    \n    dp = [ 0 ] * ( n + 1 ) \n    \n    dp [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        dp [ i ] = max ( dp [ i // 2 ] + dp [ i // 3 ] + dp [ i // 4 ] + dp [ i // 5 ] , i ) \n        \n    \n    return dp [ n ] \n\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct ( input_tuple ) : \n    return len ( set ( input_tuple ) ) == len ( input_tuple ) \n\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character ( string ) : \n    char_count = { } \n    \n    for char in string : \n        if char in char_count : \n            char_count [ char ] += 1 \n        else : \n            char_count [ char ] = 1 \n            \n        \n    \n    for char in string : \n        if char_count [ char ] == 1 : \n            return char \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers ( a , b , c ) : \n    numbers = [ a , b , c ] \n    \n    numbers . sort ( ) \n    return numbers [ 1 ] \n\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits ( lst ) : \n    result = [ ] \n    \n    for num in lst : \n        if isinstance ( num , list ) : \n            result . append ( sum ( int ( digit ) for digit in str ( sum ( num ) ) if digit . isdigit ( ) ) ) \n        else : \n            result . append ( sum ( int ( digit ) for digit in str ( num ) if digit . isdigit ( ) ) ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/404", "solution": "def minimum ( a , b ) : \n    if a < b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex ( tuplex , element ) : \n    return element in tuplex \n\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity ( num ) : \n    return num % 2 != 0 \n\n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple ( lst ) : \n    min_product = float ( 'inf' ) \n    \n    for tup in lst : \n        product = tup [ 0 ] * tup [ 1 ] \n        \n        if product < min_product : \n            min_product = product \n            \n        \n    \n    return min_product \n\n"}
{"task_id": "Mbpp/410", "solution": "def min_val ( lst ) : \n    min_val = min ( [ i for i in lst if isinstance ( i , ( int , float ) ) ] ) \n    \n    return min_val \n\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd ( lst ) : \n    return [ x for x in lst if x % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element ( lst , n ) : \n    return [ tup [ n ] for tup in lst ] \n\n"}
{"task_id": "Mbpp/414", "solution": "def overlapping ( seq1 , seq2 ) : \n    for i in seq1 : \n        if i in seq2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product ( arr ) : \n    max1 = max2 = float ( '-inf' ) \n    \n    \n    min1 = min2 = float ( 'inf' ) \n    \n    \n    for num in arr : \n        if num > max1 : \n            max2 = max1 \n            \n            max1 = num \n            \n        elif num > max2 : \n            max2 = num \n            \n        \n        if num < min1 : \n            min2 = min1 \n            \n            min1 = num \n            \n        elif num < min2 : \n            min2 = num \n            \n        \n    \n    return ( max ( max1 , max1 * max2 ) , min ( min1 , min1 * min2 ) ) \n\n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max ( lst ) : \n    return max ( lst , key = len ) \n\n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum ( numbers ) : \n    rounded_numbers = [ round ( num ) for num in numbers ] \n    \n    total_sum = sum ( rounded_numbers ) \n    \n    return total_sum * len ( numbers ) \n\n"}
{"task_id": "Mbpp/420", "solution": "def cube_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num ** 3 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple ( t ) : \n    return '-' . join ( map ( str , t ) ) \n\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i ** 3 \n    \n    return sum / n \n\n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear ( input_tuple ) : \n    return [ word [ - 1 ] for word in input_tuple ] \n\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list ( lst , element ) : \n    count = 0 \n    \n    for sublist in lst : \n        if element in sublist : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers ( numbers ) : \n    return [ num for num in numbers if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format ( date ) : \n    date_parts = date . split ( '-' ) \n    \n    return '-' . join ( reversed ( date_parts ) ) \n\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort ( arr ) : \n    n = len ( arr ) \n    \n    gap = n // 2 \n    \n    while gap > 0 : \n        for i in range ( gap , n ) : \n            temp = arr [ i ] \n            \n            j = i \n            \n            while j >= gap and arr [ j - gap ] > temp : \n                arr [ j ] = arr [ j - gap ] \n                \n                j -= gap \n            \n            arr [ j ] = temp \n            \n        \n        gap //= 2 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples ( t1 , t2 ) : \n    return tuple ( a - b for a , b in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix ( a , b , c ) : \n    return - a * a * ( b * b + c * c ) / ( 4 * ( a * a ) ) \n\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium ( a , b , c ) : \n    s = ( a + b ) / 2 \n    \n    return s \n\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater ( arr , num ) : \n    for i in arr : \n        if num <= i : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/435", "solution": "def last_Digit ( n ) : \n    return abs ( n ) % 10 \n\n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos ( lst ) : \n    return [ num for num in lst if num < 0 ] \n\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd ( string ) : \n    return '' . join ( [ char for index , char in enumerate ( string ) if index % 2 == 0 ] ) \n\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single ( lst ) : \n    result = 0 \n    \n    for num in lst : \n        result = result * 10 + num \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position ( sentence ) : \n    adverbs = [ \"clearly\" , \"seriously\" , \"unfortunately\" , \"there are\" , \"many\" , \"sita\" ] \n    \n    positions = [ ] \n    \n    for i in range ( len ( sentence ) ) : \n        for j in range ( i + 1 , len ( sentence ) + 1 ) : \n            substring = sentence [ i : j ] \n            \n            if substring in adverbs : \n                positions . append ( ( i , j , substring ) ) \n            \n        \n    \n    if positions : \n        return positions [ 0 ] \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube ( size ) : \n    return size * size * 6 \n\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication ( tup1 , tup2 ) : \n    return tuple ( tuple ( a * b for a , b in zip ( tup1 , tup2 ) ) for tup1 , tup2 in zip ( tup1 , tup2 ) ) \n\n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence ( lst , tup ) : \n    count = 0 \n    \n    for i in lst : \n        if i in tup : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums ( nums ) : \n    return [ num ** 3 for num in nums ] \n\n"}
{"task_id": "Mbpp/448", "solution": "def cal_sum ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n == 2 : \n        return 2 \n    else : \n        perrin = [ 0 , 1 , 2 ] \n        \n        for i in range ( 3 , n + 1 ) : \n            perrin . append ( perrin [ i - 1 ] + perrin [ i - 2 ] ) \n        \n        return sum ( perrin ) \n    \n\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string ( lst , size ) : \n    return lst [ : size ] \n\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces ( string ) : \n    return string . replace ( \" \" , \"\" ) \n\n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors ( n ) : \n    sum = 0 \n    \n    for i in range ( 2 , n + 1 ) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz ( text ) : \n    return 'z' in text \n\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number ( monthnumb ) : \n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12 : \n        return True \n    elif monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11 : \n        return False \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list ( string_list ) : \n    return [ s [ : : - 1 ] for s in string_list ] \n\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min ( lst ) : \n    min_len = min ( len ( sublist ) for sublist in lst ) \n    \n    for sublist in lst : \n        if len ( sublist ) == min_len : \n            return sublist \n        \n    \n\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area ( length , width ) : \n    return length * width \n\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase ( s ) : \n    result = \"\" \n    \n    for char in s : \n        if char . islower ( ) : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/460", "solution": "def Extract ( lst ) : \n    return [ sublist [ 0 ] for sublist in lst ] \n\n"}
{"task_id": "Mbpp/462", "solution": "def combinations_list ( lst ) : \n    if not lst : \n        return [ [ ] ] \n    \n    result = [ ] \n    \n    for i in range ( len ( lst ) + 1 ) : \n        for comb in combinations_list ( lst [ 1 : ] ) : \n            result . append ( [ lst [ 0 ] ] + comb ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product ( nums ) : \n    if not nums : \n        return 0 \n    \n    max_product = min_product = result = nums [ 0 ] \n    \n    \n    \n    for i in range ( 1 , len ( nums ) ) : \n        if nums [ i ] < 0 : \n            max_product , min_product = min_product , max_product \n            \n        \n        max_product = max ( nums [ i ] , max_product * nums [ i ] ) \n        \n        min_product = min ( nums [ i ] , min_product * nums [ i ] ) \n        \n        result = max ( result , max_product ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty ( dictionary ) : \n    return { key : value for key , value in dictionary . items ( ) if value is not None } \n\n"}
{"task_id": "Mbpp/468", "solution": "def max_product ( nums ) : \n    max_product = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            product = nums [ i ] * nums [ j ] \n            \n            if product > max_product : \n                max_product = product \n                \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise ( input_tuple ) : \n    result = [ ] \n    \n    for i in range ( len ( input_tuple ) - 1 ) : \n        result . append ( input_tuple [ i ] + input_tuple [ i + 1 ] ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder ( arr , n ) : \n    product = 1 \n    \n    for num in arr : \n        product *= num \n    \n    return product % n \n\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive ( lst ) : \n    sorted_lst = sorted ( lst ) \n    \n    for i in range ( len ( sorted_lst ) - 1 ) : \n        if sorted_lst [ i + 1 ] - sorted_lst [ i ] != 1 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection ( list1 , list2 ) : \n    set1 = set ( map ( tuple , list1 ) ) \n    \n    set2 = set ( map ( tuple , list2 ) ) \n    \n    return set1 . intersection ( set2 ) \n\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char ( string , old_char , new_char ) : \n    return string . replace ( old_char , new_char ) \n\n"}
{"task_id": "Mbpp/475", "solution": "def sort_counter ( d ) : \n    return sorted ( d . items ( ) , key = lambda x : x [ 1 ] , reverse = True ) \n\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum ( arr ) : \n    return max ( arr ) + min ( arr ) \n\n"}
{"task_id": "Mbpp/477", "solution": "def is_lower ( string ) : \n    return string . islower ( ) \n\n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase ( s ) : \n    result = \"\" \n    \n    for char in s : \n        if char . isupper ( ) : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/479", "solution": "def first_Digit ( num ) : \n    return int ( str ( num ) [ 0 ] ) \n\n"}
{"task_id": "Mbpp/554", "solution": "def Split ( lst ) : \n    return [ num for num in lst if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/555", "solution": "def difference ( n ) : \n    sum_of_cubes = sum ( [ i ** 3 for i in range ( 1 , n + 1 ) ] ) \n    \n    sum_of_numbers = sum ( range ( 1 , n + 1 ) ) \n    \n    return sum_of_cubes - sum_of_numbers \n\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair ( arr , n ) : \n    odd_pairs = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if ( arr [ i ] ^ arr [ j ] ) % 2 != 0 : \n                odd_pairs += 1 \n            \n        \n    \n    return odd_pairs \n\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string ( s ) : \n    return s . swapcase ( ) \n\n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums ( num1 , num2 ) : \n    num1 = str ( num1 ) \n    \n    num2 = str ( num2 ) \n    \n    sum_diff = 0 \n    \n    for i in range ( len ( num1 ) ) : \n        diff = abs ( int ( num1 [ i ] ) - int ( num2 [ i ] ) ) \n        \n        sum_diff += diff \n    \n    return sum_diff \n\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum ( arr , k ) : \n    max_sum = 0 \n    \n    current_sum = 0 \n    \n    for i in range ( len ( arr ) ) : \n        current_sum += arr [ i ] \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n        \n        if current_sum < 0 : \n            current_sum = 0 \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements ( tuple1 , tuple2 ) : \n    union_set = set ( tuple1 ) . union ( set ( tuple2 ) ) \n    \n    return sorted ( list ( union_set ) ) \n\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length ( lst ) : \n    return max ( len ( sublist ) for sublist in lst ) \n\n"}
{"task_id": "Mbpp/563", "solution": "def extract_values ( s ) : \n    values = [ ] \n    \n    start = 0 \n    \n    while True : \n        start = s . find ( '\"' , start ) \n        \n        if start == - 1 : \n            break \n        \n        end = s . find ( '\"' , start + 1 ) \n        \n        if end == - 1 : \n            break \n        \n        values . append ( s [ start + 1 : end ] ) \n        start = end + 1 \n        \n    \n    return values \n\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs ( nums , k ) : \n    count = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            if nums [ i ] != nums [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/565", "solution": "def split ( string ) : \n    return list ( string ) \n\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits ( n ) : \n    sum = 0 \n    \n    while n > 0 : \n        sum += n % 10 \n        n //= 10 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/567", "solution": "def issort_list ( lst ) : \n    return all ( lst [ i ] <= lst [ i + 1 ] for i in range ( len ( lst ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list ( n ) : \n    return [ { } for _ in range ( n ) ] \n\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums ( nums ) : \n    unique_nums = set ( ) \n    \n    for num in nums : \n        unique_nums . add ( num ) \n    \n    return list ( unique_nums ) \n\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product ( lst ) : \n    unique_nums = set ( lst ) \n    \n    product = 1 \n    \n    for num in unique_nums : \n        product *= num \n    \n    return product \n\n"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array ( sub , main ) : \n    sub_len = len ( sub ) \n    \n    main_len = len ( main ) \n    \n    if sub_len > main_len : \n        return False \n    \n    for i in range ( main_len - sub_len + 1 ) : \n        if main [ i : i + sub_len ] == sub : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial ( n ) : \n    if n < 0 : \n        return \"Invalid input\" \n    elif n == 0 or n == 1 : \n        return 1 \n    else : \n        factorial = 1 \n        \n        for i in range ( 1 , n + 1 ) : \n            factorial *= i \n        \n        return factorial % 10 \n    \n\n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists ( list1 , list2 , list3 ) : \n    interleaved_list = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        interleaved_list . append ( list1 [ i ] ) \n        interleaved_list . append ( list2 [ i ] ) \n        interleaved_list . append ( list3 [ i ] ) \n    \n    return interleaved_list \n\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar ( tuple1 , tuple2 ) : \n    set1 = set ( tuple1 ) \n    \n    set2 = set ( tuple2 ) \n    \n    dissimilar = set1 . symmetric_difference ( set2 ) \n    \n    return tuple ( dissimilar ) \n\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even ( t ) : \n    if isinstance ( t , tuple ) : \n        return tuple ( extract_even ( i ) for i in t if isinstance ( i , int ) and i % 2 == 0 ) \n    else : \n        return t \n    \n\n"}
{"task_id": "Mbpp/581", "solution": "def surface_Area ( base , height ) : \n    return 2 * base * height + 4 * ( base ** 2 ) \n\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number ( n ) : \n    if n <= 1 : \n        return 1 \n    \n    result = 0 \n    \n    for i in range ( n ) : \n        result += catalan_number ( i ) * catalan_number ( n - i - 1 ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/585", "solution": "def expensive_items ( dataset , n ) : \n    sorted_dataset = sorted ( dataset , key = lambda x : x [ 'price' ] , reverse = True ) \n    \n    return sorted_dataset [ : n ] \n\n"}
{"task_id": "Mbpp/586", "solution": "def split_arr ( arr , n ) : \n    return arr [ n : ] + arr [ : n ] \n\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple ( lst ) : \n    return tuple ( lst ) \n\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff ( lst ) : \n    return max ( lst ) - min ( lst ) \n\n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares ( start , end ) : \n    squares = [ ] \n    \n    for i in range ( int ( start ** 0.5 ) , int ( end ** 0.5 ) + 1 ) : \n        square = i ** 2 \n        \n        if start <= square <= end : \n            squares . append ( square ) \n        \n    \n    return squares \n\n"}
{"task_id": "Mbpp/590", "solution": "def polar_rect ( r , theta ) : \n    x = r * cos ( theta ) \n    \n    y = r * sin ( theta ) \n    \n    return ( x , y ) \n\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List ( lst ) : \n    if len ( lst ) > 1 : \n        lst [ 0 ] , lst [ - 1 ] = lst [ - 1 ] , lst [ 0 ] \n        \n    \n    return lst \n\n"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient ( n , k ) : \n    if k > n : \n        return 0 \n    \n    if k == 0 or k == n : \n        return 1 \n    \n    k = min ( k , n - k ) \n    \n    c = 1 \n    \n    for i in range ( k ) : \n        c = c * ( n - i ) // ( i + 1 ) \n        \n    \n    return c \n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip ( ip ) : \n    return '.' . join ( str ( int ( x ) ) for x in ip . split ( '.' ) ) \n\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd ( lst ) : \n    first_even = None \n    \n    first_odd = None \n    \n    for num in lst : \n        if num % 2 == 0 : \n            if first_even is None : \n                first_even = num \n                \n            \n        else : \n            if first_odd is None : \n                first_odd = num \n                \n            \n        \n    \n    if first_even is None or first_odd is None : \n        return None \n    \n    return first_even - first_odd \n\n"}
{"task_id": "Mbpp/596", "solution": "def tuple_size ( t ) : \n    return sys . getsizeof ( t ) \n\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth ( arr1 , arr2 , k ) : \n    i = 0 \n    \n    j = 0 \n    \n    for _ in range ( k - 1 ) : \n        if i < len ( arr1 ) and j < len ( arr2 ) : \n            if arr1 [ i ] < arr2 [ j ] : \n                i += 1 \n            else : \n                j += 1 \n            \n        elif i < len ( arr1 ) : \n            i += 1 \n        elif j < len ( arr2 ) : \n            j += 1 \n        \n    \n    if i < len ( arr1 ) and j < len ( arr2 ) : \n        return min ( arr1 [ i ] , arr2 [ j ] ) \n    elif i < len ( arr1 ) : \n        return arr1 [ i ] \n    else : \n        return arr2 [ j ] \n    \n\n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number ( num ) : \n    num_str = str ( num ) \n    \n    num_len = len ( num_str ) \n    \n    sum = 0 \n    \n    for digit in num_str : \n        sum += int ( digit ) ** num_len \n    \n    return sum == num \n\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average ( n ) : \n    sum = 0 \n    \n    average = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i \n        average += i / n \n    \n    return sum , average \n\n"}
{"task_id": "Mbpp/600", "solution": "def is_Even ( num ) : \n    if num % 2 == 0 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char ( string ) : \n    char_set = set ( ) \n    \n    for char in string : \n        if char in char_set : \n            return char \n        \n        char_set . add ( char ) \n    \n    return None \n\n"}
{"task_id": "Mbpp/603", "solution": "def get_ludic ( n ) : \n    lucid_numbers = [ 1 , 2 , 3 , 5 , 7 ] \n    \n    for i in range ( 10 , n + 1 ) : \n        if i % 10 != 1 and i % 10 != 3 and i % 10 != 7 and i % 10 != 9 and i % 10 != 5 : \n            lucid_numbers . append ( i ) \n        \n    \n    return lucid_numbers \n\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words ( s ) : \n    return ' ' . join ( s . split ( ) [ : : - 1 ] ) \n\n"}
{"task_id": "Mbpp/605", "solution": "def prime_num ( n ) : \n    if n < 2 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/606", "solution": "def radian_degree ( degree ) : \n    return degree * ( 3.141592653589793 / 180 ) \n\n"}
{"task_id": "Mbpp/607", "solution": "def find_literals ( string , pattern ) : \n    match = re . search ( pattern , string ) \n    \n    if match : \n        return match . group ( ) , match . start ( ) , match . end ( ) \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/608", "solution": "def bell_number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element ( lst , k ) : \n    return lst [ : k ] + lst [ k + 1 : ] \n\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth ( matrix , n ) : \n    return max ( row [ n ] for row in matrix ) \n\n"}
{"task_id": "Mbpp/612", "solution": "def merge ( lst ) : \n    first_list = [ ] \n    \n    second_list = [ ] \n    \n    for sublist in lst : \n        first_list . append ( sublist [ 0 ] ) \n        second_list . append ( sublist [ 1 ] ) \n    \n    return [ first_list , second_list ] \n\n"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum ( tuple_list ) : \n    total = 0 \n    \n    for sublist in tuple_list : \n        total += sum ( sublist ) \n    \n    return total \n\n"}
{"task_id": "Mbpp/615", "solution": "def average_tuple ( tuples ) : \n    averages = [ ] \n    \n    for t in tuples : \n        avg = sum ( t ) / len ( t ) \n        \n        averages . append ( avg ) \n    \n    return averages \n\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo ( tup1 , tup2 ) : \n    return tuple ( a % b for a , b in zip ( tup1 , tup2 ) ) \n\n"}
{"task_id": "Mbpp/618", "solution": "def div_list ( list1 , list2 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] / list2 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/619", "solution": "def move_num ( s ) : \n    num_list = [ ] \n    \n    non_num_list = [ ] \n    \n    for char in s : \n        if char . isdigit ( ) : \n            num_list . append ( char ) \n        else : \n            non_num_list . append ( char ) \n        \n    \n    return '' . join ( non_num_list ) + '' . join ( num_list ) \n\n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset ( nums ) : \n    nums . sort ( ) \n    dp = [ 1 ] * len ( nums ) \n    \n    for i in range ( 1 , len ( nums ) ) : \n        for j in range ( i ) : \n            if nums [ i ] % nums [ j ] == 0 : \n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) \n                \n            \n        \n    \n    return max ( dp ) \n\n"}
{"task_id": "Mbpp/622", "solution": "def get_median ( list1 , list2 , size ) : \n    merged_list = [ ] \n    \n    i , j = 0 , 0 \n    \n    while i < size and j < size : \n        if list1 [ i ] < list2 [ j ] : \n            merged_list . append ( list1 [ i ] ) \n            i += 1 \n        else : \n            merged_list . append ( list2 [ j ] ) \n            j += 1 \n        \n    \n    if i < size : \n        merged_list . extend ( list1 [ i : ] ) \n    \n    if j < size : \n        merged_list . extend ( list2 [ j : ] ) \n    \n    n = len ( merged_list ) \n    \n    if n % 2 == 0 : \n        return ( merged_list [ n // 2 - 1 ] + merged_list [ n // 2 ] ) / 2 \n    else : \n        return merged_list [ n // 2 ] \n    \n\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums ( lst , n ) : \n    return [ i ** n for i in lst ] \n\n"}
{"task_id": "Mbpp/624", "solution": "def is_upper ( string ) : \n    return string . upper ( ) \n\n"}
{"task_id": "Mbpp/626", "solution": "def triangle_area ( radius ) : \n    if radius < 0 : \n        return None \n    elif radius == 0 : \n        return 0 \n    else : \n        return 0.5 * radius * radius * 2 \n    \n\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces ( string ) : \n    return string . replace ( \" \" , \"%20\" ) \n\n"}
{"task_id": "Mbpp/629", "solution": "def Split ( lst ) : \n    return [ num for num in lst if num % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates ( coordinate ) : \n    x , y = coordinate \n    \n    return [ [ x - 1 , y ] , [ x + 1 , y ] , [ x , y - 1 ] , [ x , y + 1 ] ] \n\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces ( string ) : \n    return string . swapcase ( ) \n\n"}
{"task_id": "Mbpp/632", "solution": "def move_zero ( nums ) : \n    non_zero_index = 0 \n    \n    for i in range ( len ( nums ) ) : \n        if nums [ i ] != 0 : \n            nums [ non_zero_index ] , nums [ i ] = nums [ i ] , nums [ non_zero_index ] \n            \n            non_zero_index += 1 \n        \n    \n    return nums \n\n"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum ( arr , xor_sum ) : \n    n = len ( arr ) \n    \n    res = 0 \n    \n    for i in range ( 0 , n ) : \n        for j in range ( i + 1 , n ) : \n            pair_xor = arr [ i ] ^ arr [ j ] \n            \n            if pair_xor == xor_sum : \n                res += pair_xor \n            \n        \n    \n    return res \n\n"}
{"task_id": "Mbpp/635", "solution": "def heapify ( arr , n , i ) : \n    largest = i \n    \n    left = 2 * i + 1 \n    \n    right = 2 * i + 2 \n    \n    if left < n and arr [ i ] < arr [ left ] : \n        largest = left \n        \n    \n    if right < n and arr [ largest ] < arr [ right ] : \n        largest = right \n        \n    \n    if largest != i : \n        arr [ i ] , arr [ largest ] = arr [ largest ] , arr [ i ] \n        \n        heapify ( arr , n , largest ) \n    \n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss ( profit , loss ) : \n    return profit == 0 and loss == 0 \n\n"}
{"task_id": "Mbpp/638", "solution": "def wind_chill ( velocity , temperature ) : \n    wci = 13.12 + 0.6215 * temperature - 11.37 * ( velocity ** 0.16 ) + 0.3965 * temperature * ( velocity ** 0.16 ) \n    \n    return round ( wci ) \n\n"}
{"task_id": "Mbpp/639", "solution": "def sample_nam ( names ) : \n    total_length = 0 \n    \n    for name in names : \n        if name [ 0 ] . isupper ( ) : \n            total_length += len ( name ) \n        \n    \n    return total_length \n\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal ( n ) : \n    return n * ( 7 * n - 5 ) // 2 \n\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle ( text ) : \n    text = text . strip ( ) \n    \n    if len ( text ) > 2 and text [ 0 ] == 'z' and text [ - 1 ] == 'z' : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K ( arr , k ) : \n    return arr [ : k ] [ : : - 1 ] + arr [ k : ] \n\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple ( tup , dict ) : \n    return ( * tup , dict ) \n\n"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath ( matrix ) : \n    n = len ( matrix ) \n    \n    dp = [ [ 0 for _ in range ( n ) ] for _ in range ( n ) ] \n    \n    dp [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] ) / 2 \n        \n    \n    for j in range ( 1 , n ) : \n        dp [ 0 ] [ j ] = ( dp [ 0 ] [ j - 1 ] + matrix [ 0 ] [ j ] ) / 2 \n        \n    \n    for i in range ( 1 , n ) : \n        for j in range ( 1 , n ) : \n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + matrix [ i ] [ j ] / 2 \n            \n        \n    \n    return dp [ n - 1 ] [ n - 1 ] \n\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data ( students , min_height , min_weight ) : \n    filtered_students = { } \n    \n    for name , data in students . items ( ) : \n        if data [ 0 ] > min_height and data [ 1 ] > min_weight : \n            filtered_students [ name ] = data \n            \n        \n    \n    return filtered_students \n\n"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair ( list1 , list2 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum ( base , power ) : \n    result = base ** power \n    \n    result_str = str ( result ) \n    \n    digit_sum = 0 \n    \n    for digit in result_str : \n        digit_sum += int ( digit ) \n    \n    return digit_sum \n\n"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation ( string ) : \n    quotation_marks = [ '\"' , \"'\" ] \n    \n    quotation_marks_indices = [ i for i , char in enumerate ( string ) if char in quotation_marks ] \n    \n    quotation_marks_count = len ( quotation_marks_indices ) \n    \n    if quotation_marks_count % 2 != 0 : \n        return [ ] \n    \n    result = [ ] \n    \n    for i in range ( 0 , quotation_marks_count , 2 ) : \n        start_index = quotation_marks_indices [ i ] \n        \n        end_index = quotation_marks_indices [ i + 1 ] \n        \n        result . append ( string [ start_index + 1 : end_index ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements ( t ) : \n    return tuple ( t [ i ] * t [ i + 1 ] for i in range ( len ( t ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list ( list1 , list2 ) : \n    return [ a + b for a , b in zip ( list1 , list2 ) ] \n\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            result . append ( lst [ i ] ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone ( r , h ) : \n    pi = 3.141592653589793 \n    \n    lateral_surface_area = pi * r * r * h \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar ( string ) : \n    return string . replace ( ' ' , ':' ) . replace ( ',' , ':' ) . replace ( '.' , ':' ) \n\n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence ( arr , target ) : \n    left = 0 \n    \n    right = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            right = mid - 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod ( arr ) : \n    n = len ( arr ) \n    \n    result = 0 \n    \n    for i in range ( n ) : \n        product = 1 \n        \n        for j in range ( i , n ) : \n            product *= arr [ j ] \n            result += product \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits ( n ) : \n    mask = ( 1 << ( n . bit_length ( ) - 2 ) ) - 1 \n    \n    return n ^ mask \n\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion ( lst , val ) : \n    low = 0 \n    \n    high = len ( lst ) - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if lst [ mid ] < val : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return low \n\n"}
{"task_id": "Mbpp/737", "solution": "def check_str ( str ) : \n    import re \n    pattern = r'^[aeiouAEIOU]' \n    \n    if re . match ( pattern , str ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/739", "solution": "def find_Index ( n ) : \n    i = 1 \n    \n    while True : \n        triangular_num = i * ( i + 1 ) // 2 \n        \n        if len ( str ( triangular_num ) ) == n : \n            return i \n        \n        i += 1 \n    \n\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict ( input_tuple ) : \n    return dict ( zip ( input_tuple [ : : 2 ] , input_tuple [ 1 : : 2 ] ) ) \n\n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same ( s ) : \n    return len ( set ( s ) ) == 1 \n\n"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron ( edge_length ) : \n    base = ( edge_length ** 2 ) / ( 4 * math . tan ( math . pi / 4 ) ) \n    \n    height = ( edge_length ** 2 ) / ( 2 * math . tan ( math . pi / 3 ) ) \n    \n    area = base * height \n    \n    return area \n\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right ( lst , n ) : \n    return lst [ - n : ] + lst [ : - n ] \n\n"}
{"task_id": "Mbpp/744", "solution": "def check_none ( input_tuple ) : \n    return any ( value is None for value in input_tuple ) \n\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits ( startnum , endnum ) : \n    result = [ ] \n    \n    for num in range ( startnum , endnum + 1 ) : \n        if all ( num % int ( digit ) == 0 for digit in str ( num ) ) : \n            result . append ( num ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces ( s ) : \n    result = \"\" \n    \n    words = s . split ( ) \n    \n    for word in words : \n        if word [ 0 ] . isupper ( ) : \n            result += word + \" \" \n        else : \n            result += word \n        \n    \n    return result . strip ( ) \n\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings ( lst ) : \n    return sorted ( lst , key = int ) \n\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple ( lst , tup ) : \n    return [ item for sublist in zip ( lst , tup ) for item in sublist ] \n\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 ) : \n        left_child_index = 2 * i + 1 \n        \n        right_child_index = 2 * i + 2 \n        \n        if left_child_index < n and arr [ i ] > arr [ left_child_index ] : \n            return False \n        \n        if right_child_index < n and arr [ i ] > arr [ right_child_index ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 or n == 2 : \n        return 1 \n    else : \n        jacobsthal = [ 0 , 1 , 1 ] \n        \n        for i in range ( 3 , n + 1 ) : \n            jacobsthal . append ( jacobsthal [ i - 1 ] + jacobsthal [ i - 2 ] ) \n        \n        return jacobsthal [ n ] \n    \n\n"}
{"task_id": "Mbpp/753", "solution": "def min_k ( lst , k ) : \n    sorted_list = sorted ( lst , key = lambda x : x [ 1 ] ) \n    \n    return sorted_list [ : k ] \n\n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list ( l1 , l2 , l3 ) : \n    common_elements = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        if l1 [ i ] == l2 [ i ] and l1 [ i ] == l3 [ i ] : \n            common_elements . append ( l1 [ i ] ) \n        \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest ( lst ) : \n    unique_lst = list ( set ( lst ) ) \n    \n    if len ( unique_lst ) < 2 : \n        return None \n    \n    unique_lst . sort ( ) \n    return unique_lst [ 1 ] \n\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs ( lst ) : \n    count = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            if lst [ i ] == lst [ j ] [ : : - 1 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists ( lst ) : \n    result = { } \n    \n    for sublist in lst : \n        key = tuple ( sublist ) \n        \n        if key in result : \n            result [ key ] += 1 \n        else : \n            result [ key ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/759", "solution": "def is_decimal ( s ) : \n    try : \n        num = float ( s ) \n        \n        if len ( s . split ( '.' ) [ 1 ] ) == 2 : \n            return True \n        else : \n            return False \n        \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/760", "solution": "def unique_Element ( nums ) : \n    return len ( set ( nums ) ) == 1 \n\n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number ( month_number ) : \n    if month_number < 1 or month_number > 12 : \n        return False \n    elif month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 : \n        return True \n    elif month_number == 4 or month_number == 6 or month_number == 9 or month_number == 11 or month_number == 12 or month_number == 2 : \n        return False \n    \n\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff ( arr , n ) : \n    arr . sort ( ) \n    min_diff = float ( 'inf' ) \n    \n    for i in range ( 1 , n ) : \n        diff = arr [ i ] - arr [ i - 1 ] \n        \n        if diff < min_diff : \n            min_diff = diff \n            \n        \n    \n    return min_diff \n\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr ( s ) : \n    return sum ( c . isdigit ( ) for c in s ) \n\n"}
{"task_id": "Mbpp/765", "solution": "def is_polite ( n ) : \n    return 2 * n + 1 if n % 2 == 0 else n + 1 \n\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise ( lst ) : \n    return [ ( lst [ i ] , lst [ i + 1 ] ) for i in range ( len ( lst ) - 1 ) ] \n\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count ( nums , target_sum ) : \n    count = 0 \n    \n    num_dict = { } \n    \n    for num in nums : \n        complement = target_sum - num \n        \n        if complement in num_dict : \n            count += num_dict [ complement ] \n        \n        if num in num_dict : \n            num_dict [ num ] += 1 \n        else : \n            num_dict [ num ] = 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/769", "solution": "def Diff ( list1 , list2 ) : \n    return [ i for i in list1 if i not in list2 ] \n\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 4 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/771", "solution": "def check_expression ( expression ) : \n    stack = [ ] \n    \n    opening_brackets = \"({[\" \n    \n    closing_brackets = \")}]\" \n    \n    matching_brackets = { \")\" : \"(\" , \"}\" : \"{\" , \"]\" : \"[\" } \n    \n    for char in expression : \n        if char in opening_brackets : \n            stack . append ( char ) \n        elif char in closing_brackets : \n            if not stack or stack [ - 1 ] != matching_brackets [ char ] : \n                return False \n            \n            stack . pop ( ) \n        \n    \n    return not stack \n\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length ( string , k ) : \n    words = string . split ( ) \n    \n    filtered_words = [ word for word in words if len ( word ) != k ] \n    \n    return ' ' . join ( filtered_words ) \n\n"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring ( string , substring , start , end ) : \n    index = string . find ( substring , start , end ) \n    \n    if index == - 1 : \n        return None \n    else : \n        return ( substring , index , index + len ( substring ) ) \n    \n\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position ( lst ) : \n    for i in range ( 1 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum ( lst ) : \n    count_dict = { } \n    \n    for num in lst : \n        if num in count_dict : \n            count_dict [ num ] += 1 \n        else : \n            count_dict [ num ] = 1 \n            \n        \n    \n    sum = 0 \n    \n    for num , count in count_dict . items ( ) : \n        if count == 1 : \n            sum += num \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    current_group = [ lst [ 0 ] ] \n    \n    for i in range ( 1 , len ( lst ) ) : \n        if lst [ i ] == lst [ i - 1 ] : \n            current_group . append ( lst [ i ] ) \n        else : \n            result . append ( current_group ) \n            current_group = [ lst [ i ] ] \n            \n        \n    \n    result . append ( current_group ) \n    return result \n\n"}
{"task_id": "Mbpp/780", "solution": "def find_combinations ( tuple_list ) : \n    result = [ ] \n    \n    for i in range ( len ( tuple_list ) ) : \n        for j in range ( i + 1 , len ( tuple_list ) ) : \n            sum_comb = tuple_list [ i ] [ 0 ] + tuple_list [ j ] [ 0 ] \n            \n            for k in range ( len ( tuple_list [ i ] ) ) : \n                for l in range ( len ( tuple_list [ j ] ) ) : \n                    if tuple_list [ i ] [ k ] + tuple_list [ j ] [ l ] == sum_comb : \n                        result . append ( ( tuple_list [ i ] [ k ] , tuple_list [ j ] [ l ] ) ) \n                    \n                \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count % 2 == 0 \n\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum ( arr ) : \n    total_sum = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        total_sum += ( ( i + 1 ) * ( n - i ) + 1 ) // 2 * arr [ i ] \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd ( lst ) : \n    even_count = 0 \n    \n    odd_count = 0 \n    \n    for num in lst : \n        if num % 2 == 0 : \n            even_count += 1 \n        else : \n            odd_count += 1 \n        \n    \n    return lst [ : even_count ] * lst [ : odd_count ] \n\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int ( s ) : \n    return tuple ( int ( x ) for x in s . strip ( \"()\" ) . split ( \",\" ) ) \n\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion ( arr , val ) : \n    left , right = 0 , len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] < val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"task_id": "Mbpp/787", "solution": "def text_match_three ( text ) : \n    count = 0 \n    \n    for i in range ( len ( text ) - 2 ) : \n        if text [ i ] == 'a' and text [ i + 1 ] == 'b' and text [ i + 2 ] == 'b' : \n            count += 1 \n        \n    \n    return count > 0 \n\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple ( lst , string ) : \n    return lst + ( string , ) \n\n"}
{"task_id": "Mbpp/790", "solution": "def even_position ( lst ) : \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 != 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested ( t ) : \n    result = [ ] \n    \n    for i in t : \n        if isinstance ( i , tuple ) : \n            result . append ( remove_nested ( i ) ) \n        else : \n            result . append ( i ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/792", "solution": "def count_list ( lst ) : \n    return len ( lst ) \n\n"}
{"task_id": "Mbpp/793", "solution": "def last ( arr , x ) : \n    low = 0 \n    \n    high = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if arr [ mid ] == x : \n            result = mid \n            \n            low = mid + 1 \n            \n        elif arr [ mid ] < x : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb ( text ) : \n    if text . startswith ( 'a' ) and text . endswith ( 'b' ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/796", "solution": "def return_sum ( dictionary ) : \n    sum = 0 \n    \n    for value in dictionary . values ( ) : \n        sum += value \n    \n    return sum \n\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range ( l , r ) : \n    sum = 0 \n    \n    for i in range ( l , r + 1 ) : \n        if i % 2 != 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/798", "solution": "def _sum ( arr ) : \n    return sum ( arr ) \n\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate ( n , d ) : \n    d = d % 32 \n    \n    return ( ( n << d ) | ( n >> ( 32 - d ) ) ) & 0xFFFFFFFF \n\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces ( string ) : \n    return string . replace ( \" \" , \"\" ) \n\n"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal ( a , b , c ) : \n    return max ( [ a , b , c ] . count ( a ) , [ a , b , c ] . count ( b ) , [ a , b , c ] . count ( c ) ) \n\n"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square ( n ) : \n    if n < 0 : \n        return False \n    \n    root = int ( n ** 0.5 ) \n    \n    return root * root == n \n\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product % 2 == 0 \n\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list ( lst ) : \n    return max ( lst , key = sum ) \n\n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase ( string ) : \n    max_run = 0 \n    \n    current_run = 0 \n    \n    for char in string : \n        if char . isupper ( ) : \n            current_run += 1 \n            max_run = max ( max_run , current_run ) \n            \n        else : \n            current_run = 0 \n            \n        \n    \n    return max_run \n\n"}
{"task_id": "Mbpp/807", "solution": "def first_odd ( nums ) : \n    for num in nums : \n        if num % 2 != 0 : \n            return num \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/808", "solution": "def check_K ( tup , k ) : \n    return k in tup \n\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller ( tuple1 , tuple2 ) : \n    return all ( x < y for x , y in zip ( tuple1 , tuple2 ) ) \n\n"}
