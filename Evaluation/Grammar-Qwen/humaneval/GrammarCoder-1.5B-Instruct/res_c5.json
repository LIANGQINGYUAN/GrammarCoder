{"stop_tokens": [], "task_id": "Python/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(has_close_elements):\n    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ncheck(has_close_elements)", "text": "    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True", "declaration": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n", "example_test": "def check(has_close_elements):\n    assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\ncheck(has_close_elements)\n", "code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80has_close_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80threshold_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 702, 12704, 22801, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 2224, 152349, 152141, 152297, 151799, 152320, 12171, 152273, 151990, 2224, 151775, 153051, 153051, 153090, 151990, 1807, 151876, 152677, 152502, 4210, 4248, 421, 304, 2661, 1140, 315, 5109, 11, 525, 894, 1378, 5109, 12128, 311, 1817, 1008, 1091, 198, 262, 2661, 12171, 624, 262, 12109, 702, 12704, 22801, 2561, 16, 13, 15, 11, 220, 17, 13, 15, 11, 220, 18, 13, 15, 1125, 220, 15, 13, 20, 340, 262, 3557, 198, 262, 12109, 702, 12704, 22801, 2561, 16, 13, 15, 11, 220, 17, 13, 23, 11, 220, 18, 13, 15, 11, 220, 19, 13, 15, 11, 220, 20, 13, 15, 11, 220, 17, 13, 15, 1125, 220, 15, 13, 18, 340, 262, 3007, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152082, 151879, 153033, 152036, 152136, 5109, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 5109, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 5109, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152780, 152955, 152339, 152602, 5109, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151703, 151740, 152622, 152533, 152528, 12171, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120threshold_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120closer_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120threshold_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120threshold_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef has_close_elements ( numbers : List [ float ] , threshold : float ) -> bool : \n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\" \n    numbers . sort ( ) \n    for i in range ( len ( numbers ) - 1 ) : \n        if abs ( numbers [ i ] - numbers [ i + 1 ] ) <= threshold : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Python/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(separate_paren_groups):\n    assert separate_paren_groups('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert separate_paren_groups('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert separate_paren_groups('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ncheck(separate_paren_groups)", "text": "    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']", "declaration": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n", "example_test": "def check(separate_paren_groups):\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\ncheck(separate_paren_groups)\n", "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80separate_paren_groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80paren_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 8651, 620, 9151, 21148, 152069, 153011, 151799, 152320, 37940, 3904, 152273, 151990, 607, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 151876, 152677, 152502, 4210, 5571, 311, 419, 729, 374, 264, 914, 8482, 5248, 5203, 315, 24034, 73975, 13, 4615, 5795, 374, 311, 198, 262, 8651, 1846, 1874, 1119, 8651, 9069, 323, 470, 279, 1140, 315, 1846, 624, 262, 76140, 5203, 525, 23831, 320, 9547, 1787, 32864, 374, 10277, 7877, 8, 323, 537, 24034, 2878, 1817, 1008, 198, 262, 38971, 894, 12621, 304, 279, 1946, 914, 624, 262, 12109, 8651, 620, 9151, 21148, 69963, 873, 1781, 11985, 1781, 40612, 11985, 1305, 262, 2509, 61413, 22022, 2140, 516, 364, 5065, 2140, 4432, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 37940, 3904, 152911, 151879, 153033, 152036, 152136, 37940, 3904, 152411, 8290, 152831, 152128, 152928, 330, 330, 151666, 153001, 152928, 1591, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 5611, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1482, 6288, 151887, 1591, 151666, 152208, 152980, 152205, 152440, 1161, 152370, 37940, 3904, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 151683, 152461, 33579, 151666, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 8737, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 1482, 6288, 152936, 152370, 1161, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1161, 152622, 151683, 152461, 58407, 151666, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 2420, 152831, 152128, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 1482, 6288, 152936, 152370, 1161, 152208, 151923, 152557, 152592, 151852, 151989, 152801, 5611, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1482, 6288, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1482, 6288, 151887, 1591, 151666, 152208, 151953, 152415, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120separate_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80aren_ter\ud83d\ude80^\ud83d\ude80_groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120paren_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120containing_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80\u0120parentheses_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120goal_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120separate_ter\ud83d\ude80^\ud83d\ude80\u0120those_ter\ud83d\ude80^\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80\u0120into_ter\ud83d\ude80^\ud83d\ude80\u0120separate_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120those_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Separate_ter\ud83d\ude80^\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120balanced_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80each_ter\ud83d\ude80^\ud83d\ude80\u0120open_ter\ud83d\ude80^\ud83d\ude80\u0120brace_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120properly_ter\ud83d\ude80^\ud83d\ude80\u0120closed_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80\u0120within_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Ignore_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120separate_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80aren_ter\ud83d\ude80^\ud83d\ude80_groups_ter\ud83d\ude80^\ud83d\ude80('(_ter\ud83d\ude80^\ud83d\ude80\u0120)_ter\ud83d\ude80^\ud83d\ude80\u0120((_ter\ud83d\ude80^\ud83d\ude80\u0120))_ter\ud83d\ude80^\ud83d\ude80\u0120((_ter\ud83d\ude80^\ud83d\ude80\u0120)(_ter\ud83d\ude80^\ud83d\ude80\u0120))_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80()',_ter\ud83d\ude80^\ud83d\ude80\u0120'(_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80(()_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120paren_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120paren_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120paren_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"(\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\")\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pop_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef separate_paren_groups ( paren_string : str ) -> List [ str ] : \n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\" \n    paren_string = paren_string . replace ( \" \" , \"\" ) \n    \n    stack = [ ] \n    \n    result = [ ] \n    \n    current_group = \"\" \n    \n    for char in paren_string : \n        if char == \"(\" : \n            stack . append ( char ) \n            current_group += char \n        elif char == \")\" : \n            stack . pop ( ) \n            current_group += char \n            if not stack : \n                result . append ( current_group ) \n                current_group = \"\" \n                \n            \n        \n    \n    return result \n\n"}
{"task_id": "Python/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "canonical_solution": "    return number % 1.0\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(truncate_number):\n    assert truncate_number(3.5) == 0.5\n    assert abs(truncate_number(1.33) - 0.33) < 1e-6\n    assert abs(truncate_number(123.456) - 0.456) < 1e-6\n\ncheck(truncate_number)", "text": "    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5", "declaration": "def truncate_number(number: float) -> float:\n", "example_test": "def check(truncate_number):\n    assert truncate_number(3.5) == 0.5\ncheck(truncate_number)\n", "code": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80truncate_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 56772, 5500, 152069, 153011, 151799, 152320, 1372, 152273, 151990, 2224, 151775, 153051, 153051, 153090, 151990, 2224, 151876, 152677, 152502, 4210, 16246, 264, 6785, 19057, 1459, 1372, 11, 432, 646, 387, 28502, 3865, 1119, 198, 262, 323, 7546, 949, 320, 26897, 477, 7546, 9155, 1091, 2661, 1372, 8, 323, 58328, 198, 262, 320, 2359, 1975, 949, 2677, 9155, 1091, 220, 16, 3593, 262, 3411, 279, 12122, 949, 315, 279, 1372, 624, 262, 12109, 56772, 5500, 7, 18, 13, 20, 340, 262, 220, 15, 13, 20, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 152331, 152456, 152440, 1372, 152780, 152911, 151879, 151845, 526, 152831, 152128, 152430, 1372, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120truncate_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120floating_ter\ud83d\ude80^\ud83d\ude80\u0120point_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120decom_ter\ud83d\ude80^\ud83d\ude80posed_ter\ud83d\ude80^\ud83d\ude80\u0120into_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80larg_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120smaller_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120decimals_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80left_ter\ud83d\ude80^\ud83d\ude80over_ter\ud83d\ude80^\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120smaller_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80).\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120truncate_ter\ud83d\ude80^\ud83d\ude80_number_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def truncate_number ( number : float ) -> float : \n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\" \n    return number - int ( number ) \n\n"}
{"task_id": "Python/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(below_zero):\n    assert below_zero([]) == False\n    assert below_zero([1, 2, -3, 1, 2, -3]) == False\n    assert below_zero([1, 2, -4, 5, 6]) == True\n    assert below_zero([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert below_zero([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert below_zero([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ncheck(below_zero)", "text": "    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True", "declaration": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n", "example_test": "def check(below_zero):\n    assert below_zero([1, 2, 3]) == False\n    assert below_zero([1, 2, -4, 5]) == True\ncheck(below_zero)\n", "code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80below_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 3685, 19359, 152069, 153011, 151799, 152320, 7525, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151775, 153051, 153051, 153090, 151990, 1807, 151876, 152677, 152502, 4210, 1446, 2299, 2661, 264, 1140, 315, 16539, 323, 29736, 7525, 389, 264, 6073, 2692, 429, 8471, 448, 198, 262, 7168, 8172, 13, 4615, 3383, 374, 311, 11140, 421, 518, 894, 1459, 279, 8172, 315, 2692, 4399, 4730, 3685, 7168, 11, 323, 198, 262, 518, 429, 1459, 729, 1265, 470, 3007, 13, 18214, 432, 1265, 470, 3557, 624, 262, 12109, 3685, 19359, 2561, 16, 11, 220, 17, 11, 220, 18, 2546, 262, 3557, 198, 262, 12109, 3685, 19359, 2561, 16, 11, 220, 17, 11, 481, 19, 11, 220, 20, 2546, 262, 3007, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 8172, 152071, 220, 15, 152208, 152980, 152205, 152440, 1179, 152370, 7525, 151876, 152677, 153037, 152682, 152440, 8172, 152936, 152370, 1179, 152208, 151923, 152557, 152592, 152583, 152528, 8172, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80're_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120deposit_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120withdrawal_ter\ud83d\ude80^\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120bank_ter\ud83d\ude80^\ud83d\ude80\u0120account_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120starts_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120detect_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120point_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120account_ter\ud83d\ude80^\ud83d\ude80\u0120fall_ter\ud83d\ude80^\ud83d\ude80ls_ter\ud83d\ude80^\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120point_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Otherwise_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120op_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120op_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef below_zero ( operations : List [ int ] ) -> bool : \n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\" \n    balance = 0 \n    \n    for op in operations : \n        balance += op \n        if balance < 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Python/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(mean_absolute_deviation):\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\ncheck(mean_absolute_deviation)", "text": "    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0", "declaration": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n", "example_test": "def check(mean_absolute_deviation):\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\ncheck(mean_absolute_deviation)\n", "code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80mean_absolute_deviation_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 3076, 50874, 10433, 7101, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 2224, 152349, 152141, 151775, 153051, 153051, 153090, 151990, 2224, 151876, 152677, 152502, 4210, 1752, 264, 2661, 1140, 315, 1946, 5109, 11, 11047, 16327, 48881, 6040, 7101, 198, 262, 2163, 279, 3076, 315, 419, 10337, 624, 262, 16327, 48881, 6040, 7101, 374, 279, 5461, 10740, 6672, 1948, 1817, 198, 262, 2392, 323, 264, 4126, 2768, 320, 14287, 304, 419, 1142, 982, 262, 75373, 284, 5461, 760, 856, 481, 856, 16933, 9248, 262, 12109, 3076, 50874, 10433, 7101, 2561, 16, 13, 15, 11, 220, 17, 13, 15, 11, 220, 18, 13, 15, 11, 220, 19, 13, 15, 2546, 262, 220, 16, 13, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 3076, 153081, 152456, 153101, 151879, 151845, 2629, 152831, 152128, 152430, 5109, 151703, 151740, 152144, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 5109, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 10740, 2259, 9971, 804, 152474, 152817, 153002, 152957, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152440, 856, 152780, 152370, 3076, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 856, 151918, 152237, 152370, 5109, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 12796, 153081, 152456, 153101, 151879, 151845, 2629, 152831, 152128, 152430, 10740, 2259, 9971, 804, 151703, 151740, 152144, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 10740, 2259, 9971, 804, 151703, 151740, 152208, 151886, 152588, 12796, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mean_ter\ud83d\ude80^\ud83d\ude80_absolute_ter\ud83d\ude80^\ud83d\ude80_dev_ter\ud83d\ude80^\ud83d\ude80iation_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120calculate_ter\ud83d\ude80^\ud83d\ude80\u0120Mean_ter\ud83d\ude80^\ud83d\ude80\u0120Absolute_ter\ud83d\ude80^\ud83d\ude80\u0120Dev_ter\ud83d\ude80^\ud83d\ude80iation_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120around_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120mean_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120dataset_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Mean_ter\ud83d\ude80^\ud83d\ude80\u0120Absolute_ter\ud83d\ude80^\ud83d\ude80\u0120Dev_ter\ud83d\ude80^\ud83d\ude80iation_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80\u0120absolute_ter\ud83d\ude80^\ud83d\ude80\u0120difference_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120center_ter\ud83d\ude80^\ud83d\ude80point_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80mean_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80):\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120MAD_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80\u0120|_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_mean_ter\ud83d\ude80^\ud83d\ude80\u0120|\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120mean_ter\ud83d\ude80^\ud83d\ude80_absolute_ter\ud83d\ude80^\ud83d\ude80_dev_ter\ud83d\ude80^\ud83d\ude80iation_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mean_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120absolute_ter\ud83d\ude80^\ud83d\ude80_de_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mean_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mad_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120absolute_ter\ud83d\ude80^\ud83d\ude80_de_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120absolute_ter\ud83d\ude80^\ud83d\ude80_de_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120mad_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef mean_absolute_deviation ( numbers : List [ float ] ) -> float : \n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\" \n    mean = sum ( numbers ) / len ( numbers ) \n    \n    absolute_deviations = [ abs ( x - mean ) for x in numbers ] \n    \n    mad = sum ( absolute_deviations ) / len ( absolute_deviations ) \n    \n    return mad \n\n"}
{"task_id": "Python/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(intersperse):\n    assert intersperse([], 7) == []\n    assert intersperse([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert intersperse([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\ncheck(intersperse)", "text": "    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]", "declaration": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n", "example_test": "def check(intersperse):\n    assert intersperse([], 4) == []\n    assert intersperse([1,2,3], 4) == [1,4,2,4,3]\ncheck(intersperse)\n", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80intersperse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80delimeter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 80919, 81244, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 152297, 151799, 152320, 1594, 25334, 152273, 151990, 526, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 17101, 264, 1372, 364, 9588, 25334, 6, 1948, 1449, 1378, 23921, 5424, 315, 1946, 1140, 1565, 37378, 1248, 262, 12109, 80919, 81244, 40056, 220, 19, 340, 262, 4167, 262, 12109, 80919, 81244, 2561, 16, 11, 220, 17, 11, 220, 18, 1125, 220, 19, 340, 262, 508, 16, 11, 220, 19, 11, 220, 17, 11, 220, 19, 11, 220, 18, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 5109, 151703, 151740, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 5109, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 600, 152622, 152668, 152988, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 5109, 151703, 151740, 152780, 152071, 220, 16, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1594, 25334, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inters_ter\ud83d\ude80^\ud83d\ude80perse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120del_ter\ud83d\ude80^\ud83d\ude80imeter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Insert_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80del_ter\ud83d\ude80^\ud83d\ude80imeter_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120every_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120`_ter\ud83d\ude80^\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120inters_ter\ud83d\ude80^\ud83d\ude80perse_ter\ud83d\ude80^\ud83d\ude80([],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120inters_ter\ud83d\ude80^\ud83d\ude80perse_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120del_ter\ud83d\ude80^\ud83d\ude80imeter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef intersperse ( numbers : List [ int ] , delimeter : int ) -> List [ int ] : \n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\" \n    result = [ ] \n    \n    for i in range ( len ( numbers ) ) : \n        result . append ( numbers [ i ] ) \n        if i < len ( numbers ) - 1 : \n            result . append ( delimeter ) \n        \n    \n    return result \n\n"}
{"task_id": "Python/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(parse_nested_parens):\n    assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert parse_nested_parens('(()(())((())))') == [4]\n\ncheck(parse_nested_parens)", "text": "    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]", "declaration": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n", "example_test": "def check(parse_nested_parens):\n    assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\ncheck(parse_nested_parens)\n", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80parse_nested_parens_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80paren_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 4715, 66279, 620, 546, 4412, 152069, 153011, 151799, 152320, 37940, 3904, 152273, 151990, 607, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 5571, 311, 419, 729, 374, 264, 914, 15251, 5248, 5203, 369, 24034, 73975, 18663, 553, 12621, 624, 262, 1752, 1817, 315, 279, 1874, 11, 2550, 279, 50521, 2188, 315, 66710, 315, 73975, 624, 262, 468, 1302, 13, 66647, 2140, 702, 7192, 1378, 5866, 315, 66710, 1393, 1781, 10131, 702, 2326, 382, 262, 12109, 4715, 66279, 620, 546, 4412, 492, 5065, 2140, 1781, 10131, 1719, 1781, 2140, 368, 2140, 1305, 262, 508, 17, 11, 220, 18, 11, 220, 16, 11, 220, 18, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 5203, 152911, 151879, 153033, 152036, 152136, 37940, 3904, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 42857, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1874, 152370, 5203, 151876, 152677, 152929, 152891, 152440, 1482, 19061, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1932, 19061, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152370, 1874, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 151683, 152461, 37880, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1482, 19061, 152936, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 1932, 19061, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1932, 19061, 153001, 152430, 1482, 19061, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1161, 152622, 151683, 152461, 79375, 151666, 152361, 152819, 152677, 153037, 152682, 152440, 1482, 19061, 151962, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 152677, 152082, 151879, 153033, 152036, 152136, 42857, 152411, 8737, 152831, 152128, 152430, 1932, 19061, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 42857, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120parse_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80are_ter\ud83d\ude80^\ud83d\ude80ns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120paren_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120represented_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80\u0120parentheses_ter\ud83d\ude80^\ud83d\ude80\u0120separated_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120deepest_ter\ud83d\ude80^\ud83d\ude80\u0120level_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120nesting_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120parentheses_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120E_ter\ud83d\ude80^\ud83d\ude80.g_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120(()_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120levels_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120nesting_ter\ud83d\ude80^\ud83d\ude80\u0120while_ter\ud83d\ude80^\ud83d\ude80\u0120((_ter\ud83d\ude80^\ud83d\ude80()))_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120parse_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80are_ter\ud83d\ude80^\ud83d\ude80ns_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80(()_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80\u0120((_ter\ud83d\ude80^\ud83d\ude80()))_ter\ud83d\ude80^\ud83d\ude80\u0120()_ter\ud83d\ude80^\ud83d\ude80\u0120((_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80()_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120paren_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120depths_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'('_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120')'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120depths_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120depths_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef parse_nested_parens ( paren_string : str ) -> List [ int ] : \n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\" \n    groups = paren_string . split ( ) \n    \n    depths = [ ] \n    \n    for group in groups : \n        current_depth = 0 \n        \n        max_depth = 0 \n        \n        for char in group : \n            if char == '(' : \n                current_depth += 1 \n                max_depth = max ( max_depth , current_depth ) \n                \n            elif char == ')' : \n                current_depth -= 1 \n            \n        \n        depths . append ( max_depth ) \n    \n    return depths \n\n"}
{"task_id": "Python/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(filter_by_substring):\n    assert filter_by_substring([], 'john') == []\n    assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ncheck(filter_by_substring)", "text": "    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']", "declaration": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n", "example_test": "def check(filter_by_substring):\n    assert filter_by_substring([], 'a') == []\n    assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']\ncheck(filter_by_substring)\n", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80filter_by_substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 4051, 3710, 5228, 917, 152069, 153011, 151799, 152320, 9069, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 152297, 151799, 152320, 38449, 152273, 151990, 607, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 151876, 152677, 152502, 4210, 12339, 458, 1946, 1140, 315, 9069, 1172, 369, 6174, 429, 6644, 2661, 38449, 198, 262, 12109, 4051, 3710, 5228, 917, 40056, 364, 64, 1305, 262, 4167, 262, 12109, 4051, 3710, 5228, 917, 6425, 13683, 516, 364, 55877, 67, 516, 364, 66, 450, 516, 364, 1653, 4089, 364, 64, 1305, 262, 2509, 13683, 516, 364, 55877, 67, 516, 364, 1653, 4432, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151941, 152817, 153002, 152396, 274, 152996, 152673, 152581, 152899, 152440, 274, 151918, 152237, 152370, 9069, 151764, 151880, 152257, 152528, 38449, 152622, 152607, 152528, 274, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Filter_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120ones_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120contain_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80([],_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bac_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80de_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80'],_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bac_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef filter_by_substring ( strings : List [ str ] , substring : str ) -> List [ str ] : \n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\" \n    return [ s for s in strings if substring in s ] \n\n"}
{"task_id": "Python/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(sum_product):\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 1, 1]) == (3, 1)\n    assert sum_product([100, 0]) == (100, 0)\n    assert sum_product([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert sum_product([10]) == (10, 10)\n\ncheck(sum_product)", "text": "    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)", "declaration": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n", "example_test": "def check(sum_product):\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2,3,4]) == (10, 24)\ncheck(sum_product)\n", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sum_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 152312, 151768, 151836, 152650, 24622, 152024, 153066, 151750, 152117, 151792, 2629, 9840, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 24622, 153031, 152812, 151990, 526, 152874, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 1752, 264, 2661, 1140, 315, 25780, 11, 470, 264, 14405, 30606, 315, 264, 2629, 323, 264, 1985, 315, 678, 279, 25780, 304, 264, 1140, 624, 262, 22228, 2629, 1265, 387, 6144, 311, 220, 15, 323, 4287, 1985, 1265, 387, 6144, 311, 220, 16, 624, 262, 12109, 2629, 9840, 41952, 262, 320, 15, 11, 220, 16, 340, 262, 12109, 2629, 9840, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 2546, 262, 320, 16, 15, 11, 220, 17, 19, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2790, 10160, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 2790, 9840, 152071, 220, 16, 152208, 152980, 152205, 152440, 1372, 152370, 5109, 151876, 152677, 153037, 152682, 152440, 2790, 10160, 152936, 152370, 1372, 152208, 152677, 153037, 152682, 152440, 2790, 9840, 153092, 152370, 1372, 152208, 151953, 152996, 151886, 152976, 152608, 2790, 10160, 152192, 152608, 2790, 9840, 151741, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120consisting_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Empty_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80([])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List , Tuple \ndef sum_product ( numbers : List [ int ] ) -> Tuple [ int , int ] : \n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\" \n    total_sum = 0 \n    \n    total_product = 1 \n    \n    for number in numbers : \n        total_sum += number \n        total_product *= number \n    \n    return total_sum , total_product \n\n"}
{"task_id": "Python/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(rolling_max):\n    assert rolling_max([]) == []\n    assert rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert rolling_max([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert rolling_max([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ncheck(rolling_max)", "text": "    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]", "declaration": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n", "example_test": "def check(rolling_max):\n    assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\ncheck(rolling_max)\n", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80rolling_max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 152312, 151768, 151836, 152650, 24622, 152024, 153066, 151750, 152117, 151792, 20097, 6345, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 5542, 264, 2661, 1140, 315, 25780, 11, 6923, 264, 1140, 315, 20097, 7192, 2392, 1730, 3080, 2661, 4445, 198, 262, 304, 279, 8500, 624, 262, 12109, 20097, 6345, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 17, 2546, 262, 508, 16, 11, 220, 17, 11, 220, 18, 11, 220, 18, 11, 220, 18, 11, 220, 19, 11, 220, 19, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1932, 39833, 67513, 152955, 152339, 152602, 5109, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1372, 152370, 5109, 151876, 151923, 152557, 152592, 152583, 152528, 1372, 152622, 152706, 152528, 1932, 39833, 67513, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 39833, 67513, 152370, 1372, 152208, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1932, 39833, 67513, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rolling_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120From_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120generate_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120rolling_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120found_ter\ud83d\ude80^\ud83d\ude80\u0120until_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120moment_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120rolling_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_so_ter\ud83d\ude80^\ud83d\ude80_far_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_so_ter\ud83d\ude80^\ud83d\ude80_far_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_so_ter\ud83d\ude80^\ud83d\ude80_far_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_so_ter\ud83d\ude80^\ud83d\ude80_far_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List , Tuple \ndef rolling_max ( numbers : List [ int ] ) -> List [ int ] : \n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\" \n    max_so_far = numbers [ 0 ] \n    \n    result = [ ] \n    \n    for number in numbers : \n        if number > max_so_far : \n            max_so_far = number \n            \n        \n        result . append ( max_so_far ) \n    \n    return result \n\n"}
{"task_id": "Python/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(make_palindrome):\n    assert make_palindrome('') == ''\n    assert make_palindrome('x') == 'x'\n    assert make_palindrome('xyz') == 'xyzyx'\n    assert make_palindrome('xyx') == 'xyx'\n    assert make_palindrome('jerry') == 'jerryrrej'\n\ncheck(make_palindrome)", "text": "    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'", "declaration": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n", "example_test": "def check(make_palindrome):\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\ncheck(make_palindrome)\n", "code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_palindrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Test if given string is a palindrome \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80make_palindrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 374, 73310, 36058, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 1807, 151876, 152677, 152502, 4210, 3393, 421, 2661, 914, 374, 264, 73097, 4210, 151666, 152208, 151886, 152029, 152528, 914, 152622, 151683, 151696, 152339, 152602, 914, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 151953, 152996, 151750, 152117, 151792, 1281, 73310, 36058, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 7379, 279, 39143, 73097, 429, 12033, 448, 264, 17221, 914, 624, 262, 40325, 4522, 374, 4285, 510, 262, 481, 7379, 279, 22032, 68122, 315, 17221, 914, 429, 374, 264, 73097, 624, 262, 481, 29807, 311, 279, 835, 315, 279, 914, 9931, 315, 264, 914, 9252, 429, 4041, 1573, 279, 10854, 484, 441, 292, 20525, 624, 262, 12109, 1281, 73310, 36058, 37365, 262, 11776, 262, 12109, 1281, 73310, 36058, 492, 4616, 1305, 262, 364, 66, 459, 66, 1248, 262, 12109, 1281, 73310, 36058, 492, 66, 459, 1305, 262, 364, 66, 459, 66, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151689, 151879, 151845, 374, 73310, 36058, 152831, 152128, 152430, 914, 151703, 151740, 152380, 152451, 152819, 151886, 152588, 914, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 374, 73310, 36058, 152831, 152128, 151697, 152339, 152602, 914, 151684, 152771, 152503, 152539, 600, 152121, 152085, 151773, 152987, 151773, 151703, 151740, 152380, 152451, 152819, 151886, 152331, 152456, 152440, 914, 152328, 152955, 152339, 152344, 152339, 152602, 914, 151684, 152771, 152503, 152121, 152539, 600, 152085, 151773, 152987, 151773, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 151953, 152415, 151953, 152996, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Test_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120shortest_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120begins_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120supplied_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Algorithm_ter\ud83d\ude80^\ud83d\ude80\u0120idea_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120simple_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80\u0120postfix_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120supplied_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120Append_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120prefix_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120comes_ter\ud83d\ude80^\ud83d\ude80\u0120before_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rom_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80\u0120suffix_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80cat_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ata_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ata_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ata_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_palindrome ( string : str ) -> bool : \n    \"\"\" Test if given string is a palindrome \"\"\" \n    return string == string [ : : - 1 ] \n\ndef make_palindrome ( string : str ) -> str : \n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \n    if is_palindrome ( string ) : \n        return string \n    \n    for i in range ( len ( string ) ) : \n        if is_palindrome ( string [ i : ] ) : \n            return string + string [ : i ] [ : : - 1 ] \n        \n    \n\n"}
{"task_id": "Python/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(string_xor):\n    assert string_xor('111000', '101010') == '010010'\n    assert string_xor('1', '1') == '0'\n    assert string_xor('0101', '0000') == '0101'\n\ncheck(string_xor)", "text": "    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'", "declaration": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n", "example_test": "def check(string_xor):\n    assert string_xor('010', '110') == '100'\ncheck(string_xor)\n", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80string_xor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 914, 76462, 152069, 153011, 151799, 152320, 264, 152273, 151990, 607, 152297, 151799, 152320, 293, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 5571, 525, 1378, 9069, 264, 323, 293, 30606, 1172, 315, 220, 16, 82, 323, 220, 15, 82, 624, 262, 25001, 7868, 69887, 389, 1493, 11127, 323, 470, 1102, 1083, 438, 264, 914, 624, 262, 12109, 914, 76462, 492, 15, 16, 15, 516, 364, 16, 16, 15, 1305, 262, 364, 16, 15, 15, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 151887, 1591, 151666, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 264, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 264, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 293, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 151887, 330, 15, 1, 151666, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 1102, 152936, 151887, 330, 16, 1, 151666, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_xor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120consisting_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Perform_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80\u0120XOR_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120these_ter\ud83d\ude80^\ud83d\ude80\u0120inputs_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120also_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_xor_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef string_xor ( a : str , b : str ) -> str : \n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\" \n    result = \"\" \n    \n    for i in range ( len ( a ) ) : \n        if a [ i ] == b [ i ] : \n            result += \"0\" \n        else : \n            result += \"1\" \n        \n    \n    return result \n\n"}
{"task_id": "Python/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(longest):\n    assert longest([]) == None\n    assert longest(['x', 'y', 'z']) == 'x'\n    assert longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ncheck(longest)", "text": "    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'", "declaration": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n", "example_test": "def check(longest):\n    assert longest([]) == None\n    assert longest(['a', 'b', 'c']) == 'a'\n    assert longest(['a', 'bb', 'ccc']) == 'ccc'\ncheck(longest)\n", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80Optional_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80longest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80Optional_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 152312, 151768, 151836, 152650, 12256, 152024, 153066, 151750, 152117, 151792, 22032, 152069, 153011, 151799, 152320, 9069, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 12256, 153031, 152812, 151990, 607, 152349, 152141, 151876, 152677, 152502, 4210, 4371, 315, 1140, 315, 9069, 11, 470, 279, 22032, 825, 13, 3411, 279, 1156, 825, 304, 1142, 315, 5248, 198, 262, 9069, 315, 279, 1852, 3084, 13, 3411, 2240, 304, 1142, 279, 1946, 1140, 374, 4287, 624, 262, 12109, 22032, 10556, 692, 262, 12109, 22032, 6425, 64, 516, 364, 65, 516, 364, 66, 7368, 262, 364, 64, 1248, 262, 12109, 22032, 6425, 64, 516, 364, 6066, 516, 364, 37054, 7368, 262, 364, 37054, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 9069, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152415, 152677, 152929, 152891, 152440, 1932, 5118, 152248, 151878, 152780, 152763, 220, 16, 152208, 152677, 152929, 152891, 152440, 22032, 3904, 152083, 152086, 152208, 152980, 152205, 152440, 914, 152370, 9069, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 152622, 152706, 152528, 1932, 5118, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 5118, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 22032, 3904, 152370, 914, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 22032, 3904, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Optional_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Optional_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Out_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80'])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bb_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ccc_ter\ud83d\ude80^\ud83d\ude80'])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ccc_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List , Optional \ndef longest ( strings : List [ str ] ) -> Optional [ str ] : \n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\" \n    if not strings : \n        return None \n    \n    max_length = - 1 \n    \n    longest_string = None \n    \n    for string in strings : \n        if len ( string ) > max_length : \n            max_length = len ( string ) \n            \n            longest_string = string \n            \n        \n    \n    return longest_string \n\n"}
{"task_id": "Python/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(greatest_common_divisor):\n    assert greatest_common_divisor(3, 7) == 1\n    assert greatest_common_divisor(10, 15) == 5\n    assert greatest_common_divisor(49, 14) == 7\n    assert greatest_common_divisor(144, 60) == 12\n\ncheck(greatest_common_divisor)", "text": "    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5", "declaration": "def greatest_common_divisor(a: int, b: int) -> int:\n", "example_test": "def check(greatest_common_divisor):\n    assert greatest_common_divisor(3, 5) == 1\n    assert greatest_common_divisor(25, 15) == 5\ncheck(greatest_common_divisor)\n", "code": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80greatest_common_divisor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 12196, 21107, 16237, 15841, 152069, 153011, 151799, 152320, 264, 152273, 151990, 526, 152297, 151799, 152320, 293, 152273, 151990, 526, 151775, 153051, 153051, 153090, 151990, 526, 151876, 152677, 152502, 4210, 3411, 264, 12196, 4185, 49109, 315, 1378, 25780, 264, 323, 293, 198, 262, 12109, 12196, 21107, 16237, 15841, 7, 18, 11, 220, 20, 340, 262, 220, 16, 198, 262, 12109, 12196, 21107, 16237, 15841, 7, 17, 20, 11, 220, 16, 20, 340, 262, 220, 20, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152067, 152685, 152583, 152528, 293, 152622, 152238, 152114, 220, 15, 152361, 151876, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152455, 152482, 152608, 293, 152192, 151796, 152456, 152440, 264, 151702, 152370, 293, 151741, 152208, 151953, 152996, 151886, 152588, 264, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80_common_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80\u0120divisor_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80_common_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80_common_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def greatest_common_divisor ( a : int , b : int ) -> int : \n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\" \n    while b != 0 : \n        a , b = b , a % b \n        \n    \n    return a \n\n"}
{"task_id": "Python/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(all_prefixes):\n    assert all_prefixes('') == []\n    assert all_prefixes('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert all_prefixes('WWW') == ['W', 'WW', 'WWW']\n\ncheck(all_prefixes)", "text": "    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']", "declaration": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n", "example_test": "def check(all_prefixes):\n    assert all_prefixes('abc') == ['a', 'ab', 'abc']\ncheck(all_prefixes)\n", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80all_prefixes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 678, 13974, 288, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 151876, 152677, 152502, 4210, 3411, 1140, 315, 678, 62576, 504, 39143, 311, 22032, 315, 279, 1946, 914, 198, 262, 12109, 678, 13974, 288, 492, 13683, 1305, 262, 2509, 64, 516, 364, 370, 516, 364, 13683, 4432, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151941, 152817, 153002, 152846, 152339, 152602, 914, 151684, 152771, 152503, 152121, 152539, 600, 152085, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80_prefix_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120prefixes_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120shortest_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120longest_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80_prefix_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef all_prefixes ( string : str ) -> List [ str ] : \n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\" \n    return [ string [ : i ] for i in range ( 1 , len ( string ) + 1 ) ] \n\n"}
{"task_id": "Python/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(string_sequence):\n    assert string_sequence(0) == '0'\n    assert string_sequence(3) == '0 1 2 3'\n    assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ncheck(string_sequence)", "text": "    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'", "declaration": "def string_sequence(n: int) -> str:\n", "example_test": "def check(string_sequence):\n    assert string_sequence(0) == '0'\n    assert string_sequence(5) == '0 1 2 3 4 5'\ncheck(string_sequence)\n", "code": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(x) for x in range(n + 1)])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80string_sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 914, 23735, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 3411, 264, 914, 8482, 3550, 47126, 31511, 5109, 5916, 504, 220, 15, 80126, 308, 28308, 624, 262, 12109, 914, 23735, 7, 15, 340, 262, 364, 15, 1248, 262, 12109, 914, 23735, 7, 20, 340, 262, 364, 15, 220, 16, 220, 17, 220, 18, 220, 19, 220, 20, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 153033, 152036, 152870, 364, 364, 151666, 152411, 5138, 151733, 152828, 151722, 152957, 151879, 151845, 607, 152831, 152128, 152430, 600, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120containing_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80-del_ter\ud83d\ude80^\ud83d\ude80imited_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120starting_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120upto_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120inclusive_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_sequence_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_sequence_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def string_sequence ( n : int ) -> str : \n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\" \n    return ' ' . join ( str ( i ) for i in range ( n + 1 ) ) \n\n"}
{"task_id": "Python/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "canonical_solution": "    return len(set(string.lower()))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(count_distinct_characters):\n    assert count_distinct_characters('') == 0\n    assert count_distinct_characters('abcde') == 5\n    assert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5\n    assert count_distinct_characters('aaaaAAAAaaaa') == 1\n    assert count_distinct_characters('Jerry jERRY JeRRRY') == 5\n\ncheck(count_distinct_characters)", "text": "    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4", "declaration": "def count_distinct_characters(string: str) -> int:\n", "example_test": "def check(count_distinct_characters):\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4\ncheck(count_distinct_characters)\n", "code": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80count_distinct_characters_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 1760, 16031, 7800, 79060, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 526, 151876, 152677, 152502, 4210, 16246, 264, 914, 11, 1477, 700, 1246, 1657, 12460, 5766, 320, 1580, 29820, 315, 1142, 8, 1558, 432, 6685, 315, 198, 262, 12109, 1760, 16031, 7800, 79060, 492, 28854, 32196, 1305, 262, 220, 18, 198, 262, 12109, 1760, 16031, 7800, 79060, 492, 89657, 1305, 262, 220, 19, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 12460, 37418, 152911, 151879, 151845, 738, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 914, 152411, 4722, 152831, 152128, 151703, 151740, 151703, 151740, 152208, 151886, 151816, 151879, 151845, 2422, 152831, 152128, 152430, 12460, 37418, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dist_ter\ud83d\ude80^\ud83d\ude80inct_ter\ud83d\ude80^\ud83d\ude80_characters_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120out_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80\u0120many_ter\ud83d\ude80^\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80reg_ter\ud83d\ude80^\ud83d\ude80ardless_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120does_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120consist_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dist_ter\ud83d\ude80^\ud83d\ude80inct_ter\ud83d\ude80^\ud83d\ude80_characters_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80xyz_ter\ud83d\ude80^\ud83d\ude80XYZ_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_dist_ter\ud83d\ude80^\ud83d\ude80inct_ter\ud83d\ude80^\ud83d\ude80_characters_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80Jerry_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_distinct_characters ( string : str ) -> int : \n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\" \n    distinct_chars = set ( string . lower ( ) ) \n    \n    return len ( distinct_chars ) \n\n"}
{"task_id": "Python/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(parse_music):\n    assert parse_music('') == []\n    assert parse_music('o o o o') == [4, 4, 4, 4]\n    assert parse_music('.| .| .| .|') == [1, 1, 1, 1]\n    assert parse_music('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert parse_music('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ncheck(parse_music)", "text": "    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "declaration": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n", "example_test": "def check(parse_music):\n    assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ncheck(parse_music)\n", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80parse_music_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80music_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 4715, 61863, 152069, 153011, 151799, 152320, 4627, 3904, 152273, 151990, 607, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 5571, 311, 419, 729, 374, 264, 914, 14064, 17795, 8388, 304, 264, 3281, 39316, 3561, 624, 262, 4615, 3383, 374, 311, 4715, 419, 914, 323, 470, 1140, 315, 25780, 12159, 311, 1246, 1657, 33327, 1558, 1817, 198, 262, 537, 1537, 382, 262, 5692, 374, 264, 13016, 510, 262, 364, 78, 6, 481, 4361, 5185, 11, 39658, 3040, 33327, 198, 262, 364, 78, 91, 6, 481, 4279, 5185, 11, 39658, 1378, 33327, 198, 262, 6256, 91, 6, 481, 922, 962, 5185, 11, 39658, 825, 9382, 271, 262, 12109, 4715, 61863, 492, 78, 297, 91, 659, 91, 297, 91, 297, 91, 659, 91, 659, 91, 659, 91, 659, 91, 297, 297, 1305, 262, 508, 19, 11, 220, 17, 11, 220, 16, 11, 220, 17, 11, 220, 17, 11, 220, 16, 11, 220, 16, 11, 220, 16, 11, 220, 16, 11, 220, 19, 11, 220, 19, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 33327, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 600, 152071, 220, 15, 152208, 152067, 152685, 152583, 152528, 600, 152622, 152668, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 4627, 3904, 151703, 151740, 152361, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 4627, 3904, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 152461, 364, 78, 6, 151666, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 33327, 152411, 8737, 152831, 152128, 152228, 220, 19, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 4627, 3904, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152071, 220, 17, 152085, 151773, 152987, 151773, 152622, 151683, 152461, 364, 78, 91, 6, 151666, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 33327, 152411, 8737, 152831, 152128, 152228, 220, 17, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 17, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 4627, 3904, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152071, 220, 17, 152085, 151773, 152987, 151773, 152622, 151683, 152461, 6256, 91, 6, 151666, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 33327, 152411, 8737, 152831, 152128, 152228, 220, 16, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 17, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 33327, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120parse_ter\ud83d\ude80^\ud83d\ude80_music_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120music_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120musical_ter\ud83d\ude80^\ud83d\ude80\u0120notes_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80\u0120ASCII_ter\ud83d\ude80^\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120parse_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80\u0120many_ter\ud83d\ude80^\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80\u0120does_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Here_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120legend_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120whole_ter\ud83d\ude80^\ud83d\ude80\u0120note_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120lasts_ter\ud83d\ude80^\ud83d\ude80\u0120four_ter\ud83d\ude80^\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120half_ter\ud83d\ude80^\ud83d\ude80\u0120note_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120lasts_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120qu_ter\ud83d\ude80^\ud83d\ude80ater_ter\ud83d\ude80^\ud83d\ude80\u0120note_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120lasts_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120beat_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120parse_ter\ud83d\ude80^\ud83d\ude80_music_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80\u0120o_ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120o_ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120o_ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80\u0120o_ter\ud83d\ude80^\ud83d\ude80\u0120o_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120music_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120music_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120music_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120music_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'._ter\ud83d\ude80^\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120beats_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef parse_music ( music_string : str ) -> List [ int ] : \n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" \n    beats = [ ] \n    \n    i = 0 \n    \n    while i < len ( music_string ) : \n        if music_string [ i ] == 'o' : \n            beats . append ( 4 ) \n            i += 1 \n        elif music_string [ i : i + 2 ] == 'o|' : \n            beats . append ( 2 ) \n            i += 2 \n        elif music_string [ i : i + 2 ] == '.|' : \n            beats . append ( 1 ) \n            i += 2 \n        else : \n            i += 1 \n        \n    \n    return beats \n\n"}
{"task_id": "Python/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(how_many_times):\n    assert how_many_times('', 'x') == 0\n    assert how_many_times('xyxyxyx', 'x') == 4\n    assert how_many_times('cacacacac', 'cac') == 4\n    assert how_many_times('john doe', 'john') == 1\n\ncheck(how_many_times)", "text": "    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3", "declaration": "def how_many_times(string: str, substring: str) -> int:\n", "example_test": "def check(how_many_times):\n    assert how_many_times('', 'a') == 0\n    assert how_many_times('aaa', 'a') == 3\n    assert how_many_times('aaaa', 'aa') == 3\ncheck(how_many_times)\n", "code": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80how_many_times_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 1246, 22101, 22353, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 152297, 151799, 152320, 38449, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 526, 151876, 152677, 152502, 4210, 7379, 1246, 1657, 3039, 264, 2661, 38449, 646, 387, 1730, 304, 279, 4024, 914, 13, 4504, 28104, 14216, 5048, 624, 262, 12109, 1246, 22101, 22353, 23315, 364, 64, 1305, 262, 220, 15, 198, 262, 12109, 1246, 22101, 22353, 492, 32646, 516, 364, 64, 1305, 262, 220, 18, 198, 262, 12109, 1246, 22101, 22353, 492, 28458, 516, 364, 5305, 1305, 262, 220, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 1186, 6043, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 38449, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152321, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 152780, 152370, 1186, 6043, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 914, 151684, 152771, 152503, 152539, 600, 152121, 153067, 152456, 152440, 600, 152328, 152370, 1186, 6043, 152085, 151773, 152987, 151773, 152622, 151683, 152528, 38449, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80_many_ter\ud83d\ude80^\ud83d\ude80_times_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80\u0120many_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120found_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120original_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Count_ter\ud83d\ude80^\ud83d\ude80\u0120overl_ter\ud83d\ude80^\ud83d\ude80aping_ter\ud83d\ude80^\ud83d\ude80\u0120cases_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80_many_ter\ud83d\ude80^\ud83d\ude80_times_ter\ud83d\ude80^\ud83d\ude80('',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80_many_ter\ud83d\ude80^\ud83d\ude80_times_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80aaa_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80_many_ter\ud83d\ude80^\ud83d\ude80_times_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80aaaa_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80aa_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80_len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def how_many_times ( string : str , substring : str ) -> int : \n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\" \n    count = 0 \n    \n    sub_len = len ( substring ) \n    \n    for i in range ( len ( string ) - sub_len + 1 ) : \n        if string [ i : i + sub_len ] == substring : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Python/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(sort_numbers):\n    assert sort_numbers('') == ''\n    assert sort_numbers('three') == 'three'\n    assert sort_numbers('three five nine') == 'three five nine'\n    assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'\n\ncheck(sort_numbers)", "text": "    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'", "declaration": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n", "example_test": "def check(sort_numbers):\n    assert sort_numbers('three one five') == 'one three five'\ncheck(sort_numbers)\n", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sort_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 3378, 32964, 152069, 153011, 151799, 152320, 5109, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 5571, 374, 264, 3550, 47126, 31511, 914, 315, 1372, 1127, 504, 364, 14154, 6, 311, 364, 93223, 23569, 262, 7818, 11454, 525, 364, 14154, 516, 364, 603, 516, 364, 19789, 516, 364, 27856, 516, 364, 34024, 516, 364, 52670, 516, 364, 50364, 516, 364, 80185, 516, 364, 67532, 6, 323, 364, 93223, 23569, 262, 3411, 279, 914, 448, 5109, 10615, 504, 24632, 311, 7772, 198, 262, 12109, 3378, 32964, 492, 27856, 825, 4236, 1305, 262, 364, 603, 2326, 4236, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1372, 5376, 152023, 152892, 152680, 152449, 152493, 364, 14154, 6, 151666, 152719, 364, 15, 6, 151666, 152645, 152680, 152449, 152493, 364, 603, 6, 151666, 152719, 364, 16, 6, 151666, 152645, 152680, 152449, 152493, 364, 19789, 6, 151666, 152719, 364, 17, 6, 151666, 152645, 152680, 152449, 152493, 364, 27856, 6, 151666, 152719, 364, 18, 6, 151666, 152645, 152680, 152449, 152493, 364, 34024, 6, 151666, 152719, 364, 19, 6, 151666, 152645, 152680, 152449, 152493, 364, 52670, 6, 151666, 152719, 364, 20, 6, 151666, 152645, 152680, 152449, 152493, 364, 50364, 6, 151666, 152719, 364, 21, 6, 151666, 152645, 152680, 152449, 152493, 364, 80185, 6, 151666, 152719, 364, 22, 6, 151666, 152645, 152680, 152449, 152493, 364, 67532, 6, 151666, 152719, 364, 23, 6, 151666, 152645, 152680, 152449, 152493, 364, 93223, 6, 151666, 152719, 364, 24, 6, 151666, 152244, 152631, 152208, 152677, 152929, 152891, 152440, 1372, 33500, 152911, 151879, 153033, 152036, 152136, 5109, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 10615, 32964, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 1372, 33500, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 1372, 5376, 151684, 152771, 151881, 856, 151773, 152987, 151773, 152996, 151703, 151740, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 364, 364, 151666, 152411, 5138, 152831, 152128, 152430, 10615, 32964, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80-del_ter\ud83d\ude80^\ud83d\ude80imited_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80nine_ter\ud83d\ude80^\ud83d\ude80'.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Valid_ter\ud83d\ude80^\ud83d\ude80\u0120choices_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80one_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80two_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80four_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80five_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80six_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80seven_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80eight_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80nine_ter\ud83d\ude80^\ud83d\ude80'.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120five_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80one_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120five_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80_map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80one_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80two_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80four_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80five_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80six_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80seven_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80eight_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80nine_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80_strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80_strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80_map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef sort_numbers ( numbers : str ) -> str : \n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\" \n    number_map = { 'zero' : '0' , 'one' : '1' , 'two' : '2' , 'three' : '3' , 'four' : '4' , 'five' : '5' , 'six' : '6' , 'seven' : '7' , 'eight' : '8' , 'nine' : '9' } \n    \n    number_strings = numbers . split ( ) \n    \n    sorted_numbers = sorted ( number_strings , key = lambda x : number_map [ x ] ) \n    \n    return ' ' . join ( sorted_numbers ) \n\n"}
{"task_id": "Python/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(find_closest_elements):\n    assert find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ncheck(find_closest_elements)", "text": "    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)", "declaration": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n", "example_test": "def check(find_closest_elements):\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\ncheck(find_closest_elements)\n", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80find_closest_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 152312, 151768, 151836, 152650, 24622, 152024, 153066, 151750, 152117, 151792, 1477, 12704, 267, 22801, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 2224, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 24622, 153031, 152812, 151990, 2224, 152874, 152812, 151990, 2224, 152349, 152141, 151876, 152677, 152502, 4210, 5542, 264, 17221, 1140, 315, 5109, 320, 1055, 3084, 518, 3245, 1378, 8, 3293, 323, 470, 1378, 429, 525, 279, 18093, 311, 1817, 198, 262, 1008, 323, 470, 1105, 304, 1973, 320, 9004, 261, 1372, 11, 8131, 1372, 4292, 262, 12109, 1477, 12704, 267, 22801, 2561, 16, 13, 15, 11, 220, 17, 13, 15, 11, 220, 18, 13, 15, 11, 220, 19, 13, 15, 11, 220, 20, 13, 15, 11, 220, 17, 13, 17, 2546, 262, 320, 17, 13, 15, 11, 220, 17, 13, 17, 340, 262, 12109, 1477, 12704, 267, 22801, 2561, 16, 13, 15, 11, 220, 17, 13, 15, 11, 220, 18, 13, 15, 11, 220, 19, 13, 15, 11, 220, 20, 13, 15, 11, 220, 17, 13, 15, 2546, 262, 320, 17, 13, 15, 11, 220, 17, 13, 15, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152082, 151879, 153033, 152036, 152136, 5109, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 18093, 14445, 151693, 152913, 151856, 152339, 152602, 5109, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152968, 151856, 152339, 152602, 5109, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151958, 152717, 152208, 152677, 152929, 152891, 152440, 1308, 15850, 152911, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 5109, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152780, 152955, 152339, 152602, 5109, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 5109, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 3638, 152911, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 5109, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152780, 152955, 152339, 152602, 5109, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 3638, 152622, 152668, 152528, 1308, 15850, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1308, 15850, 152370, 3638, 152208, 152677, 152929, 152891, 152440, 18093, 14445, 151693, 152913, 151856, 152339, 152602, 5109, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152968, 151856, 152339, 152602, 5109, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151958, 152717, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 18093, 14445, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120From_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120supplied_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120least_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80er_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120larger_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List , Tuple \ndef find_closest_elements ( numbers : List [ float ] ) -> Tuple [ float , float ] : \n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\" \n    numbers . sort ( ) \n    closest_pair = ( numbers [ 0 ] , numbers [ 1 ] ) \n    \n    min_diff = abs ( numbers [ 1 ] - numbers [ 0 ] ) \n    \n    for i in range ( 1 , len ( numbers ) - 1 ) : \n        diff = abs ( numbers [ i + 1 ] - numbers [ i ] ) \n        \n        if diff < min_diff : \n            min_diff = diff \n            \n            closest_pair = ( numbers [ i ] , numbers [ i + 1 ] ) \n            \n        \n    \n    return closest_pair \n\n"}
{"task_id": "Python/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(rescale_to_unit):\n    assert rescale_to_unit([2.0, 49.9]) == [0.0, 1.0]\n    assert rescale_to_unit([100.0, 49.9]) == [1.0, 0.0]\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ncheck(rescale_to_unit)", "text": "    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]", "declaration": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n", "example_test": "def check(rescale_to_unit):\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\ncheck(rescale_to_unit)\n", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80rescale_to_unit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 592, 2246, 2346, 14832, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 2224, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 2224, 152349, 152141, 151876, 152677, 152502, 4210, 16246, 1140, 315, 5109, 320, 1055, 518, 3245, 1378, 5424, 701, 3796, 264, 13482, 5165, 311, 429, 1140, 345, 262, 1741, 429, 279, 24632, 1372, 686, 3635, 220, 15, 323, 279, 7772, 686, 3635, 220, 16, 198, 262, 12109, 592, 2246, 2346, 14832, 2561, 16, 13, 15, 11, 220, 17, 13, 15, 11, 220, 18, 13, 15, 11, 220, 19, 13, 15, 11, 220, 20, 13, 15, 2546, 262, 508, 15, 13, 15, 11, 220, 15, 13, 17, 20, 11, 220, 15, 13, 20, 11, 220, 15, 13, 22, 20, 11, 220, 16, 13, 15, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1308, 4273, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 5109, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1932, 4273, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 5109, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 2088, 4273, 153081, 152456, 152440, 1932, 4273, 152780, 152370, 1308, 4273, 152208, 152677, 152929, 152891, 152440, 2088, 11123, 153081, 152456, 152169, 220, 16, 13, 15, 152780, 152370, 1308, 4273, 152208, 151886, 151941, 152817, 153002, 152285, 152456, 151839, 152925, 152456, 152440, 1629, 152780, 152370, 1308, 4273, 152144, 152370, 2088, 4273, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 5109, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80cale_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_unit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120least_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120apply_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120linear_ter\ud83d\ude80^\ud83d\ude80\u0120transform_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120become_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120become_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80cale_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_unit_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80_target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef rescale_to_unit ( numbers : List [ float ] ) -> List [ float ] : \n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\" \n    min_num = min ( numbers ) \n    \n    max_num = max ( numbers ) \n    \n    range_num = max_num - min_num \n    \n    range_target = 1.0 - min_num \n    \n    return [ ( num - min_num ) / range_num for num in numbers ] \n\n"}
{"task_id": "Python/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(filter_integers):\n    assert filter_integers([]) == []\n    assert filter_integers([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert filter_integers([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ncheck(filter_integers)", "text": "    Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]", "declaration": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n", "example_test": "def check(filter_integers):\n    assert filter_integers(['a', 3.14, 5]) == [5]\n    assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1,2,3]\ncheck(filter_integers)\n", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80Any_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80filter_integers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80Any_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 152312, 151768, 151836, 152650, 5765, 152024, 153066, 151750, 152117, 151792, 4051, 4042, 67592, 152069, 153011, 151799, 152320, 2750, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 5765, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 12339, 2661, 1140, 315, 894, 10135, 2750, 1172, 369, 25780, 198, 262, 12109, 4051, 4042, 67592, 6425, 64, 516, 220, 18, 13, 16, 19, 11, 220, 20, 2546, 262, 508, 20, 921, 262, 12109, 4051, 4042, 67592, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 364, 13683, 516, 16452, 3056, 2546, 262, 508, 16, 11, 220, 17, 11, 220, 18, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151941, 152817, 153002, 152396, 856, 152996, 152673, 152581, 152899, 152440, 856, 151918, 152237, 152370, 2750, 151764, 151880, 152598, 151879, 151845, 11402, 152831, 152128, 152430, 856, 153001, 152430, 526, 151703, 151740, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Any_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Any_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Filter_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120python_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120{},_ter\ud83d\ude80^\ud83d\ude80\u0120[]_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List , Any \ndef filter_integers ( values : List [ Any ] ) -> List [ int ] : \n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\" \n    return [ x for x in values if isinstance ( x , int ) ] \n\n"}
{"task_id": "Python/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "canonical_solution": "    return len(string)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(strlen):\n    assert strlen('') == 0\n    assert strlen('x') == 1\n    assert strlen('asdasnakj') == 9\n\ncheck(strlen)", "text": "    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3", "declaration": "def strlen(string: str) -> int:\n", "example_test": "def check(strlen):\n    assert strlen('') == 0\n    assert strlen('abc') == 3\ncheck(strlen)\n", "code": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80strlen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 12420, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 526, 151876, 152677, 152502, 4210, 3411, 3084, 315, 2661, 914, 198, 262, 12109, 12420, 37365, 262, 220, 15, 198, 262, 12109, 12420, 492, 13683, 1305, 262, 220, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152370, 914, 151876, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 151750, 152117, 151792, 15769, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 152297, 151799, 152320, 1191, 152273, 151990, 526, 152297, 151799, 152320, 835, 152273, 151990, 526, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 3411, 38449, 315, 2661, 914, 198, 262, 12109, 15769, 23315, 220, 15, 11, 220, 15, 340, 262, 11776, 262, 12109, 15769, 492, 13683, 516, 220, 15, 11, 220, 17, 340, 262, 364, 370, 1248, 262, 4210, 151666, 152208, 151886, 152480, 152339, 152602, 914, 151684, 152771, 152503, 152539, 1191, 152121, 152539, 835, 152085, 151773, 152987, 151773, 151953, 152996, 151750, 152117, 151792, 33720, 152069, 153011, 151799, 152310, 152536, 2827, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 3411, 97534, 914, 198, 262, 12109, 33720, 492, 13683, 516, 364, 750, 1305, 262, 364, 41202, 1248, 262, 12109, 33720, 492, 13683, 516, 364, 750, 516, 364, 75076, 1305, 262, 364, 56747, 72, 1248, 262, 4210, 151666, 152208, 152677, 152929, 152891, 152440, 1102, 151887, 3355, 151666, 152208, 152980, 152205, 152440, 1392, 152370, 2827, 151876, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1392, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 151750, 152117, 151792, 8416, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 3411, 8416, 1142, 914, 198, 262, 12109, 8416, 37365, 262, 11776, 262, 12109, 8416, 492, 13683, 1305, 262, 364, 25411, 1248, 262, 4210, 151666, 152208, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 8416, 152831, 152128, 151703, 151740, 151953, 152996, 151750, 152117, 151792, 4722, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 3411, 4722, 1142, 914, 198, 262, 12109, 4722, 37365, 262, 11776, 262, 12109, 4722, 492, 13683, 1305, 262, 364, 13683, 1248, 262, 4210, 151666, 152208, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 4722, 152831, 152128, 151703, 151740, 151953, 152996, 151750, 152117, 151792, 6718, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 152297, 152307, 151830, 151792, 29020, 152273, 151990, 607, 152719, 364, 364, 151666, 151775, 153051, 153051, 153090, 151990, 1140, 151876, 152677, 152502, 4210, 3411, 1140, 315, 9069, 6718, 553, 29020, 198, 262, 12109, 6718, 37365, 262, 4167, 262, 12109, 6718, 492, 13683, 1305, 262, 2509, 64, 516, 364, 65, 516, 364, 66, 4432, 262, 12109, 6718, 492, 13683, 516, 364, 67, 1305, 262, 2509, 64, 516, 364, 65, 516, 364, 66, 516, 364, 4432, 262, 4210, 151666, 152208, 151886, 151816, 151879, 153033, 152036, 152136, 914, 152411, 6718, 152831, 152128, 152430, 29020, 151703, 151740, 151953, 152996, 151750, 152117, 151792, 5138, 152069, 153011, 151799, 152310, 152536, 2827, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 3411, 914, 10859, 553, 29020, 198, 262, 12109, 5138, 492, 13683, 516, 364, 750, 1305, 262, 364, 41202, 1248, 262, 12109, 5138, 492, 13683, 516, 364, 750, 516, 364, 75076, 1305, 262, 364, 56747, 72, 1248, 262, 4210, 151666, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152430, 2827, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strlen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120strlen_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120strlen_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120substr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120substr_ter\ud83d\ude80^\ud83d\ude80('',_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120substr_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120concat_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80list_splat_pattern_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120args_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120concatenated_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120concat_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120concat_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ghi_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abcdefgh_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120args_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ABC_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_default_parameter_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120delimiter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120delimiter_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120delimiter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80list_splat_pattern_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120args_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120joined_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120delimiter_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ghi_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abcdefgh_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120args_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def strlen ( string : str ) -> int : \n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\" \n    count = 0 \n    \n    for char in string : \n        count += 1 \n    \n    return count \n\ndef substr ( string : str , start : int , end : int ) -> str : \n    \"\"\" Return substring of given string\n    >>> substr('', 0, 0)\n    ''\n    >>> substr('abc', 0, 2)\n    'ab'\n    \"\"\" \n    return string [ start : end ] \n\ndef concat ( * args : str ) -> str : \n    \"\"\" Return concatenated string\n    >>> concat('abc', 'def')\n    'abcdef'\n    >>> concat('abc', 'def', 'ghi')\n    'abcdefghi'\n    \"\"\" \n    result = '' \n    \n    for arg in args : \n        result += arg \n    \n    return result \n\ndef upper ( string : str ) -> str : \n    \"\"\" Return upper case string\n    >>> upper('')\n    ''\n    >>> upper('abc')\n    'ABC'\n    \"\"\" \n    return string . upper ( ) \n\ndef lower ( string : str ) -> str : \n    \"\"\" Return lower case string\n    >>> lower('')\n    ''\n    >>> lower('abc')\n    'abc'\n    \"\"\" \n    return string . lower ( ) \n\ndef split ( string : str , delimiter : str = ' ' ) -> list : \n    \"\"\" Return list of strings split by delimiter\n    >>> split('')\n    []\n    >>> split('abc')\n    ['a', 'b', 'c']\n    >>> split('abc', 'd')\n    ['a', 'b', 'c', '']\n    \"\"\" \n    return string . split ( delimiter ) \n\ndef join ( * args : str ) -> str : \n    \"\"\" Return string joined by delimiter\n    >>> join('abc', 'def')\n    'abcdef'\n    >>> join('abc', 'def', 'ghi')\n    'abcdefghi'\n    \"\"\" \n    return '' . join ( args ) \n\n"}
{"task_id": "Python/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(largest_divisor):\n    assert largest_divisor(3) == 1\n    assert largest_divisor(7) == 1\n    assert largest_divisor(10) == 5\n    assert largest_divisor(100) == 50\n    assert largest_divisor(49) == 7\n\ncheck(largest_divisor)", "text": "    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5", "declaration": "def largest_divisor(n: int) -> int:\n", "example_test": "def check(largest_divisor):\n    assert largest_divisor(15) == 5\ncheck(largest_divisor)\n", "code": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80largest_divisor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 7772, 16237, 15841, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 153090, 151990, 526, 151876, 152677, 152502, 4210, 1752, 264, 2661, 1372, 308, 11, 1477, 279, 7772, 1372, 429, 64828, 308, 41047, 11, 9155, 1091, 308, 198, 262, 12109, 7772, 16237, 15841, 7, 16, 20, 340, 262, 220, 20, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 308, 152542, 152071, 220, 17, 153001, 152228, 220, 15, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152588, 600, 151953, 152415, 151953, 152996, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120divides_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120evenly_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120smaller_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def largest_divisor ( n : int ) -> int : \n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\" \n    for i in range ( n // 2 , 0 , - 1 ) : \n        if n % i == 0 : \n            return i \n        \n    \n\n"}
{"task_id": "Python/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(factorize):\n    assert factorize(2) == [2]\n    assert factorize(4) == [2, 2]\n    assert factorize(8) == [2, 2, 2]\n    assert factorize(3 * 19) == [3, 19]\n    assert factorize(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert factorize(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert factorize(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert factorize(3 * 2 * 3) == [2, 3, 3]\n\ncheck(factorize)", "text": "    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]", "declaration": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n", "example_test": "def check(factorize):\n    assert factorize(8) == [2, 2, 2]\n    assert factorize(25) == [5,5]\n    assert factorize(70) == [2,5,7]\ncheck(factorize)\n", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80factorize_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 8168, 551, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 3411, 1140, 315, 10250, 9363, 315, 2661, 7546, 304, 279, 1973, 504, 24632, 311, 7772, 624, 262, 8886, 315, 279, 9363, 1265, 387, 10007, 1372, 315, 3039, 12159, 311, 1246, 1657, 3039, 432, 2642, 5403, 304, 8168, 2022, 624, 262, 5571, 1372, 1265, 387, 6144, 311, 279, 1985, 315, 678, 9363, 198, 262, 12109, 8168, 551, 7, 23, 340, 262, 508, 17, 11, 220, 17, 11, 220, 17, 921, 262, 12109, 8168, 551, 7, 17, 20, 340, 262, 508, 20, 11, 220, 20, 921, 262, 12109, 8168, 551, 7, 22, 15, 340, 262, 508, 17, 11, 220, 20, 11, 220, 22, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 600, 152071, 220, 17, 152208, 152677, 152929, 152891, 152440, 9363, 152445, 153062, 152222, 151847, 152208, 152067, 152685, 152583, 152988, 152456, 152440, 600, 151894, 152370, 600, 152622, 152533, 152528, 308, 152361, 151876, 151923, 152557, 152592, 152325, 152456, 152440, 308, 151702, 152370, 600, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 308, 152409, 152370, 600, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 9363, 152411, 8737, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152706, 152114, 220, 16, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 9363, 152411, 8737, 152831, 152128, 152430, 308, 151703, 151740, 152208, 151953, 152415, 151886, 152588, 9363, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Each_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120listed_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80\u0120many_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120appe_ter\ud83d\ude80^\ud83d\ude80ares_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ization_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef factorize ( n : int ) -> List [ int ] : \n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\" \n    i = 2 \n    \n    factors = [ ] \n    \n    while i * i <= n : \n        if n % i : \n            i += 1 \n        else : \n            n //= i \n            factors . append ( i ) \n        \n    \n    if n > 1 : \n        factors . append ( n ) \n    \n    return factors \n\n"}
{"task_id": "Python/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(remove_duplicates):\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n\ncheck(remove_duplicates)", "text": "    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]", "declaration": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n", "example_test": "def check(remove_duplicates):\n    assert remove_duplicates([1, 2, 3,2, 4]) == [1, 3, 4]\ncheck(remove_duplicates)\n", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80remove_duplicates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 4057, 75051, 152069, 153011, 151799, 152320, 5109, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 526, 152349, 152141, 151876, 152677, 152502, 4210, 5542, 264, 1140, 315, 25780, 11, 4057, 678, 5424, 429, 12170, 803, 1091, 3055, 624, 262, 13655, 1973, 315, 5424, 2115, 279, 1852, 438, 304, 279, 1946, 624, 262, 12109, 4057, 75051, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 17, 11, 220, 19, 2546, 262, 508, 16, 11, 220, 18, 11, 220, 19, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 14579, 152023, 152892, 152244, 152631, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1372, 152370, 5109, 151876, 151923, 152557, 152592, 152583, 152528, 1372, 152622, 152442, 152839, 152528, 14579, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152602, 14579, 151684, 152771, 151881, 1372, 151773, 152987, 151773, 152071, 220, 16, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1372, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152441, 152339, 152602, 14579, 151684, 152771, 151881, 1372, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 14579, 151684, 152771, 151881, 1372, 151773, 152987, 151773, 152622, 151683, 152114, 220, 17, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 4057, 152831, 152128, 152430, 1372, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_duplicates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120From_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120occur_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120once_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Keep_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_duplicates_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef remove_duplicates ( numbers : List [ int ] ) -> List [ int ] : \n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\" \n    counts = { } \n    \n    result = [ ] \n    \n    for number in numbers : \n        if number not in counts : \n            counts [ number ] = 1 \n            \n            result . append ( number ) \n        else : \n            counts [ number ] += 1 \n            if counts [ number ] == 2 : \n                result . remove ( number ) \n            \n        \n    \n    return result \n\n"}
{"task_id": "Python/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "canonical_solution": "    return string.swapcase()\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(flip_case):\n    assert flip_case('') == ''\n    assert flip_case('Hello!') == 'hELLO!'\n    assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\ncheck(flip_case)", "text": "    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'", "declaration": "def flip_case(string: str) -> str:\n", "example_test": "def check(flip_case):\n    assert flip_case('Hello') == 'hELLO'\ncheck(flip_case)\n", "code": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80flip_case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152117, 151792, 18287, 19096, 152069, 153011, 151799, 152320, 914, 152273, 151990, 607, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 1752, 264, 2661, 914, 11, 18287, 42047, 5766, 311, 39482, 323, 39482, 311, 42047, 624, 262, 12109, 18287, 19096, 492, 9707, 1305, 262, 364, 71, 2749, 1593, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152422, 152956, 151879, 153033, 152036, 152136, 1161, 152411, 4722, 152831, 152128, 151703, 151740, 152476, 152956, 151879, 153033, 152036, 152136, 1161, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152641, 152956, 151879, 153033, 152036, 152136, 1161, 152411, 8416, 152831, 152128, 151703, 151740, 152106, 152996, 152673, 152581, 152899, 152440, 1161, 151918, 152237, 152370, 914, 151764, 151868, 152329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flip_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120flip_ter\ud83d\ude80^\ud83d\ude80\u0120lowercase_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120uppercase_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120uppercase_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120lowercase_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120flip_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80EL_ter\ud83d\ude80^\ud83d\ude80LO_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80conditional_expression_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def flip_case ( string : str ) -> str : \n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \n    return '' . join ( [ char . lower ( ) if char . isupper ( ) else char . upper ( ) for char in string ] ) \n\n"}
{"task_id": "Python/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "canonical_solution": "    return ''.join(strings)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(concatenate):\n    assert concatenate([]) == ''\n    assert concatenate(['x', 'y', 'z']) == 'xyz'\n    assert concatenate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n\ncheck(concatenate)", "text": "    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'", "declaration": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n", "example_test": "def check(concatenate):\n    assert concatenate([]) == ''\n    assert concatenate(['a', 'b', 'c']) == 'abc'\ncheck(concatenate)\n", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80concatenate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 77784, 152069, 153011, 151799, 152320, 9069, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 151775, 153051, 153051, 153090, 151990, 607, 151876, 152677, 152502, 4210, 78195, 31123, 1140, 315, 9069, 1119, 264, 3175, 914, 198, 262, 12109, 77784, 41952, 262, 11776, 262, 12109, 77784, 6425, 64, 516, 364, 65, 516, 364, 66, 7368, 262, 364, 13683, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152430, 9069, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120concatenate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Concat_ter\ud83d\ude80^\ud83d\ude80enate_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120into_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120single_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120concatenate_ter\ud83d\ude80^\ud83d\ude80([])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120concatenate_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80'])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef concatenate ( strings : List [ str ] ) -> str : \n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \n    return '' . join ( strings ) \n\n"}
{"task_id": "Python/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(filter_by_prefix):\n    assert filter_by_prefix([], 'john') == []\n    assert filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ncheck(filter_by_prefix)", "text": "    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']", "declaration": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n", "example_test": "def check(filter_by_prefix):\n    assert filter_by_prefix([], 'a') == []\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']\ncheck(filter_by_prefix)\n", "code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n", "root": "module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80filter_by_prefix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80prefix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152895, 152102, 152400, 152148, 152650, 19496, 152024, 151814, 151768, 151836, 152650, 1759, 152024, 153066, 151750, 152117, 151792, 4051, 3710, 13974, 152069, 153011, 151799, 152320, 9069, 152273, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 152297, 151799, 152320, 9252, 152273, 151990, 607, 151775, 153051, 153051, 153090, 152269, 151759, 1759, 153031, 152812, 151990, 607, 152349, 152141, 151876, 152677, 152502, 4210, 12339, 458, 1946, 1140, 315, 9069, 1172, 369, 6174, 429, 1191, 448, 264, 2661, 9252, 624, 262, 12109, 4051, 3710, 13974, 40056, 364, 64, 1305, 262, 4167, 262, 12109, 4051, 3710, 13974, 6425, 13683, 516, 364, 91490, 516, 364, 66, 450, 516, 364, 1653, 4089, 364, 64, 1305, 262, 2509, 13683, 516, 364, 1653, 4432, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151941, 152817, 153002, 152396, 274, 152996, 152673, 152581, 152899, 152440, 274, 151918, 152237, 152370, 9069, 151764, 151880, 152598, 151879, 153033, 152036, 152136, 274, 152411, 1191, 22177, 152831, 152128, 152430, 9252, 151703, 151740, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120typing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_prefix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prefix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80->_ter\ud83d\ude80^\ud83d\ude80return_type_py\ud83d\ude80type_py\ud83d\ude80generic_type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80type_parameter_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Filter_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120ones_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120prefix_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_prefix_ter\ud83d\ude80^\ud83d\ude80([],_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_prefix_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bcd_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80de_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80'],_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80swith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120prefix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "from typing import List \ndef filter_by_prefix ( strings : List [ str ] , prefix : str ) -> List [ str ] : \n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \n    return [ s for s in strings if s . startswith ( prefix ) ] \n\n"}
{"task_id": "Python/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "canonical_solution": "    return [e for e in l if e > 0]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(get_positive):\n    assert get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert get_positive([-1, -2]) == []\n    assert get_positive([]) == []\n\ncheck(get_positive)", "text": "    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]", "declaration": "def get_positive(l: list):\n", "example_test": "def check(get_positive):\n    assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]\n    assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]\ncheck(get_positive)\n", "code": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [e for e in l if e > 0]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80get_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 633, 54160, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 1172, 6785, 5109, 304, 279, 1140, 624, 262, 12109, 633, 54160, 41197, 16, 11, 220, 17, 11, 481, 19, 11, 220, 20, 11, 220, 21, 2546, 262, 508, 17, 11, 220, 20, 11, 220, 21, 921, 262, 12109, 633, 54160, 2561, 20, 11, 220, 18, 11, 481, 20, 11, 220, 17, 11, 481, 18, 11, 220, 18, 11, 220, 24, 11, 220, 15, 11, 220, 16, 17, 18, 11, 220, 16, 11, 481, 16, 15, 2546, 262, 508, 20, 11, 220, 18, 11, 220, 17, 11, 220, 18, 11, 220, 24, 11, 220, 16, 17, 18, 11, 220, 16, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151941, 152817, 153002, 152396, 308, 152996, 152673, 152581, 152899, 152440, 308, 151918, 152237, 152370, 326, 151764, 151880, 152257, 152528, 308, 152622, 152706, 152114, 220, 15, 152361, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_positive ( l : list ) : \n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\" \n    return [ n for n in l if n > 0 ] \n\n"}
{"task_id": "Python/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(is_prime):\n    assert is_prime(6) == False\n    assert is_prime(101) == True\n    assert is_prime(11) == True\n    assert is_prime(13441) == True\n    assert is_prime(61) == True\n    assert is_prime(4) == False\n    assert is_prime(1) == False\n    assert is_prime(5) == True\n    assert is_prime(11) == True\n    assert is_prime(17) == True\n    assert is_prime(5 * 17) == False\n    assert is_prime(11 * 7) == False\n    assert is_prime(13441 * 19) == False\n\ncheck(is_prime)", "text": "    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False", "declaration": "def is_prime(n):\n", "example_test": "def check(is_prime):\n    assert is_prime(6) == False\n    assert is_prime(101) == True\n    assert is_prime(11) == True\n    assert is_prime(13441) == True\n    assert is_prime(61) == True\n    assert is_prime(4) == False\n    assert is_prime(1) == False\ncheck(is_prime)\n", "code": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 830, 421, 264, 2661, 1372, 374, 10250, 11, 323, 895, 5937, 624, 262, 12109, 374, 38217, 7, 21, 340, 262, 3557, 198, 262, 12109, 374, 38217, 7, 16, 15, 16, 340, 262, 3007, 198, 262, 12109, 374, 38217, 7, 16, 16, 340, 262, 3007, 198, 262, 12109, 374, 38217, 7, 16, 18, 19, 19, 16, 340, 262, 3007, 198, 262, 12109, 374, 38217, 7, 21, 16, 340, 262, 3007, 198, 262, 12109, 374, 38217, 7, 19, 340, 262, 3557, 198, 262, 12109, 374, 38217, 7, 16, 340, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 18, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152988, 152456, 152440, 308, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 600, 152071, 220, 20, 152208, 152067, 152685, 152583, 152988, 152456, 152440, 600, 151894, 152370, 600, 152622, 152533, 152528, 308, 152361, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152988, 152456, 152440, 308, 151702, 152879, 152925, 152456, 152440, 600, 152328, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 21, 152208, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_prime ( n ) : \n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\" \n    if n <= 1 : \n        return False \n    \n    if n <= 3 : \n        return True \n    \n    if n % 2 == 0 or n % 3 == 0 : \n        return False \n    \n    i = 5 \n    \n    while i * i <= n : \n        if n % i == 0 or n % ( i + 2 ) == 0 : \n            return False \n        \n        i += 6 \n    \n    return True \n\n"}
{"task_id": "Python/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "test": "\n\nMETADATA = {}\n\n\ndef check(find_zero):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = find_zero(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\ncheck(find_zero)", "text": "    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0", "declaration": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n", "example_test": "def check(find_zero):\n    assert abs(find_zero([1,2])+0.5<1e-4)\n    assert abs(find_zero([-6,11,-6,1])-1<1e-4)\ncheck(find_zero)\n", "code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "root": "module_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80poly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80pow_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80find_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152292, 152043, 152844, 151836, 152650, 6888, 152024, 151726, 151750, 152559, 151792, 9861, 152069, 153011, 151799, 152320, 11943, 152273, 151990, 1140, 152297, 151799, 152320, 856, 152273, 151990, 2224, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 75098, 973, 47311, 448, 36829, 11943, 518, 1459, 856, 624, 262, 470, 11943, 58, 15, 60, 488, 11943, 58, 16, 60, 353, 856, 488, 11943, 58, 16, 60, 353, 856, 61, 17, 488, 21903, 11943, 7669, 60, 353, 856, 86167, 198, 262, 4210, 151666, 152208, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 152919, 152817, 153002, 152285, 152456, 152440, 17593, 151894, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 6875, 152831, 152128, 152430, 856, 153001, 152430, 600, 151703, 151740, 152996, 152673, 152581, 152899, 152731, 151810, 600, 152554, 151810, 17593, 152455, 151918, 152237, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 11943, 151703, 151740, 151764, 151868, 152329, 151703, 151740, 151953, 152996, 151750, 152559, 151792, 1477, 19359, 152069, 153011, 151799, 152320, 11943, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 11943, 525, 36829, 315, 264, 47311, 624, 262, 1477, 19359, 1477, 856, 1741, 429, 9861, 2075, 8, 284, 220, 15, 624, 262, 1477, 19359, 4675, 1172, 1172, 7168, 1459, 11, 1496, 421, 1052, 525, 1657, 624, 262, 22827, 11, 1477, 19359, 1172, 4990, 1140, 11943, 3432, 1496, 1372, 315, 36829, 198, 262, 323, 7772, 2477, 7168, 35606, 438, 432, 35655, 198, 262, 264, 6291, 624, 262, 12109, 4778, 33943, 19359, 2561, 16, 11, 220, 17, 9719, 220, 17, 8, 671, 282, 2075, 8, 284, 220, 16, 488, 220, 17, 87, 198, 262, 481, 15, 13, 20, 198, 262, 12109, 4778, 33943, 19359, 41197, 21, 11, 220, 16, 16, 11, 481, 21, 11, 220, 16, 9719, 220, 17, 8, 671, 320, 87, 481, 220, 16, 8, 353, 320, 87, 481, 220, 17, 8, 353, 320, 87, 481, 220, 18, 8, 284, 481, 21, 488, 220, 16, 16, 87, 481, 220, 21, 87, 61, 17, 488, 856, 61, 18, 198, 262, 220, 16, 13, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 308, 153081, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 11943, 151703, 151740, 152780, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 294, 153081, 152456, 152468, 220, 17, 151894, 152370, 308, 152208, 152677, 152929, 152891, 152440, 264, 153081, 152456, 153101, 151879, 151845, 9861, 152831, 152128, 152430, 11943, 153001, 152228, 220, 15, 151703, 151740, 152144, 152370, 294, 152208, 152677, 152929, 152891, 152440, 293, 153081, 152456, 153101, 151879, 151845, 9861, 152831, 152128, 152430, 11943, 153001, 152430, 308, 151703, 151740, 152144, 152370, 294, 152208, 152677, 152929, 152891, 152440, 856, 153081, 152456, 151839, 152925, 152456, 152883, 151878, 152780, 152801, 293, 152328, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 17946, 152831, 152128, 151766, 152456, 152321, 152456, 152440, 293, 151940, 152071, 220, 17, 152780, 153081, 152456, 152321, 152456, 152468, 220, 19, 151894, 152370, 264, 151894, 152071, 220, 15, 151703, 151740, 152144, 152879, 152925, 152456, 152468, 220, 17, 151894, 152370, 264, 152208, 151886, 152588, 856, 151953, 152996, 151750, 152559, 151792, 1477, 26608, 2412, 152069, 153011, 151799, 152320, 11943, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 11943, 525, 36829, 315, 264, 47311, 624, 262, 1477, 26608, 2412, 1477, 678, 19703, 315, 279, 47311, 624, 262, 1477, 26608, 2412, 4675, 1172, 2477, 5504, 64877, 19703, 624, 262, 1477, 26608, 2412, 4990, 1140, 11943, 3432, 1496, 1372, 315, 36829, 198, 262, 323, 7772, 2477, 7168, 35606, 438, 432, 35655, 198, 262, 264, 6291, 624, 262, 12109, 4778, 33943, 26608, 2412, 2561, 16, 11, 220, 17, 9719, 220, 17, 8, 671, 282, 2075, 8, 284, 220, 16, 488, 220, 17, 87, 198, 262, 508, 15, 13, 15, 11, 220, 16, 13, 15, 921, 262, 12109, 4778, 33943, 26608, 2412, 41197, 21, 11, 220, 16, 16, 11, 481, 21, 11, 220, 16, 9719, 220, 17, 8, 671, 320, 87, 481, 220, 16, 8, 353, 320, 87, 481, 220, 17, 8, 353, 320, 87, 481, 220, 18, 8, 284, 481, 21, 488, 220, 16, 16, 87, 481, 220, 21, 87, 61, 17, 488, 856, 61, 18, 198, 262, 508, 16, 13, 15, 11, 220, 17, 13, 15, 921, 262, 4210, 151666, 152208, 152677, 152929, 152891, 152440, 308, 153081, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 11943, 151703, 151740, 152780, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 294, 153081, 152456, 152468, 220, 17, 151894, 152370, 308, 152208, 152677, 152929, 152891, 152440, 264, 153081, 152456, 153101, 151879, 151845, 9861, 152831, 152128, 152430, 11943, 153001, 152228, 220, 15, 151703, 151740, 152144, 152370, 294, 152208, 152677, 152929, 152891, 152440, 293, 153081, 152456, 153101, 151879, 151845, 9861, 152831, 152128, 152430, 11943, 153001, 152430, 308, 151703, 151740, 152144, 152370, 294, 152208, 152677, 152929, 152891, 152440, 49319, 517, 153081, 152456, 152321, 152456, 152440, 293, 151940, 152071, 220, 17, 152780, 153081, 152456, 152321, 152456, 152468, 220, 19, 151894, 152370, 264, 151894, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 19703, 152445, 153062, 152222, 151847, 152208, 151923, 152557, 152592, 152583, 152528, 49319, 517, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152588, 19703, 151953, 152415, 152677, 152929, 152891, 152440, 17946, 37745, 6283, 85296, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 17946, 152831, 152128, 152430, 49319, 517, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 3704, 16, 153081, 152456, 151839, 152925, 152456, 152883, 151878, 152780, 152801, 293, 152328, 152370, 17946, 37745, 6283, 85296, 152144, 152879, 152925, 152456, 152468, 220, 17, 151894, 152370, 264, 152208, 152677, 152929, 152891, 152440, 3704, 17, 153081, 152456, 151839, 152925, 152456, 152883, 151878, 152780, 152801, 293, 152780, 152370, 17946, 37745, 6283, 85296, 152144, 152879, 152925, 152456, 152468, 220, 17, 151894, 152370, 264, 152208, 151923, 152557, 152592, 152583, 152528, 3704, 16, 152622, 151683, 152528, 3704, 17, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 19703, 152411, 8737, 152831, 152128, 152430, 3704, 16, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 19703, 152411, 8737, 152831, 152128, 152430, 3704, 16, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 19703, 152411, 8737, 152831, 152128, 152430, 3704, 17, 151703, 151740, 152208, 151953, 152996, 152415, 151886, 152588, 19703, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120poly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Evalu_ter\ud83d\ude80^\ud83d\ude80ates_ter\ud83d\ude80^\ud83d\ude80\u0120polynomial_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120coefficients_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120point_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120...._ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[n_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^n_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pow_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120coeff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120coefficients_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120polynomial_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120poly_ter\ud83d\ude80^\ud83d\ude80(x_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80\u0120point_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120many_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Moreover_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80\u0120having_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120coefficients_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80\u0120coefficient_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120guarantees_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120solution_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80(find_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]),_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80(x_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80(find_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]),_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120poly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120poly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sqrt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_ro_ter\ud83d\ude80^\ud83d\ude80ots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120coefficients_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120polynomial_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_ro_ter\ud83d\ude80^\ud83d\ude80ots_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120polynomial_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_ro_ter\ud83d\ude80^\ud83d\ude80ots_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-re_ter\ud83d\ude80^\ud83d\ude80peating_ter\ud83d\ude80^\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_ro_ter\ud83d\ude80^\ud83d\ude80ots_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80\u0120having_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120coefficients_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80\u0120coefficient_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120guarantees_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120solution_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80(find_ter\ud83d\ude80^\ud83d\ude80_ro_ter\ud83d\ude80^\ud83d\ude80ots_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]),_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80(x_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80(find_ter\ud83d\ude80^\ud83d\ude80_ro_ter\ud83d\ude80^\ud83d\ude80ots_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]),_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120poly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120poly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120discrimin_ter\ud83d\ude80^\ud83d\ude80ant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120discrimin_ter\ud83d\ude80^\ud83d\ude80ant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sqrt_ter\ud83d\ude80^\ud83d\ude80_disc_ter\ud83d\ude80^\ud83d\ude80rim_ter\ud83d\ude80^\ud83d\ude80inant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sqrt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120discrimin_ter\ud83d\ude80^\ud83d\ude80ant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sqrt_ter\ud83d\ude80^\ud83d\ude80_disc_ter\ud83d\ude80^\ud83d\ude80rim_ter\ud83d\ude80^\ud83d\ude80inant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sqrt_ter\ud83d\ude80^\ud83d\ude80_disc_ter\ud83d\ude80^\ud83d\ude80rim_ter\ud83d\ude80^\ud83d\ude80inant_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120root_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120roots_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "import math \ndef poly ( xs : list , x : float ) : \n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\" \n    return sum ( [ coeff * math . pow ( x , i ) for i , coeff in enumerate ( xs ) ] ) \n\ndef find_zero ( xs : list ) : \n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\" \n    n = len ( xs ) - 1 \n    \n    d = 2 * n \n    \n    a = poly ( xs , 0 ) / d \n    \n    b = poly ( xs , n ) / d \n    \n    x = ( - b + math . sqrt ( b ** 2 - 4 * a * 0 ) ) / ( 2 * a ) \n    \n    return x \n\ndef find_roots ( xs : list ) : \n    \"\"\" xs are coefficients of a polynomial.\n    find_roots find all roots of the polynomial.\n    find_roots returns only non-repeating roots.\n    find_roots takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_roots([1, 2]), 2) # f(x) = 1 + 2x\n    [0.0, 1.0]\n    >>> round(find_roots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    [1.0, 2.0]\n    \"\"\" \n    n = len ( xs ) - 1 \n    \n    d = 2 * n \n    \n    a = poly ( xs , 0 ) / d \n    \n    b = poly ( xs , n ) / d \n    \n    discriminant = b ** 2 - 4 * a * 0 \n    \n    roots = [ ] \n    \n    if discriminant < 0 : \n        return roots \n    \n    sqrt_discriminant = math . sqrt ( discriminant ) \n    \n    root1 = ( - b + sqrt_discriminant ) / ( 2 * a ) \n    \n    root2 = ( - b - sqrt_discriminant ) / ( 2 * a ) \n    \n    if root1 == root2 : \n        roots . append ( root1 ) \n    else : \n        roots . append ( root1 ) \n        roots . append ( root2 ) \n    \n    return roots \n\n"}
{"task_id": "Python/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "test": "\n\nMETADATA = {}\n\n\ndef check(sort_third):\n    assert tuple(sort_third([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(sort_third([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(sort_third([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(sort_third([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(sort_third([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\ncheck(sort_third)", "text": "    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]", "declaration": "def sort_third(l: list):\n", "example_test": "def check(sort_third):\n    assert sort_third([1, 2, 3]) == [1, 2, 3]\n    assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]\ncheck(sort_third)\n", "code": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sort_third_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3378, 79519, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 1986, 729, 4990, 264, 1140, 326, 323, 4675, 264, 1140, 326, 6, 1741, 429, 198, 262, 326, 6, 374, 19516, 311, 326, 304, 279, 4447, 550, 429, 525, 537, 74916, 553, 2326, 11, 1393, 1181, 2750, 518, 279, 4447, 550, 429, 525, 74916, 553, 2326, 525, 6144, 198, 262, 311, 279, 2750, 315, 279, 12159, 4447, 550, 315, 326, 11, 714, 10615, 624, 262, 12109, 3378, 79519, 2561, 16, 11, 220, 17, 11, 220, 18, 2546, 262, 508, 16, 11, 220, 17, 11, 220, 18, 921, 262, 12109, 3378, 79519, 2561, 20, 11, 220, 21, 11, 220, 18, 11, 220, 19, 11, 220, 23, 11, 220, 24, 11, 220, 17, 2546, 262, 508, 17, 11, 220, 21, 11, 220, 18, 11, 220, 19, 11, 220, 23, 11, 220, 24, 11, 220, 20, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 4843, 152474, 152817, 153002, 152846, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 151703, 151740, 151764, 151880, 152257, 152988, 152456, 151839, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 4843, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 4843, 3560, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 151839, 152925, 152456, 152440, 600, 152328, 152071, 220, 16, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152441, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152955, 152339, 152602, 4843, 151684, 152771, 151881, 4843, 3560, 151773, 152987, 151773, 152208, 152677, 153037, 152682, 152440, 4843, 3560, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 326, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_third_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80This_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120identical_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120indic_ter\ud83d\ude80^\ud83d\ude80ies_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120divisible_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120while_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120indic_ter\ud83d\ude80^\ud83d\ude80ies_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120divisible_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120indic_ter\ud83d\ude80^\ud83d\ude80ies_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_third_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_third_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_third ( l : list ) : \n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\" \n    third = [ l [ i ] for i in range ( len ( l ) ) if ( i + 1 ) % 3 == 0 ] \n    \n    third . sort ( ) \n    third_index = 0 \n    \n    for i in range ( len ( l ) ) : \n        if ( i + 1 ) % 3 == 0 : \n            l [ i ] = third [ third_index ] \n            \n            third_index += 1 \n        \n    \n    return l \n\n"}
{"task_id": "Python/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "canonical_solution": "    return sorted(list(set(l)))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(unique):\n    assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ncheck(unique)", "text": "    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]", "declaration": "def unique(l: list):\n", "example_test": "def check(unique):\n    assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\ncheck(unique)\n", "code": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80unique_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4911, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 10615, 4911, 5424, 304, 264, 1140, 198, 262, 12109, 4911, 2561, 20, 11, 220, 18, 11, 220, 20, 11, 220, 17, 11, 220, 18, 11, 220, 18, 11, 220, 24, 11, 220, 15, 11, 220, 16, 17, 18, 2546, 262, 508, 15, 11, 220, 17, 11, 220, 18, 11, 220, 20, 11, 220, 24, 11, 220, 16, 17, 18, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 4911, 22801, 152911, 151879, 151845, 738, 152831, 152128, 152430, 326, 151703, 151740, 152208, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 4911, 22801, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def unique ( l : list ) : \n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\" \n    unique_elements = set ( l ) \n    \n    return sorted ( unique_elements ) \n\n"}
{"task_id": "Python/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "test": "\n\nMETADATA = {}\n\n\ndef check(max_element):\n    assert max_element([1, 2, 3]) == 3\n    assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ncheck(max_element)", "text": "    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123", "declaration": "def max_element(l: list):\n", "example_test": "def check(max_element):\n    assert max_element([1, 2, 3]) == 3\n    assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123\ncheck(max_element)\n", "code": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80max_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1932, 7894, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 7192, 2392, 304, 279, 1140, 624, 262, 12109, 1932, 7894, 2561, 16, 11, 220, 17, 11, 220, 18, 2546, 262, 220, 18, 198, 262, 12109, 1932, 7894, 2561, 20, 11, 220, 18, 11, 481, 20, 11, 220, 17, 11, 481, 18, 11, 220, 18, 11, 220, 24, 11, 220, 15, 11, 220, 16, 17, 18, 11, 220, 16, 11, 481, 16, 15, 2546, 262, 220, 16, 17, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1932, 4273, 152955, 152339, 152602, 326, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 152980, 152205, 152440, 1629, 152370, 326, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152706, 152528, 1932, 4273, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 4273, 152370, 1629, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1932, 4273, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_element_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_element ( l : list ) : \n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\" \n    max_num = l [ 0 ] \n    \n    for num in l : \n        if num > max_num : \n            max_num = num \n            \n        \n    \n    return max_num \n\n"}
{"task_id": "Python/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(fizz_buzz):\n    assert fizz_buzz(50) == 0\n    assert fizz_buzz(78) == 2\n    assert fizz_buzz(79) == 3\n    assert fizz_buzz(100) == 3\n    assert fizz_buzz(200) == 6\n    assert fizz_buzz(4000) == 192\n    assert fizz_buzz(10000) == 639\n    assert fizz_buzz(100000) == 8026\n\ncheck(fizz_buzz)", "text": "    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3", "declaration": "def fizz_buzz(n: int):\n", "example_test": "def check(fizz_buzz):\n    assert fizz_buzz(50) == 0\n    assert fizz_buzz(78) == 2\n    assert fizz_buzz(79) == 3\ncheck(fizz_buzz)\n", "code": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80fizz_buzz_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 86979, 880, 8889, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 279, 1372, 315, 3039, 279, 15723, 220, 22, 7952, 304, 25780, 2686, 1091, 308, 892, 525, 74916, 553, 220, 16, 16, 476, 220, 16, 18, 624, 262, 12109, 86979, 880, 8889, 7, 20, 15, 340, 262, 220, 15, 198, 262, 12109, 86979, 880, 8889, 7, 22, 23, 340, 262, 220, 17, 198, 262, 12109, 86979, 880, 8889, 7, 22, 24, 340, 262, 220, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 74916, 32964, 152474, 152817, 153002, 152396, 600, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152430, 308, 151703, 151740, 151764, 151880, 152390, 152412, 152749, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 16, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 16, 18, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 97534, 32964, 152911, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 151865, 151879, 151845, 2415, 152831, 152128, 152430, 607, 153001, 152430, 74916, 32964, 151703, 151740, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1760, 3575, 62, 22, 82, 152911, 151879, 153033, 152036, 152136, 97534, 32964, 152411, 1760, 152831, 152128, 152928, 364, 22, 6, 151666, 151703, 151740, 152208, 151886, 152588, 1760, 3575, 62, 22, 82, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fizz_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80uzz_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u0120appears_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120divisible_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fizz_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80uzz_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fizz_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80uzz_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fizz_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80uzz_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120divisible_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120concatenated_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120divisible_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120concatenated_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def fizz_buzz ( n : int ) : \n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\" \n    divisible_numbers = [ i for i in range ( 1 , n ) if i % 11 == 0 or i % 13 == 0 ] \n    \n    concatenated_numbers = '' . join ( map ( str , divisible_numbers ) ) \n    \n    count_of_7s = concatenated_numbers . count ( '7' ) \n    \n    return count_of_7s \n\n"}
{"task_id": "Python/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(sort_even):\n    assert tuple(sort_even([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\ncheck(sort_even)", "text": "    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]", "declaration": "def sort_even(l: list):\n", "example_test": "def check(sort_even):\n    assert tuple(sort_even([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(sort_even([5, 6,3,4])) == tuple([3,6,5,4])\ncheck(sort_even)\n", "code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sort_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3378, 68347, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 1986, 729, 4990, 264, 1140, 326, 323, 4675, 264, 1140, 326, 6, 1741, 429, 198, 262, 326, 6, 374, 19516, 311, 326, 304, 279, 10322, 4447, 550, 11, 1393, 1181, 2750, 518, 279, 1496, 4447, 550, 525, 6144, 198, 262, 311, 279, 2750, 315, 279, 1496, 4447, 550, 315, 326, 11, 714, 10615, 624, 262, 12109, 3378, 68347, 2561, 16, 11, 220, 17, 11, 220, 18, 2546, 262, 508, 16, 11, 220, 17, 11, 220, 18, 921, 262, 12109, 3378, 68347, 2561, 20, 11, 220, 21, 11, 220, 18, 11, 220, 19, 2546, 262, 508, 18, 11, 220, 21, 11, 220, 20, 11, 220, 19, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1496, 18333, 152474, 152817, 153002, 152846, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1496, 18333, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1496, 3560, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1496, 18333, 151684, 152771, 151881, 1496, 3560, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 1496, 3560, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80This_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120identical_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120indic_ter\ud83d\ude80^\ud83d\ude80ies_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120while_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120indic_ter\ud83d\ude80^\ud83d\ude80ies_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120indic_ter\ud83d\ude80^\ud83d\ude80ies_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_indices_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_even ( l : list ) : \n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\" \n    even_indices = [ l [ i ] for i in range ( 0 , len ( l ) , 2 ) ] \n    \n    even_indices . sort ( ) \n    result = [ ] \n    \n    even_index = 0 \n    \n    for i in range ( len ( l ) ) : \n        if i % 2 == 0 : \n            result . append ( even_indices [ even_index ] ) \n            even_index += 1 \n        else : \n            result . append ( l [ i ] ) \n        \n    \n    return result \n\n"}
{"task_id": "Python/38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(decode_cyclic):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert decode_cyclic(encoded_str) == str\n\ncheck(decode_cyclic)", "text": "    takes as input string encoded with encode_cyclic function. Returns decoded string.", "declaration": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n", "example_test": "", "code": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80encode_cyclic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80conditional_expression_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80decode_cyclic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 16164, 666, 65304, 152069, 153011, 151799, 152320, 274, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4675, 20498, 914, 553, 32062, 5203, 315, 2326, 5766, 624, 262, 4210, 151666, 152208, 152677, 152929, 152891, 152440, 5203, 152474, 152817, 153002, 152846, 152339, 152602, 274, 151684, 152771, 152503, 152373, 152925, 152456, 152468, 220, 18, 151894, 152370, 600, 152121, 152130, 151879, 151845, 1308, 152831, 152128, 151680, 152925, 152456, 152321, 152456, 152468, 220, 18, 151894, 152370, 600, 152328, 152071, 220, 18, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 151703, 151740, 152085, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 151839, 152925, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152328, 152071, 220, 17, 152542, 152071, 220, 18, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 5203, 152474, 152817, 153002, 152422, 151931, 152925, 152456, 152441, 152339, 152602, 1874, 151684, 152771, 152503, 152158, 220, 16, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 1874, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152476, 152836, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1874, 151703, 151740, 152622, 151683, 152114, 220, 18, 152361, 152641, 152766, 1874, 152106, 152996, 152673, 152581, 152899, 152440, 1874, 151918, 152237, 152370, 5203, 151764, 151868, 152329, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 1591, 151666, 152411, 5138, 152831, 152128, 152430, 5203, 151703, 151740, 151953, 152996, 151750, 152559, 151792, 16895, 666, 65304, 152069, 153011, 151799, 152320, 274, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4990, 438, 1946, 914, 20498, 448, 16164, 666, 65304, 729, 13, 5184, 29213, 914, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 5203, 152474, 152817, 153002, 152846, 152339, 152602, 274, 151684, 152771, 152503, 152373, 152925, 152456, 152468, 220, 18, 151894, 152370, 600, 152121, 152130, 151879, 151845, 1308, 152831, 152128, 151680, 152925, 152456, 152321, 152456, 152468, 220, 18, 151894, 152370, 600, 152328, 152071, 220, 18, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 151703, 151740, 152085, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 151839, 152925, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152328, 152071, 220, 17, 152542, 152071, 220, 18, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 5203, 152474, 152817, 153002, 152422, 151931, 152925, 152456, 152441, 152339, 152602, 1874, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 1874, 151684, 152771, 152503, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152476, 152836, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1874, 151703, 151740, 152622, 151683, 152114, 220, 18, 152361, 152641, 152766, 1874, 152106, 152996, 152673, 152581, 152899, 152440, 1874, 151918, 152237, 152370, 5203, 151764, 151868, 152329, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 1591, 151666, 152411, 5138, 152831, 152128, 152430, 5203, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80yclic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120cycling_ter\ud83d\ude80^\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80conditional_expression_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decode_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80yclic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80_c_ter\ud83d\ude80^\ud83d\ude80yclic_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Returns_ter\ud83d\ude80^\ud83d\ude80\u0120decoded_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80conditional_expression_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120groups_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def encode_cyclic ( s : str ) : \n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\" \n    groups = [ s [ ( 3 * i ) : min ( ( 3 * i + 3 ) , len ( s ) ) ] for i in range ( ( len ( s ) + 2 ) // 3 ) ] \n    \n    groups = [ ( group [ 1 : ] + group [ 0 ] ) if len ( group ) == 3 else group for group in groups ] \n    \n    return \"\" . join ( groups ) \n\ndef decode_cyclic ( s : str ) : \n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\" \n    groups = [ s [ ( 3 * i ) : min ( ( 3 * i + 3 ) , len ( s ) ) ] for i in range ( ( len ( s ) + 2 ) // 3 ) ] \n    \n    groups = [ ( group [ - 1 ] + group [ : - 1 ] ) if len ( group ) == 3 else group for group in groups ] \n    \n    return \"\" . join ( groups ) \n\n"}
{"task_id": "Python/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(prime_fib):\n    assert prime_fib(1) == 2\n    assert prime_fib(2) == 3\n    assert prime_fib(3) == 5\n    assert prime_fib(4) == 13\n    assert prime_fib(5) == 89\n    assert prime_fib(6) == 233\n    assert prime_fib(7) == 1597\n    assert prime_fib(8) == 28657\n    assert prime_fib(9) == 514229\n    assert prime_fib(10) == 433494437\n\ncheck(prime_fib)", "text": "    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89", "declaration": "def prime_fib(n: int):\n", "example_test": "def check(prime_fib):\n    assert prime_fib(1) == 2\n    assert prime_fib(2) == 3\n    assert prime_fib(3) == 5\n    assert prime_fib(4) == 13\n    assert prime_fib(5) == 89\ncheck(prime_fib)\n", "code": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80prime_fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 10250, 761, 579, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 10250, 761, 579, 4675, 308, 7563, 1372, 429, 374, 264, 79683, 1372, 323, 432, 594, 1083, 10250, 624, 262, 12109, 10250, 761, 579, 7, 16, 340, 262, 220, 17, 198, 262, 12109, 10250, 761, 579, 7, 17, 340, 262, 220, 18, 198, 262, 12109, 10250, 761, 579, 7, 18, 340, 262, 220, 20, 198, 262, 12109, 10250, 761, 579, 7, 19, 340, 262, 220, 16, 18, 198, 262, 12109, 10250, 761, 579, 7, 20, 340, 262, 220, 23, 24, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 286, 12906, 729, 311, 1779, 421, 264, 1372, 374, 10250, 624, 286, 4210, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 1629, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152496, 152559, 151792, 15801, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 286, 12906, 729, 311, 6923, 79683, 5109, 624, 286, 4210, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152819, 151886, 151832, 220, 16, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152455, 152482, 152869, 220, 15, 152192, 152869, 220, 16, 151741, 152208, 152980, 152205, 152440, 716, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152455, 152482, 152608, 293, 152192, 151796, 152456, 152440, 264, 152328, 152370, 293, 151741, 152208, 151953, 152996, 151886, 152588, 293, 151953, 152996, 152415, 151953, 152996, 152677, 152929, 152891, 152440, 600, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 15801, 32964, 152445, 153062, 152222, 151847, 152208, 152067, 152685, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 15801, 32964, 151703, 151740, 152622, 152668, 152528, 308, 152361, 151876, 152677, 152929, 152891, 152440, 15801, 4273, 152911, 151879, 151845, 15801, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151923, 152557, 152592, 151689, 151879, 151845, 374, 38217, 152831, 152128, 152430, 15801, 4273, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 15801, 32964, 152411, 8737, 152831, 152128, 152430, 15801, 4273, 151703, 151740, 152208, 151953, 152415, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152996, 151886, 152480, 152339, 152602, 15801, 32964, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80-th_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120Fibonacci_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120also_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120generate_ter\ud83d\ude80^\ud83d\ude80\u0120Fibonacci_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def prime_fib ( n : int ) : \n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\" \n    def is_prime ( num ) : \n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\" \n        if num < 2 : \n            return False \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                return False \n            \n        \n        return True \n    \n    def fib ( n ) : \n        \"\"\"\n        Helper function to generate Fibonacci numbers.\n        \"\"\" \n        if n <= 0 : \n            return 0 \n        elif n == 1 : \n            return 1 \n        else : \n            a , b = 0 , 1 \n            \n            for _ in range ( 2 , n + 1 ) : \n                a , b = b , a + b \n                \n            \n            return b \n        \n    \n    i = 1 \n    \n    fib_numbers = [ ] \n    \n    while len ( fib_numbers ) < n : \n        fib_num = fib ( i ) \n        \n        if is_prime ( fib_num ) : \n            fib_numbers . append ( fib_num ) \n        \n        i += 1 \n    \n    return fib_numbers [ - 1 ] \n\n"}
{"task_id": "Python/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(triples_sum_to_zero):\n    assert triples_sum_to_zero([1, 3, 5, 0]) == False\n    assert triples_sum_to_zero([1, 3, 5, -1]) == False\n    assert triples_sum_to_zero([1, 3, -2, 1]) == True\n    assert triples_sum_to_zero([1, 2, 3, 7]) == False\n    assert triples_sum_to_zero([1, 2, 5, 7]) == False\n    assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\n    assert triples_sum_to_zero([1]) == False\n    assert triples_sum_to_zero([1, 3, 5, -100]) == False\n    assert triples_sum_to_zero([100, 3, 5, -100]) == False\n\ncheck(triples_sum_to_zero)", "text": "    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False", "declaration": "def triples_sum_to_zero(l: list):\n", "example_test": "def check(triples_sum_to_zero):\n    assert triples_sum_to_zero([1, 3, 5, 0]) == False\n    assert triples_sum_to_zero([1, 3, -2, 1]) == True\n    assert triples_sum_to_zero([1, 2, 3, 7]) == False\n    assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\ncheck(triples_sum_to_zero)\n", "code": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80triples_sum_to_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 88561, 10160, 2346, 19359, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 88561, 10160, 2346, 19359, 4990, 264, 1140, 315, 25780, 438, 458, 1946, 624, 262, 432, 4675, 3007, 421, 1052, 525, 2326, 12460, 5424, 304, 279, 1140, 429, 198, 262, 2629, 311, 7168, 11, 323, 3557, 5937, 382, 262, 12109, 88561, 10160, 2346, 19359, 2561, 16, 11, 220, 18, 11, 220, 20, 11, 220, 15, 2546, 262, 3557, 198, 262, 12109, 88561, 10160, 2346, 19359, 2561, 16, 11, 220, 18, 11, 481, 17, 11, 220, 16, 2546, 262, 3007, 198, 262, 12109, 88561, 10160, 2346, 19359, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 22, 2546, 262, 3557, 198, 262, 12109, 88561, 10160, 2346, 19359, 2561, 17, 11, 220, 19, 11, 481, 20, 11, 220, 18, 11, 220, 24, 11, 220, 22, 2546, 262, 3007, 198, 262, 12109, 88561, 10160, 2346, 19359, 2561, 16, 2546, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152082, 151879, 153033, 152036, 152136, 326, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 152780, 152071, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 600, 152622, 152706, 152114, 220, 15, 152361, 152857, 152983, 151696, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 326, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152923, 152484, 151953, 152415, 152677, 152929, 152891, 152731, 151810, 2115, 152554, 151810, 1290, 152455, 152482, 151796, 152456, 152440, 600, 152328, 152071, 220, 16, 152192, 151796, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 152780, 152071, 220, 16, 151741, 152208, 152067, 152685, 152583, 152528, 2115, 152622, 152668, 152528, 1290, 152361, 151876, 152677, 152929, 152891, 152440, 274, 153081, 152456, 152321, 152456, 152441, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 326, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 326, 151684, 152771, 151881, 1290, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 274, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2115, 152936, 152071, 220, 16, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 274, 152622, 152706, 152114, 220, 15, 152361, 152819, 152677, 153037, 152682, 152440, 1290, 151962, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 151886, 152301, 153046, 151953, 152996, 152415, 151953, 152996, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80continue_statement_py\ud83d\ude80continue_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def triples_sum_to_zero ( l : list ) : \n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\" \n    l . sort ( ) \n    for i in range ( len ( l ) - 2 ) : \n        if i > 0 and l [ i ] == l [ i - 1 ] : \n            continue \n        \n        left , right = i + 1 , len ( l ) - 1 \n        \n        while left < right : \n            s = l [ i ] + l [ left ] + l [ right ] \n            \n            if s < 0 : \n                left += 1 \n            elif s > 0 : \n                right -= 1 \n            else : \n                return True \n            \n        \n    \n    return False \n\n"}
{"task_id": "Python/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "canonical_solution": "    return n**2\n", "test": "\n\nMETADATA = {}\n\n\ndef check(car_race_collision):\n    assert car_race_collision(2) == 4\n    assert car_race_collision(3) == 9\n    assert car_race_collision(4) == 16\n    assert car_race_collision(8) == 64\n    assert car_race_collision(10) == 100\n\ncheck(car_race_collision)", "text": "    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.", "declaration": "def car_race_collision(n: int):\n", "example_test": "", "code": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n**2\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80car_race_collision_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1803, 91317, 70375, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 37791, 264, 5636, 429, 594, 264, 13942, 7678, 71500, 1293, 1555, 624, 262, 308, 9331, 525, 9842, 2115, 311, 1290, 26, 220, 24303, 11, 264, 2155, 738, 315, 308, 9331, 198, 262, 525, 9842, 1290, 311, 2115, 13, 256, 576, 1378, 7289, 315, 9331, 1191, 700, 1660, 1602, 3041, 504, 198, 262, 1817, 1008, 13, 220, 2009, 9331, 3271, 304, 279, 1852, 4628, 13, 220, 9043, 9331, 525, 1053, 311, 66090, 198, 262, 979, 264, 1803, 429, 594, 7218, 2115, 311, 1290, 12983, 264, 1803, 429, 594, 7218, 1290, 311, 2115, 624, 262, 4354, 11, 279, 9331, 525, 71500, 44552, 323, 3746, 26, 438, 264, 1102, 11, 807, 3060, 7218, 198, 262, 304, 862, 34682, 438, 421, 807, 1521, 537, 66090, 382, 262, 1096, 729, 16275, 279, 1372, 315, 1741, 47353, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 152331, 152456, 152440, 308, 152780, 152071, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120car_ter\ud83d\ude80^\ud83d\ude80_race_ter\ud83d\ude80^\ud83d\ude80_collision_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Imagine_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120road_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120perfectly_ter\ud83d\ude80^\ud83d\ude80\u0120straight_ter\ud83d\ude80^\ud83d\ude80\u0120infinitely_ter\ud83d\ude80^\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80\u0120line_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120cars_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120driving_ter\ud83d\ude80^\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80;_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120simultaneously_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120different_ter\ud83d\ude80^\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120cars_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120driving_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120sets_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120cars_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120out_ter\ud83d\ude80^\ud83d\ude80\u0120being_ter\ud83d\ude80^\ud83d\ude80\u0120very_ter\ud83d\ude80^\ud83d\ude80\u0120far_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120All_ter\ud83d\ude80^\ud83d\ude80\u0120cars_ter\ud83d\ude80^\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120speed_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Two_ter\ud83d\ude80^\ud83d\ude80\u0120cars_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120said_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120collide_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120when_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120car_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120moving_ter\ud83d\ude80^\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120hits_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120car_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120moving_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120However_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120cars_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120infinitely_ter\ud83d\ude80^\ud83d\ude80\u0120sturdy_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120strong_ter\ud83d\ude80^\ud83d\ude80;_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120they_ter\ud83d\ude80^\ud83d\ude80\u0120continue_ter\ud83d\ude80^\ud83d\ude80\u0120moving_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120their_ter\ud83d\ude80^\ud83d\ude80\u0120trajectory_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120they_ter\ud83d\ude80^\ud83d\ude80\u0120did_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120collide_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120This_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120outputs_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120collisions_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def car_race_collision ( n : int ) : \n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\" \n    return n - 1 \n\n"}
{"task_id": "Python/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "canonical_solution": "    return [(e + 1) for e in l]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(incr_list):\n    assert incr_list([]) == []\n    assert incr_list([3, 2, 1]) == [4, 3, 2]\n    assert incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ncheck(incr_list)", "text": "    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]", "declaration": "def incr_list(l: list):\n", "example_test": "def check(incr_list):\n    assert incr_list([1, 2, 3]) == [2, 3, 4]\n    assert incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\ncheck(incr_list)\n", "code": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [(e + 1) for e in l]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80incr_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 66826, 2019, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 1140, 448, 5424, 87819, 553, 220, 16, 624, 262, 12109, 66826, 2019, 2561, 16, 11, 220, 17, 11, 220, 18, 2546, 262, 508, 17, 11, 220, 18, 11, 220, 19, 921, 262, 12109, 66826, 2019, 2561, 20, 11, 220, 18, 11, 220, 20, 11, 220, 17, 11, 220, 18, 11, 220, 18, 11, 220, 24, 11, 220, 15, 11, 220, 16, 17, 18, 2546, 262, 508, 21, 11, 220, 19, 11, 220, 21, 11, 220, 18, 11, 220, 19, 11, 220, 19, 11, 220, 16, 15, 11, 220, 16, 11, 220, 16, 17, 19, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151941, 152817, 153002, 152285, 152456, 152440, 856, 152328, 152071, 220, 16, 152996, 152673, 152581, 152899, 152440, 856, 151918, 152237, 152370, 326, 151764, 151868, 152329, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120incr_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120incremented_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120incr_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120incr_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def incr_list ( l : list ) : \n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\" \n    return [ x + 1 for x in l ] \n\n"}
{"task_id": "Python/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(pairs_sum_to_zero):\n    assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert pairs_sum_to_zero([1, 2, 3, 7]) == False\n    assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\n    assert pairs_sum_to_zero([1]) == False\n\n    assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True\n    assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True\n    assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False\n    assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False\n\ncheck(pairs_sum_to_zero)", "text": "    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False", "declaration": "def pairs_sum_to_zero(l):\n", "example_test": "def check(pairs_sum_to_zero):\n    assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert pairs_sum_to_zero([1, 2, 3, 7]) == False\n    assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\ncheck(pairs_sum_to_zero)\n", "code": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80pairs_sum_to_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 13530, 10160, 2346, 19359, 152069, 153011, 151983, 326, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 13530, 10160, 2346, 19359, 4990, 264, 1140, 315, 25780, 438, 458, 1946, 624, 262, 432, 4675, 3007, 421, 1052, 525, 1378, 12460, 5424, 304, 279, 1140, 429, 198, 262, 2629, 311, 7168, 11, 323, 3557, 5937, 624, 262, 12109, 13530, 10160, 2346, 19359, 2561, 16, 11, 220, 18, 11, 220, 20, 11, 220, 15, 2546, 262, 3557, 198, 262, 12109, 13530, 10160, 2346, 19359, 2561, 16, 11, 220, 18, 11, 481, 17, 11, 220, 16, 2546, 262, 3557, 198, 262, 12109, 13530, 10160, 2346, 19359, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 22, 2546, 262, 3557, 198, 262, 12109, 13530, 10160, 2346, 19359, 2561, 17, 11, 220, 19, 11, 481, 20, 11, 220, 18, 11, 220, 20, 11, 220, 22, 2546, 262, 3007, 198, 262, 12109, 13530, 10160, 2346, 19359, 2561, 16, 2546, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 3884, 152911, 151879, 151845, 738, 152831, 152128, 151703, 151740, 152208, 152980, 152205, 152440, 1629, 152370, 326, 151876, 151923, 152557, 152592, 152583, 151874, 151878, 152780, 152801, 1629, 152622, 152607, 152528, 3884, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 3884, 152411, 912, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120pairs_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_zero_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pairs_sum_to_zero ( l ) : \n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \n    seen = set ( ) \n    \n    for num in l : \n        if - num in seen : \n            return True \n        \n        seen . add ( num ) \n    \n    return False \n\n"}
{"task_id": "Python/44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(change_base):\n    assert change_base(8, 3) == \"22\"\n    assert change_base(9, 3) == \"100\"\n    assert change_base(234, 2) == \"11101010\"\n    assert change_base(16, 2) == \"10000\"\n    assert change_base(8, 2) == \"1000\"\n    assert change_base(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert change_base(x, x + 1) == str(x)\n\ncheck(change_base)", "text": "    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'", "declaration": "def change_base(x: int, base: int):\n", "example_test": "def check(change_base):\n    assert change_base(8, 3) == \"22\"\n    assert change_base(8, 2) == \"1000\"\n    assert change_base(7, 2) == \"111\"\ncheck(change_base)\n", "code": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80change_base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2297, 7651, 152069, 153011, 151799, 152320, 856, 152273, 151990, 526, 152297, 151799, 152320, 2331, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 4072, 34776, 2331, 315, 1946, 1372, 856, 311, 2331, 624, 262, 470, 914, 13042, 1283, 279, 14409, 624, 262, 2331, 5109, 525, 2686, 1091, 220, 16, 15, 624, 262, 12109, 2297, 7651, 7, 23, 11, 220, 18, 340, 262, 364, 17, 17, 1248, 262, 12109, 2297, 7651, 7, 23, 11, 220, 17, 340, 262, 364, 16, 15, 15, 15, 1248, 262, 12109, 2297, 7651, 7, 22, 11, 220, 17, 340, 262, 364, 16, 16, 16, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 151887, 3355, 151666, 152208, 152067, 152685, 152583, 152528, 856, 152622, 152706, 152114, 220, 15, 152361, 151876, 152677, 152929, 152891, 152440, 1102, 153081, 152456, 153101, 151879, 151845, 607, 152831, 152128, 151766, 152456, 152440, 856, 151702, 152370, 2331, 151703, 151740, 152328, 152370, 1102, 152208, 152677, 153037, 152682, 152440, 856, 152409, 152370, 2331, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80_base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Change_ter\ud83d\ude80^\ud83d\ude80\u0120numerical_ter\ud83d\ude80^\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representation_ter\ud83d\ude80^\ud83d\ude80\u0120after_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120conversion_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80_base_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80_base_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80_base_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def change_base ( x : int , base : int ) : \n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \n    result = '' \n    \n    while x > 0 : \n        result = str ( x % base ) + result \n        \n        x //= base \n    \n    return result \n\n"}
{"task_id": "Python/45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "canonical_solution": "    return a * h / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(triangle_area):\n    assert triangle_area(5, 3) == 7.5\n    assert triangle_area(2, 2) == 2.0\n    assert triangle_area(10, 8) == 40.0\n\ncheck(triangle_area)", "text": "    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5", "declaration": "def triangle_area(a, h):\n", "example_test": "def check(triangle_area):\n    assert triangle_area(5, 3) == 7.5\ncheck(triangle_area)\n", "code": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2.0\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80triangle_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 21495, 15030, 152069, 153011, 151983, 264, 152297, 151983, 305, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 3084, 315, 264, 3108, 323, 1550, 470, 3082, 369, 264, 21495, 624, 262, 12109, 21495, 15030, 7, 20, 11, 220, 18, 340, 262, 220, 22, 13, 20, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 152331, 152456, 152321, 152456, 152440, 264, 151894, 152370, 305, 152144, 152071, 220, 17, 151953, 152996, 151784, 152557, 152592, 152583, 152528, 1304, 606, 563, 152622, 151683, 152461, 13265, 3817, 563, 1, 151666, 152361, 152380, 152451, 152819, 152511, 152043, 152844, 151836, 152650, 653, 67880, 152024, 151726, 152677, 152082, 151879, 153033, 152036, 152136, 653, 67880, 152411, 1273, 2593, 152831, 152128, 151703, 151740, 152208, 151953, 152415, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120high_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120___ter\ud83d\ude80^\ud83d\ude80name_ter\ud83d\ude80^\ud83d\ude80___ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"___ter\ud83d\ude80^\ud83d\ude80main_ter\ud83d\ude80^\ud83d\ude80___ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120do_ter\ud83d\ude80^\ud83d\ude80ctest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120do_ter\ud83d\ude80^\ud83d\ude80ctest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80mod_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def triangle_area ( a , h ) : \n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \n    return a * h / 2 \n\nif __name__ == \"__main__\" : \n    import doctest \n    doctest . testmod ( ) \n\n"}
{"task_id": "Python/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(fib4):\n    assert fib4(5) == 4\n    assert fib4(8) == 28\n    assert fib4(10) == 104\n    assert fib4(12) == 386\n\ncheck(fib4)", "text": "    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14", "declaration": "def fib4(n: int):\n", "example_test": "def check(fib4):\n    assert fib4(5) == 4\n    assert fib4(6) == 8\n    assert fib4(7) == 14\ncheck(fib4)\n", "code": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80fib4_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 15801, 19, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 785, 42464, 19, 1372, 8500, 374, 264, 8500, 4428, 311, 279, 434, 35080, 34603, 12981, 2886, 346, 429, 594, 4512, 438, 11017, 510, 262, 15801, 19, 7, 15, 8, 1464, 220, 15, 198, 262, 15801, 19, 7, 16, 8, 1464, 220, 15, 198, 262, 15801, 19, 7, 17, 8, 1464, 220, 17, 198, 262, 15801, 19, 7, 18, 8, 1464, 220, 15, 198, 262, 15801, 19, 1445, 8, 1464, 15801, 19, 1445, 12, 16, 8, 488, 15801, 19, 1445, 12, 17, 8, 488, 15801, 19, 1445, 12, 18, 8, 488, 15801, 19, 1445, 12, 19, 4292, 262, 5209, 3270, 264, 729, 311, 29720, 12564, 279, 308, 7563, 2392, 315, 279, 15801, 19, 1372, 8500, 13, 220, 3155, 537, 990, 50262, 624, 262, 12109, 15801, 19, 7, 20, 340, 262, 220, 19, 198, 262, 12109, 15801, 19, 7, 21, 340, 262, 220, 23, 198, 262, 12109, 15801, 19, 7, 22, 340, 262, 220, 16, 19, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152191, 152412, 152749, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 151832, 220, 17, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 18, 152361, 152819, 151886, 151832, 220, 15, 151953, 152415, 152677, 152929, 152891, 152440, 2890, 152445, 153062, 153088, 220, 15, 152793, 153088, 220, 15, 152793, 153088, 220, 17, 152793, 153088, 220, 15, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 19, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 2890, 152411, 8737, 152831, 152128, 151766, 152456, 152321, 152456, 152321, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 18, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 19, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152480, 152339, 152602, 2890, 151684, 152771, 151881, 308, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80The_ter\ud83d\ude80^\ud83d\ude80\u0120Fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120F_ter\ud83d\ude80^\ud83d\ude80ibbon_ter\ud83d\ude80^\ud83d\ude80acci_ter\ud83d\ude80^\ud83d\ude80\u0120seq_ter\ud83d\ude80^\ud83d\ude80une_ter\ud83d\ude80^\ud83d\ude80ce_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120defined_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120follows_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Please_ter\ud83d\ude80^\ud83d\ude80\u0120write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120efficiently_ter\ud83d\ude80^\ud83d\ude80\u0120compute_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80-th_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Do_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120use_ter\ud83d\ude80^\ud83d\ude80\u0120recursion_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def fib4 ( n : int ) : \n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\" \n    if n == 0 or n == 1 : \n        return 0 \n    elif n == 2 : \n        return 2 \n    elif n == 3 : \n        return 0 \n    \n    arr = [ 0 , 0 , 2 , 0 ] \n    \n    for i in range ( 4 , n + 1 ) : \n        arr . append ( arr [ i - 1 ] + arr [ i - 2 ] + arr [ i - 3 ] + arr [ i - 4 ] ) \n    \n    return arr [ n ] \n\n"}
{"task_id": "Python/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(median):\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert median([5]) == 5\n    assert median([6, 5]) == 5.5\n    assert median([8, 1, 3, 9, 9, 2, 7]) == 7\n\ncheck(median)", "text": "    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0", "declaration": "def median(l: list):\n", "example_test": "def check(median):\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 8.0\ncheck(median)\n", "code": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80median_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 22553, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 22553, 315, 5424, 304, 279, 1140, 326, 624, 262, 12109, 22553, 2561, 18, 11, 220, 16, 11, 220, 17, 11, 220, 19, 11, 220, 20, 2546, 262, 220, 18, 198, 262, 12109, 22553, 41197, 16, 15, 11, 220, 19, 11, 220, 21, 11, 220, 16, 15, 15, 15, 11, 220, 16, 15, 11, 220, 17, 15, 2546, 262, 220, 16, 20, 13, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 10615, 907, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 326, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 10615, 907, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 5099, 153081, 152456, 152440, 308, 152542, 152071, 220, 17, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152331, 152456, 151839, 152925, 152456, 152441, 152339, 152602, 10615, 907, 151684, 152771, 151903, 152456, 152440, 5099, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 10615, 907, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 152144, 152071, 220, 17, 151953, 152221, 152729, 152515, 151876, 151886, 152480, 152339, 152602, 10615, 907, 151684, 152771, 151881, 5099, 151773, 152987, 151773, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def median ( l : list ) : \n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\" \n    sorted_l = sorted ( l ) \n    \n    n = len ( sorted_l ) \n    \n    mid = n // 2 \n    \n    if n % 2 == 0 : \n        return ( sorted_l [ mid - 1 ] + sorted_l [ mid ] ) / 2 \n    else : \n        return sorted_l [ mid ] \n    \n\n"}
{"task_id": "Python/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(is_palindrome):\n    assert is_palindrome('') == True\n    assert is_palindrome('aba') == True\n    assert is_palindrome('aaaaa') == True\n    assert is_palindrome('zbcd') == False\n    assert is_palindrome('xywyx') == True\n    assert is_palindrome('xywyz') == False\n    assert is_palindrome('xywzx') == False\n\ncheck(is_palindrome)", "text": "    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False", "declaration": "def is_palindrome(text: str):\n", "example_test": "def check(is_palindrome):\n    assert is_palindrome('') == True\n    assert is_palindrome('aba') == True\n    assert is_palindrome('aaaaa') == True\n    assert is_palindrome('zbcd') == False\ncheck(is_palindrome)\n", "code": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_palindrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 73310, 36058, 152069, 153011, 151799, 152320, 1467, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 24843, 421, 2661, 914, 374, 264, 73097, 198, 262, 12109, 374, 73310, 36058, 37365, 262, 3007, 198, 262, 12109, 374, 73310, 36058, 492, 12004, 1305, 262, 3007, 198, 262, 12109, 374, 73310, 36058, 492, 28458, 64, 1305, 262, 3007, 198, 262, 12109, 374, 73310, 36058, 492, 25329, 4385, 1305, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 152029, 152528, 1467, 152622, 151683, 151696, 152339, 152602, 1467, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Checks_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80aba_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80aaaa_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80zb_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_palindrome ( text : str ) : \n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\" \n    return text == text [ : : - 1 ] \n\n"}
{"task_id": "Python/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(modp):\n    assert modp(3, 5) == 3\n    assert modp(1101, 101) == 2\n    assert modp(0, 101) == 1\n    assert modp(3, 11) == 8\n    assert modp(100, 101) == 1\n    assert modp(30, 5) == 4\n    assert modp(31, 5) == 3\n\ncheck(modp)", "text": "    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1", "declaration": "def modp(n: int, p: int):\n", "example_test": "def check(modp):\n    assert modp(3, 5) == 3\n    assert modp(1101, 101) == 2\n    assert modp(0, 101) == 1\n    assert modp(3, 11) == 8\n    assert modp(100, 101) == 1\ncheck(modp)\n", "code": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80modp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1463, 79, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 152297, 151799, 152320, 281, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 220, 17, 86167, 59864, 281, 320, 1371, 7853, 315, 7857, 1211, 4292, 262, 12109, 1463, 79, 7, 18, 11, 220, 20, 340, 262, 220, 18, 198, 262, 12109, 1463, 79, 7, 16, 16, 15, 16, 11, 220, 16, 15, 16, 340, 262, 220, 17, 198, 262, 12109, 1463, 79, 7, 15, 11, 220, 16, 15, 16, 340, 262, 220, 16, 198, 262, 12109, 1463, 79, 7, 18, 11, 220, 16, 16, 340, 262, 220, 23, 198, 262, 12109, 1463, 79, 7, 16, 15, 15, 11, 220, 16, 15, 16, 340, 262, 220, 16, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 6875, 152831, 152128, 152228, 220, 17, 153001, 152430, 308, 153001, 152430, 281, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mod_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^n_ter\ud83d\ude80^\ud83d\ude80\u0120modulo_ter\ud83d\ude80^\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80be_ter\ud83d\ude80^\ud83d\ude80\u0120aware_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numer_ter\ud83d\ude80^\ud83d\ude80ics_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120mod_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120mod_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120mod_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120mod_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120mod_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pow_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def modp ( n : int , p : int ) : \n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\" \n    return pow ( 2 , n , p ) \n\n"}
{"task_id": "Python/50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(decode_shift):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert decode_shift(copy.deepcopy(encoded_str)) == str\n\ncheck(decode_shift)", "text": "    takes as input string encoded with encode_shift function. Returns decoded string.", "declaration": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n", "example_test": "", "code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80encode_shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80chr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80ch_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\"a\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude8026_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\"a\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80ch_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80decode_shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 16164, 22230, 152069, 153011, 151799, 152320, 274, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4675, 20498, 914, 553, 31831, 1449, 3668, 553, 220, 20, 304, 279, 27790, 624, 262, 4210, 151666, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 1591, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152957, 151879, 151845, 28131, 152831, 152128, 151766, 152456, 151839, 152925, 152456, 151839, 152925, 152456, 152321, 152456, 153101, 151879, 151845, 6013, 152831, 152128, 152430, 521, 151703, 151740, 152328, 152071, 220, 20, 152780, 152911, 151879, 151845, 6013, 152831, 152128, 152928, 330, 64, 1, 151666, 151703, 151740, 151702, 152071, 220, 17, 21, 152328, 152911, 151879, 151845, 6013, 152831, 152128, 152928, 330, 64, 1, 151666, 151703, 151740, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 521, 151918, 152237, 152370, 274, 151764, 151868, 152329, 151703, 151740, 151953, 152996, 151750, 152559, 151792, 16895, 22230, 152069, 153011, 151799, 152320, 274, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4990, 438, 1946, 914, 20498, 448, 16164, 22230, 729, 13, 5184, 29213, 914, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 153033, 152036, 152870, 1591, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152957, 151879, 151845, 28131, 152831, 152128, 151766, 152456, 151839, 152925, 152456, 151839, 152925, 152456, 152321, 152456, 153101, 151879, 151845, 6013, 152831, 152128, 152430, 521, 151703, 151740, 152780, 152071, 220, 20, 152780, 152911, 151879, 151845, 6013, 152831, 152128, 152928, 330, 64, 1, 151666, 151703, 151740, 151702, 152071, 220, 17, 21, 152328, 152911, 151879, 151845, 6013, 152831, 152128, 152928, 330, 64, 1, 151666, 151703, 151740, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 521, 151918, 152237, 152370, 274, 151764, 151868, 152329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80_shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120shifting_ter\ud83d\ude80^\ud83d\ude80\u0120every_ter\ud83d\ude80^\ud83d\ude80\u0120character_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120chr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ch_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ch_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decode_ter\ud83d\ude80^\ud83d\ude80_shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80_shift_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Returns_ter\ud83d\ude80^\ud83d\ude80\u0120decoded_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120chr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ch_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ch_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def encode_shift ( s : str ) : \n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\" \n    return \"\" . join ( [ chr ( ( ( ord ( ch ) + 5 - ord ( \"a\" ) ) % 26 ) + ord ( \"a\" ) ) for ch in s ] ) \n\ndef decode_shift ( s : str ) : \n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\" \n    return \"\" . join ( [ chr ( ( ( ord ( ch ) - 5 - ord ( \"a\" ) ) % 26 ) + ord ( \"a\" ) ) for ch in s ] ) \n\n"}
{"task_id": "Python/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(remove_vowels):\n    assert remove_vowels('') == ''\n    assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert remove_vowels('fedcba') == 'fdcb'\n    assert remove_vowels('eeeee') == ''\n    assert remove_vowels('acBAA') == 'cB'\n    assert remove_vowels('EcBOO') == 'cB'\n    assert remove_vowels('ybcd') == 'ybcd'\n\ncheck(remove_vowels)", "text": "    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'", "declaration": "def remove_vowels(text):\n", "example_test": "def check(remove_vowels):\n    assert remove_vowels('') == ''\n    assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert remove_vowels('abcdef') == 'bcdf'\n    assert remove_vowels('aaaaa') == ''\n    assert remove_vowels('aaBAA') == 'B'\n    assert remove_vowels('zbcd') == 'zbcd'\ncheck(remove_vowels)\n", "code": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80remove_vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4057, 2273, 363, 2010, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4057, 2273, 363, 2010, 374, 264, 729, 429, 4990, 914, 323, 4675, 914, 2041, 78456, 624, 262, 12109, 4057, 2273, 363, 2010, 37365, 262, 11776, 262, 12109, 4057, 2273, 363, 2010, 445, 41202, 1699, 866, 59779, 76, 1138, 262, 364, 8904, 2940, 1699, 866, 73, 10561, 76, 1248, 262, 12109, 4057, 2273, 363, 2010, 492, 41202, 1305, 262, 364, 8904, 2940, 1248, 262, 12109, 4057, 2273, 363, 2010, 492, 28458, 64, 1305, 262, 11776, 262, 12109, 4057, 2273, 363, 2010, 492, 5305, 33, 6029, 1305, 262, 364, 33, 1248, 262, 12109, 4057, 2273, 363, 2010, 492, 25329, 4385, 1305, 262, 364, 25329, 4385, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 78456, 151887, 364, 5918, 98255, 13669, 3810, 52, 6, 151666, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152396, 1161, 152996, 152673, 152581, 152899, 152440, 1161, 151918, 152237, 152370, 1467, 151764, 151880, 152257, 152528, 1161, 152622, 152442, 152839, 152528, 78456, 152361, 151868, 152329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120without_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80('')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80\\n_ter\ud83d\ude80^\ud83d\ude80gh_ter\ud83d\ude80^\ud83d\ude80ijkl_ter\ud83d\ude80^\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bc_ter\ud83d\ude80^\ud83d\ude80df_ter\ud83d\ude80^\ud83d\ude80\\n_ter\ud83d\ude80^\ud83d\ude80gh_ter\ud83d\ude80^\ud83d\ude80j_ter\ud83d\ude80^\ud83d\ude80kl_ter\ud83d\ude80^\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bc_ter\ud83d\ude80^\ud83d\ude80df_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80aaaa_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80aa_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80AA_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80zb_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80zb_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80AE_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_vowels ( text ) : \n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\" \n    vowels = 'aeiouAEIOU' \n    \n    return '' . join ( [ char for char in text if char not in vowels ] ) \n\n"}
{"task_id": "Python/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(below_threshold):\n    assert below_threshold([1, 2, 4, 10], 100)\n    assert not below_threshold([1, 20, 4, 10], 5)\n    assert below_threshold([1, 20, 4, 10], 21)\n    assert below_threshold([1, 20, 4, 10], 22)\n    assert below_threshold([1, 8, 4, 10], 11)\n    assert not below_threshold([1, 8, 4, 10], 10)\n\ncheck(below_threshold)", "text": "    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False", "declaration": "def below_threshold(l: list, t: int):\n", "example_test": "def check(below_threshold):\n    assert below_threshold([1, 2, 4, 10], 100)\n    assert not below_threshold([1, 20, 4, 10], 5)\ncheck(below_threshold)\n", "code": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80below_threshold_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3685, 21858, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 152297, 151799, 152320, 259, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 3007, 421, 678, 5109, 304, 279, 1140, 326, 525, 3685, 12171, 259, 624, 262, 12109, 3685, 21858, 2561, 16, 11, 220, 17, 11, 220, 19, 11, 220, 16, 15, 1125, 220, 16, 15, 15, 340, 262, 3007, 198, 262, 12109, 3685, 21858, 2561, 16, 11, 220, 17, 15, 11, 220, 19, 11, 220, 16, 15, 1125, 220, 20, 340, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 678, 151733, 152828, 151722, 152142, 152528, 600, 152622, 152668, 152528, 259, 152361, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152370, 326, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80_threshold_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80\u0120threshold_ter\ud83d\ude80^\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80_threshold_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120below_ter\ud83d\ude80^\ud83d\ude80_threshold_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def below_threshold ( l : list , t : int ) : \n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\" \n    return all ( i < t for i in l ) \n\n"}
{"task_id": "Python/53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "canonical_solution": "    return x + y\n", "test": "\n\nMETADATA = {}\n\n\ndef check(add):\n    import random\n\n    assert add(0, 1) == 1\n    assert add(1, 0) == 1\n    assert add(2, 3) == 5\n    assert add(5, 7) == 12\n    assert add(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert add(x, y) == x + y\n\ncheck(add)", "text": "    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12", "declaration": "def add(x: int, y: int):\n", "example_test": "def check(add):\n    import random\n    assert add(2, 3) == 5\n    assert add(5, 7) == 12\ncheck(add)\n", "code": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 912, 152069, 153011, 151799, 152320, 856, 152273, 151990, 526, 152297, 151799, 152320, 379, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2212, 1378, 5109, 856, 323, 379, 198, 262, 12109, 912, 7, 17, 11, 220, 18, 340, 262, 220, 20, 198, 262, 12109, 912, 7, 20, 11, 220, 22, 340, 262, 220, 16, 17, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 152331, 152456, 152440, 856, 152328, 152370, 379, 151953, 152996, 151750, 152559, 151792, 32256, 152069, 153011, 151799, 152320, 856, 152273, 151990, 526, 152297, 151799, 152320, 379, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 3136, 2144, 1378, 5109, 856, 323, 379, 198, 262, 12109, 32256, 7, 20, 11, 220, 18, 340, 262, 220, 17, 198, 262, 12109, 32256, 7, 16, 15, 11, 220, 19, 340, 262, 220, 21, 198, 262, 4210, 151666, 152208, 151886, 152331, 152456, 152440, 856, 152780, 152370, 379, 151953, 152996, 151750, 152559, 151792, 30270, 152069, 153011, 151799, 152320, 856, 152273, 151990, 526, 152297, 151799, 152320, 379, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 95155, 1378, 5109, 856, 323, 379, 198, 262, 12109, 30270, 7, 17, 11, 220, 18, 340, 262, 220, 21, 198, 262, 12109, 30270, 7, 20, 11, 220, 22, 340, 262, 220, 18, 20, 198, 262, 4210, 151666, 152208, 151886, 152331, 152456, 152440, 856, 151894, 152370, 379, 151953, 152996, 151750, 152559, 151792, 21749, 152069, 153011, 151799, 152320, 856, 152273, 151990, 526, 152297, 151799, 152320, 379, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 12509, 577, 1378, 5109, 856, 323, 379, 198, 262, 12109, 21749, 7, 16, 15, 11, 220, 17, 340, 262, 220, 20, 198, 262, 12109, 21749, 7, 24, 11, 220, 18, 340, 262, 220, 18, 198, 262, 4210, 151666, 152208, 151886, 152331, 152456, 152440, 856, 152144, 152370, 379, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Add_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120subtract_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80tract_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120subtract_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120subtract_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Multiply_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120divide_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Div_ter\ud83d\ude80^\ud83d\ude80ide_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120divide_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120divide_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add ( x : int , y : int ) : \n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \n    return x + y \n\ndef subtract ( x : int , y : int ) : \n    \"\"\"Subtract two numbers x and y\n    >>> subtract(5, 3)\n    2\n    >>> subtract(10, 4)\n    6\n    \"\"\" \n    return x - y \n\ndef multiply ( x : int , y : int ) : \n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\" \n    return x * y \n\ndef divide ( x : int , y : int ) : \n    \"\"\"Divide two numbers x and y\n    >>> divide(10, 2)\n    5\n    >>> divide(9, 3)\n    3\n    \"\"\" \n    return x / y \n\n"}
{"task_id": "Python/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "canonical_solution": "    return set(s0) == set(s1)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(same_chars):\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert same_chars('abcd', 'dddddddabc') == True\n    assert same_chars('dddddddabc', 'abcd') == True\n    assert same_chars('eabcd', 'dddddddabc') == False\n    assert same_chars('abcd', 'dddddddabcf') == False\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert same_chars('aabb', 'aaccc') == False\n\ncheck(same_chars)", "text": "    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False", "declaration": "def same_chars(s0: str, s1: str):\n", "example_test": "def check(same_chars):\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert same_chars('abcd', 'dddddddabc') == True\n    assert same_chars('dddddddabc', 'abcd') == True\n    assert same_chars('eabcd', 'dddddddabc') == False\n    assert same_chars('abcd', 'dddddddabcf') == False\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False\ncheck(same_chars)\n", "code": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80same_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80s0_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80s1_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1852, 37418, 152069, 153011, 151799, 152320, 274, 15, 152273, 151990, 607, 152297, 151799, 152320, 274, 16, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4248, 421, 1378, 4244, 614, 279, 1852, 5766, 624, 262, 12109, 1852, 37418, 492, 68, 68644, 10400, 10400, 516, 364, 40360, 10400, 10400, 10400, 89, 631, 53537, 13683, 1305, 262, 3007, 198, 262, 12109, 1852, 37418, 492, 68644, 516, 364, 64100, 40360, 13683, 1305, 262, 3007, 198, 262, 12109, 1852, 37418, 492, 64100, 40360, 13683, 516, 364, 68644, 1305, 262, 3007, 198, 262, 12109, 1852, 37418, 492, 68, 68644, 516, 364, 64100, 40360, 13683, 1305, 262, 3557, 198, 262, 12109, 1852, 37418, 492, 68644, 516, 364, 64100, 40360, 370, 346, 1305, 262, 3557, 198, 262, 12109, 1852, 37418, 492, 68, 68644, 10400, 10400, 516, 364, 40360, 10400, 10400, 10400, 89, 64100, 13683, 1305, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 274, 15, 151703, 151740, 152622, 152238, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 274, 16, 151703, 151740, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 274, 15, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 274, 15, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 274, 16, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 274, 16, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 274, 15, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 274, 15, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152238, 151696, 152339, 152602, 274, 16, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ddd_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80dd_ter\ud83d\ude80^\ud83d\ude80edd_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80dddd_ter\ud83d\ude80^\ud83d\ude80ddd_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80dddd_ter\ud83d\ude80^\ud83d\ude80ddd_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80dddd_ter\ud83d\ude80^\ud83d\ude80ddd_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80dddd_ter\ud83d\ude80^\ud83d\ude80ddd_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80ce_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ddd_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80zz_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80dddd_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def same_chars ( s0 : str , s1 : str ) : \n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\" \n    if len ( s0 ) != len ( s1 ) : \n        return False \n    \n    s0 = sorted ( s0 ) \n    \n    s1 = sorted ( s1 ) \n    \n    for i in range ( len ( s0 ) ) : \n        if s0 [ i ] != s1 [ i ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Python/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(fib):\n    assert fib(10) == 55\n    assert fib(1) == 1\n    assert fib(8) == 21\n    assert fib(11) == 89\n    assert fib(12) == 144\n\ncheck(fib)", "text": "    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21", "declaration": "def fib(n: int):\n", "example_test": "def check(fib):\n    assert fib(10) == 55\n    assert fib(1) == 1\n    assert fib(8) == 21\ncheck(fib)\n", "code": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 15801, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 308, 7563, 79683, 1372, 624, 262, 12109, 15801, 7, 16, 15, 340, 262, 220, 20, 20, 198, 262, 12109, 15801, 7, 16, 340, 262, 220, 16, 198, 262, 12109, 15801, 7, 23, 340, 262, 220, 17, 16, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 151832, 220, 16, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 153101, 151879, 151845, 15801, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 151703, 151740, 152328, 152911, 151879, 151845, 15801, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 17, 151703, 151740, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80-th_ter\ud83d\ude80^\ud83d\ude80\u0120Fibonacci_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def fib ( n : int ) : \n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \n    if n == 1 : \n        return 1 \n    elif n == 2 : \n        return 1 \n    else : \n        return fib ( n - 1 ) + fib ( n - 2 ) \n    \n\n"}
{"task_id": "Python/56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(correct_bracketing):\n    assert correct_bracketing(\"<>\")\n    assert correct_bracketing(\"<<><>>\")\n    assert correct_bracketing(\"<><><<><>><>\")\n    assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")\n    assert not correct_bracketing(\"<<<><>>>>\")\n    assert not correct_bracketing(\"><<>\")\n    assert not correct_bracketing(\"<\")\n    assert not correct_bracketing(\"<<<<\")\n    assert not correct_bracketing(\">\")\n    assert not correct_bracketing(\"<<>\")\n    assert not correct_bracketing(\"<><><<><>><>><<>\")\n    assert not correct_bracketing(\"<><><<><>><>>><>\")\n\ncheck(correct_bracketing)", "text": "    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False", "declaration": "def correct_bracketing(brackets: str):\n", "example_test": "def check(correct_bracketing):\n    assert correct_bracketing(\"<>\")\n    assert correct_bracketing(\"<<><>>\")\n    assert not correct_bracketing(\"><<>\")\n    assert not correct_bracketing(\"<\")\ncheck(correct_bracketing)\n", "code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80correct_bracketing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80brackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4396, 17682, 5709, 287, 152069, 153011, 151799, 152320, 38929, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 38929, 374, 264, 914, 315, 4055, 1, 323, 90013, 624, 262, 470, 3007, 421, 1449, 8568, 31642, 702, 264, 12159, 15316, 31642, 382, 262, 12109, 4396, 17682, 5709, 287, 9639, 1138, 262, 3557, 198, 262, 12109, 4396, 17682, 5709, 287, 9639, 42363, 262, 3007, 198, 262, 12109, 4396, 17682, 5709, 287, 445, 2442, 1784, 2452, 1138, 262, 3007, 198, 262, 12109, 4396, 17682, 5709, 287, 445, 1784, 21122, 1138, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 5611, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 31642, 152370, 38929, 151876, 151923, 152557, 152592, 152583, 152528, 31642, 152622, 151683, 152461, 4055, 1, 151666, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 8737, 152831, 152128, 152430, 31642, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152191, 152412, 152749, 152528, 31642, 152622, 151683, 152461, 90013, 151666, 152361, 152857, 152370, 5611, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 2420, 152831, 152128, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 5611, 151703, 151740, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120\"<_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120\">\"_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120every_ter\ud83d\ude80^\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"<_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"<_ter\ud83d\ude80^\ud83d\ude80>\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80<<_ter\ud83d\ude80^\ud83d\ude80><_ter\ud83d\ude80^\ud83d\ude80>>_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80><_ter\ud83d\ude80^\ud83d\ude80<>_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"<_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\">\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pop_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def correct_bracketing ( brackets : str ) : \n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\" \n    stack = [ ] \n    \n    for bracket in brackets : \n        if bracket == \"<\" : \n            stack . append ( bracket ) \n        elif bracket == \">\" and stack : \n            stack . pop ( ) \n        else : \n            return False \n        \n    \n    return len ( stack ) == 0 \n\n"}
{"task_id": "Python/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(monotonic):\n    assert monotonic([1, 2, 4, 10]) == True\n    assert monotonic([1, 2, 4, 20]) == True\n    assert monotonic([1, 20, 4, 10]) == False\n    assert monotonic([4, 1, 0, -10]) == True\n    assert monotonic([4, 1, 1, 0]) == True\n    assert monotonic([1, 2, 3, 2, 5, 60]) == False\n    assert monotonic([1, 2, 3, 4, 5, 60]) == True\n    assert monotonic([9, 9, 9, 9]) == True\n\ncheck(monotonic)", "text": "    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True", "declaration": "def monotonic(l: list):\n", "example_test": "def check(monotonic):\n    assert monotonic([1, 2, 4, 10]) == True\n    assert monotonic([1, 20, 4, 10]) == False\n    assert monotonic([4, 1, 0, -10]) == True\ncheck(monotonic)\n", "code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80monotonic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 77216, 14011, 152069, 153011, 151799, 152320, 326, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 3007, 374, 1140, 5424, 525, 1615, 25849, 2673, 7703, 476, 43549, 624, 262, 12109, 77216, 14011, 2561, 16, 11, 220, 17, 11, 220, 19, 11, 220, 17, 15, 2546, 262, 3007, 198, 262, 12109, 77216, 14011, 2561, 16, 11, 220, 17, 15, 11, 220, 19, 11, 220, 16, 15, 2546, 262, 3557, 198, 262, 12109, 77216, 14011, 2561, 19, 11, 220, 16, 11, 220, 15, 11, 481, 16, 15, 2546, 262, 3007, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 7703, 152470, 152891, 152440, 43549, 151909, 153046, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 326, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 326, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 43549, 152713, 152488, 152208, 151953, 152221, 151968, 152103, 152583, 151696, 152339, 152602, 326, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 326, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 152819, 152677, 152929, 152891, 152440, 7703, 152713, 152488, 152208, 151953, 152415, 151953, 152996, 151886, 153084, 152412, 152440, 7703, 151742, 152370, 43549, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120monot_ter\ud83d\ude80^\ud83d\ude80onic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120mon_ter\ud83d\ude80^\ud83d\ude80oton_ter\ud83d\ude80^\ud83d\ude80ically_ter\ud83d\ude80^\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120monot_ter\ud83d\ude80^\ud83d\ude80onic_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120monot_ter\ud83d\ude80^\ud83d\ude80onic_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120monot_ter\ud83d\ude80^\ud83d\ude80onic_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def monotonic ( l : list ) : \n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\" \n    increasing = decreasing = True \n    \n    \n    for i in range ( len ( l ) - 1 ) : \n        if l [ i ] < l [ i + 1 ] : \n            decreasing = False \n            \n        elif l [ i ] > l [ i + 1 ] : \n            increasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"task_id": "Python/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(common):\n    assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert common([4, 3, 2, 8], []) == []\n\ncheck(common)", "text": "    Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]", "declaration": "def common(l1: list, l2: list):\n", "example_test": "def check(common):\n    assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert common([5, 3, 2, 8], [3, 2]) == [2, 3]\ncheck(common)\n", "code": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80common_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l1_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80l2_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4185, 152069, 153011, 151799, 152320, 326, 16, 152273, 151990, 1140, 152297, 151799, 152320, 326, 17, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 10615, 4911, 4185, 5424, 369, 1378, 11469, 624, 262, 12109, 4185, 2561, 16, 11, 220, 19, 11, 220, 18, 11, 220, 18, 19, 11, 220, 21, 20, 18, 11, 220, 17, 11, 220, 20, 1125, 508, 20, 11, 220, 22, 11, 220, 16, 11, 220, 20, 11, 220, 24, 11, 220, 21, 20, 18, 11, 220, 16, 17, 16, 2546, 262, 508, 16, 11, 220, 20, 11, 220, 21, 20, 18, 921, 262, 12109, 4185, 2561, 20, 11, 220, 18, 11, 220, 17, 11, 220, 23, 1125, 508, 18, 11, 220, 17, 2546, 262, 508, 17, 11, 220, 18, 2533, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 10615, 152831, 152128, 151865, 151879, 151845, 1140, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 738, 152831, 152128, 152430, 326, 16, 151703, 151740, 152902, 152911, 151879, 151845, 738, 152831, 152128, 152430, 326, 17, 151703, 151740, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def common ( l1 : list , l2 : list ) : \n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\" \n    return sorted ( list ( set ( l1 ) & set ( l2 ) ) ) \n\n"}
{"task_id": "Python/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "test": "\n\nMETADATA = {}\n\n\ndef check(largest_prime_factor):\n    assert largest_prime_factor(15) == 5\n    assert largest_prime_factor(27) == 3\n    assert largest_prime_factor(63) == 7\n    assert largest_prime_factor(330) == 11\n    assert largest_prime_factor(13195) == 29\n\ncheck(largest_prime_factor)", "text": "    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2", "declaration": "def largest_prime_factor(n: int):\n", "example_test": "def check(largest_prime_factor):\n    assert largest_prime_factor(2048) == 2\n    assert largest_prime_factor(13195) == 29\ncheck(largest_prime_factor)\n", "code": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80largest_prime_factor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 7772, 38217, 18588, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5598, 279, 7772, 10250, 8168, 315, 308, 13, 62197, 308, 861, 220, 16, 323, 374, 537, 264, 10250, 624, 262, 12109, 7772, 38217, 18588, 7, 16, 18, 16, 24, 20, 340, 262, 220, 17, 24, 198, 262, 12109, 7772, 38217, 18588, 7, 17, 15, 19, 23, 340, 262, 220, 17, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 600, 152071, 220, 17, 152208, 152067, 152685, 152583, 152988, 152456, 152440, 600, 151894, 152370, 600, 152622, 152533, 152528, 308, 152361, 151876, 151923, 152557, 152592, 152325, 152456, 152440, 308, 151702, 152370, 600, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 308, 152409, 152370, 600, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 308, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80_factor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Assume_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80_factor_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80_factor_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def largest_prime_factor ( n : int ) : \n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\" \n    i = 2 \n    \n    while i * i <= n : \n        if n % i : \n            i += 1 \n        else : \n            n //= i \n        \n    \n    return n \n\n"}
{"task_id": "Python/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "canonical_solution": "    return sum(range(n + 1))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(sum_to_n):\n    assert sum_to_n(1) == 1\n    assert sum_to_n(6) == 21\n    assert sum_to_n(11) == 66\n    assert sum_to_n(30) == 465\n    assert sum_to_n(100) == 5050\n\ncheck(sum_to_n)", "text": "    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1", "declaration": "def sum_to_n(n: int):\n", "example_test": "def check(sum_to_n):\n    assert sum_to_n(1) == 1\n    assert sum_to_n(5) == 15\n    assert sum_to_n(10) == 55\n    assert sum_to_n(30) == 465\n    assert sum_to_n(100) == 5050\ncheck(sum_to_n)\n", "code": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(n + 1))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sum_to_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2629, 2346, 1089, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 1242, 2346, 1089, 374, 264, 729, 429, 36398, 5109, 504, 220, 16, 311, 308, 624, 262, 12109, 2629, 2346, 1089, 7, 18, 15, 340, 262, 220, 19, 21, 20, 198, 262, 12109, 2629, 2346, 1089, 7, 16, 15, 15, 340, 262, 220, 20, 15, 20, 15, 198, 262, 12109, 2629, 2346, 1089, 7, 20, 340, 262, 220, 16, 20, 198, 262, 12109, 2629, 2346, 1089, 7, 16, 15, 340, 262, 220, 20, 20, 198, 262, 12109, 2629, 2346, 1089, 7, 16, 340, 262, 220, 16, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 2629, 152831, 152128, 151865, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120sums_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_to_n ( n : int ) : \n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\" \n    return sum ( range ( 1 , n + 1 ) ) \n\n"}
{"task_id": "Python/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(correct_bracketing):\n    assert correct_bracketing(\"()\")\n    assert correct_bracketing(\"(()())\")\n    assert correct_bracketing(\"()()(()())()\")\n    assert correct_bracketing(\"()()((()()())())(()()(()))\")\n    assert not correct_bracketing(\"((()())))\")\n    assert not correct_bracketing(\")(()\")\n    assert not correct_bracketing(\"(\")\n    assert not correct_bracketing(\"((((\")\n    assert not correct_bracketing(\")\")\n    assert not correct_bracketing(\"(()\")\n    assert not correct_bracketing(\"()()(()())())(()\")\n    assert not correct_bracketing(\"()()(()())()))()\")\n\ncheck(correct_bracketing)", "text": "    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False", "declaration": "def correct_bracketing(brackets: str):\n", "example_test": "def check(correct_bracketing):\n    assert correct_bracketing(\"()\")\n    assert correct_bracketing(\"(()())\")\n    assert not correct_bracketing(\")(()\")\n    assert not correct_bracketing(\"(\")\ncheck(correct_bracketing)\n", "code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80correct_bracketing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80brackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4396, 17682, 5709, 287, 152069, 153011, 151799, 152320, 38929, 152273, 151990, 607, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 38929, 374, 264, 914, 315, 33579, 323, 58407, 624, 262, 470, 3007, 421, 1449, 8568, 31642, 702, 264, 12159, 15316, 31642, 382, 262, 12109, 4396, 17682, 5709, 287, 70340, 340, 262, 3557, 198, 262, 12109, 4396, 17682, 5709, 287, 445, 90208, 262, 3007, 198, 262, 12109, 4396, 17682, 5709, 287, 445, 5065, 2140, 1138, 262, 3007, 198, 262, 12109, 4396, 17682, 5709, 287, 445, 2376, 90208, 262, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 5611, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 31642, 152370, 38929, 151876, 151923, 152557, 152592, 152583, 152528, 31642, 152622, 151683, 152461, 33579, 151666, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 8737, 152831, 152128, 152430, 31642, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 31642, 152622, 151683, 152461, 58407, 151666, 152361, 152819, 151923, 152557, 152592, 151852, 151989, 152801, 5611, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 2420, 152831, 152128, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 5611, 151703, 151740, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120\"(\"_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120\")\"_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120every_ter\ud83d\ude80^\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"(\"_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80()\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80(()_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80_br_ter\ud83d\ude80^\ud83d\ude80acket_ter\ud83d\ude80^\ud83d\ude80ing_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80)(_ter\ud83d\ude80^\ud83d\ude80()\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"(\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\")\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pop_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def correct_bracketing ( brackets : str ) : \n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\" \n    stack = [ ] \n    \n    for bracket in brackets : \n        if bracket == \"(\" : \n            stack . append ( bracket ) \n        elif bracket == \")\" : \n            if not stack : \n                return False \n            \n            stack . pop ( ) \n        \n    \n    return len ( stack ) == 0 \n\n"}
{"task_id": "Python/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(derivative):\n    assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert derivative([1, 2, 3]) == [2, 6]\n    assert derivative([3, 2, 1]) == [2, 2]\n    assert derivative([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert derivative([1]) == []\n\ncheck(derivative)", "text": "    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]", "declaration": "def derivative(xs: list):\n", "example_test": "def check(derivative):\n    assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert derivative([1, 2, 3]) == [2, 6]\ncheck(derivative)\n", "code": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80derivative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 31805, 152069, 153011, 151799, 152320, 11943, 152273, 151990, 1140, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 11943, 4009, 36829, 315, 264, 47311, 624, 262, 11943, 58, 15, 60, 488, 11943, 58, 16, 60, 353, 856, 488, 11943, 58, 17, 60, 353, 856, 61, 17, 488, 21903, 198, 257, 3411, 31805, 315, 419, 47311, 304, 279, 1852, 1352, 624, 262, 12109, 31805, 2561, 18, 11, 220, 16, 11, 220, 17, 11, 220, 19, 11, 220, 20, 2546, 262, 508, 16, 11, 220, 19, 11, 220, 16, 17, 11, 220, 17, 15, 921, 262, 12109, 31805, 2561, 16, 11, 220, 17, 11, 220, 18, 2546, 262, 508, 17, 11, 220, 21, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 592, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 11943, 151703, 151740, 151703, 151740, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 592, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 11943, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151894, 152370, 600, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 592, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120derivative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80\u0120represent_ter\ud83d\ude80^\ud83d\ude80\u0120coefficients_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120polynomial_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120...._ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120derivative_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120polynomial_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120form_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120derivative_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120derivative_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120xs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120res_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def derivative ( xs : list ) : \n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\" \n    res = [ ] \n    \n    for i in range ( 1 , len ( xs ) ) : \n        res . append ( xs [ i ] * i ) \n    \n    return res \n\n"}
{"task_id": "Python/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(fibfib):\n    assert fibfib(2) == 1\n    assert fibfib(1) == 0\n    assert fibfib(5) == 4\n    assert fibfib(8) == 24\n    assert fibfib(10) == 81\n    assert fibfib(12) == 274\n    assert fibfib(14) == 927\n\ncheck(fibfib)", "text": "    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24", "declaration": "def fibfib(n: int):\n", "example_test": "def check(fibfib):\n    assert fibfib(1) == 0\n    assert fibfib(5) == 4\n    assert fibfib(8) == 24\ncheck(fibfib)\n", "code": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80fibfib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 15801, 75326, 152069, 153011, 151799, 152320, 308, 152273, 151990, 526, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 785, 42464, 37, 579, 1372, 8500, 374, 264, 8500, 4428, 311, 279, 434, 35080, 34603, 12981, 2886, 346, 429, 594, 4512, 438, 11017, 510, 262, 15801, 75326, 7, 15, 8, 621, 220, 15, 198, 262, 15801, 75326, 7, 16, 8, 621, 220, 15, 198, 262, 15801, 75326, 7, 17, 8, 621, 220, 16, 198, 262, 15801, 75326, 1445, 8, 621, 15801, 75326, 1445, 12, 16, 8, 488, 15801, 75326, 1445, 12, 17, 8, 488, 15801, 75326, 1445, 12, 18, 4292, 262, 5209, 3270, 264, 729, 311, 29720, 12564, 279, 308, 7563, 2392, 315, 279, 15801, 75326, 1372, 8500, 624, 262, 12109, 15801, 75326, 7, 16, 340, 262, 220, 15, 198, 262, 12109, 15801, 75326, 7, 20, 340, 262, 220, 19, 198, 262, 12109, 15801, 75326, 7, 23, 340, 262, 220, 17, 19, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 15, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152819, 151886, 151832, 220, 15, 151953, 152221, 151968, 152103, 152583, 152528, 308, 152622, 151683, 152114, 220, 17, 152361, 152819, 151886, 151832, 220, 16, 151953, 152415, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152554, 151810, 272, 152455, 152482, 152869, 220, 15, 152192, 152869, 220, 15, 152192, 152869, 220, 16, 151741, 152208, 152980, 152205, 152440, 716, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 18, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152554, 151810, 272, 152455, 152482, 152608, 293, 152192, 152608, 272, 152192, 151796, 152456, 152321, 152456, 152440, 264, 152328, 152370, 293, 152328, 152370, 272, 151741, 152208, 151953, 152996, 151886, 152588, 272, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80typed_parameter_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80type_py\ud83d\ude80type_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80The_ter\ud83d\ude80^\ud83d\ude80\u0120Fib_ter\ud83d\ude80^\ud83d\ude80F_ter\ud83d\ude80^\ud83d\ude80ib_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120F_ter\ud83d\ude80^\ud83d\ude80ibbon_ter\ud83d\ude80^\ud83d\ude80acci_ter\ud83d\ude80^\ud83d\ude80\u0120seq_ter\ud83d\ude80^\ud83d\ude80une_ter\ud83d\ude80^\ud83d\ude80ce_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120defined_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120follows_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Please_ter\ud83d\ude80^\ud83d\ude80\u0120write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120efficiently_ter\ud83d\ude80^\ud83d\ude80\u0120compute_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80-th_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120fib_ter\ud83d\ude80^\ud83d\ude80fib_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def fibfib ( n : int ) : \n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\" \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 0 \n    elif n == 2 : \n        return 1 \n    \n    a , b , c = 0 , 0 , 1 \n    \n    for _ in range ( 3 , n + 1 ) : \n        a , b , c = b , c , a + b + c \n        \n    \n    return c \n\n"}
{"task_id": "Python/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "test": "def check(vowels_count):\n\n    # Check some simple cases\n    assert vowels_count(\"abcde\") == 2, \"Test 1\"\n    assert vowels_count(\"Alone\") == 3, \"Test 2\"\n    assert vowels_count(\"key\") == 2, \"Test 3\"\n    assert vowels_count(\"bye\") == 1, \"Test 4\"\n    assert vowels_count(\"keY\") == 2, \"Test 5\"\n    assert vowels_count(\"bYe\") == 1, \"Test 6\"\n    assert vowels_count(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(vowels_count)", "text": "    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3", "declaration": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n", "example_test": "def check(vowels_count):\n    # Check some simple cases\n    assert vowels_count(\"abcde\") == 2, \"Test 6\"\n    assert vowels_count(\"ACEDY\") == 3, \"Test 7\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(vowels_count)\n", "code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "root": "module_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80FIX_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\nAdd more test cases.\n\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80vowels_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 152129, 152929, 152891, 152440, 20151, 151887, 3190, 2212, 803, 1273, 5048, 624, 12599, 151666, 152208, 151750, 152559, 151792, 78456, 3180, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7985, 264, 729, 78456, 3180, 892, 4990, 264, 914, 14064, 198, 262, 264, 3409, 438, 1946, 323, 4675, 279, 1372, 315, 78456, 304, 279, 914, 624, 262, 647, 363, 2010, 304, 419, 1142, 525, 364, 64, 516, 364, 68, 516, 364, 72, 516, 364, 78, 516, 364, 84, 4427, 5692, 11, 364, 88, 6, 374, 1083, 264, 198, 262, 76181, 11, 714, 1172, 979, 432, 374, 518, 279, 835, 315, 279, 2661, 3409, 382, 262, 13383, 510, 262, 12109, 78456, 3180, 445, 13683, 450, 1138, 262, 220, 17, 198, 262, 12109, 78456, 3180, 445, 1706, 1479, 56, 1138, 262, 220, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 78456, 151887, 330, 5918, 98255, 1, 151666, 152208, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152911, 151879, 153033, 152036, 152136, 274, 152411, 4722, 152831, 152128, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 152607, 152528, 78456, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 274, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152622, 151683, 152461, 364, 88, 6, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151886, 152588, 1760, 151953, 152996, 151784, 152557, 152592, 152583, 152528, 1304, 606, 563, 152622, 151683, 152461, 13265, 3817, 563, 1, 151666, 152361, 152380, 152451, 152819, 152511, 152043, 152844, 151836, 152650, 653, 67880, 152024, 151726, 152677, 152082, 151879, 153033, 152036, 152136, 653, 67880, 152411, 1273, 2593, 152831, 152128, 151703, 151740, 152208, 151953, 152415, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120FIX_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80Add_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80\u0120cases_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120V_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80u_ter\ud83d\ude80^\ud83d\ude80'._ter\ud83d\ude80^\ud83d\ude80\u0120Here_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120also_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120vowel_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120when_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80de_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80AC_ter\ud83d\ude80^\ud83d\ude80ED_ter\ud83d\ude80^\ud83d\ude80Y_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120___ter\ud83d\ude80^\ud83d\ude80name_ter\ud83d\ude80^\ud83d\ude80___ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"___ter\ud83d\ude80^\ud83d\ude80main_ter\ud83d\ude80^\ud83d\ude80___ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120do_ter\ud83d\ude80^\ud83d\ude80ctest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120do_ter\ud83d\ude80^\ud83d\ude80ctest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80mod_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "FIX = \"\"\"\nAdd more test cases.\n\"\"\" \n\ndef vowels_count ( s ) : \n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\" \n    vowels = \"aeiou\" \n    \n    count = 0 \n    \n    for char in s . lower ( ) : \n        if char in vowels : \n            count += 1 \n        \n    \n    if s [ - 1 ] == 'y' : \n        count += 1 \n    \n    return count \n\nif __name__ == \"__main__\" : \n    import doctest \n    doctest . testmod ( ) \n\n"}
{"task_id": "Python/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "test": "def check(circular_shift):\n\n    # Check some simple cases\n    assert circular_shift(100, 2) == \"001\"\n    assert circular_shift(12, 2) == \"12\"\n    assert circular_shift(97, 8) == \"79\"\n    assert circular_shift(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert circular_shift(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(circular_shift)", "text": "    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"", "declaration": "def circular_shift(x, shift):\n", "example_test": "def check(circular_shift):\n    # Check some simple cases\n    assert circular_shift(12, 2) == \"12\"\n    assert circular_shift(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\ncheck(circular_shift)\n", "code": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80circular_shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 26931, 22230, 152069, 153011, 151983, 856, 152297, 151983, 6407, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 82440, 6407, 279, 18509, 315, 279, 7546, 856, 11, 6407, 279, 18509, 1290, 553, 6407, 198, 262, 323, 470, 279, 1102, 438, 264, 914, 624, 262, 1416, 6407, 861, 1372, 315, 18509, 11, 470, 18509, 27437, 624, 262, 12109, 26931, 22230, 7, 16, 17, 11, 220, 16, 340, 262, 330, 17, 16, 698, 262, 12109, 26931, 22230, 7, 16, 17, 11, 220, 17, 340, 262, 330, 16, 17, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 274, 152911, 151879, 151845, 607, 152831, 152128, 152430, 856, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 6407, 153081, 152456, 152440, 6407, 151702, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152208, 151886, 152331, 152456, 152441, 152339, 152602, 274, 151684, 152771, 152503, 152079, 151878, 152780, 152801, 6407, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 274, 151684, 152771, 152503, 152121, 152079, 151878, 152780, 152801, 6407, 152085, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120circular_ter\ud83d\ude80^\ud83d\ude80_shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Circular_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120circular_ter\ud83d\ude80^\ud83d\ude80_shift_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120circular_ter\ud83d\ude80^\ud83d\ude80_shift_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def circular_shift ( x , shift ) : \n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\" \n    s = str ( x ) \n    \n    shift = shift % len ( s ) \n    \n    return s [ - shift : ] + s [ : - shift ] \n\n"}
{"task_id": "Python/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "test": "def check(digitSum):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert digitSum(\"\") == 0, \"Error\"\n    assert digitSum(\"abAB\") == 131, \"Error\"\n    assert digitSum(\"abcCd\") == 67, \"Error\"\n    assert digitSum(\"helloE\") == 69, \"Error\"\n    assert digitSum(\"woArBld\") == 131, \"Error\"\n    assert digitSum(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert digitSum(\" How are yOu?\") == 151, \"Error\"\n    assert digitSum(\"You arE Very Smart\") == 327, \"Error\"\n\ncheck(digitSum)", "text": "    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153", "declaration": "def digitSum(s):\n", "example_test": "def check(digitSum):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert digitSum(\"\") == 0, \"Error\"\n    assert digitSum(\"abAB\") == 131, \"Error\"\n    assert digitSum(\"abcCd\") == 67, \"Error\"\n    assert digitSum(\"helloE\") == 69, \"Error\"\n    assert digitSum(\"woArBld\") == 131, \"Error\"\n    assert digitSum(\"aAaaaXa\") == 153, \"Error\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(digitSum)\n", "code": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80digitSum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 15723, 9190, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 6262, 198, 262, 9645, 264, 729, 429, 4990, 264, 914, 438, 1946, 323, 4675, 279, 2629, 315, 279, 8416, 5766, 1172, 1248, 262, 39316, 13912, 382, 262, 25311, 510, 286, 15723, 9190, 39047, 589, 220, 15, 198, 286, 15723, 9190, 445, 370, 1867, 899, 589, 220, 16, 18, 16, 198, 286, 15723, 9190, 445, 13683, 90200, 899, 589, 220, 21, 22, 198, 286, 15723, 9190, 445, 14990, 36, 899, 589, 220, 21, 24, 198, 286, 15723, 9190, 445, 1126, 6953, 33, 507, 899, 589, 220, 16, 18, 16, 198, 286, 15723, 9190, 445, 64, 32, 32646, 55, 64, 899, 589, 220, 16, 20, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 6013, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 272, 152411, 8416, 152831, 152128, 151703, 151740, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 272, 151918, 152237, 152370, 274, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Task_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120ASCII_ter\ud83d\ude80^\ud83d\ude80\u0120codes_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80(\"\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80AB_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80Cd_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80hello_ter\ud83d\ude80^\ud83d\ude80E_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80wo_ter\ud83d\ude80^\ud83d\ude80Ar_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80ld_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80aaa_ter\ud83d\ude80^\ud83d\ude80X_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def digitSum ( s ) : \n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \n    return sum ( ord ( c . upper ( ) ) for c in s ) \n\n"}
{"task_id": "Python/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "test": "def check(fruit_distribution):\n\n    # Check some simple cases\n    assert fruit_distribution(\"5 apples and 6 oranges\",19) == 8\n    assert fruit_distribution(\"5 apples and 6 oranges\",21) == 10\n    assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2\n    assert fruit_distribution(\"1 apples and 0 oranges\",3) == 2\n    assert fruit_distribution(\"2 apples and 3 oranges\",100) == 95\n    assert fruit_distribution(\"2 apples and 3 oranges\",5) == 0\n    assert fruit_distribution(\"1 apples and 100 oranges\",120) == 19\n\ncheck(fruit_distribution)", "text": "    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "declaration": "def fruit_distribution(s,n):\n", "example_test": "def check(fruit_distribution):\n    # Check some simple cases\n    assert fruit_distribution(\"5 apples and 6 oranges\",19) == 8\n    assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2\n    assert fruit_distribution(\"2 apples and 3 oranges\",100) == 95\n    assert fruit_distribution(\"1 apples and 100 oranges\",120) == 19\ncheck(fruit_distribution)\n", "code": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80fruit_distribution_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 13779, 41465, 152069, 153011, 151983, 274, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 758, 419, 3383, 11, 498, 686, 387, 2661, 264, 914, 429, 10868, 264, 1372, 315, 40676, 323, 84038, 715, 262, 429, 525, 4237, 304, 264, 14024, 315, 13779, 419, 14024, 5610, 715, 262, 40676, 11, 84038, 11, 323, 69268, 25322, 13, 16246, 279, 914, 429, 10868, 279, 2790, 1372, 315, 715, 262, 279, 84038, 323, 40676, 323, 458, 7546, 429, 4009, 279, 2790, 1372, 315, 279, 25322, 715, 262, 304, 279, 14024, 470, 279, 1372, 315, 279, 69268, 25322, 304, 279, 14024, 624, 262, 369, 7006, 891, 510, 262, 13779, 41465, 445, 20, 40676, 323, 220, 21, 84038, 497, 220, 16, 24, 8, 1464, 16, 24, 481, 220, 20, 481, 220, 21, 284, 220, 23, 198, 262, 13779, 41465, 445, 15, 40676, 323, 220, 16, 84038, 497, 18, 8, 1464, 220, 18, 481, 220, 15, 481, 220, 16, 284, 220, 17, 198, 262, 13779, 41465, 445, 17, 40676, 323, 220, 18, 84038, 497, 220, 16, 15, 15, 8, 1464, 220, 16, 15, 15, 481, 220, 17, 481, 220, 18, 284, 220, 24, 20, 198, 262, 13779, 41465, 445, 16, 15, 15, 40676, 323, 220, 16, 84038, 497, 16, 17, 15, 8, 1464, 220, 16, 17, 15, 481, 220, 16, 15, 15, 481, 220, 16, 284, 220, 16, 24, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 274, 2019, 152911, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 152928, 330, 330, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 2790, 8734, 5520, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 2790, 8191, 642, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152370, 274, 2019, 151876, 151923, 152557, 152592, 152583, 152461, 330, 269, 5520, 1, 151666, 152622, 152607, 152528, 600, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2790, 8734, 5520, 152936, 152911, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152061, 151879, 153033, 152036, 152136, 600, 152411, 6718, 152831, 152128, 152928, 330, 330, 151666, 151703, 151740, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152461, 330, 676, 642, 1, 151666, 152622, 152607, 152528, 600, 152361, 152819, 152677, 153037, 152682, 152440, 2790, 8191, 642, 152936, 152911, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152061, 151879, 153033, 152036, 152136, 600, 152411, 6718, 152831, 152128, 152928, 330, 330, 151666, 151703, 151740, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 152677, 152929, 152891, 152440, 2790, 761, 67898, 153081, 152456, 152321, 152456, 152440, 2790, 8734, 5520, 152328, 152370, 2790, 8191, 642, 152780, 152370, 308, 152208, 151886, 152588, 2790, 761, 67898, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fruit_ter\ud83d\ude80^\ud83d\ude80_distribution_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120In_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120represents_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120distributed_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120basket_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120fruit_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120basket_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120mango_ter\ud83d\ude80^\ud83d\ude80\u0120fruits_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120represents_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120represent_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120fruits_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120basket_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120mango_ter\ud83d\ude80^\ud83d\ude80\u0120fruits_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120basket_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120exam_ter\ud83d\ude80^\ud83d\ude80ble_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fruit_ter\ud83d\ude80^\ud83d\ude80_distribution_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fruit_ter\ud83d\ude80^\ud83d\ude80_distribution_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fruit_ter\ud83d\ude80^\ud83d\ude80_distribution_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fruit_ter\ud83d\ude80^\ud83d\ude80_distribution_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120apples_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120oranges_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_or_ter\ud83d\ude80^\ud83d\ude80anges_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_app_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80anges_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_or_ter\ud83d\ude80^\ud83d\ude80anges_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80app_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_app_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ruits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_or_ter\ud83d\ude80^\ud83d\ude80anges_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_app_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ruits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def fruit_distribution ( s , n ) : \n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\" \n    s_list = s . split ( \" \" ) \n    \n    total_oranges = 0 \n    \n    total_apples = 0 \n    \n    for i in s_list : \n        if \"oranges\" in i : \n            total_oranges += int ( i . split ( \" \" ) [ 0 ] ) \n        elif \"apples\" in i : \n            total_apples += int ( i . split ( \" \" ) [ 0 ] ) \n        \n    \n    total_fruits = total_oranges + total_apples - n \n    \n    return total_fruits \n\n"}
{"task_id": "Python/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "test": "def check(pluck):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert pluck([4,2,3]) == [2, 1], \"Error\"\n    assert pluck([1,2,3]) == [2, 1], \"Error\"\n    assert pluck([]) == [], \"Error\"\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert pluck([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert pluck([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert pluck([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert pluck([7, 9, 7, 1]) == [], \"Error\"\n\ncheck(pluck)", "text": "    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value", "declaration": "def pluck(arr):\n", "example_test": "def check(pluck):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert pluck([4,2,3]) == [2, 1], \"Error\"\n    assert pluck([1,2,3]) == [2, 1], \"Error\"\n    assert pluck([]) == [], \"Error\"\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(pluck)\n", "code": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80pluck_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 625, 1942, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 330, 22043, 458, 1334, 14064, 264, 8870, 315, 264, 4916, 429, 702, 2477, 60935, 7546, 7798, 198, 262, 697, 3383, 374, 311, 625, 1942, 825, 315, 279, 7798, 323, 470, 432, 624, 262, 576, 625, 39358, 2436, 1265, 387, 279, 2436, 448, 279, 24632, 1496, 897, 624, 262, 1416, 5248, 7798, 448, 279, 1852, 24632, 1496, 897, 525, 1730, 470, 279, 2436, 429, 702, 24632, 1922, 382, 262, 576, 625, 39358, 2436, 1265, 387, 5927, 304, 264, 1140, 11, 508, 1525, 1574, 267, 3142, 11, 1181, 1922, 3211, 262, 1416, 1052, 525, 902, 1496, 2750, 476, 279, 2661, 1334, 374, 4287, 11, 470, 3056, 382, 262, 13383, 220, 16, 510, 286, 5571, 25, 508, 19, 11, 17, 11, 18, 921, 286, 9258, 25, 508, 17, 11, 220, 16, 921, 286, 71287, 25, 220, 17, 702, 279, 24632, 1496, 897, 11, 323, 220, 17, 702, 279, 24632, 1922, 382, 262, 13383, 220, 17, 510, 286, 5571, 25, 508, 16, 11, 17, 11, 18, 921, 286, 9258, 25, 508, 17, 11, 220, 16, 921, 286, 71287, 25, 220, 17, 702, 279, 24632, 1496, 897, 11, 323, 220, 17, 702, 279, 24632, 1922, 13, 4710, 262, 13383, 220, 18, 510, 286, 5571, 25, 4167, 286, 9258, 25, 4167, 1066, 262, 13383, 220, 19, 510, 286, 5571, 25, 508, 20, 11, 220, 15, 11, 220, 18, 11, 220, 15, 11, 220, 19, 11, 220, 17, 921, 286, 9258, 25, 508, 15, 11, 220, 16, 921, 286, 71287, 25, 220, 15, 374, 279, 24632, 897, 11, 714, 220, 1052, 525, 1378, 17516, 345, 3824, 773, 582, 686, 5157, 279, 1156, 7168, 11, 892, 702, 279, 24632, 1922, 382, 262, 87473, 510, 286, 353, 220, 16, 2651, 7798, 1954, 2651, 220, 16, 15, 15, 15, 15, 198, 286, 353, 220, 15, 2651, 2436, 2824, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 2890, 152380, 152451, 152819, 151886, 151948, 153062, 152222, 151847, 151953, 152415, 152677, 152929, 152891, 152440, 24632, 68347, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 364, 13573, 6, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1922, 152248, 151878, 152780, 152763, 220, 16, 152208, 152980, 152205, 152731, 151810, 600, 152554, 151810, 897, 152455, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 2890, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 897, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152857, 152983, 152528, 897, 152622, 152668, 152528, 24632, 68347, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 24632, 68347, 152370, 897, 152208, 152677, 152929, 152891, 152440, 1922, 152370, 600, 152208, 151953, 152415, 151953, 152996, 151886, 152840, 151998, 153062, 152281, 24632, 68347, 152793, 152281, 1922, 152222, 151847, 152476, 152836, 152528, 1922, 152622, 152238, 151874, 151878, 152780, 152763, 220, 16, 152361, 152641, 151998, 153062, 152222, 151847, 152106, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pl_ter\ud83d\ude80^\ud83d\ude80uck_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120branch_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tree_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-negative_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120nodes_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120pl_ter\ud83d\ude80^\ud83d\ude80uck_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120nodes_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120pl_ter\ud83d\ude80^\ud83d\ude80ucked_ter\ud83d\ude80^\ud83d\ude80\u0120node_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120node_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120nodes_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120found_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120node_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120pl_ter\ud83d\ude80^\ud83d\ude80ucked_ter\ud83d\ude80^\ud83d\ude80\u0120node_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120returned_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude80\u0120sm_ter\ud83d\ude80^\ud83d\ude80ale_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_value_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120],\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120[]_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120zeros_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120so_ter\ud83d\ude80^\ud83d\ude80\u0120we_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120choose_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Constraints_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120nodes_ter\ud83d\ude80^\ud83d\ude80.length_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120node_ter\ud83d\ude80^\ud83d\ude80.value_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pluck ( arr ) : \n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\" \n    if not arr : \n        return [ ] \n    \n    smallest_even = float ( 'inf' ) \n    \n    index = - 1 \n    \n    for i , value in enumerate ( arr ) : \n        if value % 2 == 0 and value < smallest_even : \n            smallest_even = value \n            \n            index = i \n            \n        \n    \n    return [ smallest_even , index ] if index != - 1 else [ ] \n\n"}
{"task_id": "Python/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "test": "def check(search):\n\n    # manually generated tests\n    assert search([5, 5, 5, 5, 1]) == 1\n    assert search([4, 1, 4, 1, 4, 4]) == 4\n    assert search([3, 3]) == -1\n    assert search([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert search([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert search([3, 2, 8, 2]) == 2\n    assert search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert search([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert search([1, 9, 10, 1, 3]) == 1\n    assert search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert search([1]) == 1\n    assert search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert search([10]) == -1\n    assert search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert search([3, 10, 10, 9, 2]) == -1\n\ncheck(search)", "text": "    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1", "declaration": "def search(lst):\n", "example_test": "def check(search):\n    # manually generated tests\n    assert search([4, 1, 2, 2, 3, 1]) == 2\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    assert search([5, 5, 4, 4, 4]) == -1\ncheck(search)\n", "code": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2711, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 1446, 525, 2661, 264, 2477, 39433, 1140, 315, 6785, 25780, 13, 3411, 279, 12196, 7546, 429, 374, 7046, 1091, 715, 262, 7168, 11, 323, 702, 264, 11639, 7046, 1091, 476, 6144, 311, 279, 897, 315, 279, 7546, 5086, 13, 715, 262, 576, 11639, 315, 458, 7546, 374, 279, 1372, 315, 3039, 432, 7952, 304, 279, 1140, 624, 262, 1416, 902, 1741, 264, 897, 3000, 11, 470, 481, 16, 624, 262, 25311, 510, 286, 2711, 2561, 19, 11, 220, 16, 11, 220, 17, 11, 220, 17, 11, 220, 18, 11, 220, 16, 2467, 621, 220, 17, 198, 286, 2711, 2561, 16, 11, 220, 17, 11, 220, 17, 11, 220, 18, 11, 220, 18, 11, 220, 18, 11, 220, 19, 11, 220, 19, 11, 220, 19, 2467, 621, 220, 18, 198, 286, 2711, 2561, 20, 11, 220, 20, 11, 220, 19, 11, 220, 19, 11, 220, 19, 2467, 621, 481, 16, 198, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 20895, 152023, 152892, 152244, 152631, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152607, 152528, 20895, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 20895, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 20895, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 152677, 152929, 152891, 152440, 1102, 152248, 151878, 152780, 152763, 220, 16, 152208, 152980, 152205, 152731, 151810, 1629, 152554, 151810, 1760, 152455, 152911, 151879, 153033, 152036, 152136, 20895, 152411, 3589, 152831, 152128, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 1760, 152622, 152927, 152114, 220, 16, 152361, 152857, 152983, 152528, 1760, 152622, 152927, 152528, 1629, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1102, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1102, 153001, 152430, 1629, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-empty_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120itself_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120appears_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120exist_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120freq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def search ( lst ) : \n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    ''' \n    freq = { } \n    \n    for num in lst : \n        if num in freq : \n            freq [ num ] += 1 \n        else : \n            freq [ num ] = 1 \n            \n        \n    \n    result = - 1 \n    \n    for num , count in freq . items ( ) : \n        if count >= 1 and count >= num : \n            result = max ( result , num ) \n            \n        \n    \n    return result \n\n"}
{"task_id": "Python/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": "def check(strange_sort_list):\n\n    # Check some simple cases\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(strange_sort_list)", "text": "    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []", "declaration": "def strange_sort_list(lst):\n", "example_test": "def check(strange_sort_list):\n    # Check some simple cases\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(strange_sort_list)\n", "code": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80strange_sort_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 14888, 18435, 2019, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 16246, 1140, 315, 25780, 11, 470, 1140, 304, 14888, 1973, 624, 262, 42593, 28273, 11, 374, 979, 498, 1191, 448, 279, 8028, 897, 345, 262, 1221, 7192, 315, 279, 9664, 25780, 11, 1221, 8028, 323, 773, 389, 382, 262, 25311, 510, 262, 14888, 18435, 2019, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 2467, 621, 508, 16, 11, 220, 19, 11, 220, 17, 11, 220, 18, 921, 262, 14888, 18435, 2019, 2561, 20, 11, 220, 20, 11, 220, 20, 11, 220, 20, 2467, 621, 508, 20, 11, 220, 20, 11, 220, 20, 11, 220, 20, 921, 262, 14888, 18435, 2019, 10556, 8, 621, 4167, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152067, 152685, 152652, 18845, 151876, 152677, 152929, 152891, 152440, 1308, 6189, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 18845, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 18845, 152411, 4057, 152831, 152128, 152430, 1308, 6189, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1308, 6189, 151703, 151740, 152208, 151923, 152557, 152592, 151852, 151989, 152801, 18845, 152380, 152451, 152819, 151787, 152183, 151953, 152415, 152677, 152929, 152891, 152440, 1932, 6189, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 18845, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 18845, 152411, 4057, 152831, 152128, 152430, 1932, 6189, 151703, 151740, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1932, 6189, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strange_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120strange_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Strange_ter\ud83d\ude80^\ud83d\ude80\u0120sorting_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120when_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120so_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120strange_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120strange_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120strange_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def strange_sort_list ( lst ) : \n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ''' \n    result = [ ] \n    \n    while lst : \n        min_val = min ( lst ) \n        \n        lst . remove ( min_val ) \n        result . append ( min_val ) \n        if not lst : \n            break \n        \n        max_val = max ( lst ) \n        \n        lst . remove ( max_val ) \n        result . append ( max_val ) \n    \n    return result \n\n"}
{"task_id": "Python/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "test": "def check(triangle_area):\n\n    # Check some simple cases\n    assert triangle_area(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(4, 8, 5) == 8.18\n    assert triangle_area(2, 2, 2) == 1.73\n    assert triangle_area(1, 2, 3) == -1\n    assert triangle_area(10, 5, 7) == 16.25\n    assert triangle_area(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert triangle_area(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert triangle_area(2, 2, 10) == -1\n\ncheck(triangle_area)", "text": "    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1", "declaration": "def triangle_area(a, b, c):\n", "example_test": "def check(triangle_area):\n    # Check some simple cases\n    assert triangle_area(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert triangle_area(1, 2, 10) == -1\ncheck(triangle_area)\n", "code": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80triangle_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 21495, 15030, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 16246, 279, 28316, 315, 279, 2326, 11067, 315, 264, 21495, 13, 3411, 279, 3082, 315, 198, 262, 279, 21495, 17976, 311, 220, 17, 12122, 3501, 421, 279, 2326, 11067, 1352, 264, 2697, 21495, 13, 715, 262, 18214, 470, 481, 16, 198, 262, 14513, 11067, 1281, 264, 2697, 21495, 979, 279, 2629, 315, 894, 1378, 11067, 374, 7046, 715, 262, 1091, 279, 4843, 3108, 624, 262, 13383, 510, 262, 21495, 15030, 7, 18, 11, 220, 19, 11, 220, 20, 8, 621, 220, 21, 13, 15, 15, 198, 262, 21495, 15030, 7, 16, 11, 220, 17, 11, 220, 16, 15, 8, 621, 481, 16, 198, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152191, 152412, 151793, 152412, 152749, 152988, 152456, 152440, 264, 152328, 152370, 293, 152622, 152706, 152528, 272, 152361, 152857, 152983, 152988, 152456, 152440, 264, 152328, 152370, 272, 152622, 152706, 152528, 293, 152361, 152857, 152983, 152988, 152456, 152440, 293, 152328, 152370, 272, 152622, 152706, 152528, 264, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 274, 153081, 152456, 151839, 152925, 152456, 152321, 152456, 152440, 264, 152328, 152370, 293, 152328, 152370, 272, 152144, 152071, 220, 17, 152208, 152677, 152929, 152891, 152440, 3082, 153081, 152456, 151839, 152925, 152456, 152321, 152456, 152321, 152456, 152440, 274, 151894, 152879, 152925, 152456, 152440, 274, 152780, 152370, 264, 151894, 152879, 152925, 152456, 152440, 274, 152780, 152370, 293, 151894, 152879, 152925, 152456, 152440, 274, 152780, 152370, 272, 151940, 152897, 220, 15, 13, 20, 152208, 151886, 151816, 151879, 151845, 4778, 152831, 152128, 152430, 3082, 153001, 152228, 220, 17, 151703, 151740, 151953, 152221, 152729, 152515, 151876, 151886, 152978, 151878, 152780, 152763, 220, 16, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120lengths_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80\u0120points_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80\u0120form_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Otherwise_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Three_ter\ud83d\ude80^\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80\u0120when_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120third_ter\ud83d\ude80^\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80_area_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def triangle_area ( a , b , c ) : \n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    ''' \n    if a + b > c and a + c > b and b + c > a : \n        s = ( a + b + c ) / 2 \n        \n        area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5 \n        \n        return round ( area , 2 ) \n    else : \n        return - 1 \n    \n\n"}
{"task_id": "Python/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "test": "def check(will_it_fly):\n\n    # Check some simple cases\n    assert will_it_fly([3, 2, 3], 9) is True\n    assert will_it_fly([1, 2], 5) is False\n    assert will_it_fly([3], 5) is True\n    assert will_it_fly([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert will_it_fly([1, 2, 3], 6) is False\n    assert will_it_fly([5], 5) is True\n\ncheck(will_it_fly)", "text": "    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.", "declaration": "def will_it_fly(q,w):\n", "example_test": "def check(will_it_fly):\n    # Check some simple cases\n    assert will_it_fly([3, 2, 3], 9) is True\n    assert will_it_fly([1, 2], 5) is False\n    assert will_it_fly([3], 5) is True\n    assert will_it_fly([3, 2, 3], 1) is False\ncheck(will_it_fly)\n", "code": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80will_it_fly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80w_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 686, 14631, 761, 398, 152069, 153011, 151983, 2804, 152297, 151983, 289, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 9645, 264, 729, 429, 4675, 3007, 421, 279, 1633, 2804, 686, 11466, 11, 323, 3557, 5937, 624, 262, 576, 1633, 2804, 686, 11466, 421, 432, 594, 23831, 320, 275, 374, 264, 10854, 484, 441, 292, 1140, 8, 323, 279, 2629, 315, 1181, 5424, 374, 2686, 1091, 476, 6144, 279, 7192, 3204, 4680, 289, 382, 262, 13383, 510, 262, 686, 14631, 761, 398, 2561, 16, 11, 220, 17, 1125, 220, 20, 8, 82706, 252, 3557, 715, 262, 671, 220, 16, 10, 17, 374, 2686, 1091, 279, 7192, 3204, 4680, 11, 714, 432, 594, 650, 58402, 382, 262, 686, 14631, 761, 398, 2561, 18, 11, 220, 17, 11, 220, 18, 1125, 220, 16, 8, 82706, 252, 3557, 198, 262, 671, 432, 594, 23831, 11, 714, 220, 18, 10, 17, 10, 18, 374, 803, 1091, 279, 7192, 3204, 4680, 382, 262, 686, 14631, 761, 398, 2561, 18, 11, 220, 17, 11, 220, 18, 1125, 220, 24, 8, 82706, 252, 3007, 198, 262, 671, 220, 18, 10, 17, 10, 18, 374, 2686, 1091, 279, 7192, 3204, 4680, 11, 323, 432, 594, 23831, 382, 262, 686, 14631, 761, 398, 2561, 18, 1125, 220, 20, 8, 82706, 252, 3007, 198, 262, 671, 220, 18, 374, 2686, 1091, 279, 7192, 3204, 4680, 11, 323, 432, 594, 23831, 624, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 151917, 151879, 151845, 2629, 152831, 152128, 152430, 2804, 151703, 151740, 152622, 152706, 152528, 289, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 2804, 152622, 152238, 151696, 152339, 152602, 2804, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80_it_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120w_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120object_ter\ud83d\ude80^\ud83d\ude80\u0120q_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120fly_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120object_ter\ud83d\ude80^\ud83d\ude80\u0120q_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120fly_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120balanced_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rom_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80\u0120w_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80_it_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120un_ter\ud83d\ude80^\ud83d\ude80balanced_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80_it_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120balanced_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80_it_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120balanced_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80_it_ter\ud83d\ude80^\ud83d\ude80_f_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120balanced_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120w_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def will_it_fly ( q , w ) : \n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    ''' \n    if sum ( q ) > w : \n        return False \n    \n    if q != q [ : : - 1 ] : \n        return False \n    \n    return True \n\n"}
{"task_id": "Python/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "test": "def check(smallest_change):\n\n    # Check some simple cases\n    assert smallest_change([1,2,3,5,4,7,9,6]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert smallest_change([1, 4, 2]) == 1\n    assert smallest_change([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert smallest_change([1, 2, 3, 2, 1]) == 0\n    assert smallest_change([3, 1, 1, 3]) == 0\n    assert smallest_change([1]) == 0\n    assert smallest_change([0, 1]) == 1\n\ncheck(smallest_change)", "text": "    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0", "declaration": "def smallest_change(arr):\n", "example_test": "def check(smallest_change):\n    # Check some simple cases\n    assert smallest_change([1,2,3,5,4,7,9,6]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    # Check some edge cases that are easy to work out by hand.\n    assert smallest_change([1, 2, 3, 2, 1]) == 0\n    assert smallest_change([3, 1, 1, 3]) == 0\ncheck(smallest_change)\n", "code": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80smallest_change_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 24632, 15947, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 458, 1334, 2890, 315, 25780, 11, 1477, 279, 8028, 1372, 315, 5424, 429, 198, 262, 1184, 311, 387, 5497, 311, 1281, 279, 1334, 10854, 484, 441, 292, 13, 362, 10854, 484, 441, 292, 1334, 374, 458, 1334, 429, 198, 262, 374, 1349, 279, 1852, 28412, 323, 41054, 13, 758, 825, 2297, 11, 498, 646, 2297, 825, 2392, 311, 894, 1008, 2392, 382, 262, 1752, 3110, 510, 262, 24632, 15947, 2561, 16, 11, 17, 11, 18, 11, 20, 11, 19, 11, 22, 11, 24, 11, 21, 2467, 621, 220, 19, 198, 262, 24632, 15947, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 18, 11, 220, 17, 11, 220, 17, 2467, 621, 220, 16, 198, 262, 24632, 15947, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 17, 11, 220, 16, 2467, 621, 220, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 4344, 152071, 220, 15, 152208, 152677, 152929, 152891, 152731, 151810, 2115, 152554, 151810, 1290, 152455, 152482, 152869, 220, 15, 152192, 151796, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152780, 152071, 220, 16, 151741, 152208, 152067, 152685, 152583, 152528, 2115, 152622, 152668, 152528, 1290, 152361, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 2115, 151773, 152987, 151773, 152622, 152238, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 1290, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 4344, 152936, 152071, 220, 16, 152208, 151953, 152415, 152677, 153037, 152682, 152440, 2115, 152936, 152071, 220, 16, 152208, 152677, 153037, 152682, 152440, 1290, 151962, 152071, 220, 16, 152208, 151953, 152996, 151886, 152588, 4344, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_change_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120changed_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rom_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rom_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120read_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120backwards_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120forwards_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120In_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_change_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_change_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_change_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120changes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120changes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120changes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def smallest_change ( arr ) : \n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\" \n    changes = 0 \n    \n    left , right = 0 , len ( arr ) - 1 \n    \n    while left < right : \n        if arr [ left ] != arr [ right ] : \n            changes += 1 \n        \n        left += 1 \n        right -= 1 \n    \n    return changes \n\n"}
{"task_id": "Python/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "test": "def check(total_match):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert total_match([], []) == []\n    assert total_match(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert total_match(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert total_match([], ['this']) == []\n    assert total_match(['this'], []) == []\n\ncheck(total_match)", "text": "    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']", "declaration": "def total_match(lst1, lst2):\n", "example_test": "def check(total_match):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert total_match([], []) == []\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(total_match)\n", "code": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80total_match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst1_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst2_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2790, 10708, 152069, 153011, 151983, 18845, 16, 152297, 151983, 18845, 17, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 9645, 264, 729, 429, 26344, 1378, 11469, 315, 9069, 323, 4675, 279, 1140, 429, 702, 715, 262, 2790, 1372, 315, 23000, 304, 279, 678, 9069, 315, 279, 1140, 2686, 1091, 279, 1008, 1140, 382, 262, 421, 279, 1378, 11469, 614, 279, 1852, 1372, 315, 23000, 11, 470, 279, 1156, 1140, 382, 262, 25311, 198, 262, 2790, 10708, 40056, 42182, 82706, 252, 4167, 262, 2790, 10708, 6425, 6023, 516, 364, 2882, 4089, 2509, 71, 40, 516, 364, 13048, 5078, 82706, 252, 2509, 71, 40, 516, 364, 13048, 4432, 262, 2790, 10708, 6425, 6023, 516, 364, 2882, 4089, 2509, 6023, 516, 364, 6023, 516, 364, 2882, 516, 364, 4987, 5078, 82706, 252, 2509, 6023, 516, 364, 2882, 4432, 262, 2790, 10708, 6425, 6023, 516, 364, 2882, 4089, 2509, 71, 40, 516, 364, 6023, 516, 364, 6023, 5078, 82706, 252, 2509, 71, 40, 516, 364, 6023, 516, 364, 6023, 4432, 262, 2790, 10708, 6425, 19, 4089, 2509, 16, 516, 364, 17, 516, 364, 18, 516, 364, 19, 516, 364, 20, 5078, 82706, 252, 2509, 19, 4432, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 18845, 16, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 2422, 152831, 152128, 152430, 600, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 16, 151764, 152194, 152734, 152208, 152677, 152929, 152891, 152440, 18845, 17, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 2422, 152831, 152128, 152430, 600, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 17, 151764, 152194, 152734, 152208, 151923, 152557, 152592, 152583, 152528, 18845, 16, 152622, 152533, 152528, 18845, 17, 152361, 152380, 152451, 152819, 151886, 152588, 18845, 16, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 18845, 17, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120accepts_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120chars_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120chars_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80([],_ter\ud83d\ude80^\ud83d\ude80\u0120[])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80admin_ter\ud83d\ude80^\ud83d\ude80'],_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Hi_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Hi_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80admin_ter\ud83d\ude80^\ud83d\ude80'],_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80admin_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80project_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80admin_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80admin_ter\ud83d\ude80^\ud83d\ude80'],_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_match_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80'],_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def total_match ( lst1 , lst2 ) : \n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    ''' \n    lst1 = sum ( len ( i ) for i in lst1 ) \n    \n    lst2 = sum ( len ( i ) for i in lst2 ) \n    \n    if lst1 <= lst2 : \n        return lst1 \n    else : \n        return lst2 \n    \n\n"}
{"task_id": "Python/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "test": "def check(is_multiply_prime):\n\n    assert is_multiply_prime(5) == False\n    assert is_multiply_prime(30) == True\n    assert is_multiply_prime(8) == True\n    assert is_multiply_prime(10) == False\n    assert is_multiply_prime(125) == True\n    assert is_multiply_prime(3 * 5 * 7) == True\n    assert is_multiply_prime(3 * 6 * 7) == False\n    assert is_multiply_prime(9 * 9 * 9) == False\n    assert is_multiply_prime(11 * 9 * 9) == False\n    assert is_multiply_prime(11 * 13 * 7) == True\n\ncheck(is_multiply_prime)", "text": "    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5", "declaration": "def is_multiply_prime(a):\n", "example_test": "def check(is_multiply_prime):\n    assert is_multiply_prime(30) == True\ncheck(is_multiply_prime)\n", "code": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_multiply_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 93054, 38217, 152069, 153011, 151983, 264, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7985, 264, 729, 429, 4675, 830, 421, 279, 2661, 1372, 374, 279, 46444, 315, 220, 18, 10250, 5109, 198, 262, 323, 895, 5937, 624, 262, 57633, 429, 320, 64, 8, 374, 2686, 1221, 220, 16, 15, 15, 13, 715, 262, 13383, 510, 262, 374, 93054, 38217, 7, 18, 15, 8, 621, 3007, 198, 262, 220, 18, 15, 284, 220, 17, 353, 220, 18, 353, 220, 20, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5511, 729, 311, 1779, 421, 264, 1372, 374, 10250, 74000, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152677, 152929, 152891, 152440, 10250, 73040, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 152440, 264, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 153101, 151879, 151845, 374, 38217, 152831, 152128, 152430, 600, 151703, 151740, 152857, 152983, 152988, 152456, 152440, 264, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 10250, 73040, 152411, 8737, 152831, 152128, 152430, 600, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 264, 152409, 152370, 600, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 10250, 73040, 151703, 151740, 152622, 152706, 152114, 220, 18, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152415, 151953, 152996, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 10250, 73040, 151703, 151740, 152622, 151683, 152114, 220, 18, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_multiply_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120multiplication_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Knowing_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_multiply_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_factors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_multiply_prime ( a ) : \n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \n    def is_prime ( n ) : \n        \"\"\"Helper function to check if a number is prime.\"\"\" \n        if n <= 1 : \n            return False \n        \n        for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n            if n % i == 0 : \n                return False \n            \n        \n        return True \n    \n    prime_factors = [ ] \n    \n    for i in range ( 2 , a + 1 ) : \n        if is_prime ( i ) and a % i == 0 : \n            prime_factors . append ( i ) \n            a //= i \n            if len ( prime_factors ) > 3 : \n                return False \n            \n        \n    \n    return len ( prime_factors ) == 3 \n\n"}
{"task_id": "Python/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "test": "def check(is_simple_power):\n\n    # Check some simple cases\n    assert is_simple_power(1, 4)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(2, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(8, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(3, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(3, 1)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(5, 3)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some simple cases\n    assert is_simple_power(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert is_simple_power(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert is_simple_power(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(is_simple_power)", "text": "    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false", "declaration": "def is_simple_power(x, n):\n", "example_test": "def check(is_simple_power):\n    # Check some simple cases\n    assert is_simple_power(1, 4)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(2, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(8, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(3, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(3, 1)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_simple_power(5, 3)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\ncheck(is_simple_power)\n", "code": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_simple_power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 30015, 20421, 152069, 153011, 151983, 856, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7771, 3383, 374, 311, 3270, 264, 729, 429, 4675, 830, 421, 264, 1372, 856, 374, 264, 4285, 198, 262, 2355, 315, 308, 323, 895, 304, 1008, 5048, 624, 262, 856, 374, 264, 4285, 2355, 315, 308, 421, 308, 334, 396, 25387, 198, 262, 1752, 3110, 510, 262, 374, 30015, 20421, 7, 16, 11, 220, 19, 8, 589, 830, 198, 262, 374, 30015, 20421, 7, 17, 11, 220, 17, 8, 589, 830, 198, 262, 374, 30015, 20421, 7, 23, 11, 220, 17, 8, 589, 830, 198, 262, 374, 30015, 20421, 7, 18, 11, 220, 17, 8, 589, 895, 198, 262, 374, 30015, 20421, 7, 18, 11, 220, 16, 8, 589, 895, 198, 262, 374, 30015, 20421, 7, 20, 11, 220, 18, 8, 589, 895, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 856, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152067, 152685, 152583, 152528, 856, 152622, 152706, 152114, 220, 16, 152361, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 856, 151702, 152370, 308, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 856, 153081, 152456, 152440, 856, 152542, 152370, 308, 152208, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120simple_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120cases_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120simple_ter\ud83d\ude80^\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80=x_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_simple_ter\ud83d\ude80^\ud83d\ude80_power_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_simple_power ( x , n ) : \n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \n    if x == 1 : \n        return True \n    \n    while x > 1 : \n        if x % n != 0 : \n            return False \n        \n        x = x // n \n        \n    \n    return True \n\n"}
{"task_id": "Python/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "test": "def check(iscube):\n\n    # Check some simple cases\n    assert iscube(1) == True, \"First test error: \" + str(iscube(1))\n    assert iscube(2) == False, \"Second test error: \" + str(iscube(2))\n    assert iscube(-1) == True, \"Third test error: \" + str(iscube(-1))\n    assert iscube(64) == True, \"Fourth test error: \" + str(iscube(64))\n    assert iscube(180) == False, \"Fifth test error: \" + str(iscube(180))\n    assert iscube(1000) == True, \"Sixth test error: \" + str(iscube(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert iscube(0) == True, \"1st edge test error: \" + str(iscube(0))\n    assert iscube(1729) == False, \"2nd edge test error: \" + str(iscube(1728))\n\ncheck(iscube)", "text": "    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False", "declaration": "def iscube(a):\n", "example_test": "def check(iscube):\n    # Check some simple cases\n    assert iscube(1) == True, \"First test error: \" + str(iscube(1))\n    assert iscube(2) == False, \"Second test error: \" + str(iscube(2))\n    assert iscube(-1) == True, \"Third test error: \" + str(iscube(-1))\n    assert iscube(64) == True, \"Fourth test error: \" + str(iscube(64))\n    assert iscube(180) == False, \"Fifth test error: \" + str(iscube(180))\n    # Check some edge cases that are easy to work out by hand.\n    assert iscube(0) == True, \"1st edge test error: \" + str(iscube(0))\ncheck(iscube)\n", "code": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80iscube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 45411, 152069, 153011, 151983, 264, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 9645, 264, 729, 429, 4990, 458, 7546, 264, 323, 4675, 3007, 715, 262, 421, 419, 6749, 1878, 374, 264, 23739, 315, 1045, 7546, 1372, 624, 262, 7036, 25, 498, 1231, 9658, 279, 1946, 374, 2677, 2697, 624, 262, 25311, 510, 262, 374, 45411, 7, 16, 8, 32296, 3007, 198, 262, 374, 45411, 7, 17, 8, 32296, 3557, 198, 262, 374, 45411, 4080, 16, 8, 32296, 3007, 198, 262, 374, 45411, 7, 21, 19, 8, 32296, 3007, 198, 262, 374, 45411, 7, 15, 8, 32296, 3007, 198, 262, 374, 45411, 7, 16, 23, 15, 8, 32296, 3557, 198, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 264, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152677, 152929, 152891, 152440, 23739, 153081, 152456, 152440, 264, 151940, 152879, 152925, 152456, 152468, 220, 16, 152144, 152071, 220, 18, 152208, 151886, 152029, 151917, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152440, 23739, 152780, 152911, 151879, 151845, 4778, 152831, 152128, 152430, 23739, 151703, 151740, 151703, 151740, 152622, 152668, 152507, 220, 16, 68, 12, 16, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120ing_ter\ud83d\ude80^\ud83d\ude80eger_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120some_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120assume_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80(-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80cube_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def iscube ( a ) : \n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    ''' \n    if a == 0 : \n        return True \n    \n    cube = a ** ( 1 / 3 ) \n    \n    return abs ( cube - round ( cube ) ) < 1e-10 \n\n"}
{"task_id": "Python/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "test": "def check(hex_key):\n\n    # Check some simple cases\n    assert hex_key(\"AB\") == 1, \"First test error: \" + str(hex_key(\"AB\"))      \n    assert hex_key(\"1077E\") == 2, \"Second test error: \" + str(hex_key(\"1077E\"))  \n    assert hex_key(\"ABED1A33\") == 4, \"Third test error: \" + str(hex_key(\"ABED1A33\"))      \n    assert hex_key(\"2020\") == 2, \"Fourth test error: \" + str(hex_key(\"2020\"))  \n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(hex_key(\"123456789ABCDEF0\"))      \n    assert hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(hex_key(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert hex_key([]) == 0\n\ncheck(hex_key)", "text": "    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.", "declaration": "def hex_key(num):\n", "example_test": "def check(hex_key):\n    # Check some simple cases\n    assert hex_key(\"AB\") == 1, \"First test error: \" + str(hex_key(\"AB\"))      \n    assert hex_key(\"1077E\") == 2, \"Second test error: \" + str(hex_key(\"1077E\"))  \n    assert hex_key(\"ABED1A33\") == 4, \"Third test error: \" + str(hex_key(\"ABED1A33\"))      \n    assert hex_key(\"2020\") == 2, \"Fourth test error: \" + str(hex_key(\"2020\"))  \n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(hex_key(\"123456789ABCDEF0\"))      \n    # Check some edge cases that are easy to work out by hand.\ncheck(hex_key)\n", "code": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80hex_key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 12371, 3097, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 614, 1012, 50820, 311, 3270, 264, 729, 429, 21189, 715, 262, 264, 69722, 1372, 438, 264, 914, 323, 14579, 279, 1372, 315, 69722, 715, 262, 18509, 429, 525, 49433, 320, 32338, 1372, 11, 476, 264, 10250, 11, 374, 264, 5810, 1372, 715, 262, 7046, 1091, 220, 16, 429, 374, 537, 264, 1985, 315, 1378, 9155, 5810, 5109, 4292, 262, 27228, 49326, 18509, 525, 220, 15, 11, 220, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 11, 220, 21, 11, 220, 22, 11, 220, 23, 11, 220, 24, 11, 362, 11, 425, 11, 356, 11, 422, 11, 468, 11, 434, 624, 262, 12518, 5109, 525, 220, 17, 11, 220, 18, 11, 220, 20, 11, 220, 22, 11, 220, 16, 16, 11, 220, 16, 18, 11, 220, 16, 22, 52388, 262, 2055, 498, 614, 311, 8253, 264, 1372, 315, 279, 2701, 18509, 25, 220, 17, 11, 220, 18, 11, 220, 20, 11, 220, 22, 11, 715, 262, 425, 38738, 23289, 220, 16, 16, 701, 422, 38738, 23289, 220, 16, 18, 4292, 262, 7036, 25, 498, 1231, 9658, 279, 1946, 374, 2677, 4396, 476, 4287, 914, 11, 715, 262, 323, 17738, 362, 8161, 11289, 27266, 42125, 27229, 525, 2677, 39482, 624, 262, 25311, 510, 262, 1752, 1629, 284, 330, 1867, 1, 279, 2550, 1265, 387, 220, 16, 624, 262, 1752, 1629, 284, 330, 16, 15, 22, 22, 36, 1, 279, 2550, 1265, 387, 220, 17, 624, 262, 1752, 1629, 284, 330, 1867, 1479, 16, 32, 18, 18, 1, 279, 2550, 1265, 387, 220, 19, 624, 262, 1752, 1629, 284, 330, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25411, 13649, 15, 1, 279, 2550, 1265, 387, 220, 21, 624, 262, 1752, 1629, 284, 330, 17, 15, 17, 15, 1, 279, 2550, 1265, 387, 220, 17, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 49433, 152445, 153062, 153088, 220, 17, 152793, 153088, 220, 18, 152793, 153088, 220, 20, 152793, 153088, 220, 22, 152793, 153088, 220, 16, 16, 152793, 153088, 220, 16, 18, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 15723, 152370, 1629, 151876, 151923, 152557, 152592, 152583, 152528, 15723, 152622, 152607, 152835, 153062, 152834, 364, 17, 6, 151666, 152793, 152834, 364, 18, 6, 151666, 152793, 152834, 364, 20, 6, 151666, 152793, 152834, 364, 22, 6, 151666, 152793, 152834, 364, 33, 6, 151666, 152793, 152834, 364, 35, 6, 151666, 152222, 151847, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120hex_ter\ud83d\ude80^\ud83d\ude80_key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120been_ter\ud83d\ude80^\ud83d\ude80\u0120tasked_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120receives_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120hexadecimal_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120counts_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120hexadecimal_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120natural_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120smaller_ter\ud83d\ude80^\ud83d\ude80\u0120natural_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Hex_ter\ud83d\ude80^\ud83d\ude80adecimal_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120D_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120E_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120F_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Prime_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,...\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120So_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120determine_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120following_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80\u0120(=_ter\ud83d\ude80^\ud83d\ude80decimal_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120D_ter\ud83d\ude80^\ud83d\ude80\u0120(=_ter\ud83d\ude80^\ud83d\ude80decimal_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120assume_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120symbols_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80,B_ter\ud83d\ude80^\ud83d\ude80,C_ter\ud83d\ude80^\ud83d\ude80,D_ter\ud83d\ude80^\ud83d\ude80,E_ter\ud83d\ude80^\ud83d\ude80,F_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120uppercase_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80AB_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80E_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80AB_ter\ud83d\ude80^\ud83d\ude80ED_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80ABC_ter\ud83d\ude80^\ud83d\ude80DEF_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80D_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def hex_key ( num ) : \n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\" \n    primes = [ 2 , 3 , 5 , 7 , 11 , 13 ] \n    \n    count = 0 \n    \n    for digit in num : \n        if digit in [ '2' , '3' , '5' , '7' , 'B' , 'D' ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Python/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "test": "def check(decimal_to_binary):\n\n    # Check some simple cases\n    assert decimal_to_binary(0) == \"db0db\"\n    assert decimal_to_binary(32) == \"db100000db\"\n    assert decimal_to_binary(103) == \"db1100111db\"\n    assert decimal_to_binary(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(decimal_to_binary)", "text": "    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"", "declaration": "def decimal_to_binary(decimal):\n", "example_test": "def check(decimal_to_binary):\n    # Check some simple cases\n    assert decimal_to_binary(32) == \"db100000db\"\n    assert decimal_to_binary(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(decimal_to_binary)\n", "code": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80decimal_to_binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 12122, 2346, 31761, 152069, 153011, 151983, 12122, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 686, 387, 2661, 264, 1372, 304, 12122, 1352, 323, 697, 3383, 374, 311, 5508, 432, 311, 198, 262, 7868, 3561, 13, 576, 729, 1265, 470, 264, 914, 11, 448, 1817, 3668, 14064, 264, 7868, 198, 262, 1372, 13, 8886, 3668, 304, 279, 914, 686, 387, 364, 15, 6, 476, 364, 16, 29636, 262, 2619, 686, 387, 458, 4960, 5625, 315, 5766, 364, 1999, 6, 518, 279, 7167, 323, 518, 279, 835, 315, 279, 914, 624, 262, 576, 4960, 5766, 525, 1052, 311, 1492, 448, 279, 3561, 382, 262, 25311, 510, 262, 12122, 2346, 31761, 7, 16, 20, 8, 256, 671, 4675, 330, 1999, 16, 16, 16, 16, 1999, 698, 262, 12122, 2346, 31761, 7, 18, 17, 8, 256, 671, 4675, 330, 1999, 16, 15, 15, 15, 15, 15, 1999, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 7868, 152955, 152339, 152061, 151879, 151845, 9544, 152831, 152128, 152430, 12122, 151703, 151740, 151684, 152771, 152503, 152158, 220, 17, 152121, 152085, 151773, 152987, 151773, 152208, 151886, 152331, 152456, 152321, 152456, 152464, 330, 1999, 1, 151666, 152328, 152370, 7868, 152328, 151887, 330, 1999, 1, 151666, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80\u0120form_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120character_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Each_ter\ud83d\ude80^\ud83d\ude80\u0120character_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120There_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120extra_ter\ud83d\ude80^\ud83d\ude80\u0120couple_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120beginning_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120extra_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120help_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_binary_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_binary_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80db_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def decimal_to_binary ( decimal ) : \n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\" \n    binary = bin ( decimal ) [ 2 : ] \n    \n    return \"db\" + binary + \"db\" \n\n"}
{"task_id": "Python/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": "def check(is_happy):\n\n    # Check some simple cases\n    assert is_happy(\"a\") == False , \"a\"\n    assert is_happy(\"aa\") == False , \"aa\"\n    assert is_happy(\"abcd\") == True , \"abcd\"\n    assert is_happy(\"aabb\") == False , \"aabb\"\n    assert is_happy(\"adb\") == True , \"adb\"\n    assert is_happy(\"xyy\") == False , \"xyy\"\n    assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"\n\ncheck(is_happy)", "text": "    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False", "declaration": "def is_happy(s):\n", "example_test": "def check(is_happy):\n    # Check some simple cases\n    assert is_happy(\"a\") == False , \"a\"\n    assert is_happy(\"aa\") == False , \"aa\"\n    assert is_happy(\"abcd\") == True , \"abcd\"\n    assert is_happy(\"aabb\") == False , \"aabb\"\n    assert is_happy(\"adb\") == True , \"adb\"\n    assert is_happy(\"xyy\") == False , \"xyy\"\ncheck(is_happy)\n", "code": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_happy_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 1523, 11144, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 264, 914, 274, 624, 262, 4615, 3383, 374, 311, 1779, 421, 279, 914, 374, 6247, 476, 537, 624, 262, 362, 914, 374, 6247, 421, 1181, 3084, 374, 518, 3245, 220, 18, 323, 1449, 220, 18, 23921, 11931, 525, 12460, 198, 262, 1752, 3110, 510, 262, 374, 1523, 11144, 2877, 8, 589, 3557, 198, 262, 374, 1523, 11144, 83933, 8, 589, 3557, 198, 262, 374, 1523, 11144, 56085, 4385, 8, 589, 3007, 198, 262, 374, 1523, 11144, 2877, 12523, 8, 589, 3557, 198, 262, 374, 1523, 11144, 7, 39591, 8, 589, 3007, 198, 262, 374, 1523, 11144, 2075, 4807, 8, 589, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152622, 152668, 152114, 220, 18, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 152780, 152071, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 151793, 152412, 152749, 151696, 152339, 152602, 274, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 274, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 151742, 152983, 151696, 152339, 152602, 274, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 274, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 17, 151773, 152987, 151773, 152361, 151742, 152983, 151696, 152339, 152602, 274, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 274, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 17, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120happy_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120happy_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120least_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120every_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80(a_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80(aa_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80(ab_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80(a_ter\ud83d\ude80^\ud83d\ude80abb_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80adb_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_h_ter\ud83d\ude80^\ud83d\ude80appy_ter\ud83d\ude80^\ud83d\ude80(x_ter\ud83d\ude80^\ud83d\ude80yy_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_happy ( s ) : \n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\" \n    if len ( s ) < 3 : \n        return False \n    \n    for i in range ( len ( s ) - 2 ) : \n        if s [ i ] == s [ i + 1 ] or s [ i ] == s [ i + 2 ] or s [ i + 1 ] == s [ i + 2 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Python/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": "def check(numerical_letter_grade):\n\n    # Check some simple cases\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert numerical_letter_grade([1.2]) == ['D+']\n    assert numerical_letter_grade([0.5]) == ['D-']\n    assert numerical_letter_grade([0.0]) == ['E']\n    assert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(numerical_letter_grade)", "text": "    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']", "declaration": "def numerical_letter_grade(grades):\n", "example_test": "def check(numerical_letter_grade):\n    # Check some simple cases\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(numerical_letter_grade)\n", "code": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80numerical_letter_grade_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80grades_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 34776, 46117, 50515, 152069, 153011, 151983, 27611, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2132, 374, 279, 1537, 2003, 315, 279, 33153, 323, 279, 11079, 702, 311, 2968, 279, 27611, 198, 262, 311, 4143, 13, 576, 11079, 702, 1012, 3259, 1059, 1828, 12111, 369, 65188, 624, 262, 576, 1172, 3491, 374, 11, 1340, 702, 5558, 279, 2038, 1340, 1483, 369, 65188, 624, 262, 2932, 702, 2661, 498, 264, 1140, 315, 23690, 2121, 369, 1045, 4143, 323, 498, 614, 311, 3270, 715, 262, 264, 729, 429, 646, 2550, 264, 1140, 315, 6524, 27611, 1667, 279, 2701, 1965, 510, 1797, 70055, 981, 760, 262, 26659, 11972, 198, 1060, 220, 19, 13, 15, 394, 362, 16930, 310, 861, 220, 18, 13, 22, 394, 362, 715, 310, 861, 220, 18, 13, 18, 394, 362, 12, 715, 310, 861, 220, 18, 13, 15, 394, 425, 16930, 310, 861, 220, 17, 13, 22, 394, 425, 715, 310, 861, 220, 17, 13, 18, 394, 425, 6913, 310, 861, 220, 17, 13, 15, 394, 356, 16930, 310, 861, 220, 16, 13, 22, 394, 356, 198, 310, 861, 220, 16, 13, 18, 394, 356, 6913, 310, 861, 220, 16, 13, 15, 394, 422, 10, 715, 310, 861, 220, 15, 13, 22, 394, 422, 715, 310, 861, 220, 15, 13, 15, 394, 422, 6913, 1060, 220, 15, 13, 15, 394, 468, 87079, 262, 13383, 510, 262, 11972, 41443, 367, 2561, 19, 13, 15, 11, 220, 18, 11, 220, 16, 13, 22, 11, 220, 17, 11, 220, 18, 13, 20, 2467, 32296, 2509, 32, 60006, 364, 33, 516, 364, 34, 53819, 364, 34, 516, 364, 32, 12, 4432, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 11972, 2019, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 342, 152370, 27611, 151876, 151923, 152557, 152592, 152583, 152528, 342, 152622, 152927, 152507, 220, 19, 13, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 32, 6829, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 18, 13, 22, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 32, 6, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 18, 13, 18, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 33, 6829, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 17, 13, 22, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 33, 6, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 17, 13, 18, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 34, 6829, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 16, 13, 22, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 34, 6, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 16, 13, 18, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 35, 6829, 151666, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 342, 152622, 152706, 152507, 220, 15, 13, 22, 152361, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 35, 6, 151666, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 11972, 2019, 152411, 8737, 152831, 152128, 152928, 364, 36, 6, 151666, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 11972, 2019, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numerical_ter\ud83d\ude80^\ud83d\ude80_letter_ter\ud83d\ude80^\ud83d\ude80_grade_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120grades_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80It_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120week_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120semester_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120teacher_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120give_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120grades_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120students_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120teacher_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120been_ter\ud83d\ude80^\ud83d\ude80\u0120making_ter\ud83d\ude80^\ud83d\ude80\u0120her_ter\ud83d\ude80^\ud83d\ude80\u0120own_ter\ud83d\ude80^\ud83d\ude80\u0120algorithm_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120grading_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120problem_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120she_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120lost_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120code_ter\ud83d\ude80^\ud83d\ude80\u0120she_ter\ud83d\ude80^\ud83d\ude80\u0120used_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120grading_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120She_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120GP_ter\ud83d\ude80^\ud83d\ude80As_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120some_ter\ud83d\ude80^\ud83d\ude80\u0120students_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120write_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80\u0120grades_ter\ud83d\ude80^\ud83d\ude80\u0120using_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120following_ter\ud83d\ude80^\ud83d\ude80\u0120table_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120GPA_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120|_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Letter_ter\ud83d\ude80^\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80+\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80+\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80-\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80+\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80-\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120D_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120D_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120D_ter\ud83d\ude80^\ud83d\ude80-\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120E_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_equ_ter\ud83d\ude80^\ud83d\ude80ation_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80+',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80-',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grades_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80+'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80+'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80+'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80D_ter\ud83d\ude80^\ud83d\ude80+'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120g_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80D_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80E_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120grade_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def numerical_letter_grade ( grades ) : \n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\" \n    grade_list = [ ] \n    \n    for g in grades : \n        if g >= 4.0 : \n            grade_list . append ( 'A+' ) \n        elif g > 3.7 : \n            grade_list . append ( 'A' ) \n        elif g > 3.3 : \n            grade_list . append ( 'B+' ) \n        elif g > 2.7 : \n            grade_list . append ( 'B' ) \n        elif g > 2.3 : \n            grade_list . append ( 'C+' ) \n        elif g > 1.7 : \n            grade_list . append ( 'C' ) \n        elif g > 1.3 : \n            grade_list . append ( 'D+' ) \n        elif g > 0.7 : \n            grade_list . append ( 'D' ) \n        else : \n            grade_list . append ( 'E' ) \n        \n    \n    return grade_list \n\n"}
{"task_id": "Python/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "test": "def check(prime_length):\n\n    # Check some simple cases\n    assert prime_length('Hello') == True\n    assert prime_length('abcdcba') == True\n    assert prime_length('kittens') == True\n    assert prime_length('orange') == False\n    assert prime_length('wow') == True\n    assert prime_length('world') == True\n    assert prime_length('MadaM') == True\n    assert prime_length('Wow') == True\n    assert prime_length('') == False\n    assert prime_length('HI') == True\n    assert prime_length('go') == True\n    assert prime_length('gogo') == False\n    assert prime_length('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert prime_length('Madam') == True\n    assert prime_length('M') == False\n    assert prime_length('0') == False\n\ncheck(prime_length)", "text": "    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False", "declaration": "def prime_length(string):\n", "example_test": "def check(prime_length):\n    # Check some simple cases\n    assert prime_length('Hello') == True\n    assert prime_length('abcdcba') == True\n    assert prime_length('kittens') == True\n    assert prime_length('orange') == False\ncheck(prime_length)\n", "code": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80prime_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 10250, 5118, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7985, 264, 729, 429, 4990, 264, 914, 323, 4675, 3007, 421, 279, 914, 198, 262, 3084, 374, 264, 10250, 1372, 476, 3557, 5937, 198, 262, 25311, 198, 262, 10250, 5118, 492, 9707, 863, 621, 3007, 198, 262, 10250, 5118, 492, 68644, 93829, 863, 621, 3007, 198, 262, 10250, 5118, 492, 74, 1442, 724, 863, 621, 3007, 198, 262, 10250, 5118, 492, 34164, 863, 621, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 3973, 421, 264, 1372, 374, 10250, 74000, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 151886, 151816, 151879, 151845, 374, 38217, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 914, 151703, 151740, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80cba_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80itt_ter\ud83d\ude80^\ud83d\ude80ens_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80orange_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def prime_length ( string ) : \n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \n    def is_prime ( n ) : \n        \"\"\"Check if a number is prime.\"\"\" \n        if n <= 1 : \n            return False \n        \n        for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n            if n % i == 0 : \n                return False \n            \n        \n        return True \n    \n    return is_prime ( len ( string ) ) \n\n"}
{"task_id": "Python/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": "def check(starts_one_ends):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 18\n    assert starts_one_ends(3) == 180\n    assert starts_one_ends(4) == 1800\n    assert starts_one_ends(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(starts_one_ends)", "text": "    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.", "declaration": "def starts_one_ends(n):\n", "example_test": "", "code": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80starts_one_ends_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 8471, 11667, 90729, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 6785, 7546, 308, 11, 470, 279, 1760, 315, 279, 5109, 315, 308, 48342, 198, 262, 6785, 25780, 429, 1191, 476, 835, 448, 220, 16, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 151832, 220, 17, 151953, 152415, 152677, 152929, 152891, 152440, 2790, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152228, 220, 16, 15, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2790, 152936, 152911, 151879, 151845, 1760, 4273, 152831, 152128, 152430, 308, 153001, 152430, 600, 151703, 151740, 152208, 151953, 152996, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 152228, 220, 16, 15, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2790, 152936, 152911, 151879, 151845, 1760, 4273, 152831, 152128, 152430, 308, 153001, 152430, 600, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 2790, 151953, 152996, 151750, 152559, 151792, 1760, 4273, 152069, 153011, 151983, 308, 152297, 151983, 1191, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 12906, 729, 311, 1760, 279, 5109, 315, 308, 48342, 5109, 429, 1191, 476, 835, 448, 364, 2468, 23569, 262, 4210, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 151683, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152415, 152677, 152929, 152891, 152440, 2790, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 15, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 600, 152622, 151683, 152114, 220, 16, 152361, 151742, 152983, 152528, 600, 152622, 151683, 152988, 152456, 152468, 220, 16, 15, 152780, 152370, 308, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2790, 152936, 152911, 151879, 151845, 1760, 4273, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 153001, 152430, 600, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 2790, 152936, 152911, 151879, 151845, 1760, 4273, 152831, 152128, 151766, 152456, 152440, 308, 152780, 152071, 220, 16, 153001, 152430, 600, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 2790, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120starts_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80_ends_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80-digit_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80-digit_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80start_ter\ud83d\ude80^\ud83d\ude80'.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def starts_one_ends ( n ) : \n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\" \n    if n == 1 : \n        return 2 \n    \n    total = 0 \n    \n    for i in range ( 1 , 10 ) : \n        total += count_num ( n , i ) \n    \n    for i in range ( 1 , 10 ) : \n        total += count_num ( n , i ) \n    \n    return total \n\ndef count_num ( n , start ) : \n    \"\"\"\n    Helper function to count the numbers of n-digit numbers that start or end with 'start'.\n    \"\"\" \n    if n == 1 : \n        return 1 \n    \n    total = 0 \n    \n    for i in range ( 10 ) : \n        if i == 1 or i == 10 - n : \n            total += count_num ( n - 1 , i ) \n        else : \n            total += count_num ( n - 1 , i ) \n        \n    \n    return total \n\n"}
{"task_id": "Python/84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "test": "def check(solve):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert solve(1000) == \"1\", \"Error\"\n    assert solve(150) == \"110\", \"Error\"\n    assert solve(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert solve(333) == \"1001\", \"Error\"\n    assert solve(963) == \"10010\", \"Error\"\n\ncheck(solve)", "text": "    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number", "declaration": "def solve(N):\n", "example_test": "", "code": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80solve_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 11625, 152069, 153011, 151983, 451, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 6785, 7546, 451, 11, 470, 279, 2790, 2629, 315, 1181, 18509, 304, 7868, 624, 1066, 262, 13383, 198, 286, 1752, 451, 284, 220, 16, 15, 15, 15, 11, 279, 2629, 315, 18509, 686, 387, 220, 16, 279, 2550, 1265, 387, 330, 16, 22956, 286, 1752, 451, 284, 220, 16, 20, 15, 11, 279, 2629, 315, 18509, 686, 387, 220, 21, 279, 2550, 1265, 387, 330, 16, 16, 15, 22956, 286, 1752, 451, 284, 220, 16, 19, 22, 11, 279, 2629, 315, 18509, 686, 387, 220, 16, 17, 279, 2550, 1265, 387, 330, 16, 16, 15, 15, 22956, 1066, 262, 21419, 510, 286, 569, 45, 7546, 198, 1797, 87473, 25, 220, 15, 37294, 451, 37294, 220, 16, 15, 15, 15, 15, 624, 262, 9258, 510, 260, 264, 914, 315, 7868, 1372, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 7868, 10160, 152911, 151879, 153033, 152036, 152089, 151879, 151845, 9544, 152831, 152128, 151865, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 451, 151703, 151740, 151764, 152194, 152734, 151703, 151740, 152411, 8290, 152831, 152128, 152928, 330, 15, 65, 1, 151666, 153001, 152928, 1591, 151666, 151703, 151740, 152208, 151886, 152588, 7868, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120solve_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Variables_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120@_ter\ud83d\ude80^\ud83d\ude80N_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Constraints_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u012b\u00a4_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u012b\u00a4_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def solve ( N ) : \n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\" \n    binary_sum = bin ( sum ( int ( digit ) for digit in str ( N ) ) ) . replace ( \"0b\" , \"\" ) \n    \n    return binary_sum \n\n"}
{"task_id": "Python/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "test": "def check(add):\n\n    # Check some simple cases\n    assert add([4, 88]) == 88\n    assert add([4, 5, 6, 7, 2, 122]) == 122\n    assert add([4, 0, 6, 7]) == 0\n    assert add([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n\ncheck(add)", "text": "    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2", "declaration": "def add(lst):\n", "example_test": "def check(add):\n    # Check some simple cases\n    assert add([4, 2, 6, 7]) == 2\n    # Check some edge cases that are easy to work out by hand.\ncheck(add)\n", "code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 912, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 2477, 39433, 1140, 315, 25780, 18845, 13, 912, 279, 1496, 5424, 429, 525, 518, 10322, 14937, 13, 4192, 262, 25311, 510, 286, 912, 2561, 19, 11, 220, 17, 11, 220, 21, 11, 220, 22, 2467, 32296, 220, 17, 715, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 152955, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-empty_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120indices_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add ( lst ) : \n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\" \n    sum = 0 \n    \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        sum += lst [ i ] \n    \n    return sum \n\n"}
{"task_id": "Python/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "test": "def check(anti_shuffle):\n\n    # Check some simple cases\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('number') == 'bemnru'\n    assert anti_shuffle('abcd') == 'abcd'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    assert anti_shuffle('') == ''\n    assert anti_shuffle('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(anti_shuffle)", "text": "    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'", "declaration": "def anti_shuffle(s):\n", "example_test": "def check(anti_shuffle):\n    # Check some simple cases\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\ncheck(anti_shuffle)\n", "code": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80anti_shuffle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 7147, 73484, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 9645, 264, 729, 429, 4990, 264, 914, 323, 4675, 458, 11457, 2319, 315, 432, 624, 262, 39581, 2319, 315, 914, 11, 374, 264, 914, 1380, 678, 4244, 320, 325, 49600, 553, 3550, 340, 262, 525, 12575, 553, 264, 501, 3409, 1380, 678, 279, 5766, 27802, 304, 198, 262, 35388, 1973, 3118, 389, 47120, 897, 624, 262, 7036, 25, 1446, 1265, 2506, 279, 1973, 315, 4244, 323, 10113, 12621, 304, 279, 11652, 382, 262, 1752, 3110, 510, 262, 7147, 73484, 492, 13048, 863, 4675, 364, 13048, 1248, 262, 7147, 73484, 492, 14990, 863, 4675, 364, 2636, 75, 385, 1248, 262, 7147, 73484, 492, 9707, 4337, 12069, 863, 4675, 364, 9707, 32870, 54, 8736, 269, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 4244, 152911, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 152928, 364, 364, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 11457, 18981, 152474, 152817, 153002, 152957, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 151865, 151879, 151845, 10615, 152831, 152128, 152430, 3409, 151703, 151740, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 4244, 151764, 151868, 152329, 152208, 151886, 151816, 151879, 153033, 152036, 152870, 364, 364, 151666, 152411, 5138, 152831, 152128, 152430, 11457, 18981, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120anti_ter\ud83d\ude80^\ud83d\ude80_shuffle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120ordered_ter\ud83d\ude80^\ud83d\ude80\u0120version_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Ordered_ter\ud83d\ude80^\ud83d\ude80\u0120version_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80se_ter\ud83d\ude80^\ud83d\ude80parated_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120replaced_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120arranged_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120based_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120ascii_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120keep_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120blank_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120anti_ter\ud83d\ude80^\ud83d\ude80_shuffle_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80Hi_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Hi_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120anti_ter\ud83d\ude80^\ud83d\ude80_shuffle_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80hello_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80eh_ter\ud83d\ude80^\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80lo_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120anti_ter\ud83d\ude80^\ud83d\ude80_shuffle_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\u0120World_ter\ud83d\ude80^\ud83d\ude80!!!_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\u0120!!!_ter\ud83d\ude80^\ud83d\ude80W_ter\ud83d\ude80^\ud83d\ude80dl_ter\ud83d\ude80^\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ordered_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ordered_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def anti_shuffle ( s ) : \n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\" \n    words = s . split ( ' ' ) \n    \n    ordered_words = [ '' . join ( sorted ( word ) ) for word in words ] \n    \n    return ' ' . join ( ordered_words ) \n\n"}
{"task_id": "Python/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "test": "def check(get_row):\n\n    # Check some simple cases\n    assert get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[1]], 2) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(get_row)", "text": "    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "declaration": "def get_row(lst, x):\n", "example_test": "def check(get_row):\n    # Check some simple cases\n    assert get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(get_row)\n", "code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80get_row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 633, 8530, 152069, 153011, 151983, 18845, 152297, 151983, 856, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 525, 2661, 264, 220, 17, 55887, 821, 11, 438, 264, 24034, 11469, 345, 262, 892, 374, 4428, 311, 6172, 11, 4764, 11, 19836, 35195, 345, 262, 1817, 2802, 1231, 6644, 264, 2155, 1372, 315, 8147, 624, 262, 16246, 18845, 11, 323, 7546, 856, 11, 1477, 25780, 856, 304, 279, 1140, 345, 262, 323, 470, 1140, 315, 45225, 11, 17826, 87, 16, 11, 379, 16, 701, 320, 87, 17, 11, 379, 17, 8, 2503, 60, 1741, 429, 198, 262, 1817, 14405, 374, 264, 16184, 481, 320, 651, 11, 8147, 701, 5916, 448, 220, 15, 624, 262, 15967, 13934, 15102, 553, 6978, 304, 35388, 1973, 624, 262, 7281, 11, 3378, 13934, 315, 279, 2802, 553, 8147, 304, 43084, 1973, 624, 1066, 262, 25311, 510, 262, 633, 8530, 8956, 414, 508, 16, 11, 17, 11, 18, 11, 19, 11, 20, 11, 21, 1259, 414, 508, 16, 11, 17, 11, 18, 11, 19, 11, 16, 11, 21, 1259, 414, 508, 16, 11, 17, 11, 18, 11, 19, 11, 20, 11, 16, 921, 262, 10654, 220, 16, 8, 621, 17826, 15, 11, 220, 15, 701, 320, 16, 11, 220, 19, 701, 320, 16, 11, 220, 15, 701, 320, 17, 11, 220, 20, 701, 320, 17, 11, 220, 15, 5563, 262, 633, 8530, 40056, 220, 16, 8, 621, 4167, 262, 633, 8530, 2561, 12995, 508, 16, 1125, 508, 16, 11, 220, 17, 11, 220, 18, 20492, 220, 18, 8, 621, 17826, 17, 11, 220, 17, 5563, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 13934, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152731, 151810, 2802, 3560, 152554, 151810, 2802, 152455, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 18845, 151703, 151740, 151876, 152980, 152205, 152731, 151810, 1375, 3560, 152554, 151810, 897, 152455, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 2802, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152528, 897, 152622, 151683, 152528, 856, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 13934, 152411, 8737, 152831, 152128, 152262, 152913, 152785, 2802, 3560, 152968, 152785, 1375, 3560, 151958, 152717, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 152677, 152082, 151879, 153033, 152036, 152136, 13934, 152411, 3378, 152831, 152128, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 16489, 152334, 153051, 151870, 152913, 151856, 152339, 152602, 16489, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152968, 152890, 151878, 152780, 152850, 152339, 152602, 16489, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151958, 152717, 152996, 151703, 151740, 152208, 151886, 152588, 13934, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120dimensional_ter\ud83d\ude80^\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120however_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120unlike_ter\ud83d\ude80^\ud83d\ude80\u0120matrices_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120contain_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120different_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120columns_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120tuples_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120[(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120..._ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120coordinate_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80row_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120columns_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120starting_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Sort_ter\ud83d\ude80^\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80\u0120initially_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120rows_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Also_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120columns_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120descending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_row_ter\ud83d\ude80^\ud83d\ude80([\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80],\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80],\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_row_ter\ud83d\ude80^\ud83d\ude80([],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_row_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude80[],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]],_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120col_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120col_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_row ( lst , x ) : \n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\" \n    coordinates = [ ] \n    \n    for row_index , row in enumerate ( lst ) : \n        for col_index , value in enumerate ( row ) : \n            if value == x : \n                coordinates . append ( ( row_index , col_index ) ) \n            \n        \n    \n    coordinates . sort ( key = lambda coord : ( coord [ 0 ] , - coord [ 1 ] ) ) \n    return coordinates \n\n"}
{"task_id": "Python/88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "test": "def check(sort_array):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sort_array([]) == [], \"Error\"\n    assert sort_array([5]) == [5], \"Error\"\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert sort_array([2, 1]) == [1, 2], \"Error\"\n    assert sort_array([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert sort_array([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\ncheck(sort_array)", "text": "    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]", "declaration": "def sort_array(array):\n", "example_test": "def check(sort_array):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sort_array([]) == [], \"Error\"\n    assert sort_array([5]) == [5], \"Error\"\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(sort_array)\n", "code": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sort_array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3378, 3858, 152069, 153011, 151983, 1334, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 458, 1334, 315, 2477, 60935, 25780, 11, 470, 264, 2975, 315, 279, 2661, 1334, 1283, 28273, 345, 262, 498, 686, 3378, 279, 2661, 1334, 304, 35388, 1973, 421, 279, 2629, 7, 1156, 1922, 897, 11, 1537, 1922, 897, 8, 374, 10322, 345, 262, 476, 3378, 432, 304, 43084, 1973, 421, 279, 2629, 7, 1156, 1922, 897, 11, 1537, 1922, 897, 8, 374, 1496, 382, 262, 7036, 510, 262, 353, 1513, 944, 2297, 279, 2661, 1334, 382, 262, 25311, 510, 262, 353, 3378, 3858, 10556, 8, 589, 4167, 262, 353, 3378, 3858, 2561, 20, 2467, 589, 508, 20, 921, 262, 353, 3378, 3858, 2561, 17, 11, 220, 19, 11, 220, 18, 11, 220, 15, 11, 220, 16, 11, 220, 20, 2467, 589, 508, 15, 11, 220, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 921, 262, 353, 3378, 3858, 2561, 17, 11, 220, 19, 11, 220, 18, 11, 220, 15, 11, 220, 16, 11, 220, 20, 11, 220, 21, 2467, 589, 508, 21, 11, 220, 20, 11, 220, 19, 11, 220, 18, 11, 220, 17, 11, 220, 16, 11, 220, 15, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1334, 151703, 151740, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151948, 153062, 152222, 151847, 151953, 152415, 152677, 152929, 152891, 152440, 2629, 3142, 153081, 152456, 152441, 152339, 152602, 1334, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 1334, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 2629, 3142, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 1334, 153001, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 151953, 152221, 152729, 152515, 151876, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 1334, 151703, 151740, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-negative_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120copy_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120after_ter\ud83d\ude80^\ud83d\ude80\u0120sorting_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120descending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120don_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_array ( array ) : \n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\" \n    if len ( array ) == 0 : \n        return [ ] \n    \n    sum_value = array [ 0 ] + array [ - 1 ] \n    \n    if sum_value % 2 == 0 : \n        return sorted ( array , reverse = True ) \n    else : \n        return sorted ( array ) \n    \n\n"}
{"task_id": "Python/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "test": "def check(encrypt):\n\n    # Check some simple cases\n    assert encrypt('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert encrypt('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert encrypt('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(encrypt)", "text": "    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'", "declaration": "def encrypt(s):\n", "example_test": "def check(encrypt):\n    # Check some simple cases\n    assert encrypt('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encrypt('et') == 'ix'\ncheck(encrypt)\n", "code": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80encrypt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 29625, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 4021, 264, 729, 29625, 429, 4990, 264, 914, 438, 458, 5693, 323, 198, 262, 4675, 264, 914, 24455, 448, 279, 27790, 1660, 45620, 13, 715, 262, 576, 27790, 1265, 387, 45620, 304, 264, 11566, 1741, 429, 279, 11931, 715, 262, 6407, 1495, 553, 1378, 54916, 311, 1378, 7482, 624, 262, 1752, 3110, 510, 262, 29625, 492, 6023, 863, 4675, 364, 17771, 1248, 262, 29625, 492, 76615, 866, 73, 10561, 863, 4675, 364, 365, 71, 41808, 2261, 453, 1248, 262, 29625, 492, 45124, 863, 4675, 364, 92697, 1248, 262, 29625, 492, 295, 863, 4675, 364, 941, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 27790, 151887, 364, 67512, 6, 151666, 152208, 152677, 152929, 152891, 152440, 24455, 151887, 3355, 151666, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 152607, 152528, 27790, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1922, 152911, 151879, 153033, 152036, 152136, 27790, 152411, 1922, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 501, 3560, 153081, 152456, 151839, 152925, 152456, 152440, 1922, 152328, 153081, 152456, 152468, 220, 17, 151894, 152071, 220, 17, 151702, 152071, 220, 17, 21, 152208, 152677, 153037, 152682, 152440, 24455, 152936, 152955, 152339, 152602, 27790, 151684, 152771, 151881, 501, 3560, 151773, 152987, 151773, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 24455, 152936, 152370, 1161, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 24455, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encrypt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120encrypt_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120argument_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120encrypted_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80\u0120being_ter\ud83d\ude80^\ud83d\ude80\u0120rotated_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120rotated_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120manner_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120down_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120multiplied_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120places_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120encrypt_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80hi_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80lm_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120encrypt_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80asdf_ter\ud83d\ude80^\ud83d\ude80gh_ter\ud83d\ude80^\ud83d\ude80j_ter\ud83d\ude80^\ud83d\ude80kl_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ew_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80jk_ter\ud83d\ude80^\ud83d\ude80ln_ter\ud83d\ude80^\ud83d\ude80op_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120encrypt_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80gf_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80kj_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120encrypt_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80et_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ix_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80abcdefghijklmnopqrstuvwxyz_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encrypted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encrypted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encrypted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120encrypted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def encrypt ( s ) : \n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \n    alphabet = 'abcdefghijklmnopqrstuvwxyz' \n    \n    encrypted = '' \n    \n    for char in s : \n        if char in alphabet : \n            index = alphabet . index ( char ) \n            \n            new_index = ( index + 2 * 2 ) % 26 \n            \n            encrypted += alphabet [ new_index ] \n        else : \n            encrypted += char \n        \n    \n    return encrypted \n\n"}
{"task_id": "Python/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "test": "def check(next_smallest):\n\n    # Check some simple cases\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1,1,1,1,0]) == 1\n    assert next_smallest([1, 0**0]) == None\n    assert next_smallest([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(next_smallest)", "text": "    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None", "declaration": "def next_smallest(lst):\n", "example_test": "def check(next_smallest):\n    # Check some simple cases\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(next_smallest)\n", "code": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80next_smallest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1790, 15874, 19236, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 525, 2661, 264, 1140, 315, 25780, 624, 262, 9645, 264, 729, 1790, 15874, 19236, 368, 429, 4675, 279, 220, 17, 303, 24632, 2392, 315, 279, 1140, 624, 262, 3411, 2240, 421, 1052, 374, 902, 1741, 2392, 624, 1066, 262, 1790, 15874, 19236, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 2467, 621, 220, 17, 198, 262, 1790, 15874, 19236, 2561, 20, 11, 220, 16, 11, 220, 19, 11, 220, 18, 11, 220, 17, 2467, 621, 220, 17, 198, 262, 1790, 15874, 19236, 10556, 8, 621, 2240, 198, 262, 1790, 15874, 19236, 2561, 16, 11, 220, 16, 2467, 621, 2240, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 4911, 31983, 152911, 151879, 151845, 1140, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 18845, 151703, 151740, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 4911, 31983, 151703, 151740, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 4911, 31983, 152411, 3378, 152831, 152128, 151703, 151740, 152208, 151886, 152480, 152339, 152602, 4911, 31983, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80()_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80nd_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def next_smallest ( lst ) : \n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\" \n    unique_lst = list ( set ( lst ) ) \n    \n    if len ( unique_lst ) < 2 : \n        return None \n    \n    unique_lst . sort ( ) \n    return unique_lst [ 1 ] \n\n"}
{"task_id": "Python/91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "test": "def check(is_bored):\n\n    # Check some simple cases\n    assert is_bored(\"Hello world\") == 0, \"Test 1\"\n    assert is_bored(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert is_bored(\"I love It !\") == 1, \"Test 3\"\n    assert is_bored(\"bIt\") == 0, \"Test 4\"\n    assert is_bored(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert is_bored(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(is_bored)", "text": "    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1", "declaration": "def is_bored(S):\n", "example_test": "def check(is_bored):\n    # Check some simple cases\n    assert is_bored(\"Hello world\") == 0, \"Test 1\"\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1, \"Test 3\"\ncheck(is_bored)\n", "code": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_bored_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 880, 3018, 152069, 153011, 151983, 328, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 3278, 387, 2661, 264, 914, 315, 4244, 11, 323, 697, 3383, 374, 311, 1760, 279, 1372, 198, 262, 315, 33286, 6940, 13, 362, 89826, 374, 264, 11652, 429, 8471, 448, 279, 3409, 330, 40, 22956, 262, 23361, 2380, 525, 85328, 553, 45669, 73516, 476, 61926, 23569, 5872, 262, 1752, 3110, 510, 262, 12109, 374, 880, 3018, 445, 9707, 1879, 1138, 262, 220, 15, 198, 262, 12109, 374, 880, 3018, 445, 785, 12884, 374, 6303, 13, 576, 7015, 374, 47925, 13, 358, 2948, 419, 9104, 1138, 262, 220, 16, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 22870, 152911, 151879, 153033, 152036, 152136, 328, 152411, 6718, 152831, 152128, 152928, 6256, 364, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 11652, 152370, 22870, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 11652, 152411, 1191, 22177, 152831, 152128, 152928, 330, 40, 330, 151666, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80ored_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120S_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80'll_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120bored_ter\ud83d\ude80^\ud83d\ude80oms_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120boredom_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120starts_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Sent_ter\ud83d\ude80^\ud83d\ude80ences_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120delimited_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120'.',_ter\ud83d\ude80^\ud83d\ude80\u0120'?'_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120'!_ter\ud83d\ude80^\ud83d\ude80'.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80ored_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\u0120world_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_b_ter\ud83d\ude80^\ud83d\ude80ored_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80The_ter\ud83d\ude80^\ud83d\ude80\u0120sky_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120blue_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120sun_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120shining_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120I_ter\ud83d\ude80^\ud83d\ude80\u0120love_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120weather_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentences_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120S_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'._ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentences_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80swith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_bored ( S ) : \n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \n    sentences = S . split ( '. ' ) \n    \n    count = 0 \n    \n    for sentence in sentences : \n        if sentence . startswith ( \"I \" ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Python/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": "def check(any_int):\n\n    # Check some simple cases\n    assert any_int(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert any_int(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert any_int(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert any_int(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert any_int(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert any_int(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert any_int(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert any_int(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert any_int(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert any_int(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\ncheck(any_int)", "text": "    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False", "declaration": "def any_int(x, y, z):\n", "example_test": "def check(any_int):\n    # Check some simple cases\n    assert any_int(5, 2, 7)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert any_int(3, 2, 2)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert any_int(3, -2, 1)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert any_int(3.6, -2.2, 2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\ncheck(any_int)\n", "code": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80any_int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 894, 4042, 152069, 153011, 151983, 856, 152297, 151983, 379, 152297, 151983, 1147, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 4230, 264, 729, 429, 4990, 220, 18, 5109, 624, 262, 5184, 830, 421, 825, 315, 279, 5109, 374, 6144, 311, 279, 2629, 315, 279, 1008, 1378, 11, 323, 678, 5109, 525, 25780, 624, 262, 5184, 895, 304, 894, 1008, 5048, 624, 1066, 262, 25311, 198, 262, 894, 4042, 7, 20, 11, 220, 17, 11, 220, 22, 8, 82706, 252, 3007, 7213, 262, 894, 4042, 7, 18, 11, 220, 17, 11, 220, 17, 8, 82706, 252, 3557, 271, 262, 894, 4042, 7, 18, 11, 481, 17, 11, 220, 16, 8, 82706, 252, 3007, 7213, 262, 894, 4042, 7, 18, 13, 21, 11, 481, 17, 13, 17, 11, 220, 17, 8, 82706, 252, 3557, 198, 18611, 1066, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152191, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 151793, 152412, 153101, 151879, 151845, 11402, 152831, 152128, 152430, 856, 153001, 152430, 526, 151703, 151740, 152857, 152911, 151879, 151845, 11402, 152831, 152128, 152430, 379, 153001, 152430, 526, 151703, 151740, 152857, 152911, 151879, 151845, 11402, 152831, 152128, 152430, 1147, 153001, 152430, 526, 151703, 151740, 152857, 152983, 152528, 856, 152622, 151683, 152988, 152456, 152440, 379, 152328, 152370, 1147, 152361, 151742, 152983, 152528, 379, 152622, 151683, 152988, 152456, 152440, 856, 152328, 152370, 1147, 152361, 151742, 152983, 152528, 1147, 152622, 151683, 152988, 152456, 152440, 856, 152328, 152370, 379, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152221, 152729, 152515, 151876, 151886, 152116, 152488, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Returns_ter\ud83d\ude80^\ud83d\ude80\u0120true_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Returns_ter\ud83d\ude80^\ud83d\ude80\u0120false_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120cases_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def any_int ( x , y , z ) : \n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ''' \n    if isinstance ( x , int ) and isinstance ( y , int ) and isinstance ( z , int ) and x == y + z or y == x + z or z == x + y : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Python/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": "def check(encode):\n\n    # Check some simple cases\n    assert encode('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert encode('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert encode('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(encode)", "text": "    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'", "declaration": "def encode(message):\n", "example_test": "def check(encode):\n    # Check some simple cases\n    assert encode('test') == 'TGST', \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(encode)\n", "code": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80encode_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 16164, 152069, 153011, 151983, 1943, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 9645, 264, 729, 429, 4990, 264, 1943, 11, 323, 3209, 2539, 304, 1741, 264, 715, 262, 1616, 429, 432, 73151, 1142, 315, 678, 11931, 11, 40700, 678, 78456, 304, 715, 262, 279, 1943, 448, 279, 6524, 429, 7952, 220, 17, 7482, 8305, 315, 429, 715, 262, 76181, 304, 279, 28963, 27790, 13, 715, 262, 62197, 1172, 11931, 13, 36845, 262, 25311, 510, 262, 12109, 16164, 492, 1944, 1305, 262, 364, 51, 75520, 1248, 262, 12109, 16164, 492, 1986, 374, 264, 1943, 1305, 262, 364, 83, 39, 40449, 46374, 356, 51192, 1220, 8798, 38, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 78456, 151887, 364, 5918, 98255, 6, 151666, 152208, 152677, 152929, 152891, 152440, 20498, 6462, 151887, 3355, 151666, 152208, 152980, 152205, 152440, 1161, 152370, 1943, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 151917, 151879, 153033, 152036, 152136, 1161, 152411, 4722, 152831, 152128, 151703, 151740, 152622, 152607, 152528, 78456, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1922, 152911, 151879, 153033, 152036, 152136, 78456, 152411, 1922, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 1161, 152411, 4722, 152831, 152128, 151703, 151740, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 501, 9232, 152955, 152339, 152602, 78456, 151684, 152771, 151903, 152456, 151839, 152925, 152456, 152440, 1922, 152328, 152071, 220, 17, 151702, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 78456, 151703, 151740, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 20498, 6462, 152936, 152911, 151879, 153033, 152036, 152136, 501, 9232, 152411, 8416, 152831, 152128, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 20498, 6462, 152936, 152370, 501, 9232, 152208, 151953, 152996, 152415, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 20498, 6462, 152936, 152911, 151879, 153033, 152036, 152136, 1161, 152411, 14291, 5638, 152831, 152128, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 20498, 6462, 152936, 152370, 1161, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 20498, 6462, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120message_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120enc_ter\ud83d\ude80^\ud83d\ude80odes_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120way_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120swaps_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120replaces_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120message_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120appears_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120places_ter\ud83d\ude80^\ud83d\ude80\u0120ahead_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120vowel_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120english_ter\ud83d\ude80^\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Assume_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80test_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80T_ter\ud83d\ude80^\ud83d\ude80GST_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80This_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120message_ter\ud83d\ude80^\ud83d\ude80')\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80H_ter\ud83d\ude80^\ud83d\ude80KS_ter\ud83d\ude80^\ud83d\ude80\u0120KS_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80\u0120MG_ter\ud83d\ude80^\ud83d\ude80SS_ter\ud83d\ude80^\ud83d\ude80CG_ter\ud83d\ude80^\ud83d\ude80G_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80_message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80_message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80_message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80_message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80_message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120encoded_ter\ud83d\ude80^\ud83d\ude80_message_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def encode ( message ) : \n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \n    vowels = 'aeiou' \n    \n    encoded_message = '' \n    \n    for char in message : \n        if char . isalpha ( ) : \n            if char . lower ( ) in vowels : \n                index = vowels . index ( char . lower ( ) ) \n                \n                new_char = vowels [ ( index + 2 ) % len ( vowels ) ] \n                \n                if char . isupper ( ) : \n                    encoded_message += new_char . upper ( ) \n                else : \n                    encoded_message += new_char \n                \n            else : \n                encoded_message += char . swapcase ( ) \n            \n        else : \n            encoded_message += char \n        \n    \n    return encoded_message \n\n"}
{"task_id": "Python/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "test": "def check(skjkasdkd):\n\n    # Check some simple cases\n    assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert skjkasdkd([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert skjkasdkd([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert skjkasdkd([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n\ncheck(skjkasdkd)", "text": "    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7", "declaration": "def skjkasdkd(lst):\n", "example_test": "def check(skjkasdkd):\n    # Check some simple cases\n    assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert skjkasdkd([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\ncheck(skjkasdkd)\n", "code": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80skjkasdkd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1901, 41808, 300, 7584, 67, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 264, 1140, 315, 25780, 624, 262, 1446, 1184, 311, 1477, 279, 7772, 10250, 897, 323, 470, 279, 2629, 315, 1181, 18509, 382, 262, 25311, 510, 262, 1752, 18845, 284, 508, 15, 11, 18, 11, 17, 11, 16, 11, 18, 11, 20, 11, 22, 11, 19, 11, 20, 11, 20, 11, 20, 11, 17, 11, 16, 23, 16, 11, 18, 17, 11, 19, 11, 18, 17, 11, 18, 11, 17, 11, 18, 17, 11, 18, 17, 19, 11, 19, 11, 18, 60, 279, 2550, 1265, 387, 220, 16, 15, 198, 262, 1752, 18845, 284, 508, 16, 11, 15, 11, 16, 11, 23, 11, 17, 11, 19, 20, 24, 22, 11, 17, 11, 16, 11, 18, 11, 19, 15, 11, 16, 11, 17, 11, 16, 11, 17, 11, 19, 11, 17, 11, 20, 11, 16, 60, 279, 2550, 1265, 387, 220, 17, 20, 198, 262, 1752, 18845, 284, 508, 16, 11, 18, 11, 16, 11, 18, 17, 11, 20, 16, 15, 22, 11, 18, 19, 11, 23, 18, 17, 22, 23, 11, 16, 15, 24, 11, 16, 21, 18, 11, 17, 18, 11, 17, 18, 17, 18, 11, 18, 17, 11, 18, 15, 11, 16, 11, 24, 11, 18, 60, 279, 2550, 1265, 387, 220, 16, 18, 198, 262, 1752, 18845, 284, 508, 15, 11, 22, 17, 19, 11, 18, 17, 11, 22, 16, 11, 24, 24, 11, 18, 17, 11, 21, 11, 15, 11, 20, 11, 24, 16, 11, 23, 18, 11, 15, 11, 20, 11, 21, 60, 279, 2550, 1265, 387, 220, 16, 16, 198, 262, 1752, 18845, 284, 508, 15, 11, 23, 16, 11, 16, 17, 11, 18, 11, 16, 11, 17, 16, 60, 279, 2550, 1265, 387, 220, 18, 198, 262, 1752, 18845, 284, 508, 15, 11, 23, 11, 16, 11, 17, 11, 16, 11, 22, 60, 279, 2550, 1265, 387, 220, 22, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 3973, 421, 264, 1372, 374, 10250, 74000, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 18, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152988, 152456, 152440, 308, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 600, 152071, 220, 20, 152208, 152067, 152685, 152583, 152988, 152456, 152440, 600, 151894, 152370, 600, 152622, 152533, 152528, 308, 152361, 151876, 151923, 152557, 152592, 152191, 152412, 152749, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 151742, 152983, 152988, 152456, 152440, 308, 151702, 152879, 152925, 152456, 152440, 600, 152328, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 153037, 152682, 152440, 600, 152936, 152071, 220, 21, 152208, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152677, 152929, 152891, 152440, 1932, 38217, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152191, 152412, 153101, 151879, 151845, 374, 38217, 152831, 152128, 152430, 1629, 151703, 151740, 152857, 152983, 152528, 1629, 152622, 152706, 152528, 1932, 38217, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 38217, 152370, 1629, 152208, 151953, 152415, 151953, 152996, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1932, 38217, 151703, 151740, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sk_ter\ud83d\ude80^\ud83d\ude80jk_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80dk_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def skjkasdkd ( lst ) : \n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\" \n    def is_prime ( n ) : \n        \"\"\"Check if a number is prime.\"\"\" \n        if n <= 1 : \n            return False \n        \n        if n <= 3 : \n            return True \n        \n        if n % 2 == 0 or n % 3 == 0 : \n            return False \n        \n        i = 5 \n        \n        while i * i <= n : \n            if n % i == 0 or n % ( i + 2 ) == 0 : \n                return False \n            \n            i += 6 \n        \n        return True \n    \n    max_prime = 0 \n    \n    for num in lst : \n        if is_prime ( num ) and num > max_prime : \n            max_prime = num \n            \n        \n    \n    return sum ( int ( digit ) for digit in str ( max_prime ) ) \n\n"}
{"task_id": "Python/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": "def check(check_dict_case):\n\n    # Check some simple cases\n    assert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))\n\ncheck(check_dict_case)", "text": "    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "declaration": "def check_dict_case(dict):\n", "example_test": "def check(check_dict_case):\n    # Check some simple cases\n    assert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert check_dict_case({\"p\":\"pineapple\", 8:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \ncheck(check_dict_case)\n", "code": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80check_dict_case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1779, 5243, 19096, 152069, 153011, 151983, 6451, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 10997, 11, 470, 3007, 421, 678, 6894, 525, 9069, 304, 4722, 715, 262, 1142, 476, 678, 6894, 525, 9069, 304, 8416, 1142, 11, 770, 470, 3557, 624, 262, 576, 729, 1265, 470, 3557, 374, 279, 2661, 10997, 374, 4287, 624, 262, 25311, 510, 262, 1779, 5243, 19096, 16864, 64, 3252, 22377, 497, 330, 65, 3252, 87747, 80154, 1265, 470, 3007, 624, 262, 1779, 5243, 19096, 16864, 64, 3252, 22377, 497, 330, 32, 3252, 87747, 497, 330, 33, 3252, 87747, 80154, 1265, 470, 3557, 624, 262, 1779, 5243, 19096, 16864, 64, 3252, 22377, 497, 220, 23, 2974, 87747, 497, 330, 64, 3252, 22377, 80154, 1265, 470, 3557, 624, 262, 1779, 5243, 19096, 16864, 675, 3252, 13079, 497, 330, 16749, 3252, 18, 21, 497, 330, 12730, 3252, 78794, 80154, 1265, 470, 3557, 624, 262, 1779, 5243, 19096, 16864, 24628, 3252, 9949, 497, 330, 61585, 3252, 16, 17, 18, 19, 20, 1, 6413, 1265, 470, 3007, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 6451, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 8416, 19096, 12631, 152474, 152817, 153002, 152957, 151879, 153033, 152036, 152136, 1376, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 1376, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 6451, 152411, 6894, 152831, 152128, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 4722, 19096, 12631, 152474, 152817, 153002, 152957, 151879, 153033, 152036, 152136, 1376, 152411, 374, 14772, 152831, 152128, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 1376, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 6451, 152411, 6894, 152831, 152128, 151703, 151740, 151764, 151868, 152329, 152208, 151886, 153084, 152412, 153101, 151879, 151845, 678, 152831, 152128, 152430, 4722, 19096, 12631, 151703, 151740, 151742, 152911, 151879, 151845, 678, 152831, 152128, 152430, 8416, 19096, 12631, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120else_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80({\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80banana_ter\ud83d\ude80^\ud83d\ude80\"})_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80({\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80banana_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80banana_ter\ud83d\ude80^\ud83d\ude80\"})_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80({\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80:\"_ter\ud83d\ude80^\ud83d\ude80banana_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\"})_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80({\"_ter\ud83d\ude80^\ud83d\ude80Name_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80John_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Age_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80City_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80Houston_ter\ud83d\ude80^\ud83d\ude80\"})_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_dict_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80({\"_ter\ud83d\ude80^\ud83d\ude80STATE_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude80NC_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ZIP_ter\ud83d\ude80^\ud83d\ude80\":\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120})_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80_keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80_keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80_keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80_case_ter\ud83d\ude80^\ud83d\ude80_keys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_dict_case ( dict ) : \n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\" \n    if not dict : \n        return False \n    \n    upper_case_keys = [ key . isupper ( ) for key in dict . keys ( ) ] \n    \n    lower_case_keys = [ key . islower ( ) for key in dict . keys ( ) ] \n    \n    return all ( lower_case_keys ) or all ( upper_case_keys ) \n\n"}
{"task_id": "Python/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "test": "def check(count_up_to):\n\n    assert count_up_to(5) == [2,3]\n    assert count_up_to(6) == [2,3,5]\n    assert count_up_to(7) == [2,3,5]\n    assert count_up_to(10) == [2,3,5,7]\n    assert count_up_to(0) == []\n    assert count_up_to(22) == [2,3,5,7,11,13,17,19]\n    assert count_up_to(1) == []\n    assert count_up_to(18) == [2,3,5,7,11,13,17]\n    assert count_up_to(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert count_up_to(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ncheck(count_up_to)", "text": "    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]", "declaration": "def count_up_to(n):\n", "example_test": "def check(count_up_to):\n    assert count_up_to(5) == [2,3]\n    assert count_up_to(11) == [2,3,5,7]\n    assert count_up_to(0) == []\n    assert count_up_to(20) == [2,3,5,7,11,13,17,19]\n    assert count_up_to(1) == []\n    assert count_up_to(18) == [2,3,5,7,11,13,17]\ncheck(count_up_to)\n", "code": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80count_up_to_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1760, 8237, 2346, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 62980, 264, 729, 429, 4990, 458, 2477, 60935, 7546, 323, 4675, 458, 1334, 315, 279, 1156, 308, 198, 262, 25780, 429, 525, 10250, 5109, 323, 2686, 1091, 308, 624, 262, 369, 3110, 510, 262, 1760, 8237, 2346, 7, 20, 8, 589, 508, 17, 11, 18, 921, 262, 1760, 8237, 2346, 7, 16, 16, 8, 589, 508, 17, 11, 18, 11, 20, 11, 22, 921, 262, 1760, 8237, 2346, 7, 15, 8, 589, 4167, 262, 1760, 8237, 2346, 7, 17, 15, 8, 589, 508, 17, 11, 18, 11, 20, 11, 22, 11, 16, 16, 11, 16, 18, 11, 16, 22, 11, 16, 24, 921, 262, 1760, 8237, 2346, 7, 16, 8, 589, 4167, 262, 1760, 8237, 2346, 7, 16, 23, 8, 589, 508, 17, 11, 18, 11, 20, 11, 22, 11, 16, 16, 11, 16, 18, 11, 16, 22, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 1629, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152677, 152929, 152891, 152440, 49433, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 374, 38217, 152831, 152128, 152430, 600, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 49433, 152411, 8737, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 49433, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Implement_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-negative_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_up_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120primes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_up_to ( n ) : \n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\" \n    def is_prime ( num ) : \n        if num < 2 : \n            return False \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                return False \n            \n        \n        return True \n    \n    primes = [ ] \n    \n    for i in range ( 2 , n ) : \n        if is_prime ( i ) : \n            primes . append ( i ) \n        \n    \n    return primes \n\n"}
{"task_id": "Python/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n", "test": "def check(multiply):\n\n    # Check some simple cases\n    assert multiply(148, 412) == 16, \"First test error: \" + str(multiply(148, 412))                    \n    assert multiply(19, 28) == 72, \"Second test error: \" + str(multiply(19, 28))           \n    assert multiply(2020, 1851) == 0, \"Third test error: \" + str(multiply(2020, 1851))\n    assert multiply(14,-15) == 20, \"Fourth test error: \" + str(multiply(14,-15))      \n    assert multiply(76, 67) == 42, \"Fifth test error: \" + str(multiply(76, 67))      \n    assert multiply(17, 27) == 49, \"Sixth test error: \" + str(multiply(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert multiply(0, 1) == 0, \"1st edge test error: \" + str(multiply(0, 1))\n    assert multiply(0, 0) == 0, \"2nd edge test error: \" + str(multiply(0, 0))\n\ncheck(multiply)", "text": "    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.", "declaration": "def multiply(a, b):\n", "example_test": "def check(multiply):\n    # Check some simple cases\n    assert multiply(148, 412) == 16, \"First test error: \" + str(multiply(148, 412))                    \n    assert multiply(19, 28) == 72, \"Second test error: \" + str(multiply(19, 28))           \n    assert multiply(2020, 1851) == 0, \"Third test error: \" + str(multiply(2020, 1851))\n    assert multiply(14,-15) == 20, \"Fourth test error: \" + str(multiply(14,-15))      \ncheck(multiply)\n", "code": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80multiply_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 30270, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 12548, 279, 729, 429, 4990, 1378, 25780, 323, 4675, 715, 262, 279, 1985, 315, 862, 4982, 18509, 624, 262, 62197, 279, 1946, 374, 2677, 2697, 624, 262, 25311, 510, 262, 30270, 7, 16, 19, 23, 11, 220, 19, 16, 17, 8, 1265, 470, 220, 16, 21, 624, 262, 30270, 7, 16, 24, 11, 220, 17, 23, 8, 1265, 470, 220, 22, 17, 624, 262, 30270, 7, 17, 15, 17, 15, 11, 220, 16, 23, 20, 16, 8, 1265, 470, 220, 15, 624, 262, 30270, 7, 16, 19, 4999, 16, 20, 8, 1265, 470, 220, 17, 15, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 264, 152911, 151879, 151845, 3647, 152831, 152128, 152430, 264, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 293, 152911, 151879, 151845, 3647, 152831, 152128, 152430, 293, 151703, 151740, 152208, 151886, 152331, 152456, 152321, 152456, 152440, 264, 151702, 152071, 220, 16, 15, 151894, 153081, 152456, 152440, 293, 151702, 152071, 220, 16, 15, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Complete_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120their_ter\ud83d\ude80^\ud83d\ude80\u0120unit_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Assume_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120multiply_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def multiply ( a , b ) : \n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\" \n    a = abs ( a ) \n    \n    b = abs ( b ) \n    \n    return a % 10 * b % 10 \n\n"}
{"task_id": "Python/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "test": "def check(count_upper):\n\n    # Check some simple cases\n    assert count_upper('aBCdEf')  == 1\n    assert count_upper('abcdefg') == 0\n    assert count_upper('dBBE') == 0\n    assert count_upper('B')  == 0\n    assert count_upper('U')  == 1\n    assert count_upper('') == 0\n    assert count_upper('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(count_upper)", "text": "    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0", "declaration": "def count_upper(s):\n", "example_test": "def check(count_upper):\n    # Check some simple cases\n    assert count_upper('aBCdEf')  == 1\n    assert count_upper('abcdefg') == 0\n    assert count_upper('dBBE') == 0\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(count_upper)\n", "code": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80count_upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1760, 34445, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 914, 274, 11, 1760, 279, 1372, 315, 39482, 78456, 304, 1496, 14937, 624, 1066, 262, 1752, 3110, 510, 262, 1760, 34445, 492, 64, 4897, 67, 79686, 863, 4675, 220, 16, 198, 262, 1760, 34445, 492, 41202, 70, 863, 4675, 220, 15, 198, 262, 1760, 34445, 492, 67, 10098, 36, 863, 4675, 220, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 274, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 274, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152607, 152461, 364, 13669, 3810, 52, 6, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120uppercase_ter\ud83d\ude80^\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120indices_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80BC_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80Ef_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80g_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_upper_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80BB_ter\ud83d\ude80^\ud83d\ude80E_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80AE_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_upper ( s ) : \n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \n    count = 0 \n    \n    for i in range ( 0 , len ( s ) , 2 ) : \n        if s [ i ] in 'AEIOU' : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Python/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "test": "def check(closest_integer):\n\n    # Check some simple cases\n    assert closest_integer(\"10\") == 10, \"Test 1\"\n    assert closest_integer(\"14.5\") == 15, \"Test 2\"\n    assert closest_integer(\"-15.5\") == -16, \"Test 3\"\n    assert closest_integer(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert closest_integer(\"0\") == 0, \"Test 0\"\n\ncheck(closest_integer)", "text": "    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.", "declaration": "def closest_integer(value):\n", "example_test": "def check(closest_integer):\n    # Check some simple cases\n    assert closest_integer(\"10\") == 10, \"Test 1\"\n    assert closest_integer(\"15.3\") == 15, \"Test 3\"\n    # Check some edge cases that are easy to work out by hand.\ncheck(closest_integer)\n", "code": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80closest_integer_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 18093, 31725, 152069, 153011, 151983, 897, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 4230, 264, 729, 429, 4990, 264, 897, 320, 917, 8, 14064, 264, 1372, 198, 262, 323, 4675, 279, 18093, 7546, 311, 432, 13, 1416, 279, 1372, 374, 3232, 307, 11202, 198, 262, 504, 1378, 25780, 11, 4778, 432, 3123, 504, 7168, 382, 262, 25311, 198, 262, 12109, 18093, 31725, 445, 16, 15, 1138, 262, 220, 16, 15, 198, 262, 12109, 18093, 31725, 445, 16, 20, 13, 18, 1138, 262, 220, 16, 20, 271, 262, 7036, 510, 262, 431, 13586, 3123, 504, 7168, 3363, 429, 421, 279, 2661, 1372, 374, 3232, 307, 11202, 198, 262, 504, 1378, 25780, 11, 279, 825, 498, 1265, 470, 374, 279, 825, 429, 374, 279, 198, 262, 3041, 60843, 504, 7168, 13, 1752, 3110, 18093, 31725, 445, 16, 19, 13, 20, 899, 1265, 198, 262, 470, 220, 16, 20, 323, 18093, 31725, 13645, 16, 19, 13, 20, 899, 1265, 470, 481, 16, 20, 624, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1629, 152911, 151879, 151845, 2224, 152831, 152128, 152430, 897, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 7546, 10495, 152911, 151879, 151845, 526, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 68209, 10495, 153081, 152456, 152440, 1629, 152780, 152370, 7546, 10495, 152208, 151923, 152557, 152592, 152583, 152528, 68209, 10495, 152622, 151683, 152507, 220, 15, 13, 20, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152706, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152331, 152456, 152440, 7546, 10495, 152328, 152071, 220, 16, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 152440, 7546, 10495, 152780, 152071, 220, 16, 151953, 152996, 152415, 151953, 152221, 151968, 152103, 152583, 152528, 68209, 10495, 152622, 152706, 152507, 220, 15, 13, 20, 152361, 152819, 151886, 152331, 152456, 152440, 7546, 10495, 152328, 152071, 220, 16, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 7546, 10495, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120equ_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80istant_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120away_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120R_ter\ud83d\ude80^\ud83d\ude80ounding_ter\ud83d\ude80^\ud83d\ude80\u0120away_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80\u0120means_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120equ_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80istant_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120far_ter\ud83d\ude80^\ud83d\ude80thest_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80_integer_ter\ud83d\ude80^\ud83d\ude80(\"-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fractional_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fractional_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fractional_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80_part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def closest_integer ( value ) : \n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' \n    num = float ( value ) \n    \n    integer_part = int ( num ) \n    \n    fractional_part = num - integer_part \n    \n    if fractional_part == 0.5 : \n        if num > 0 : \n            return integer_part + 1 \n        else : \n            return integer_part - 1 \n        \n    elif fractional_part > 0.5 : \n        return integer_part + 1 \n    else : \n        return integer_part \n    \n\n"}
{"task_id": "Python/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "canonical_solution": "    return [n + 2*i for i in range(n)]\n", "test": "def check(make_a_pile):\n\n    # Check some simple cases\n    assert make_a_pile(3) == [3, 5, 7], \"Test 3\"\n    assert make_a_pile(4) == [4,6,8,10], \"Test 4\"\n    assert make_a_pile(5) == [5, 7, 9, 11, 13]\n    assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]\n    assert make_a_pile(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(make_a_pile)", "text": "    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]", "declaration": "def make_a_pile(n):\n", "example_test": "def check(make_a_pile):\n    # Check some simple cases\n    assert make_a_pile(3) == [3, 5, 7], \"Test 3\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(make_a_pile)\n", "code": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2*i for i in range(n)]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80make_a_pile_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1281, 4306, 620, 457, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 6785, 7546, 308, 11, 498, 614, 311, 1281, 264, 26306, 315, 308, 5866, 315, 26210, 624, 262, 576, 1156, 2188, 702, 308, 26210, 624, 262, 576, 1372, 315, 26210, 304, 279, 1790, 2188, 374, 510, 286, 481, 279, 1790, 10322, 1372, 421, 308, 374, 10322, 624, 286, 481, 279, 1790, 1496, 1372, 421, 308, 374, 1496, 624, 262, 3411, 279, 1372, 315, 26210, 304, 1817, 2188, 304, 264, 1140, 11, 1380, 2392, 518, 1922, 198, 262, 600, 10868, 279, 1372, 315, 26210, 304, 279, 2188, 320, 72, 10, 16, 3593, 262, 25311, 510, 262, 12109, 1281, 4306, 620, 457, 7, 18, 340, 262, 508, 18, 11, 220, 20, 11, 220, 22, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 26306, 152445, 153062, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 26210, 152370, 308, 152208, 152980, 152205, 152440, 716, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 26210, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 26306, 152411, 8737, 152831, 152128, 151766, 152456, 152440, 26210, 152328, 152071, 220, 17, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 26210, 152936, 152071, 220, 17, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 26306, 152411, 8737, 152831, 152128, 151766, 152456, 152440, 26210, 152328, 152071, 220, 17, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 26210, 152936, 152071, 220, 17, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 26306, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80ile_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120pile_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120levels_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120level_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80\u0120level_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120level_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120represents_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120level_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80).\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80ile_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pile_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pile_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pile_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stones_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pile_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def make_a_pile ( n ) : \n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\" \n    pile = [ ] \n    \n    stones = n \n    \n    for _ in range ( n ) : \n        if stones % 2 == 0 : \n            pile . append ( stones + 2 ) \n            stones += 2 \n        else : \n            pile . append ( stones + 2 ) \n            stones += 2 \n        \n    \n    return pile \n\n"}
{"task_id": "Python/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "test": "def check(words_string):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert words_string(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert words_string(\"\") == []\n    assert words_string(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\ncheck(words_string)", "text": "    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "declaration": "def words_string(s):\n", "example_test": "def check(words_string):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\ncheck(words_string)\n", "code": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80words_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4244, 3904, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 686, 387, 2661, 264, 914, 315, 4244, 18663, 553, 76602, 476, 12621, 13, 4615, 3383, 374, 198, 262, 311, 6718, 279, 914, 1119, 4244, 323, 470, 458, 1334, 315, 279, 4244, 624, 1066, 262, 1752, 3110, 510, 262, 4244, 3904, 445, 13048, 11, 847, 829, 374, 3757, 899, 621, 4383, 13048, 497, 330, 2408, 497, 330, 606, 497, 330, 285, 497, 330, 13079, 7026, 262, 4244, 3904, 445, 3966, 11, 1378, 11, 2326, 11, 3040, 11, 4236, 11, 4743, 899, 621, 4383, 3966, 497, 330, 19789, 497, 330, 27856, 497, 330, 34024, 497, 330, 52670, 497, 330, 50364, 7026, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 153033, 152036, 152089, 151879, 153033, 152036, 152136, 274, 152411, 8290, 152831, 152128, 152928, 22262, 151666, 153001, 152928, 364, 364, 151666, 151703, 151740, 152411, 6718, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120separated_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120commas_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120into_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Hi_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120my_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120John_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80Hi_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80my_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80name_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80John_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120four_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120five_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120six_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80two_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80four_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80five_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80six_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120','_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def words_string ( s ) : \n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \n    return s . replace ( ',' , ' ' ) . split ( ) \n\n"}
{"task_id": "Python/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "test": "def check(choose_num):\n\n    # Check some simple cases\n    assert choose_num(12, 15) == 14\n    assert choose_num(13, 12) == -1\n    assert choose_num(33, 12354) == 12354\n    assert choose_num(5234, 5233) == -1\n    assert choose_num(6, 29) == 28\n    assert choose_num(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert choose_num(7, 7) == -1\n    assert choose_num(546, 546) == 546\n\ncheck(choose_num)", "text": "    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1", "declaration": "def choose_num(x, y):\n", "example_test": "def check(choose_num):\n    # Check some simple cases\n    assert choose_num(12, 15) == 14\n    assert choose_num(13, 12) == -1\ncheck(choose_num)\n", "code": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80choose_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 5157, 4273, 152069, 153011, 151983, 856, 152297, 151983, 379, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 1986, 729, 4990, 1378, 6785, 5109, 856, 323, 379, 323, 4675, 279, 198, 262, 8538, 1496, 7546, 1372, 429, 374, 304, 279, 2088, 508, 87, 11, 379, 60, 28308, 13, 1416, 715, 262, 1052, 594, 902, 1741, 1372, 11, 1221, 279, 729, 1265, 470, 481, 16, 382, 262, 1752, 3110, 510, 262, 5157, 4273, 7, 16, 17, 11, 220, 16, 20, 8, 284, 220, 16, 19, 198, 262, 5157, 4273, 7, 16, 18, 11, 220, 16, 17, 8, 284, 481, 16, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 856, 152622, 152706, 152528, 379, 152361, 152380, 152451, 152819, 151886, 152978, 151878, 152780, 152763, 220, 16, 151953, 152415, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 379, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152588, 379, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 856, 152622, 151683, 152528, 379, 152361, 152380, 152451, 152819, 151886, 152978, 151878, 152780, 152763, 220, 16, 151953, 152415, 151886, 152331, 152456, 152440, 379, 152780, 152071, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120choose_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80This_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120biggest_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120inclusive_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120choose_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120choose_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def choose_num ( x , y ) : \n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \n    if x > y : \n        return - 1 \n    \n    if y % 2 == 0 : \n        return y \n    \n    if x == y : \n        return - 1 \n    \n    return y - 1 \n\n"}
{"task_id": "Python/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "test": "def check(rounded_avg):\n\n    # Check some simple cases\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 13) == \"0b1010\"\n    assert rounded_avg(964,977) == \"0b1111001010\"\n    assert rounded_avg(996,997) == \"0b1111100100\"\n    assert rounded_avg(560,851) == \"0b1011000010\"\n    assert rounded_avg(185,546) == \"0b101101110\"\n    assert rounded_avg(362,496) == \"0b110101101\"\n    assert rounded_avg(350,902) == \"0b1001110010\"\n    assert rounded_avg(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(5, 1) == -1\n    assert rounded_avg(5, 5) == \"0b101\"\n\ncheck(rounded_avg)", "text": "    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"", "declaration": "def rounded_avg(n, m):\n", "example_test": "def check(rounded_avg):\n    # Check some simple cases\n    assert rounded_avg(1, 5) == \"0b11\"\n    # Check some edge cases that are easy to work out by hand.\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10,20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\ncheck(rounded_avg)\n", "code": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80rounded_avg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 17976, 26631, 152069, 153011, 151983, 308, 152297, 151983, 296, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 1378, 6785, 25780, 308, 323, 296, 11, 323, 697, 3383, 374, 311, 12564, 279, 198, 262, 5461, 315, 279, 25780, 504, 308, 1526, 296, 320, 16169, 308, 323, 296, 568, 715, 262, 17097, 279, 4226, 311, 279, 23480, 7546, 323, 5508, 429, 311, 7868, 624, 262, 1416, 308, 374, 7046, 1091, 296, 11, 470, 481, 16, 624, 262, 13383, 510, 262, 17976, 26631, 7, 16, 11, 220, 20, 8, 589, 330, 15, 65, 16, 16, 698, 262, 17976, 26631, 7, 22, 11, 220, 20, 8, 589, 481, 16, 198, 262, 17976, 26631, 7, 16, 15, 11, 220, 17, 15, 8, 589, 330, 15, 65, 16, 16, 16, 16, 698, 262, 17976, 26631, 7, 17, 15, 11, 220, 18, 18, 8, 589, 330, 15, 65, 16, 16, 15, 16, 15, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 308, 152622, 152706, 152528, 296, 152361, 152380, 152451, 152819, 151886, 152978, 151878, 152780, 152763, 220, 16, 151953, 152415, 152677, 152929, 152891, 152440, 2790, 153081, 152456, 152321, 152456, 151839, 152925, 152456, 152440, 296, 152780, 152370, 308, 152542, 152071, 220, 17, 152328, 152370, 308, 152208, 152677, 152929, 152891, 152440, 19712, 152911, 151879, 151845, 4778, 152831, 152128, 151766, 152456, 152440, 2790, 152144, 152879, 152925, 152456, 152321, 152456, 152440, 296, 152780, 152370, 308, 152328, 152071, 220, 16, 151703, 151740, 152208, 151886, 151816, 151879, 151845, 9544, 152831, 152128, 152430, 19712, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_avg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120compute_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120through_ter\ud83d\ude80^\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80including_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80)._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Round_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120answer_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120nearest_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_avg_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_avg_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_avg_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80_avg_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120avg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120avg_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def rounded_avg ( n , m ) : \n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \n    if n > m : \n        return - 1 \n    \n    total = ( m - n ) // 2 + n \n    \n    avg = round ( total / ( m - n + 1 ) ) \n    \n    return bin ( avg ) \n\n"}
{"task_id": "Python/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "test": "def check(unique_digits):\n\n    # Check some simple cases\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([12345, 2033, 111, 151]) == [111, 151]\n    assert unique_digits([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(unique_digits)", "text": "    Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []", "declaration": "def unique_digits(x):\n", "example_test": "def check(unique_digits):\n    # Check some simple cases\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([12345, 2033, 111, 151]) == [111, 151]\n    assert unique_digits([135, 103, 31]) == [31, 135]\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(unique_digits)\n", "code": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80unique_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4911, 41432, 152069, 153011, 151983, 856, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 1140, 315, 6785, 25780, 856, 13, 470, 264, 10615, 1140, 315, 678, 715, 262, 5424, 429, 12492, 944, 894, 1496, 15723, 382, 262, 7036, 25, 75264, 1140, 1265, 387, 10615, 304, 7703, 1973, 624, 1066, 262, 1752, 3110, 510, 262, 12109, 4911, 41432, 2561, 16, 20, 11, 220, 18, 18, 11, 220, 16, 19, 17, 17, 11, 220, 16, 2546, 262, 508, 16, 11, 220, 16, 20, 11, 220, 18, 18, 921, 262, 12109, 4911, 41432, 2561, 16, 20, 17, 11, 220, 18, 17, 18, 11, 220, 16, 19, 17, 17, 11, 220, 16, 15, 2546, 262, 4167, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1372, 152370, 856, 151876, 152677, 152929, 152891, 152440, 18509, 152474, 152817, 153002, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152673, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1372, 151703, 151740, 151764, 151868, 152329, 152208, 151923, 152557, 152592, 151689, 151879, 151845, 678, 151733, 152828, 151722, 152142, 152988, 152456, 152440, 15723, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152370, 18509, 151764, 152194, 152734, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1372, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 1102, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120hasn_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120Returned_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def unique_digits ( x ) : \n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\" \n    result = [ ] \n    \n    for number in x : \n        digits = [ int ( digit ) for digit in str ( number ) ] \n        \n        if all ( digit % 2 != 0 for digit in digits ) : \n            result . append ( number ) \n        \n    \n    return sorted ( result ) \n\n"}
{"task_id": "Python/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "test": "def check(by_length):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert by_length([]) == [], \"Error\"\n    assert by_length([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert by_length([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert by_length([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\ncheck(by_length)", "text": "    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']", "declaration": "def by_length(arr):\n", "example_test": "def check(by_length):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert by_length([]) == [], \"Error\"\n    assert by_length([1, -1 , 55]) == ['One'], \"Error\"\n    # Check some edge cases that are easy to work out by hand.\ncheck(by_length)\n", "code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80by_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 553, 5118, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 458, 1334, 315, 25780, 11, 3378, 279, 25780, 429, 525, 1948, 220, 16, 323, 220, 24, 28308, 345, 262, 9931, 279, 12942, 1334, 11, 323, 1221, 8290, 1817, 15723, 553, 1181, 12159, 829, 504, 198, 262, 330, 3966, 497, 330, 11613, 497, 330, 19641, 497, 330, 26972, 497, 330, 37020, 497, 330, 41460, 497, 330, 59528, 497, 330, 59085, 497, 330, 83329, 11436, 262, 1752, 3110, 510, 414, 2890, 284, 508, 17, 11, 220, 16, 11, 220, 16, 11, 220, 19, 11, 220, 20, 11, 220, 23, 11, 220, 17, 11, 220, 18, 60, 5872, 310, 1464, 3378, 2890, 1464, 508, 16, 11, 220, 16, 11, 220, 17, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 11, 220, 23, 60, 715, 310, 1464, 9931, 2890, 1464, 508, 23, 11, 220, 20, 11, 220, 19, 11, 220, 18, 11, 220, 17, 11, 220, 17, 11, 220, 16, 11, 220, 16, 921, 414, 470, 4383, 59085, 497, 330, 37020, 497, 330, 26972, 497, 330, 19641, 497, 330, 11613, 497, 330, 11613, 497, 330, 3966, 497, 330, 3966, 7026, 1066, 414, 1416, 279, 1334, 374, 4287, 11, 470, 458, 4287, 1334, 510, 414, 2890, 284, 4167, 414, 470, 4167, 1066, 414, 1416, 279, 1334, 702, 894, 14888, 1372, 10034, 432, 510, 414, 2890, 284, 508, 16, 11, 481, 16, 1154, 220, 20, 20, 60, 715, 310, 1464, 3378, 2890, 1464, 10055, 16, 11, 220, 16, 11, 220, 20, 20, 921, 310, 1464, 9931, 2890, 1464, 508, 20, 20, 11, 220, 16, 11, 481, 16, 921, 414, 470, 284, 2509, 3966, 4432, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 15723, 9187, 152023, 152892, 152680, 152449, 152236, 220, 16, 152719, 330, 3966, 1, 151666, 152645, 152680, 152449, 152236, 220, 17, 152719, 330, 11613, 1, 151666, 152645, 152680, 152449, 152236, 220, 18, 152719, 330, 19641, 1, 151666, 152645, 152680, 152449, 152236, 220, 19, 152719, 330, 26972, 1, 151666, 152645, 152680, 152449, 152236, 220, 20, 152719, 330, 37020, 1, 151666, 152645, 152680, 152449, 152236, 220, 21, 152719, 330, 41460, 1, 151666, 152645, 152680, 152449, 152236, 220, 22, 152719, 330, 59528, 1, 151666, 152645, 152680, 152449, 152236, 220, 23, 152719, 330, 59085, 1, 151666, 152645, 152680, 152449, 152236, 220, 24, 152719, 330, 83329, 1, 151666, 152244, 152631, 152208, 152677, 152929, 152891, 152440, 18293, 11210, 152474, 152817, 153002, 152396, 1629, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 2890, 151764, 151880, 152257, 152114, 220, 16, 152622, 152533, 152528, 1629, 152622, 152533, 152114, 220, 24, 152361, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 10615, 11210, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 18293, 11210, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 27437, 11210, 152955, 152339, 152602, 10615, 11210, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 6941, 11210, 152474, 152817, 153002, 152846, 152339, 152602, 15723, 9187, 151684, 152771, 151881, 1629, 151773, 152987, 151773, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 27437, 11210, 151764, 151868, 152329, 152208, 151886, 152588, 6941, 11210, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u0120inclusive_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120resulting_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Two_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Three_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Four_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Five_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Six_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Seven_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Eight_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Nine_ter\ud83d\ude80^\ud83d\ude80\".\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80Eight_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Five_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Four_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Three_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Two_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Two_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120strange_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120ignore_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Two_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Three_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Four_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Five_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Six_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Seven_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Eight_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Nine_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120named_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reversed_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120named_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def by_length ( arr ) : \n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\" \n    digit_names = { 1 : \"One\" , 2 : \"Two\" , 3 : \"Three\" , 4 : \"Four\" , 5 : \"Five\" , 6 : \"Six\" , 7 : \"Seven\" , 8 : \"Eight\" , 9 : \"Nine\" } \n    \n    filtered_arr = [ num for num in arr if 1 <= num <= 9 ] \n    \n    sorted_arr = sorted ( filtered_arr ) \n    \n    reversed_arr = sorted_arr [ : : - 1 ] \n    \n    named_arr = [ digit_names [ num ] for num in reversed_arr ] \n    \n    return named_arr \n\n"}
{"task_id": "Python/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "test": "def check(f):\n\n    assert f(5) == [1, 2, 6, 24, 15]\n    assert f(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert f(1) == [1]\n    assert f(3) == [1, 2, 6]\n\ncheck(f)", "text": "    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]", "declaration": "def f(n):\n", "example_test": "def check(f):\n    assert f(5) == [1, 2, 6, 24, 15]\ncheck(f)\n", "code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 282, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 31075, 279, 729, 282, 429, 4990, 308, 438, 264, 5733, 345, 262, 323, 4675, 264, 1140, 315, 1379, 308, 11, 1741, 429, 279, 897, 315, 279, 2392, 518, 1922, 600, 374, 279, 52962, 315, 600, 421, 600, 374, 1496, 198, 262, 476, 279, 2629, 315, 5109, 504, 220, 16, 311, 600, 5937, 624, 262, 600, 8471, 504, 220, 16, 624, 262, 279, 52962, 315, 600, 374, 279, 46444, 315, 279, 5109, 504, 220, 16, 311, 600, 320, 16, 353, 220, 17, 353, 2503, 353, 600, 4292, 262, 13383, 510, 262, 282, 7, 20, 8, 621, 508, 16, 11, 220, 17, 11, 220, 21, 11, 220, 17, 19, 11, 220, 16, 20, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 52962, 152069, 153011, 151983, 600, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151832, 220, 16, 151953, 152221, 152729, 152515, 151876, 151886, 152331, 152456, 152440, 600, 151894, 152911, 151879, 151845, 52962, 152831, 152128, 151766, 152456, 152440, 600, 152780, 152071, 220, 16, 151703, 151740, 151953, 152996, 152415, 151953, 152996, 152496, 152559, 151792, 2629, 3575, 32964, 152069, 153011, 151983, 600, 151775, 153051, 153051, 151876, 151886, 151816, 151879, 151845, 2629, 152831, 152128, 151865, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 151703, 151740, 151703, 151740, 151953, 152996, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 151845, 52962, 152831, 152128, 152430, 600, 151703, 151740, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 151845, 2629, 3575, 32964, 152831, 152128, 152430, 600, 151703, 151740, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\u0120Implement_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120parameter_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120starts_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120multiplication_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120..._ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def f ( n ) : \n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\" \n    def factorial ( i ) : \n        if i == 0 : \n            return 1 \n        else : \n            return i * factorial ( i - 1 ) \n        \n    \n    def sum_of_numbers ( i ) : \n        return sum ( range ( 1 , i + 1 ) ) \n    \n    result = [ ] \n    \n    for i in range ( 1 , n + 1 ) : \n        if i % 2 == 0 : \n            result . append ( factorial ( i ) ) \n        else : \n            result . append ( sum_of_numbers ( i ) ) \n        \n    \n    return result \n\n"}
{"task_id": "Python/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "test": "def check(even_odd_palindrome):\n\n    # Check some simple cases\n    assert even_odd_palindrome(123) == (8, 13)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(63) == (6, 8)\n    assert even_odd_palindrome(25) == (5, 6)\n    assert even_odd_palindrome(19) == (4, 6)\n    assert even_odd_palindrome(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert even_odd_palindrome(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(even_odd_palindrome)", "text": "    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.", "declaration": "def even_odd_palindrome(n):\n", "example_test": "def check(even_odd_palindrome):\n    # Check some simple cases\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(3) == (1, 2)\ncheck(even_odd_palindrome)\n", "code": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80even_odd_palindrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1496, 74668, 73310, 36058, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 6785, 7546, 308, 11, 470, 264, 14405, 429, 702, 279, 1372, 315, 1496, 323, 10322, 198, 262, 7546, 10854, 484, 441, 288, 429, 4399, 2878, 279, 2088, 7, 16, 11, 308, 701, 28308, 382, 262, 13383, 220, 16, 1447, 286, 5571, 25, 220, 18, 198, 286, 9258, 25, 320, 16, 11, 220, 17, 340, 286, 71287, 510, 286, 4440, 73097, 525, 220, 16, 11, 220, 17, 11, 220, 18, 13, 825, 315, 1105, 374, 1496, 11, 323, 1378, 315, 1105, 525, 10322, 382, 262, 13383, 220, 17, 1447, 286, 5571, 25, 220, 16, 17, 198, 286, 9258, 25, 320, 19, 11, 220, 21, 340, 286, 71287, 510, 286, 4440, 73097, 525, 220, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 11, 220, 21, 11, 220, 22, 11, 220, 23, 11, 220, 24, 11, 220, 16, 16, 13, 3040, 315, 1105, 525, 1496, 11, 323, 220, 21, 315, 1105, 525, 10322, 382, 262, 7036, 510, 286, 220, 16, 13, 220, 16, 2651, 308, 2651, 220, 16, 15, 61, 18, 198, 286, 220, 17, 13, 5927, 14405, 702, 279, 1372, 315, 1496, 323, 10322, 7546, 10854, 484, 441, 288, 15576, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 73310, 36058, 152069, 153011, 151983, 856, 151775, 153051, 153051, 151876, 151886, 152029, 151917, 151879, 151845, 607, 152831, 152128, 152430, 856, 151703, 151740, 152622, 151683, 151696, 152339, 152061, 151879, 151845, 607, 152831, 152128, 152430, 856, 151703, 151740, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 151953, 152996, 152677, 152929, 152891, 152440, 1496, 3180, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 10322, 3180, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 374, 73310, 36058, 152831, 152128, 152430, 600, 151703, 151740, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1496, 3180, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 10322, 3180, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152415, 151953, 152996, 151886, 152457, 152913, 152785, 1496, 3180, 152968, 152785, 10322, 3180, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rom_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120fall_ter\ud83d\ude80^\ud83d\ude80\u0120within_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120inclusive_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Integer_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Integer_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120four_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120returned_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rom_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80\u0120respectively_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def even_odd_palindrome ( n ) : \n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\" \n    def is_palindrome ( x ) : \n        return str ( x ) == str ( x ) [ : : - 1 ] \n    \n    even_count = 0 \n    \n    odd_count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if is_palindrome ( i ) : \n            if i % 2 == 0 : \n                even_count += 1 \n            else : \n                odd_count += 1 \n            \n        \n    \n    return ( even_count , odd_count ) \n\n"}
{"task_id": "Python/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "test": "def check(count_nums):\n\n    # Check some simple cases\n    assert count_nums([]) == 0\n    assert count_nums([-1, -2, 0]) == 0\n    assert count_nums([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert count_nums([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert count_nums([1, 100, 98, -7, 1, -1]) == 4\n    assert count_nums([12, 23, 34, -45, -56, 0]) == 5\n    assert count_nums([-0, 1**0]) == 1\n    assert count_nums([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(count_nums)", "text": "    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3", "declaration": "def count_nums(arr):\n", "example_test": "def check(count_nums):\n    # Check some simple cases\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(count_nums)\n", "code": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80count_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1760, 51875, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 9645, 264, 729, 1760, 51875, 892, 4990, 458, 1334, 315, 25780, 323, 4675, 198, 262, 279, 1372, 315, 5424, 892, 702, 264, 2629, 315, 18509, 861, 220, 15, 624, 262, 1416, 264, 1372, 374, 8225, 11, 1221, 1181, 1156, 8499, 15723, 686, 387, 8225, 510, 262, 384, 1302, 13, 481, 16, 17, 18, 702, 8499, 18509, 481, 16, 11, 220, 17, 11, 323, 220, 18, 624, 262, 12109, 1760, 51875, 10556, 8, 621, 220, 15, 198, 262, 12109, 1760, 51875, 41197, 16, 11, 220, 16, 16, 11, 481, 16, 16, 2467, 621, 220, 16, 198, 262, 12109, 1760, 51875, 2561, 16, 11, 220, 16, 11, 220, 17, 2467, 621, 220, 18, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 2629, 3575, 41432, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 286, 1096, 729, 47417, 279, 2629, 315, 18509, 315, 264, 1372, 624, 286, 1416, 279, 1372, 374, 8225, 11, 432, 31138, 279, 1156, 8499, 15723, 624, 286, 4210, 151666, 152208, 152677, 152929, 152891, 152440, 1841, 152432, 152309, 151878, 152780, 152763, 220, 16, 152476, 152836, 152528, 308, 152622, 152668, 152114, 220, 15, 152361, 152641, 152448, 220, 16, 152106, 152208, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 3647, 152831, 152128, 152430, 308, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 15723, 10160, 152071, 220, 15, 152208, 152067, 152685, 152583, 152528, 308, 152622, 152706, 152114, 220, 15, 152361, 151876, 152677, 153037, 152682, 152440, 15723, 10160, 152936, 153081, 152456, 152440, 308, 151702, 152071, 220, 16, 15, 152208, 152677, 153037, 152682, 152440, 308, 152409, 152071, 220, 16, 15, 152208, 151953, 152996, 151886, 152331, 152456, 152440, 15723, 10160, 151894, 152370, 1841, 151953, 152996, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 2890, 151764, 152355, 152257, 151917, 151879, 151845, 2629, 3575, 41432, 152831, 152128, 152430, 1629, 151703, 151740, 152622, 152706, 152114, 220, 15, 152361, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120signed_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120e_ter\ud83d\ude80^\ud83d\ude80.g_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120signed_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80_nums_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120This_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120calculates_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120considers_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120signed_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sign_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80conditional_expression_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sign_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_of_ter\ud83d\ude80^\ud83d\ude80_digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_nums ( arr ) : \n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \n    def sum_of_digits ( n ) : \n        \"\"\"\n        This function calculates the sum of digits of a number.\n        If the number is negative, it considers the first signed digit.\n        \"\"\" \n        sign = - 1 if n < 0 else 1 \n        \n        n = abs ( n ) \n        \n        digit_sum = 0 \n        \n        while n > 0 : \n            digit_sum += n % 10 \n            n //= 10 \n        \n        return digit_sum * sign \n    \n    return sum ( 1 for num in arr if sum_of_digits ( num ) > 0 ) \n\n"}
{"task_id": "Python/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "test": "def check(move_one_ball):\n\n    # Check some simple cases\n    assert move_one_ball([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert move_one_ball([3, 5, 10, 1, 2])==True\n    assert move_one_ball([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert move_one_ball([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert move_one_ball([])==True\n\ncheck(move_one_ball)", "text": "    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.", "declaration": "def move_one_ball(arr):\n", "example_test": "def check(move_one_ball):\n    # Check some simple cases\n    assert move_one_ball([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert move_one_ball([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(move_one_ball)\n", "code": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80move_one_ball_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3271, 11667, 55808, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 1654, 614, 458, 1334, 364, 1118, 6, 315, 451, 25780, 2890, 58, 16, 1125, 2890, 58, 17, 1125, 60353, 2890, 22223, 936, 785, 198, 262, 5109, 304, 279, 1334, 686, 387, 26618, 11457, 13, 4615, 3383, 374, 311, 8253, 421, 198, 262, 432, 374, 3204, 311, 633, 458, 1334, 10615, 304, 2477, 6810, 75462, 1973, 553, 16380, 715, 262, 279, 2701, 5666, 389, 279, 2661, 1334, 510, 286, 1446, 525, 5420, 311, 2736, 1290, 6407, 5666, 894, 1372, 315, 3039, 624, 1066, 262, 3776, 1290, 6407, 5666, 3363, 31831, 678, 5424, 315, 279, 1334, 553, 825, 198, 262, 2309, 304, 279, 1290, 5106, 13, 576, 1537, 2392, 315, 279, 1334, 686, 387, 7726, 311, 198, 262, 279, 5916, 2309, 304, 279, 1334, 600, 1734, 13, 220, 15, 339, 1922, 13, 4710, 262, 1416, 432, 374, 3204, 311, 6851, 279, 10615, 1334, 553, 16380, 279, 3403, 5666, 198, 262, 1221, 470, 3007, 770, 470, 3557, 624, 262, 1416, 279, 2661, 1334, 374, 4287, 1221, 470, 3007, 382, 262, 7036, 25, 576, 2661, 1140, 374, 19323, 311, 614, 4911, 5424, 382, 262, 1752, 13383, 510, 1066, 262, 3271, 11667, 55808, 2561, 18, 11, 220, 19, 11, 220, 20, 11, 220, 16, 11, 220, 17, 2467, 84653, 2514, 198, 262, 71287, 25, 3216, 2736, 258, 220, 17, 1290, 6407, 7525, 11, 2477, 6810, 75462, 1973, 646, 198, 338, 387, 16994, 369, 279, 2661, 1334, 624, 262, 3271, 11667, 55808, 2561, 18, 11, 220, 20, 11, 220, 19, 11, 220, 16, 11, 220, 17, 2467, 84653, 4049, 198, 262, 71287, 25, 2132, 374, 537, 3204, 311, 633, 2477, 6810, 75462, 1973, 369, 279, 2661, 198, 394, 1334, 553, 16380, 894, 1372, 315, 1290, 6407, 7525, 624, 6360, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 2890, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152677, 152929, 152891, 152440, 10615, 11210, 152911, 151879, 151845, 10615, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 28973, 11210, 153081, 152456, 152441, 152339, 152602, 2890, 151684, 152771, 152503, 152539, 600, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 2890, 151684, 152771, 152503, 152121, 152539, 600, 152085, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 28973, 11210, 152622, 151683, 152528, 10615, 11210, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80_ball_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80We_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120...,_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80[N_ter\ud83d\ude80^\ud83d\ude80]._ter\ud83d\ude80^\ud83d\ude80The_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120randomly_ter\ud83d\ude80^\ud83d\ude80\u0120ordered_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120determine_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-de_ter\ud83d\ude80^\ud83d\ude80creasing_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120performing_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120following_ter\ud83d\ude80^\ud83d\ude80\u0120operation_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120allowed_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120perform_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120operation_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120One_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120operation_ter\ud83d\ude80^\ud83d\ude80\u0120means_ter\ud83d\ude80^\ud83d\ude80\u0120shifting_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120position_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120direction_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120moved_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120starting_ter\ud83d\ude80^\ud83d\ude80\u0120position_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80.e_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120obtain_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120performing_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120above_ter\ud83d\ude80^\ud83d\ude80\u0120operation_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120else_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120guaranteed_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80_ball_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80==>_ter\ud83d\ude80^\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120By_ter\ud83d\ude80^\ud83d\ude80\u0120perform_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-de_ter\ud83d\ude80^\ud83d\ude80creasing_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120achieved_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80_ball_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80==>_ter\ud83d\ude80^\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80It_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-de_ter\ud83d\ude80^\ud83d\ude80creasing_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120performing_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120shift_ter\ud83d\ude80^\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shifted_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shifted_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def move_one_ball ( arr ) : \n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\" \n    if not arr : \n        return True \n    \n    sorted_arr = sorted ( arr ) \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        shifted_arr = arr [ i : ] + arr [ : i ] \n        \n        if shifted_arr == sorted_arr : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Python/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "test": "def check(exchange):\n\n    # Check some simple cases\n    assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert exchange([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert exchange([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert exchange([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert exchange([100, 200], [200, 200]) == \"YES\"\n\ncheck(exchange)", "text": "    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.", "declaration": "def exchange(lst1, lst2):\n", "example_test": "def check(exchange):\n    # Check some simple cases\n    assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\ncheck(exchange)\n", "code": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80exchange_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst1_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst2_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 9289, 152069, 153011, 151983, 18845, 16, 152297, 151983, 18845, 17, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 641, 419, 3491, 11, 498, 686, 4211, 264, 729, 429, 4990, 1378, 11469, 315, 5109, 345, 262, 323, 26569, 3425, 432, 374, 3204, 311, 2736, 458, 9289, 315, 5424, 198, 262, 1948, 1105, 311, 1281, 18845, 16, 264, 1140, 315, 1172, 1496, 5109, 624, 262, 2619, 374, 902, 3930, 389, 279, 1372, 315, 47401, 5424, 1948, 18845, 16, 323, 18845, 17, 624, 262, 1416, 432, 374, 3204, 311, 9289, 5424, 1948, 279, 18845, 16, 323, 18845, 17, 311, 1281, 198, 262, 678, 279, 5424, 315, 18845, 16, 311, 387, 1496, 11, 470, 330, 14004, 22956, 262, 18214, 11, 470, 330, 8996, 22956, 262, 1752, 3110, 510, 262, 9289, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 1125, 508, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 2467, 589, 330, 14004, 698, 262, 9289, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 1125, 508, 16, 11, 220, 20, 11, 220, 18, 11, 220, 19, 2467, 589, 330, 8996, 698, 262, 1084, 374, 19110, 429, 279, 1946, 11469, 686, 387, 2477, 39433, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 10322, 31983, 16, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 856, 151918, 152237, 152370, 18845, 16, 151764, 152355, 152257, 152988, 152456, 152440, 856, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152194, 152734, 152208, 152677, 152929, 152891, 152440, 1496, 31983, 17, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 856, 151918, 152237, 152370, 18845, 17, 151764, 152355, 152257, 152988, 152456, 152440, 856, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152194, 152734, 152208, 151886, 152840, 152862, 330, 14004, 1, 151666, 152476, 152836, 152528, 10322, 31983, 16, 152622, 152533, 152528, 1496, 31983, 17, 152361, 152641, 152862, 330, 8996, 1, 151666, 152106, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120exchange_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80In_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120problem_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120implement_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120determines_ter\ud83d\ude80^\ud83d\ude80\u0120whether_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120perform_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120exchange_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120There_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120limit_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120exchanged_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120exchange_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80YES_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Otherwise_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120exchange_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80YES_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120exchange_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120It_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120assumed_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-empty_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80YES_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_lst_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def exchange ( lst1 , lst2 ) : \n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\" \n    odd_lst1 = sum ( 1 for x in lst1 if x % 2 != 0 ) \n    \n    even_lst2 = sum ( 1 for x in lst2 if x % 2 == 0 ) \n    \n    return \"YES\" if odd_lst1 <= even_lst2 else \"NO\" \n\n"}
{"task_id": "Python/111", "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "test": "def check(histogram):\n\n    # Check some simple cases\n    assert histogram('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert histogram('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert histogram('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert histogram('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert histogram('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert histogram('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert histogram('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\ncheck(histogram)", "text": "    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}", "declaration": "def histogram(test):\n", "example_test": "def check(histogram):\n    # Check some simple cases\n    assert histogram('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert histogram('a b c') == {'a': 1,'b': 1,'c': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert histogram('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert histogram('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\ncheck(histogram)\n", "code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80histogram_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80test_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 30281, 152069, 153011, 151983, 1273, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 914, 14064, 264, 3550, 18663, 42047, 11931, 11, 470, 264, 10997, 198, 262, 315, 279, 6524, 448, 279, 1429, 53415, 323, 8482, 279, 12159, 1760, 624, 262, 1416, 3807, 11931, 614, 279, 1852, 31559, 11, 470, 678, 315, 1105, 624, 1066, 262, 13383, 510, 262, 30281, 492, 64, 293, 272, 863, 621, 5360, 64, 1210, 220, 16, 11, 364, 65, 1210, 220, 16, 11, 364, 66, 1210, 220, 16, 532, 262, 30281, 492, 64, 293, 293, 264, 863, 621, 5360, 64, 1210, 220, 17, 11, 364, 65, 1210, 220, 17, 532, 262, 30281, 492, 64, 293, 272, 264, 293, 863, 621, 5360, 64, 1210, 220, 17, 11, 364, 65, 1210, 220, 17, 532, 262, 30281, 492, 65, 293, 293, 293, 264, 863, 621, 5360, 65, 1210, 220, 19, 532, 262, 30281, 492, 863, 621, 10086, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 1273, 152380, 152451, 152819, 151886, 152997, 152892, 152244, 152631, 151953, 152415, 152677, 152929, 152891, 152440, 6524, 25977, 152023, 152892, 152244, 152631, 152208, 152677, 152929, 152891, 152440, 1932, 3180, 152071, 220, 15, 152208, 152980, 152205, 152440, 6524, 152911, 151879, 153033, 152036, 152136, 1273, 152411, 6718, 152831, 152128, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152528, 6524, 152622, 152607, 152528, 6524, 25977, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152441, 152339, 152602, 6524, 25977, 151684, 152771, 151881, 6524, 151773, 152987, 151773, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152441, 152339, 152602, 6524, 25977, 151684, 152771, 151881, 6524, 151773, 152987, 151773, 152071, 220, 16, 152208, 151953, 152996, 152415, 152677, 152929, 152891, 152440, 1932, 3180, 152911, 151879, 151845, 1932, 152831, 152128, 152430, 1932, 3180, 153001, 151697, 152339, 152602, 6524, 25977, 151684, 152771, 151881, 6524, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 152132, 152736, 152541, 152843, 152449, 152811, 6524, 152602, 1760, 152996, 152788, 152581, 152899, 152731, 151810, 6524, 152554, 151810, 1760, 152455, 151918, 152237, 152911, 151879, 153033, 152036, 152136, 6524, 25977, 152411, 3589, 152831, 152128, 151703, 151740, 151764, 151842, 152257, 152528, 1760, 152622, 151683, 152528, 1932, 3180, 152361, 151808, 152610, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120histogram_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80\u0120separated_ter\ud83d\ude80^\ud83d\ude80\u0120lowercase_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120most_ter\ud83d\ude80^\ud83d\ude80\u0120repetition_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120containing_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120several_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120occurrence_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120histogram_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120{'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80}\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120histogram_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120{'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80}\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120histogram_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120{'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80}\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120histogram_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120{'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80':_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80}\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120histogram_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120{}\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80_counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80_counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80_counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80_counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80_counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80_counts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def histogram ( test ) : \n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\" \n    if not test : \n        return { } \n    \n    letter_counts = { } \n    \n    max_count = 0 \n    \n    for letter in test . split ( ) : \n        if letter in letter_counts : \n            letter_counts [ letter ] += 1 \n        else : \n            letter_counts [ letter ] = 1 \n            \n        \n        max_count = max ( max_count , letter_counts [ letter ] ) \n        \n    \n    return { letter : count for letter , count in letter_counts . items ( ) if count == max_count } \n\n"}
{"task_id": "Python/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "test": "def check(reverse_delete):\n\n    assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)\n    assert reverse_delete(\"abcdef\", \"b\") == ('acdef',False)\n    assert reverse_delete(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert reverse_delete(\"dwik\",\"w\") == ('dik',False)\n    assert reverse_delete(\"a\",\"a\") == ('',True)\n    assert reverse_delete(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert reverse_delete(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert reverse_delete(\"vabba\",\"v\") == ('abba',True)\n    assert reverse_delete(\"mamma\", \"mia\") == (\"\", True)\n\ncheck(reverse_delete)", "text": "    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)", "declaration": "def reverse_delete(s,c):\n", "example_test": "def check(reverse_delete):\n    assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)\n    assert reverse_delete(\"abcdef\", \"b\") == ('acdef',False)\n    assert reverse_delete(\"abcdedcba\",\"ab\") == ('cdedc',True)\ncheck(reverse_delete)\n", "code": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80reverse_delete_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 9931, 11353, 152069, 153011, 151983, 274, 152297, 151983, 272, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 6262, 198, 262, 1205, 525, 2661, 1378, 9069, 274, 323, 272, 11, 498, 614, 311, 11062, 678, 279, 5766, 304, 274, 429, 525, 6144, 311, 894, 3668, 304, 272, 198, 262, 1221, 1779, 421, 279, 1102, 914, 374, 73097, 624, 262, 362, 914, 374, 2598, 73097, 421, 432, 15804, 279, 1852, 27555, 438, 4637, 624, 262, 1446, 1265, 470, 264, 14405, 8482, 279, 1102, 914, 323, 3007, 14, 4049, 369, 279, 1779, 624, 262, 13383, 198, 262, 1752, 274, 284, 330, 13683, 450, 497, 272, 284, 330, 5918, 497, 279, 1102, 1265, 387, 4319, 91490, 516, 4049, 340, 262, 1752, 274, 284, 330, 41202, 497, 272, 284, 330, 65, 1, 220, 279, 1102, 1265, 387, 4319, 580, 750, 516, 4049, 340, 262, 1752, 274, 284, 330, 68644, 291, 93829, 497, 272, 284, 330, 370, 497, 279, 1102, 1265, 387, 4319, 4385, 291, 66, 516, 2514, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 3904, 152911, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 152919, 152817, 153002, 152396, 1161, 152996, 152673, 152581, 152899, 152440, 1161, 151918, 152237, 152370, 274, 151764, 151880, 152257, 152528, 1161, 152622, 152442, 152839, 152528, 272, 152361, 151868, 152329, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 374, 73310, 36058, 152983, 152528, 1102, 3904, 152622, 151683, 151696, 152339, 152602, 1102, 3904, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 152361, 152208, 151886, 152457, 152913, 152785, 1102, 3904, 152968, 152785, 374, 73310, 36058, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80_delete_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Task_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120We_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120deleted_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120character_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120called_ter\ud83d\ude80^\ud83d\ude80\u0120palindrome_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120reads_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120backward_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120forward_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120containing_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80de_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120('_ter\ud83d\ude80^\ud83d\ude80bcd_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120('_ter\ud83d\ude80^\ud83d\ude80ac_ter\ud83d\ude80^\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80cba_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120('_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80_string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_pal_ter\ud83d\ude80^\ud83d\ude80indrome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def reverse_delete ( s , c ) : \n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\" \n    result_string = '' . join ( [ char for char in s if char not in c ] ) \n    \n    is_palindrome = result_string == result_string [ : : - 1 ] \n    \n    return ( result_string , is_palindrome ) \n\n"}
{"task_id": "Python/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "test": "def check(odd_count):\n\n    # Check some simple cases\n    assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert odd_count(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(odd_count)", "text": "    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "declaration": "def odd_count(lst):\n", "example_test": "def check(odd_count):\n    # Check some simple cases\n    assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(odd_count)\n", "code": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80odd_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 10322, 3180, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 1140, 315, 9069, 11, 1380, 1817, 914, 17167, 315, 1172, 18509, 11, 470, 264, 1140, 624, 262, 8886, 2392, 600, 315, 279, 2550, 1265, 387, 330, 1782, 1372, 315, 10322, 5424, 304, 279, 198, 262, 914, 600, 315, 279, 1946, 1189, 1380, 678, 279, 600, 594, 1265, 387, 12575, 553, 279, 1372, 198, 262, 315, 10322, 18509, 304, 279, 600, 944, 71, 914, 315, 279, 1946, 382, 262, 12109, 10322, 3180, 6425, 16, 17, 18, 19, 20, 21, 22, 7368, 262, 4383, 1782, 1372, 315, 10322, 5424, 220, 19, 77, 279, 607, 19, 968, 220, 19, 315, 279, 220, 19, 77, 628, 79201, 262, 12109, 10322, 3180, 6425, 18, 37587, 16, 16, 16, 16, 16, 16, 16, 16, 14108, 262, 4383, 1782, 1372, 315, 10322, 5424, 220, 16, 77, 279, 607, 16, 968, 220, 16, 315, 279, 220, 16, 77, 628, 10346, 257, 330, 1782, 1372, 315, 10322, 5424, 220, 23, 77, 279, 607, 23, 968, 220, 23, 315, 279, 220, 23, 77, 628, 79201, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2550, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152370, 18845, 151876, 152677, 152929, 152891, 152440, 10322, 3180, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152285, 152456, 153101, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 151702, 152071, 220, 17, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152370, 600, 151764, 152194, 152734, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 2550, 152411, 8737, 152831, 152128, 152928, 282, 1, 1782, 1372, 315, 10322, 5424, 314, 14556, 3180, 92, 77, 279, 607, 90, 14556, 3180, 92, 968, 314, 14556, 3180, 92, 315, 279, 314, 14556, 3180, 92, 77, 628, 1189, 151666, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 2550, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120consists_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Each_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80.\"_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120replaced_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80h_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80'])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80ng_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80put_ter\ud83d\ude80^\ud83d\ude80.\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80',\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"])\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80ng_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80put_ter\ud83d\ude80^\ud83d\ude80.\",\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80ng_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80put_ter\ud83d\ude80^\ud83d\ude80.\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120{_ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80ng_ter\ud83d\ude80^\ud83d\ude80\u0120{_ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120{_ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80put_ter\ud83d\ude80^\ud83d\ude80.\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def odd_count ( lst ) : \n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \n    output = [ ] \n    \n    for i in lst : \n        odd_count = sum ( int ( digit ) % 2 for digit in i ) \n        \n        output . append ( f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\" ) \n    \n    return output \n\n"}
{"task_id": "Python/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "test": "def check(minSubArraySum):\n\n    # Check some simple cases\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert minSubArraySum([-1, -2, -3]) == -6\n    assert minSubArraySum([-1, -2, -3, 2, -10]) == -14\n    assert minSubArraySum([-9999999999999999]) == -9999999999999999\n    assert minSubArraySum([0, 10, 20, 1000000]) == 0\n    assert minSubArraySum([-1, -2, -3, 10, -5]) == -6\n    assert minSubArraySum([100, -1, -2, -3, 10, -5]) == -6\n    assert minSubArraySum([10, 11, 13, 8, 3, 4]) == 3\n    assert minSubArraySum([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert minSubArraySum([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert minSubArraySum([7]) == 7\n    assert minSubArraySum([1, -1]) == -1\n\ncheck(minSubArraySum)", "text": "    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6", "declaration": "def minSubArraySum(nums):\n", "example_test": "def check(minSubArraySum):\n    # Check some simple cases\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert minSubArraySum([-1, -2, -3]) == -6\ncheck(minSubArraySum)\n", "code": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80minSubArraySum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1308, 3136, 1857, 9190, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 458, 1334, 315, 25780, 10307, 11, 1477, 279, 8028, 2629, 315, 894, 2477, 39433, 1186, 62058, 198, 262, 315, 10307, 624, 262, 13383, 198, 262, 1308, 3136, 1857, 9190, 2561, 17, 11, 220, 18, 11, 220, 19, 11, 220, 16, 11, 220, 17, 11, 220, 19, 2467, 621, 220, 16, 198, 262, 1308, 3136, 1857, 9190, 41197, 16, 11, 481, 17, 11, 481, 18, 2467, 621, 481, 21, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1308, 10160, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 364, 13573, 6, 151666, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1482, 10160, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 10307, 151876, 152677, 152929, 152891, 152440, 1482, 10160, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 1629, 153001, 151766, 152456, 152440, 1482, 10160, 152328, 152370, 1629, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1308, 10160, 152911, 151879, 151845, 1308, 152831, 152128, 152430, 1308, 10160, 153001, 152430, 1482, 10160, 151703, 151740, 152208, 151953, 152996, 151886, 152588, 1308, 10160, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80Array_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-empty_ter\ud83d\ude80^\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80-array_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80Array_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80Array_ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def minSubArraySum ( nums ) : \n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\" \n    min_sum = float ( 'inf' ) \n    \n    current_sum = 0 \n    \n    for num in nums : \n        current_sum = min ( num , current_sum + num ) \n        \n        min_sum = min ( min_sum , current_sum ) \n        \n    \n    return min_sum \n\n"}
{"task_id": "Python/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "test": "def check(max_fill):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert max_fill([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert max_fill([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\ncheck(max_fill)", "text": "    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10", "declaration": "def max_fill(grid, capacity):\n    import math\n", "example_test": "def check(max_fill):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n    # Check some edge cases that are easy to work out by hand.\ncheck(max_fill)\n", "code": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80max_fill_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80capacity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1932, 30728, 152069, 153011, 151983, 5827, 152297, 151983, 8654, 151775, 153051, 153051, 151876, 152511, 152043, 152844, 151836, 152650, 6888, 152024, 151726, 152677, 152502, 3190, 262, 1446, 525, 2661, 264, 51424, 5827, 315, 47296, 13, 8886, 2802, 10868, 264, 3175, 1632, 345, 262, 323, 1817, 220, 16, 304, 264, 2802, 10868, 264, 3175, 4982, 315, 3015, 624, 262, 8886, 1632, 702, 264, 12159, 15621, 429, 646, 387, 1483, 311, 8649, 3015, 504, 432, 11, 715, 262, 323, 678, 42112, 614, 279, 1852, 8654, 624, 262, 4615, 3383, 374, 311, 990, 279, 42112, 311, 4287, 279, 47296, 624, 262, 9258, 279, 1372, 315, 3039, 498, 1184, 311, 4722, 279, 42112, 382, 262, 13383, 220, 16, 510, 286, 5571, 25, 715, 310, 5827, 549, 4318, 15, 11, 15, 11, 16, 11, 15, 1125, 508, 15, 11, 16, 11, 15, 11, 15, 1125, 508, 16, 11, 16, 11, 16, 11, 16, 14288, 310, 15621, 35603, 549, 220, 16, 198, 286, 9258, 25, 220, 21, 271, 262, 13383, 220, 17, 510, 286, 5571, 25, 715, 310, 5827, 549, 4318, 15, 11, 15, 11, 16, 11, 16, 1125, 508, 15, 11, 15, 11, 15, 11, 15, 1125, 508, 16, 11, 16, 11, 16, 11, 16, 1125, 508, 15, 11, 16, 11, 16, 11, 16, 14288, 310, 15621, 35603, 549, 220, 17, 198, 286, 9258, 25, 220, 20, 7213, 262, 13383, 220, 18, 510, 286, 5571, 25, 715, 310, 5827, 549, 4318, 15, 11, 15, 11, 15, 1125, 508, 15, 11, 15, 11, 15, 14288, 310, 15621, 35603, 549, 220, 20, 198, 286, 9258, 25, 220, 15, 271, 262, 87473, 510, 286, 353, 678, 47296, 614, 279, 1852, 3084, 198, 286, 353, 220, 16, 2651, 5827, 1954, 2651, 220, 16, 15, 61, 17, 198, 286, 353, 220, 16, 2651, 5827, 9624, 16, 936, 4129, 2651, 220, 16, 15, 61, 17, 198, 286, 353, 5827, 989, 1457, 73, 60, 1464, 220, 15, 760, 220, 16, 198, 286, 353, 220, 16, 2651, 8654, 2651, 220, 16, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2790, 57345, 152071, 220, 15, 152208, 152980, 152205, 152440, 1632, 152370, 5827, 151876, 152677, 152929, 152891, 152440, 3015, 28345, 152911, 151879, 151845, 2629, 152831, 152128, 152430, 1632, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 7525, 152911, 151879, 153033, 152036, 152136, 6888, 152411, 28481, 152831, 152128, 151766, 152456, 152440, 3015, 28345, 152144, 152370, 8654, 151703, 151740, 152208, 152677, 153037, 152682, 152440, 2790, 57345, 152936, 152370, 7525, 152208, 151953, 152996, 151886, 152588, 2790, 57345, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_fill_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120capacity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120rectangular_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120wells_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Each_ter\ud83d\ude80^\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80\u0120represents_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120single_ter\ud83d\ude80^\ud83d\ude80\u0120well_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80\u0120represents_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120single_ter\ud83d\ude80^\ud83d\ude80\u0120unit_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120water_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Each_ter\ud83d\ude80^\ud83d\ude80\u0120well_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120corresponding_ter\ud83d\ude80^\ud83d\ude80\u0120bucket_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120used_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80\u0120water_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120buckets_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120capacity_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120use_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120buckets_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120wells_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120buckets_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120[[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120bucket_ter\ud83d\ude80^\ud83d\ude80_capacity_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120[[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120bucket_ter\ud83d\ude80^\ud83d\ude80_capacity_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120[[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120bucket_ter\ud83d\ude80^\ud83d\ude80_capacity_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Constraints_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120wells_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80.length_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80[:,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]._ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80][_ter\ud83d\ude80^\ud83d\ude80j_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120|_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120capacity_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120well_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120water_ter\ud83d\ude80^\ud83d\ude80_units_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120well_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ceil_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120water_ter\ud83d\ude80^\ud83d\ude80_units_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capacity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80_operations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_fill ( grid , capacity ) : \n    import math \n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\" \n    total_operations = 0 \n    \n    for well in grid : \n        water_units = sum ( well ) \n        \n        operations = math . ceil ( water_units / capacity ) \n        \n        total_operations += operations \n    \n    return total_operations \n\n"}
{"task_id": "Python/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "test": "def check(sort_array):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sort_array([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert sort_array([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert sort_array([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert sort_array([]) == []\n    assert sort_array([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert sort_array([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(sort_array)", "text": "    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]", "declaration": "def sort_array(arr):\n", "example_test": "def check(sort_array):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sort_array([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert sort_array([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert sort_array([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(sort_array)\n", "code": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sort_array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3378, 3858, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 758, 419, 98838, 11, 498, 614, 311, 3378, 458, 1334, 315, 2477, 60935, 25780, 4092, 311, 198, 262, 1372, 315, 6174, 304, 862, 7868, 13042, 304, 35388, 1973, 624, 262, 1752, 4428, 1372, 315, 6174, 11, 3378, 3118, 389, 12122, 897, 382, 262, 1084, 1969, 387, 11537, 1075, 419, 510, 262, 12109, 3378, 3858, 2561, 16, 11, 220, 20, 11, 220, 17, 11, 220, 18, 11, 220, 19, 2467, 621, 508, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 921, 262, 12109, 3378, 3858, 41197, 17, 11, 481, 18, 11, 481, 19, 11, 481, 20, 11, 481, 21, 2467, 621, 10055, 21, 11, 481, 20, 11, 481, 19, 11, 481, 18, 11, 481, 17, 921, 262, 12109, 3378, 3858, 2561, 16, 11, 220, 15, 11, 220, 17, 11, 220, 18, 11, 220, 19, 2467, 508, 15, 11, 220, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 2890, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 151870, 152913, 152540, 151879, 153033, 152036, 152089, 151879, 151845, 9544, 152831, 152128, 152430, 856, 151703, 151740, 152411, 1760, 152831, 152128, 152928, 364, 16, 6, 151666, 151703, 151740, 152968, 152785, 856, 151958, 152717, 152996, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120In_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120Kata_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-negative_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120according_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120ones_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120their_ter\ud83d\ude80^\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80\u0120representation_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120ones_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120based_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120It_ter\ud83d\ude80^\ud83d\ude80\u0120must_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120implemented_ter\ud83d\ude80^\ud83d\ude80\u0120like_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80_array_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_array ( arr ) : \n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\" \n    return sorted ( arr , key = lambda x : ( bin ( x ) . count ( '1' ) , x ) ) \n\n"}
{"task_id": "Python/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": "def check(select_words):\n\n    # Check some simple cases\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))      \n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))  \n    assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))      \n    assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))  \n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))\n    assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))\n\ncheck(select_words)", "text": "    Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]", "declaration": "def select_words(s, n):\n", "example_test": "def check(select_words):\n    # Check some simple cases\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))      \n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))  \n    assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))      \n    assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))  \n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n    # Check some edge cases that are easy to work out by hand.\ncheck(select_words)\n", "code": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80select_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3293, 18981, 152069, 153011, 151983, 274, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 914, 274, 323, 264, 5810, 1372, 308, 11, 498, 614, 1012, 50820, 311, 4211, 715, 262, 264, 729, 429, 4675, 264, 1140, 315, 678, 4244, 504, 914, 274, 429, 6644, 6896, 715, 262, 308, 77505, 1783, 11, 304, 1973, 1493, 4244, 4994, 304, 279, 914, 274, 624, 262, 1416, 279, 914, 274, 374, 4287, 1221, 279, 729, 1265, 470, 458, 4287, 1140, 624, 262, 7036, 25, 498, 1231, 9658, 279, 1946, 914, 5610, 1172, 11931, 323, 12621, 624, 262, 25311, 510, 262, 3293, 18981, 445, 41484, 1030, 264, 2632, 38306, 497, 220, 19, 8, 32296, 4383, 55392, 7026, 262, 3293, 18981, 445, 41484, 1030, 264, 2632, 38306, 497, 220, 18, 8, 32296, 4383, 41484, 497, 330, 75, 2969, 7026, 262, 3293, 18981, 445, 22944, 4158, 3550, 497, 220, 17, 8, 32296, 4167, 262, 3293, 18981, 445, 9707, 1879, 497, 220, 19, 8, 32296, 4383, 14615, 7026, 262, 3293, 18981, 445, 63718, 273, 9962, 497, 220, 18, 8, 32296, 4383, 63718, 273, 7026, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 78456, 151887, 330, 5918, 98255, 13669, 3810, 52, 1, 151666, 152208, 152677, 152929, 152891, 152440, 4244, 152911, 151879, 153033, 152036, 152136, 274, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 3409, 152370, 4244, 151876, 152677, 152929, 152891, 152440, 77505, 517, 3180, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 1161, 151918, 152237, 152370, 3409, 151764, 152355, 152390, 152412, 153101, 151879, 153033, 152036, 152136, 1161, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152857, 152983, 151917, 151879, 153033, 152036, 152136, 1161, 152411, 4722, 152831, 152128, 151703, 151740, 152622, 152442, 152839, 152528, 78456, 152361, 152194, 152734, 152208, 151923, 152557, 152592, 152583, 152528, 77505, 517, 3180, 152622, 151683, 152528, 308, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 3409, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120natural_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120been_ter\ud83d\ude80^\ud83d\ude80\u0120tasked_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120implement_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120contain_ter\ud83d\ude80^\ud83d\ude80\u0120exactly_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ants_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120these_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120appear_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120assume_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Mary_ter\ud83d\ude80^\ud83d\ude80\u0120had_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120little_ter\ud83d\ude80^\ud83d\ude80\u0120lamb_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80little_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Mary_ter\ud83d\ude80^\ud83d\ude80\u0120had_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120little_ter\ud83d\ude80^\ud83d\ude80\u0120lamb_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80Mary_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80amb_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80simple_ter\ud83d\ude80^\ud83d\ude80\u0120white_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\u0120world_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80world_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120select_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Unc_ter\ud83d\ude80^\ud83d\ude80le_ter\ud83d\ude80^\ud83d\ude80\u0120sam_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80Unc_ter\ud83d\ude80^\ud83d\ude80le_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80AE_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ant_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ant_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def select_words ( s , n ) : \n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \n    vowels = \"aeiouAEIOU\" \n    \n    words = s . split ( ) \n    \n    result = [ ] \n    \n    for word in words : \n        consonant_count = sum ( 1 for char in word if char . isalpha ( ) and char . lower ( ) not in vowels ) \n        \n        if consonant_count == n : \n            result . append ( word ) \n        \n    \n    return result \n\n"}
{"task_id": "Python/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "test": "def check(get_closest_vowel):\n\n    # Check some simple cases\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"full\") == \"u\"\n    assert get_closest_vowel(\"easy\") == \"\"\n    assert get_closest_vowel(\"eAsy\") == \"\"\n    assert get_closest_vowel(\"ali\") == \"\"\n    assert get_closest_vowel(\"bad\") == \"a\"\n    assert get_closest_vowel(\"most\") == \"o\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ba\") == \"\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"anime\") == \"i\"\n    assert get_closest_vowel(\"Asia\") == \"\"\n    assert get_closest_vowel(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(get_closest_vowel)", "text": "    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"", "declaration": "def get_closest_vowel(word):\n", "example_test": "def check(get_closest_vowel):\n    # Check some simple cases\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"quick\") == \"\"\ncheck(get_closest_vowel)\n", "code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80get_closest_vowel_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 633, 12704, 267, 2273, 67057, 152069, 153011, 151983, 3409, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 264, 3409, 13, 4615, 3383, 374, 311, 1477, 279, 18093, 76181, 429, 13352, 1948, 715, 262, 1378, 77505, 1783, 504, 279, 1290, 3108, 315, 279, 3409, 320, 5638, 16216, 4292, 1066, 262, 647, 363, 2010, 304, 279, 7167, 323, 13391, 3171, 944, 1760, 13, 3411, 4287, 914, 421, 498, 3207, 944, 198, 262, 1477, 894, 76181, 2270, 279, 3403, 2971, 13, 4710, 262, 1446, 1231, 9658, 429, 279, 2661, 914, 5610, 6364, 6524, 1172, 382, 262, 13383, 510, 262, 633, 12704, 267, 2273, 67057, 445, 88, 538, 5639, 899, 32296, 330, 84, 698, 262, 633, 12704, 267, 2273, 67057, 445, 51649, 899, 32296, 330, 52, 698, 262, 633, 12704, 267, 2273, 67057, 445, 27763, 899, 32296, 8389, 262, 633, 12704, 267, 2273, 67057, 445, 370, 899, 32296, 8389, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 78456, 151887, 330, 5918, 98255, 13669, 3810, 52, 1, 151666, 152208, 152677, 152929, 152891, 152440, 77505, 1783, 151887, 330, 8904, 2940, 866, 73, 10561, 76, 6199, 61739, 34431, 28854, 4897, 5262, 44676, 70518, 26227, 70592, 53, 70226, 1, 151666, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 152780, 152071, 220, 16, 153001, 152228, 220, 15, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152191, 152412, 151793, 152412, 152749, 151696, 152339, 152602, 3409, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152607, 152528, 78456, 152361, 152857, 152983, 151696, 152339, 152602, 3409, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152622, 152607, 152528, 77505, 1783, 152361, 152857, 152983, 151696, 152339, 152602, 3409, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 152622, 152607, 152528, 77505, 1783, 152361, 152380, 152451, 152819, 151886, 152480, 152339, 152602, 3409, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 151953, 152415, 151953, 152996, 151886, 152926, 1591, 151666, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80owel_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80\u0120vowel_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120stands_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ants_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80\u0120sensitive_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120V_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120beginning_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120ending_ter\ud83d\ude80^\ud83d\ude80\u0120doesn_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120didn_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120vowel_ter\ud83d\ude80^\ud83d\ude80\u0120met_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120above_ter\ud83d\ude80^\ud83d\ude80\u0120condition_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120assume_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120English_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80owel_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80og_ter\ud83d\ude80^\ud83d\ude80urt_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80u_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80owel_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80FULL_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80owel_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80quick_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_close_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80_v_ter\ud83d\ude80^\ud83d\ude80owel_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ae_ter\ud83d\ude80^\ud83d\ude80iou_ter\ud83d\ude80^\ud83d\ude80AE_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ants_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80bc_ter\ud83d\ude80^\ud83d\ude80df_ter\ud83d\ude80^\ud83d\ude80gh_ter\ud83d\ude80^\ud83d\ude80j_ter\ud83d\ude80^\ud83d\ude80kl_ter\ud83d\ude80^\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80np_ter\ud83d\ude80^\ud83d\ude80qrst_ter\ud83d\ude80^\ud83d\ude80vw_ter\ud83d\ude80^\ud83d\ude80xyz_ter\ud83d\ude80^\ud83d\ude80BC_ter\ud83d\ude80^\ud83d\ude80DF_ter\ud83d\ude80^\ud83d\ude80GH_ter\ud83d\ude80^\ud83d\ude80JKLM_ter\ud83d\ude80^\ud83d\ude80NP_ter\ud83d\ude80^\ud83d\ude80QRST_ter\ud83d\ude80^\ud83d\ude80V_ter\ud83d\ude80^\ud83d\ude80WXYZ_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vowels_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ants_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120conson_ter\ud83d\ude80^\ud83d\ude80ants_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_closest_vowel ( word ) : \n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\" \n    vowels = \"aeiouAEIOU\" \n    \n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\" \n    \n    for i in range ( len ( word ) - 1 , 0 , - 1 ) : \n        if word [ i ] in vowels and word [ i - 1 ] in consonants and word [ i - 2 ] in consonants : \n            return word [ i - 1 ] \n        \n    \n    return \"\" \n\n"}
{"task_id": "Python/119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "test": "def check(match_parens):\n\n    # Check some simple cases\n    assert match_parens(['()(', ')']) == 'Yes'\n    assert match_parens([')', ')']) == 'No'\n    assert match_parens(['(()(())', '())())']) == 'No'\n    assert match_parens([')())', '(()()(']) == 'Yes'\n    assert match_parens(['(())))', '(()())((']) == 'Yes'\n    assert match_parens(['()', '())']) == 'No'\n    assert match_parens(['(()(', '()))()']) == 'Yes'\n    assert match_parens(['((((', '((())']) == 'No'\n    assert match_parens([')(()', '(()(']) == 'No'\n    assert match_parens([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert match_parens(['(', ')']) == 'Yes'\n    assert match_parens([')', '(']) == 'Yes'\n\ncheck(match_parens)", "text": "    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'", "declaration": "def match_parens(lst):\n", "example_test": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\ndef check(match_parens):\n    # Check some simple cases\n    assert match_parens(['()(', ')']) == 'Yes'\n    assert match_parens([')', ')']) == 'No'\ncheck(match_parens)\n", "code": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80match_parens_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2432, 620, 546, 4412, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 1446, 525, 2661, 264, 1140, 315, 1378, 9069, 11, 2176, 9069, 6685, 315, 1787, 198, 262, 73975, 37880, 476, 3265, 73975, 79375, 1172, 624, 262, 4615, 2618, 374, 311, 1779, 421, 432, 374, 3204, 311, 77784, 279, 1378, 9069, 304, 198, 262, 1045, 1973, 11, 429, 279, 12942, 914, 686, 387, 1661, 624, 262, 362, 914, 328, 374, 6509, 311, 387, 1661, 421, 323, 1172, 421, 678, 73975, 304, 328, 198, 262, 525, 23831, 13, 1752, 3110, 25, 279, 914, 22022, 2140, 79255, 374, 1661, 11, 1393, 279, 914, 198, 262, 364, 2140, 6, 374, 537, 624, 262, 3411, 364, 9454, 6, 421, 1052, 594, 264, 1616, 311, 1281, 264, 1661, 914, 11, 323, 470, 364, 2753, 6, 5937, 382, 262, 25311, 510, 262, 2432, 620, 546, 4412, 6425, 368, 13749, 16667, 5078, 621, 364, 9454, 1248, 262, 2432, 620, 546, 4412, 6425, 18733, 16667, 5078, 621, 364, 2753, 1248, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 44781, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152929, 152891, 152440, 8172, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 151683, 152461, 37880, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 8172, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 8172, 151962, 152071, 220, 16, 152208, 151953, 152996, 152415, 151923, 152557, 152592, 152583, 152528, 8172, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152029, 152528, 8172, 152622, 151683, 152114, 220, 15, 152361, 151953, 152996, 152677, 152929, 152891, 152440, 1156, 153081, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 18845, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152208, 152677, 152929, 152891, 152440, 2086, 153081, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 18845, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152208, 151886, 152840, 152862, 364, 9454, 6, 151666, 152476, 152653, 152412, 153101, 151879, 151845, 374, 44781, 152831, 152128, 152430, 1156, 151703, 151740, 151742, 152911, 151879, 151845, 374, 44781, 152831, 152128, 152430, 2086, 151703, 151740, 152641, 152862, 364, 2753, 6, 151666, 152106, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80are_ter\ud83d\ude80^\ud83d\ude80ns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120both_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120consist_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120open_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120parentheses_ter\ud83d\ude80^\ud83d\ude80\u0120'('_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120close_ter\ud83d\ude80^\ud83d\ude80\u0120parentheses_ter\ud83d\ude80^\ud83d\ude80\u0120')'_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120job_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120possible_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120concatenate_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120some_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120resulting_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120good_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120S_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120considered_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120good_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120parentheses_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120S_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120balanced_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120'(_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80()'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120good_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120while_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80())_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Yes_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120way_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120make_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120good_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80are_ter\ud83d\ude80^\ud83d\ude80ns_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80()_ter\ud83d\ude80^\ud83d\ude80(',_ter\ud83d\ude80^\ud83d\ude80\u0120')_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Yes_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80_p_ter\ud83d\ude80^\ud83d\ude80are_ter\ud83d\ude80^\ud83d\ude80ns_ter\ud83d\ude80^\ud83d\ude80(['_ter\ud83d\ude80^\ud83d\ude80)',_ter\ud83d\ude80^\ud83d\ude80\u0120')_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_good_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'('_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120balance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Yes_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_good_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_good_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def match_parens ( lst ) : \n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    ''' \n    def is_good ( s ) : \n        balance = 0 \n        \n        for char in s : \n            if char == '(' : \n                balance += 1 \n            else : \n                balance -= 1 \n            \n            if balance < 0 : \n                return False \n            \n        \n        return balance == 0 \n    \n    first = lst [ 0 ] + lst [ 1 ] \n    \n    second = lst [ 1 ] + lst [ 0 ] \n    \n    return 'Yes' if is_good ( first ) or is_good ( second ) else 'No' \n\n"}
{"task_id": "Python/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": "def check(maximum):\n\n    # Check some simple cases\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert maximum([1, 0, 5, -7], 1) == [5]\n    assert maximum([4, -4], 2) == [-4, 4]\n    assert maximum([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert maximum([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ncheck(maximum)", "text": "    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)", "declaration": "def maximum(arr, k):\n", "example_test": "def check(maximum):\n    # Check some simple cases\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\ncheck(maximum)\n", "code": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80maximum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 7192, 152069, 153011, 151983, 2890, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 458, 1334, 2890, 315, 25780, 323, 264, 6785, 7546, 595, 11, 470, 264, 10615, 1140, 715, 262, 315, 3084, 595, 448, 279, 7192, 595, 5109, 304, 2890, 382, 262, 13383, 220, 16, 1447, 286, 5571, 25, 2890, 284, 10055, 18, 11, 481, 19, 11, 220, 20, 1125, 595, 284, 220, 18, 198, 286, 9258, 25, 10055, 19, 11, 481, 18, 11, 220, 20, 2533, 262, 13383, 220, 17, 1447, 286, 5571, 25, 2890, 284, 508, 19, 11, 481, 19, 11, 220, 19, 1125, 595, 284, 220, 17, 198, 286, 9258, 25, 508, 19, 11, 220, 19, 2533, 262, 13383, 220, 18, 1447, 286, 5571, 25, 2890, 284, 10055, 18, 11, 220, 17, 11, 220, 16, 11, 220, 17, 11, 481, 16, 11, 481, 17, 11, 220, 16, 1125, 595, 284, 220, 16, 198, 286, 9258, 25, 508, 17, 2533, 262, 7036, 510, 286, 220, 16, 13, 576, 3084, 315, 279, 1334, 686, 387, 304, 279, 2088, 315, 508, 16, 11, 220, 16, 15, 15, 15, 26126, 286, 220, 17, 13, 576, 5424, 304, 279, 1334, 686, 387, 304, 279, 2088, 315, 10055, 16, 15, 15, 15, 11, 220, 16, 15, 15, 15, 26126, 286, 220, 18, 13, 220, 15, 2651, 595, 2651, 2422, 10939, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 595, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 151948, 153062, 152222, 151847, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 595, 152622, 152927, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152361, 152380, 152451, 152819, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 2890, 151703, 151740, 151953, 152415, 152677, 152929, 152891, 152440, 30581, 11210, 152474, 152817, 153002, 151870, 152913, 152785, 1044, 152968, 152785, 7187, 151958, 152717, 152996, 152673, 152581, 152899, 152731, 151810, 7187, 152554, 151810, 1044, 152455, 151918, 152237, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 2890, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 30581, 11210, 152411, 3378, 152831, 152128, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152996, 153001, 152076, 152695, 151792, 9931, 151862, 153046, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1909, 4698, 22801, 152955, 152339, 152602, 30581, 11210, 151684, 152771, 152503, 152121, 152539, 595, 152085, 151773, 152987, 151773, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1909, 4698, 22801, 152411, 3378, 152831, 152128, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 152846, 152339, 152602, 856, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152996, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152474, 152817, 153002, 152396, 1044, 152996, 152673, 152581, 152899, 152731, 151810, 1044, 152554, 151810, 7187, 152455, 151918, 152237, 152370, 1909, 4698, 22801, 151764, 151868, 152329, 152208, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80].\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80].\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80(arr_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120indexed_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120idx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120idx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120indexed_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120top_ter\ud83d\ude80^\ud83d\ude80_k_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120indexed_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120top_ter\ud83d\ude80^\ud83d\ude80_k_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120idx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120top_ter\ud83d\ude80^\ud83d\ude80_k_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def maximum ( arr , k ) : \n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\" \n    if k == 0 : \n        return [ ] \n    \n    if k >= len ( arr ) : \n        return sorted ( arr ) \n    \n    indexed_arr = [ ( val , idx ) for idx , val in enumerate ( arr ) ] \n    \n    indexed_arr . sort ( key = lambda x : x [ 0 ] , reverse = True ) \n    top_k_elements = indexed_arr [ : k ] \n    \n    top_k_elements . sort ( key = lambda x : x [ 1 ] ) \n    result = [ val for val , idx in top_k_elements ] \n    \n    return result \n\n"}
{"task_id": "Python/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(solution):\n\n    # Check some simple cases\n    assert solution([5, 8, 7, 1])    == 12\n    assert solution([3, 3, 3, 3, 3]) == 9\n    assert solution([30, 13, 24, 321]) == 0\n    assert solution([5, 9]) == 5\n    assert solution([2, 4, 8]) == 0\n    assert solution([30, 13, 23, 32]) == 23\n    assert solution([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\ncheck(solution)", "text": "    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0", "declaration": "def solution(lst):\n", "example_test": "def check(solution):\n    # Check some simple cases\n    assert solution([5, 8, 7, 1])    == 12\n    assert solution([3, 3, 3, 3, 3]) == 9\n    assert solution([30, 13, 24, 321]) == 0\n    # Check some edge cases that are easy to work out by hand.\ncheck(solution)\n", "code": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80solution_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 6291, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 2477, 39433, 1140, 315, 25780, 11, 470, 279, 2629, 315, 678, 315, 279, 10322, 5424, 429, 525, 304, 1496, 9892, 624, 14808, 262, 25311, 198, 262, 6291, 2561, 20, 11, 220, 23, 11, 220, 22, 11, 220, 16, 2467, 32296, 220, 16, 17, 198, 262, 6291, 2561, 18, 11, 220, 18, 11, 220, 18, 11, 220, 18, 11, 220, 18, 2467, 32296, 220, 24, 198, 262, 6291, 2561, 18, 15, 11, 220, 16, 18, 11, 220, 17, 19, 11, 220, 18, 17, 16, 2467, 32296, 15, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2629, 74668, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 15, 153001, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 153001, 152228, 220, 17, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152441, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 74668, 152936, 152955, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2629, 74668, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120solution_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-empty_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120solution_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120solution_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120solution_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def solution ( lst ) : \n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\" \n    sum_odd = 0 \n    \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 != 0 : \n            sum_odd += lst [ i ] \n        \n    \n    return sum_odd \n\n"}
{"task_id": "Python/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "test": "def check(add_elements):\n\n    # Check some simple cases\n    assert add_elements([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert add_elements([111,121,3,4000,5,6], 2) == 0\n    assert add_elements([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert add_elements([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(add_elements)", "text": "    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "declaration": "def add_elements(arr, k):\n", "example_test": "def check(add_elements):\n    # Check some simple cases\n    assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\ncheck(add_elements)\n", "code": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80add_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 912, 22801, 152069, 153011, 151983, 2890, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 2477, 39433, 1334, 315, 25780, 2890, 323, 458, 7546, 595, 11, 470, 198, 262, 279, 2629, 315, 279, 5424, 448, 518, 1429, 1378, 18509, 504, 279, 1156, 595, 5424, 315, 2890, 382, 262, 13383, 1447, 286, 5571, 25, 2890, 284, 508, 16, 16, 16, 11, 17, 16, 11, 18, 11, 19, 15, 15, 15, 11, 20, 11, 21, 11, 22, 11, 23, 11, 24, 1125, 595, 284, 220, 19, 198, 286, 9258, 25, 220, 17, 19, 671, 2629, 315, 220, 17, 16, 488, 220, 18, 271, 262, 87473, 510, 286, 220, 16, 13, 220, 16, 2651, 2422, 10939, 8, 2651, 220, 16, 15, 15, 198, 286, 220, 17, 13, 220, 16, 2651, 595, 2651, 2422, 10939, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2629, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 595, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 1629, 152911, 151879, 151845, 3647, 152831, 152128, 151697, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152668, 152114, 220, 16, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152955, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1629, 152622, 152668, 152114, 220, 16, 15, 15, 152361, 152819, 152677, 153037, 152682, 152440, 2629, 152936, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 151764, 152194, 152734, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 2629, 152936, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 1629, 151703, 151740, 151764, 152194, 152734, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 2629, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80_elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-empty_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120most_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Constraints_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80(arr_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80(arr_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add_elements ( arr , k ) : \n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\" \n    sum = 0 \n    \n    for i in range ( k ) : \n        num = abs ( arr [ i ] ) \n        \n        if num < 10 : \n            sum += arr [ i ] \n        elif num < 100 : \n            sum += sum ( int ( digit ) for digit in str ( num ) ) \n        else : \n            sum += sum ( int ( digit ) for digit in str ( num ) ) \n        \n    \n    return sum \n\n"}
{"task_id": "Python/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "test": "def check(get_odd_collatz):\n\n    # Check some simple cases\n    assert get_odd_collatz(14) == [1, 5, 7, 11, 13, 17]\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert get_odd_collatz(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(get_odd_collatz)", "text": "    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "declaration": "def get_odd_collatz(n):\n", "example_test": "def check(get_odd_collatz):\n    # Check some simple cases\n    assert get_odd_collatz(5) == [1, 5]\ncheck(get_odd_collatz)\n", "code": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80get_odd_collatz_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 633, 74668, 43597, 20175, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 6785, 7546, 308, 11, 470, 264, 10615, 1140, 429, 702, 279, 10322, 5109, 304, 4530, 20175, 8500, 382, 262, 576, 12905, 20175, 85915, 552, 374, 264, 85915, 552, 304, 37596, 429, 10520, 264, 8500, 4512, 198, 262, 438, 11017, 25, 1191, 448, 894, 6785, 7546, 308, 13, 5005, 1817, 4647, 374, 12180, 504, 279, 715, 262, 3681, 4647, 438, 11017, 25, 421, 279, 3681, 4647, 374, 1496, 11, 279, 1790, 4647, 374, 825, 4279, 315, 715, 262, 279, 3681, 4647, 13, 1416, 279, 3681, 4647, 374, 10322, 11, 279, 1790, 4647, 374, 220, 18, 3039, 279, 3681, 198, 262, 4647, 5519, 220, 16, 13, 576, 85915, 552, 374, 429, 902, 4925, 1128, 897, 315, 308, 11, 279, 8500, 686, 2677, 5545, 220, 16, 382, 262, 7036, 25, 715, 286, 220, 16, 13, 12905, 20175, 7, 16, 8, 374, 508, 16, 26126, 286, 220, 17, 13, 5927, 1140, 10615, 304, 7703, 1973, 382, 262, 1752, 3110, 510, 262, 633, 74668, 43597, 20175, 7, 20, 8, 4675, 508, 16, 11, 220, 20, 60, 671, 576, 4530, 20175, 8500, 369, 220, 20, 374, 508, 20, 11, 220, 16, 21, 11, 220, 23, 11, 220, 19, 11, 220, 17, 11, 220, 16, 1125, 773, 279, 10322, 5109, 525, 1172, 220, 16, 11, 323, 220, 20, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 8500, 152445, 153062, 153088, 220, 16, 152222, 151847, 152208, 152067, 152685, 152583, 152528, 308, 152622, 152238, 152114, 220, 16, 152361, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 308, 153081, 152456, 152440, 308, 152542, 152071, 220, 17, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152929, 152891, 152440, 308, 153081, 152456, 152321, 152456, 152468, 220, 18, 151894, 152370, 308, 152328, 152071, 220, 16, 152208, 151953, 152996, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 8500, 152411, 8737, 152831, 152128, 152430, 308, 151703, 151740, 152208, 151953, 152996, 152677, 152929, 152891, 152440, 10322, 32964, 152474, 152817, 153002, 152396, 1629, 152996, 152673, 152581, 152899, 152440, 1629, 151918, 152237, 152370, 8500, 151764, 151880, 152257, 152988, 152456, 152440, 1629, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 151868, 152329, 152208, 151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 10322, 32964, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80_coll_ter\ud83d\ude80^\ud83d\ude80atz_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120coll_ter\ud83d\ude80^\ud83d\ude80atz_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120Coll_ter\ud83d\ude80^\ud83d\ude80atz_ter\ud83d\ude80^\ud83d\ude80\u0120conject_ter\ud83d\ude80^\ud83d\ude80ure_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120conject_ter\ud83d\ude80^\ud83d\ude80ure_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120mathematics_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120concerns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120defined_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120follows_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Then_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120obtained_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120previous_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120follows_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120previous_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120half_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120previous_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120previous_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120times_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120previous_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120term_ter\ud83d\ude80^\ud83d\ude80\u0120plus_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120conject_ter\ud83d\ude80^\ud83d\ude80ure_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120matter_ter\ud83d\ude80^\ud83d\ude80\u0120what_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120reach_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Coll_ter\ud83d\ude80^\ud83d\ude80atz_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80].\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120returned_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80_coll_ter\ud83d\ude80^\ud83d\ude80atz_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120coll_ter\ud83d\ude80^\ud83d\ude80atz_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120so_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_odd_collatz ( n ) : \n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\" \n    sequence = [ 1 ] \n    \n    while n != 1 : \n        if n % 2 == 0 : \n            n = n // 2 \n            \n        else : \n            n = 3 * n + 1 \n            \n        \n        sequence . append ( n ) \n    \n    odd_numbers = [ num for num in sequence if num % 2 != 0 ] \n    \n    return sorted ( odd_numbers ) \n\n"}
{"task_id": "Python/124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "test": "def check(valid_date):\n\n    # Check some simple cases\n    assert valid_date('03-11-2000') == True\n\n    assert valid_date('15-01-2012') == False\n\n    assert valid_date('04-0-2040') == False\n\n    assert valid_date('06-04-2020') == True\n\n    assert valid_date('01-01-2007') == True\n\n    assert valid_date('03-32-2011') == False\n\n    assert valid_date('') == False\n\n    assert valid_date('04-31-3000') == False\n\n    assert valid_date('06-06-2005') == True\n\n    assert valid_date('21-31-2000') == False\n\n    assert valid_date('04-12-2003') == True\n\n    assert valid_date('04122003') == False\n\n    assert valid_date('20030412') == False\n\n    assert valid_date('2003-04') == False\n\n    assert valid_date('2003-04-12') == False\n\n    assert valid_date('04-2003') == False\n\ncheck(valid_date)", "text": "    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False", "declaration": "def valid_date(date):\n", "example_test": "def check(valid_date):\n    # Check some simple cases\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\ncheck(valid_date)\n", "code": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80valid_date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2697, 4164, 152069, 153011, 151983, 2400, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 614, 311, 3270, 264, 729, 892, 26257, 264, 2661, 2400, 914, 323, 198, 262, 4675, 3007, 421, 279, 2400, 374, 2697, 5937, 3557, 624, 262, 576, 2400, 374, 2697, 421, 678, 315, 279, 2701, 5601, 525, 19527, 510, 262, 220, 16, 13, 576, 2400, 914, 374, 537, 4287, 624, 262, 220, 17, 13, 576, 1372, 315, 2849, 374, 537, 2686, 1091, 220, 16, 476, 5080, 1091, 220, 18, 16, 2849, 369, 3951, 220, 16, 11, 18, 11, 20, 11, 22, 11, 23, 11, 16, 15, 11, 16, 17, 13, 1597, 279, 1372, 315, 2849, 374, 537, 2686, 1091, 220, 16, 476, 5080, 1091, 220, 18, 15, 2849, 369, 3951, 220, 19, 11, 21, 11, 24, 11, 16, 16, 13, 1597, 11, 279, 1372, 315, 2849, 374, 537, 2686, 1091, 220, 16, 476, 5080, 1091, 220, 17, 24, 369, 279, 2254, 220, 17, 624, 262, 220, 18, 13, 576, 3951, 1265, 537, 387, 2686, 1091, 220, 16, 476, 5080, 1091, 220, 16, 17, 624, 262, 220, 19, 13, 576, 2400, 1265, 387, 304, 279, 3561, 25, 9465, 21541, 75391, 271, 262, 369, 3110, 25, 715, 262, 2697, 4164, 492, 15, 18, 12, 16, 16, 12, 17, 15, 15, 15, 863, 589, 3007, 271, 262, 2697, 4164, 492, 16, 20, 12, 15, 16, 12, 17, 15, 16, 17, 863, 589, 3557, 271, 262, 2697, 4164, 492, 15, 19, 12, 15, 12, 17, 15, 19, 15, 863, 589, 3557, 271, 262, 2697, 4164, 492, 15, 21, 12, 15, 19, 12, 17, 15, 17, 15, 863, 589, 3007, 271, 262, 2697, 4164, 492, 15, 21, 14, 15, 19, 14, 17, 15, 17, 15, 863, 589, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 2400, 152622, 151683, 152461, 1591, 151666, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152949, 152934, 152428, 152419, 151876, 152677, 152929, 152891, 152731, 151810, 2254, 152554, 151810, 1899, 152554, 151810, 1042, 152455, 152911, 151879, 151845, 2415, 152831, 152128, 152430, 526, 153001, 151865, 151879, 153033, 152036, 152136, 2400, 152411, 6718, 152831, 152128, 152928, 20672, 151666, 151703, 151740, 151703, 151740, 152208, 151953, 152996, 151849, 152385, 15402, 151886, 152116, 152488, 151953, 151854, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 2254, 152622, 152668, 152114, 220, 16, 152361, 151742, 152983, 152528, 2254, 152622, 152706, 152114, 220, 16, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 1899, 152622, 152668, 152114, 220, 16, 152361, 151742, 152983, 152528, 1899, 152622, 152706, 152114, 220, 18, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 2254, 152622, 152607, 152835, 153062, 153088, 220, 19, 152793, 153088, 220, 21, 152793, 153088, 220, 24, 152793, 153088, 220, 16, 16, 152222, 151847, 152361, 152857, 152983, 152528, 1899, 152622, 152706, 152114, 220, 18, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151923, 152557, 152592, 152583, 152528, 2254, 152622, 151683, 152114, 220, 17, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152191, 152412, 151839, 151708, 152412, 152749, 152988, 152456, 152440, 1042, 151702, 152071, 220, 19, 152622, 151683, 152114, 220, 15, 152361, 152857, 152983, 152988, 152456, 152440, 1042, 151702, 152071, 220, 16, 15, 15, 152622, 152238, 152114, 220, 15, 152361, 151742, 152879, 152733, 152988, 152456, 152440, 1042, 151702, 152071, 220, 19, 15, 15, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 152528, 1899, 152622, 152706, 152114, 220, 17, 24, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152221, 152729, 152515, 151876, 151923, 152557, 152592, 152583, 152528, 1899, 152622, 152706, 152114, 220, 17, 23, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 152415, 151953, 152415, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120validates_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120following_ter\ud83d\ude80^\ud83d\ude80\u0120rules_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120satisfied_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120days_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120higher_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120days_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120months_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120And_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120days_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120higher_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120days_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120months_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120And_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120days_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120higher_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120months_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120higher_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120mm_ter\ud83d\ude80^\ud83d\ude80-dd_ter\ud83d\ude80^\ud83d\ude80-yyyy_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80_date_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80try_statement_py\ud83d\ude80try_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120year_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80except_clause_py\ud83d\ude80except_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ValueError_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120year_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120year_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120year_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def valid_date ( date ) : \n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\" \n    if date == \"\" : \n        return False \n    \n    try : \n        month , day , year = map ( int , date . split ( '-' ) ) \n        \n    except ValueError : \n        return False \n    \n    if month < 1 or month > 12 : \n        return False \n    \n    if day < 1 or day > 31 : \n        return False \n    \n    if month in [ 4 , 6 , 9 , 11 ] and day > 30 : \n        return False \n    \n    if month == 2 : \n        if ( year % 4 == 0 and year % 100 != 0 ) or ( year % 400 == 0 ) : \n            if day > 29 : \n                return False \n            \n        else : \n            if day > 28 : \n                return False \n            \n        \n    \n    return True \n\n"}
{"task_id": "Python/125", "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "test": "def check(split_words):\n\n    assert split_words(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert split_words(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert split_words(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert split_words(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert split_words(\"abcdef\") == 3\n    assert split_words(\"aaabb\") == 2\n    assert split_words(\"aaaBb\") == 1\n    assert split_words(\"\") == 0\n\ncheck(split_words)", "text": "    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3", "declaration": "def split_words(txt):\n", "example_test": "def check(split_words):\n    assert split_words(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert split_words(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert split_words(\"abcdef\") == 3\ncheck(split_words)\n", "code": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80split_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 6718, 18981, 152069, 153011, 151983, 7932, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 16246, 264, 914, 315, 4244, 11, 470, 264, 1140, 315, 4244, 6718, 389, 36372, 11, 421, 902, 21874, 27338, 6724, 304, 279, 1467, 498, 198, 262, 1265, 6718, 389, 76602, 22262, 421, 902, 76602, 6724, 498, 1265, 470, 279, 1372, 315, 4722, 38485, 11931, 448, 10322, 1973, 304, 279, 198, 262, 27790, 11, 6013, 492, 64, 863, 284, 220, 15, 11, 6013, 492, 65, 863, 284, 220, 16, 11, 2503, 6013, 492, 89, 863, 284, 220, 17, 20, 198, 262, 25311, 198, 262, 6718, 18981, 445, 9707, 1879, 88783, 82706, 252, 4383, 9707, 497, 330, 14615, 0, 7026, 262, 6718, 18981, 445, 9707, 11, 14615, 88783, 82706, 252, 4383, 9707, 497, 330, 14615, 0, 7026, 262, 6718, 18981, 445, 41202, 899, 621, 220, 18, 715, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152461, 330, 330, 151666, 152622, 152607, 152528, 7932, 152361, 152380, 152451, 152819, 151886, 151816, 151879, 153033, 152036, 152136, 7932, 152411, 6718, 152831, 152128, 151703, 151740, 151953, 152221, 151968, 152103, 152583, 152461, 15553, 151666, 152622, 152607, 152528, 7932, 152361, 152819, 151886, 151816, 151879, 153033, 152036, 152136, 7932, 152411, 6718, 152831, 152128, 152928, 15553, 151666, 151703, 151740, 151953, 152221, 152729, 152515, 151876, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 1161, 151918, 152237, 152370, 7932, 151764, 152355, 152390, 152412, 153101, 151879, 153033, 152036, 152136, 1161, 152411, 374, 14772, 152831, 152128, 151703, 151740, 152857, 152983, 152988, 152456, 151839, 152925, 152456, 153101, 151879, 151845, 6013, 152831, 152128, 152430, 1161, 151703, 151740, 152780, 152911, 151879, 151845, 6013, 152831, 152128, 152928, 364, 64, 6, 151666, 151703, 151740, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 16, 152361, 152194, 152734, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120whitespace_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120whites_ter\ud83d\ude80^\ud83d\ude80paces_ter\ud83d\ude80^\ud83d\ude80\u0120exists_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120commas_ter\ud83d\ude80^\ud83d\ude80\u0120','_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120commas_ter\ud83d\ude80^\ud83d\ude80\u0120exists_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80-case_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120..._ter\ud83d\ude80^\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\u0120world_ter\ud83d\ude80^\ud83d\ude80!\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80world_ter\ud83d\ude80^\ud83d\ude80!_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80world_ter\ud83d\ude80^\ud83d\ude80!\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80world_ter\ud83d\ude80^\ud83d\ude80!_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80abcdef_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def split_words ( txt ) : \n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    ''' \n    if \" \" in txt : \n        return txt . split ( ) \n    elif \",\" in txt : \n        return txt . split ( \",\" ) \n    else : \n        return sum ( 1 for char in txt if char . islower ( ) and ( ord ( char ) - ord ( 'a' ) ) % 2 == 1 ) \n    \n\n"}
{"task_id": "Python/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": "def check(is_sorted):\n\n    # Check some simple cases\n    assert is_sorted([5]) == True\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n    assert is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_sorted([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert is_sorted([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert is_sorted([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert is_sorted([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert is_sorted([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\ncheck(is_sorted)", "text": "    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False", "declaration": "def is_sorted(lst):\n", "example_test": "def check(is_sorted):\n    # Check some simple cases\n    assert is_sorted([5]) == True\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n    assert is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\ncheck(is_sorted)\n", "code": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 41277, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 16246, 264, 1140, 315, 5109, 11, 470, 3425, 476, 537, 807, 525, 10615, 198, 262, 304, 35388, 1973, 13, 1416, 1140, 702, 803, 1091, 220, 16, 22513, 315, 279, 1852, 198, 262, 1372, 11, 470, 3557, 13, 62197, 902, 8225, 5109, 323, 1172, 25780, 382, 262, 25311, 198, 262, 374, 41277, 2561, 20, 2467, 82706, 252, 3007, 198, 262, 374, 41277, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 2467, 82706, 252, 3007, 198, 262, 374, 41277, 2561, 16, 11, 220, 18, 11, 220, 17, 11, 220, 19, 11, 220, 20, 2467, 82706, 252, 3557, 198, 262, 374, 41277, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 11, 220, 21, 2467, 82706, 252, 3007, 198, 262, 374, 41277, 2561, 16, 11, 220, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 11, 220, 21, 11, 220, 22, 2467, 82706, 252, 3007, 198, 262, 374, 41277, 2561, 16, 11, 220, 18, 11, 220, 17, 11, 220, 19, 11, 220, 20, 11, 220, 21, 11, 220, 22, 2467, 82706, 252, 3557, 198, 262, 374, 41277, 2561, 16, 11, 220, 17, 11, 220, 17, 11, 220, 18, 11, 220, 18, 11, 220, 19, 2467, 82706, 252, 3007, 198, 262, 374, 41277, 2561, 16, 11, 220, 17, 11, 220, 17, 11, 220, 17, 11, 220, 18, 11, 220, 19, 2467, 82706, 252, 3557, 198, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 18845, 151703, 151740, 152780, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 18845, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152706, 151696, 152339, 152602, 18845, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120whether_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120they_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120duplicate_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Assume_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_sorted_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_sorted ( lst ) : \n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ''' \n    for i in range ( len ( lst ) - 1 ) : \n        if lst [ i ] > lst [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Python/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "test": "def check(intersection):\n\n    # Check some simple cases\n    assert intersection((1, 2), (2, 3)) == \"NO\"\n    assert intersection((-1, 1), (0, 4)) == \"NO\"\n    assert intersection((-3, -1), (-5, 5)) == \"YES\"\n    assert intersection((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert intersection((-11, 2), (-1, -1)) == \"NO\"\n    assert intersection((1, 2), (3, 5)) == \"NO\"\n    assert intersection((1, 2), (1, 2)) == \"NO\"\n    assert intersection((-2, -2), (-3, -2)) == \"NO\"\n\ncheck(intersection)", "text": "    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"", "declaration": "def intersection(interval1, interval2):\n", "example_test": "def check(intersection):\n    # Check some simple cases\n    assert intersection((1, 2), (2, 3)) == \"NO\"\n    assert intersection((-1, 1), (0, 4)) == \"NO\"\n    assert intersection((-3, -1), (-5, 5)) == \"YES\"\ncheck(intersection)\n", "code": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80interval1_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80interval2_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 19246, 152069, 153011, 151983, 9873, 16, 152297, 151983, 9873, 17, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 1378, 26992, 345, 262, 1380, 1817, 9873, 374, 264, 6716, 315, 25780, 13, 1752, 3110, 11, 9873, 284, 320, 2468, 11, 835, 8, 284, 320, 16, 11, 220, 17, 4292, 262, 576, 2661, 26992, 525, 7877, 892, 3363, 429, 279, 9873, 320, 2468, 11, 835, 340, 262, 5646, 2176, 1191, 323, 835, 624, 262, 1752, 1817, 2661, 9873, 11, 432, 374, 19110, 429, 1181, 1191, 374, 2686, 476, 6144, 1181, 835, 624, 262, 4615, 3383, 374, 311, 8253, 3425, 279, 3084, 315, 19246, 315, 1493, 1378, 715, 262, 26992, 374, 264, 10250, 1372, 624, 262, 13383, 11, 279, 19246, 315, 279, 26992, 320, 16, 11, 220, 18, 701, 320, 17, 11, 220, 19, 8, 374, 320, 17, 11, 220, 18, 340, 262, 892, 1181, 3084, 374, 220, 16, 11, 892, 537, 264, 10250, 1372, 624, 262, 1416, 279, 3084, 315, 279, 19246, 374, 264, 10250, 1372, 11, 470, 330, 14004, 756, 262, 5937, 11, 470, 330, 8996, 22956, 262, 1416, 279, 1378, 26992, 1513, 944, 31796, 11, 470, 330, 8996, 1, 4192, 262, 508, 1355, 47016, 60, 10469, 510, 262, 19246, 1188, 16, 11, 220, 17, 701, 320, 17, 11, 220, 18, 593, 32296, 330, 8996, 698, 262, 19246, 54934, 16, 11, 220, 16, 701, 320, 15, 11, 220, 19, 593, 32296, 330, 8996, 698, 262, 19246, 54934, 18, 11, 481, 16, 701, 10293, 20, 11, 220, 20, 593, 32296, 330, 14004, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 3973, 421, 264, 1372, 374, 10250, 74000, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152677, 152929, 152891, 152440, 1191, 152911, 151879, 151845, 1932, 152831, 152128, 151697, 152339, 152602, 9873, 16, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 153001, 151697, 152339, 152602, 9873, 17, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 835, 152911, 151879, 151845, 1308, 152831, 152128, 151697, 152339, 152602, 9873, 16, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 153001, 151697, 152339, 152602, 9873, 17, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 3084, 153081, 152456, 152440, 835, 152780, 152370, 1191, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 3084, 152622, 152706, 152114, 220, 15, 152361, 152857, 152911, 151879, 151845, 374, 38217, 152831, 152128, 152430, 3084, 151703, 151740, 152380, 152451, 152819, 151886, 152926, 330, 14004, 1, 151666, 151953, 152415, 151886, 152926, 330, 8996, 1, 151666, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120intervals_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80start_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120intervals_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120closed_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120means_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80start_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120includes_ter\ud83d\ude80^\ud83d\ude80\u0120both_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120assumed_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120determine_ter\ud83d\ude80^\ud83d\ude80\u0120whether_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120these_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120intervals_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120intervals_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80YES_ter\ud83d\ude80^\ud83d\ude80\",\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\".\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120intervals_ter\ud83d\ude80^\ud83d\ude80\u0120don_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80\u0120intersect_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude80input_ter\ud83d\ude80^\ud83d\ude80/output_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120samples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80((_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80))_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80((-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80))_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80((-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120(-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80))_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80YES_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120interval_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80YES_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80NO_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def intersection ( interval1 , interval2 ) : \n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\" \n    def is_prime ( n ) : \n        \"\"\"Check if a number is prime.\"\"\" \n        if n <= 1 : \n            return False \n        \n        for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n            if n % i == 0 : \n                return False \n            \n        \n        return True \n    \n    start = max ( interval1 [ 0 ] , interval2 [ 0 ] ) \n    \n    end = min ( interval1 [ 1 ] , interval2 [ 1 ] ) \n    \n    length = end - start \n    \n    if length > 0 and is_prime ( length ) : \n        return \"YES\" \n    \n    return \"NO\" \n\n"}
{"task_id": "Python/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "test": "def check(prod_signs):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert prod_signs([]) == None\n    assert prod_signs([2, 4,1, 2, -1, -1, 9]) == 20\n    assert prod_signs([-1, 1, -1, 1]) == 4\n    assert prod_signs([-1, 1, 1, 1]) == -4\n    assert prod_signs([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(prod_signs)", "text": "    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None", "declaration": "def prod_signs(arr):\n", "example_test": "def check(prod_signs):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None\ncheck(prod_signs)\n", "code": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80prod_signs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 14475, 11172, 82, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 525, 2661, 458, 1334, 2890, 315, 25780, 323, 498, 1184, 311, 470, 198, 262, 2629, 315, 8455, 20590, 315, 25780, 54916, 553, 1985, 315, 678, 11929, 198, 262, 315, 1817, 1372, 304, 279, 1334, 11, 15251, 553, 220, 16, 11, 481, 16, 476, 220, 15, 624, 262, 7036, 25, 470, 2240, 369, 4287, 2890, 382, 262, 13383, 510, 262, 12109, 14475, 11172, 82, 2561, 16, 11, 220, 17, 11, 220, 17, 11, 481, 19, 2467, 621, 481, 24, 198, 262, 12109, 14475, 11172, 82, 2561, 15, 11, 220, 16, 2467, 621, 220, 15, 198, 262, 12109, 14475, 11172, 82, 10556, 8, 621, 2240, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 2890, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152415, 152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 2629, 717, 3246, 20590, 152071, 220, 15, 152208, 152980, 152205, 152440, 1629, 152370, 2890, 151876, 152677, 152929, 152891, 152440, 1841, 152432, 152448, 220, 16, 152476, 152836, 152528, 1629, 152622, 152706, 152114, 220, 15, 152361, 152641, 152309, 151878, 152780, 152763, 220, 16, 152106, 152208, 152677, 153037, 152682, 152440, 1985, 153092, 152370, 1841, 152208, 152677, 153037, 152682, 152440, 2629, 717, 3246, 20590, 152936, 152911, 151879, 151845, 3647, 152831, 152128, 152430, 1629, 151703, 151740, 152208, 151953, 152996, 151886, 152331, 152456, 152440, 1985, 151894, 152370, 2629, 717, 3246, 20590, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80_sign_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120magn_ter\ud83d\ude80^\ud83d\ude80itudes_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120multiplied_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120signs_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120represented_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80_sign_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80_sign_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80_sign_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_m_ter\ud83d\ude80^\ud83d\ude80agn_ter\ud83d\ude80^\ud83d\ude80itudes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sign_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80conditional_expression_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sign_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_m_ter\ud83d\ude80^\ud83d\ude80agn_ter\ud83d\ude80^\ud83d\ude80itudes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_m_ter\ud83d\ude80^\ud83d\ude80agn_ter\ud83d\ude80^\ud83d\ude80itudes_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def prod_signs ( arr ) : \n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\" \n    if not arr : \n        return None \n    \n    product = 1 \n    \n    sum_magnitudes = 0 \n    \n    for num in arr : \n        sign = 1 if num > 0 else - 1 \n        \n        product *= sign \n        sum_magnitudes += abs ( num ) \n    \n    return product * sum_magnitudes \n\n"}
{"task_id": "Python/129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "test": "def check(minPath):\n\n    # Check some simple cases\n    print\n    assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert minPath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert minPath([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert minPath([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\ncheck(minPath)", "text": "    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]", "declaration": "def minPath(grid, k):\n", "example_test": "def check(minPath):\n    # Check some simple cases\n    print\n    assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\ncheck(minPath)\n", "code": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80minPath_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1308, 1820, 152069, 153011, 151983, 5827, 152297, 151983, 595, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 5827, 448, 451, 6978, 323, 451, 8147, 320, 45, 2604, 220, 17, 8, 323, 264, 6785, 7546, 595, 11, 715, 262, 1817, 2779, 315, 279, 5827, 5610, 264, 897, 13, 7209, 7546, 304, 279, 2088, 508, 16, 11, 451, 353, 451, 921, 262, 28308, 7952, 6896, 3055, 389, 279, 7761, 315, 279, 5827, 382, 262, 1446, 614, 311, 1477, 279, 8028, 1815, 315, 3084, 595, 304, 279, 5827, 13, 1446, 646, 1191, 198, 262, 504, 894, 2779, 11, 323, 304, 1817, 3019, 498, 646, 3271, 311, 894, 315, 279, 9565, 7761, 345, 262, 304, 1008, 4244, 11, 498, 646, 728, 311, 7761, 892, 4332, 458, 6821, 448, 498, 1482, 198, 262, 2779, 624, 262, 5209, 5185, 429, 264, 1815, 315, 3084, 595, 3363, 16721, 6896, 595, 7761, 320, 1921, 198, 262, 14312, 12460, 4292, 262, 1446, 356, 46875, 728, 1007, 279, 5827, 624, 262, 362, 1815, 362, 320, 1055, 3084, 595, 8, 374, 6509, 2686, 1091, 264, 1815, 425, 320, 1055, 3084, 595, 8, 421, 198, 262, 1283, 3259, 279, 11457, 11469, 315, 279, 2750, 389, 279, 7761, 429, 362, 323, 425, 728, 198, 262, 1526, 320, 1149, 594, 1618, 1105, 18845, 1566, 323, 18845, 1668, 701, 18845, 1566, 374, 512, 14331, 63931, 2686, 198, 262, 1091, 18845, 1668, 11, 304, 1008, 4244, 11, 1052, 3000, 458, 7546, 1922, 600, 320, 16, 2651, 600, 2651, 595, 340, 262, 1741, 429, 18845, 1566, 989, 60, 366, 18845, 1668, 989, 60, 323, 369, 894, 502, 320, 16, 2651, 502, 366, 600, 8, 582, 614, 198, 262, 18845, 1566, 3809, 60, 284, 18845, 1668, 3809, 26126, 262, 1084, 374, 19323, 429, 279, 4226, 374, 4911, 624, 262, 3411, 458, 11457, 1140, 315, 279, 2750, 389, 279, 7761, 429, 279, 8028, 1815, 728, 1526, 382, 262, 25311, 1447, 286, 5571, 25, 5827, 284, 508, 508, 16, 11, 17, 11, 18, 1125, 508, 19, 11, 20, 11, 21, 1125, 508, 22, 11, 23, 11, 24, 20492, 595, 284, 220, 18, 198, 286, 9258, 25, 508, 16, 11, 220, 17, 11, 220, 16, 2533, 286, 5571, 25, 5827, 284, 508, 508, 20, 11, 24, 11, 18, 1125, 508, 19, 11, 16, 11, 21, 1125, 508, 22, 11, 23, 11, 17, 20492, 595, 284, 220, 16, 198, 286, 9258, 25, 508, 16, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 308, 152911, 151879, 151845, 2422, 152831, 152128, 152430, 5827, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 17961, 152445, 153062, 152032, 152913, 152642, 220, 15, 152968, 152642, 220, 16, 151958, 152717, 152793, 152032, 152913, 152642, 220, 16, 152968, 152642, 220, 15, 151958, 152717, 152793, 152032, 152913, 152890, 151878, 152780, 152763, 220, 16, 152968, 152642, 220, 15, 151958, 152717, 152793, 152032, 152913, 152642, 220, 15, 152968, 152890, 151878, 152780, 152763, 220, 16, 151958, 152717, 152222, 151847, 152208, 152496, 152559, 151792, 25792, 152069, 153011, 151983, 856, 152297, 151983, 379, 152297, 151983, 1815, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 1815, 151703, 151740, 152622, 151683, 152528, 595, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151697, 152339, 152602, 1815, 151684, 152771, 152503, 152121, 152085, 151773, 152987, 151773, 151703, 151740, 152208, 151886, 152176, 151953, 152415, 152980, 152205, 152731, 151810, 13822, 152554, 151810, 13955, 152455, 152370, 17961, 151876, 152677, 152929, 152891, 152731, 151810, 24496, 152554, 151810, 19004, 152455, 152482, 151796, 152456, 152440, 856, 152328, 152370, 13822, 152192, 151796, 152456, 152440, 379, 152328, 152370, 13955, 151741, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152114, 220, 15, 152622, 152533, 152528, 24496, 152622, 152668, 152528, 308, 152361, 152857, 152983, 152114, 220, 15, 152622, 152533, 152528, 19004, 152622, 152668, 152528, 308, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 151845, 25792, 152831, 152128, 152430, 24496, 153001, 152430, 19004, 153001, 151766, 152456, 152440, 1815, 152328, 152445, 153062, 152295, 152339, 152344, 152339, 152602, 5827, 151684, 152771, 151881, 24496, 151773, 152987, 151773, 151684, 152771, 151881, 19004, 151773, 152987, 151773, 152222, 151847, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152677, 152082, 151879, 151845, 25792, 152831, 152128, 152430, 600, 153001, 152430, 502, 153001, 152284, 153062, 152295, 152339, 152344, 152339, 152602, 5827, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152222, 151847, 151703, 151740, 152208, 151953, 152996, 151953, 152996, 151886, 151816, 151879, 151845, 1308, 152831, 152128, 152430, 1102, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80Path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120rows_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120columns_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80N_ter\ud83d\ude80^\ud83d\ude80\u0120>=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120cell_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Every_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120inclusive_ter\ud83d\ude80^\ud83d\ude80\u0120appears_ter\ud83d\ude80^\ud83d\ude80\u0120exactly_ter\ud83d\ude80^\ud83d\ude80\u0120once_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120cells_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120cell_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120step_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120neighbor_ter\ud83d\ude80^\ud83d\ude80\u0120cells_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120go_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120cells_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120share_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120edge_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cell_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Please_ter\ud83d\ude80^\ud83d\ude80\u0120note_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120means_ter\ud83d\ude80^\ud83d\ude80\u0120visiting_ter\ud83d\ude80^\ud83d\ude80\u0120exactly_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120cells_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120necessarily_ter\ud83d\ude80^\ud83d\ude80\u0120distinct_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80ANNOT_ter\ud83d\ude80^\ud83d\ude80\u0120go_ter\ud83d\ude80^\ud83d\ude80\u0120off_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120considered_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120after_ter\ud83d\ude80^\ud83d\ude80\u0120making_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120ordered_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120cells_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80\u0120go_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120through_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80let_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120call_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_B_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120le_ter\ud83d\ude80^\ud83d\ude80xic_ter\ud83d\ude80^\ud83d\ude80ographically_ter\ud83d\ude80^\ud83d\ude80\u0120less_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_B_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120exist_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120<_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_B_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80\u0120<_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120we_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_A_ter\ud83d\ude80^\ud83d\ude80[j_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80_B_ter\ud83d\ude80^\ud83d\ude80[j_ter\ud83d\ude80^\ud83d\ude80].\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120It_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120guaranteed_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120answer_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120ordered_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120cells_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80\u0120go_ter\ud83d\ude80^\ud83d\ude80\u0120through_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80]],_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80]],_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120directions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dfs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dy_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120directions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ny_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dy_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ny_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dfs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ny_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nx_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ny_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dfs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120grid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def minPath ( grid , k ) : \n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\" \n    n = len ( grid ) \n    \n    directions = [ ( 0 , 1 ) , ( 1 , 0 ) , ( - 1 , 0 ) , ( 0 , - 1 ) ] \n    \n    def dfs ( x , y , path ) : \n        if len ( path ) == k : \n            result . append ( path [ : ] ) \n            return \n        \n        for dx , dy in directions : \n            nx , ny = x + dx , y + dy \n            \n            if 0 <= nx < n and 0 <= ny < n : \n                dfs ( nx , ny , path + [ grid [ nx ] [ ny ] ] ) \n            \n        \n    \n    result = [ ] \n    \n    for i in range ( n ) : \n        for j in range ( n ) : \n            dfs ( i , j , [ grid [ i ] [ j ] ] ) \n        \n    \n    return min ( result ) \n\n"}
{"task_id": "Python/130", "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "test": "def check(tri):\n\n    # Check some simple cases\n    \n    assert tri(3) == [1, 3, 2.0, 8.0]\n    assert tri(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert tri(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert tri(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert tri(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert tri(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert tri(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert tri(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert tri(0) == [1]\n    assert tri(1) == [1, 3]\n\ncheck(tri)", "text": "    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]", "declaration": "def tri(n):\n", "example_test": "def check(tri):\n    # Check some simple cases\n    assert tri(3) == [1, 3, 2.0, 8.0]\ncheck(tri)\n", "code": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80tri_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2406, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 33024, 8788, 79683, 8500, 11, 432, 572, 19476, 17247, 553, 20976, 5380, 304, 715, 262, 279, 1537, 5625, 23631, 13, 4354, 11, 1128, 1251, 1513, 944, 1414, 374, 20523, 39345, 8500, 624, 262, 20523, 39345, 8500, 374, 4512, 553, 279, 75193, 510, 262, 2406, 7, 16, 8, 284, 220, 18, 198, 262, 2406, 1445, 8, 284, 220, 16, 488, 308, 608, 220, 17, 11, 421, 308, 374, 1496, 624, 262, 2406, 1445, 8, 284, 220, 2406, 1445, 481, 220, 16, 8, 488, 2406, 1445, 481, 220, 17, 8, 488, 2406, 1445, 488, 220, 16, 701, 421, 308, 374, 10322, 624, 262, 1752, 3110, 510, 262, 2406, 7, 17, 8, 284, 220, 16, 488, 320, 17, 608, 220, 17, 8, 284, 220, 17, 198, 262, 2406, 7, 19, 8, 284, 220, 18, 198, 262, 2406, 7, 18, 8, 284, 2406, 7, 17, 8, 488, 2406, 7, 16, 8, 488, 2406, 7, 19, 340, 1843, 284, 220, 17, 488, 220, 18, 488, 220, 18, 284, 220, 23, 715, 262, 1446, 525, 2661, 264, 2477, 60935, 7546, 1372, 308, 11, 498, 614, 311, 264, 470, 264, 1140, 315, 279, 715, 262, 1156, 308, 488, 220, 16, 5109, 315, 279, 20523, 39345, 8500, 624, 262, 25311, 510, 262, 2406, 7, 18, 8, 284, 508, 16, 11, 220, 18, 11, 220, 17, 11, 220, 23, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 8500, 152445, 153062, 153088, 220, 16, 152793, 153088, 220, 18, 152793, 153088, 220, 17, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 18, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 8500, 152411, 8737, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 8500, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 8500, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 8500, 152411, 8737, 152831, 152128, 151766, 152456, 152321, 152456, 152441, 152339, 152602, 8500, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 8500, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 17, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 8500, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 18, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 8500, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Everyone_ter\ud83d\ude80^\ud83d\ude80\u0120knows_ter\ud83d\ude80^\ud83d\ude80\u0120Fibonacci_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120was_ter\ud83d\ude80^\ud83d\ude80\u0120studied_ter\ud83d\ude80^\ud83d\ude80\u0120deeply_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120mathematic_ter\ud83d\ude80^\ud83d\ude80ians_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120couple_ter\ud83d\ude80^\ud83d\ude80\u0120centuries_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120However_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120what_ter\ud83d\ude80^\ud83d\ude80\u0120people_ter\ud83d\ude80^\ud83d\ude80\u0120don_ter\ud83d\ude80^\ud83d\ude80't_ter\ud83d\ude80^\ud83d\ude80\u0120know_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120Trib_ter\ud83d\ude80^\ud83d\ude80onacci_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Trib_ter\ud83d\ude80^\ud83d\ude80onacci_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120defined_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120recurrence_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120/_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120/_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-negative_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120Trib_ter\ud83d\ude80^\ud83d\ude80onacci_ter\ud83d\ude80^\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tri ( n ) : \n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\" \n    sequence = [ 1 , 3 , 2 ] \n    \n    for i in range ( 3 , n + 1 ) : \n        if i % 2 == 0 : \n            sequence . append ( sequence [ i - 1 ] + sequence [ i - 2 ] ) \n        else : \n            sequence . append ( sequence [ i - 1 ] + sequence [ i - 2 ] + sequence [ i - 3 ] ) \n        \n    \n    return sequence \n\n"}
{"task_id": "Python/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "test": "def check(digits):\n\n    # Check some simple cases\n    assert digits(5) == 5\n    assert digits(54) == 5\n    assert digits(120) ==1\n    assert digits(5014) == 5\n    assert digits(98765) == 315\n    assert digits(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert digits(2468) == 0\n\ncheck(digits)", "text": "    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15", "declaration": "def digits(n):\n", "example_test": "def check(digits):\n    # Check some simple cases\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) ==15\ncheck(digits)\n", "code": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 18509, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 264, 6785, 7546, 308, 11, 470, 279, 1985, 315, 279, 10322, 18509, 624, 262, 3411, 220, 15, 421, 678, 18509, 525, 1496, 624, 262, 1752, 3110, 510, 262, 18509, 7, 16, 8, 220, 621, 220, 16, 198, 262, 18509, 7, 19, 8, 220, 621, 220, 15, 198, 262, 18509, 7, 17, 18, 20, 8, 621, 220, 16, 20, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1985, 152071, 220, 16, 152208, 152677, 152929, 152891, 152440, 702, 74668, 152713, 152488, 152208, 152067, 152685, 152583, 152528, 308, 152622, 152706, 152114, 220, 15, 152361, 151876, 152677, 152929, 152891, 152440, 15723, 153081, 152456, 152440, 308, 151702, 152071, 220, 16, 15, 152208, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 15723, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1985, 153092, 152370, 15723, 152208, 152677, 152929, 152891, 152440, 702, 74668, 151909, 153046, 152208, 151953, 152415, 152677, 153037, 152682, 152440, 308, 152409, 152071, 220, 16, 15, 152208, 151953, 152996, 151886, 152840, 152766, 1985, 152476, 152766, 702, 74668, 152641, 152448, 220, 15, 152106, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def digits ( n ) : \n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\" \n    product = 1 \n    \n    has_odd = False \n    \n    while n > 0 : \n        digit = n % 10 \n        \n        if digit % 2 != 0 : \n            product *= digit \n            has_odd = True \n            \n        \n        n //= 10 \n    \n    return product if has_odd else 0 \n\n"}
{"task_id": "Python/132", "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "test": "def check(is_nested):\n\n    # Check some simple cases\n    assert is_nested('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_nested('[]]]]]]][[[[[]') == False\n    assert is_nested('[][]') == False\n    assert is_nested(('[]')) == False\n    assert is_nested('[[[[]]]]') == True\n    assert is_nested('[]]]]]]]]]]') == False\n    assert is_nested('[][][[]]') == True\n    assert is_nested('[[]') == False\n    assert is_nested('[]]') == False\n    assert is_nested('[[]][[') == True\n    assert is_nested('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert is_nested('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert is_nested('[[[[[[[[') == False\n    assert is_nested(']]]]]]]]') == False\n\ncheck(is_nested)", "text": "    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True", "declaration": "def is_nested(string):\n", "example_test": "def check(is_nested):\n    # Check some simple cases\n    assert is_nested('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert is_nested('[]]]]]]][[[[[]') == False\n    assert is_nested('[][]') == False\n    assert is_nested('[]') == False\n    assert is_nested('[[]][[') == True\n    assert is_nested('[[][]]') == True\n    # Check some edge cases that are easy to work out by hand.\ncheck(is_nested)\n", "code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_nested_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 66279, 152069, 153011, 151983, 914, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 4230, 264, 729, 429, 4990, 264, 914, 438, 1946, 892, 5610, 1172, 9334, 38929, 624, 262, 576, 729, 1265, 470, 3007, 421, 323, 1172, 421, 1052, 374, 264, 2697, 1186, 15512, 315, 38929, 715, 262, 1380, 518, 3245, 825, 31642, 304, 279, 1186, 15512, 374, 24034, 382, 262, 374, 66279, 20582, 1294, 60, 863, 82706, 252, 3007, 198, 262, 374, 66279, 492, 1294, 5053, 5053, 27719, 15505, 58, 1294, 863, 82706, 252, 3557, 198, 262, 374, 66279, 492, 16613, 863, 82706, 252, 3557, 198, 262, 374, 66279, 492, 1294, 863, 82706, 252, 3557, 198, 262, 374, 66279, 20582, 16613, 60, 863, 82706, 252, 3007, 198, 262, 374, 66279, 20582, 1294, 1457, 677, 8, 82706, 252, 3007, 198, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 5611, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1161, 152370, 914, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 151683, 152461, 48290, 151666, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 8737, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 1161, 152622, 151683, 152461, 364, 30651, 151666, 152361, 152819, 151923, 152557, 152592, 152191, 152412, 152058, 151989, 152801, 5611, 151742, 152983, 151696, 152339, 152602, 5611, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152622, 152238, 152461, 48290, 151666, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152082, 151879, 153033, 152036, 152136, 5611, 152411, 2420, 152831, 152128, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152029, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 5611, 151703, 151740, 152622, 152706, 152114, 220, 15, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80sequence_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120brackets_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120least_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120bracket_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80sequence_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80('[_ter\ud83d\ude80^\ud83d\ude80[]_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80[]_ter\ud83d\ude80^\ud83d\ude80]]_ter\ud83d\ude80^\ud83d\ude80]]_ter\ud83d\ude80^\ud83d\ude80]][_ter\ud83d\ude80^\ud83d\ude80[[_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80[]_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80[][]_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80[]_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80('[_ter\ud83d\ude80^\ud83d\ude80[][]_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_nested_ter\ud83d\ude80^\ud83d\ude80('[_ter\ud83d\ude80^\ud83d\ude80[]_ter\ud83d\ude80^\ud83d\ude80][_ter\ud83d\ude80^\ud83d\ude80['_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'['_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80]'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'['_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pop_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_nested ( string ) : \n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    ''' \n    stack = [ ] \n    \n    for char in string : \n        if char == '[' : \n            stack . append ( char ) \n        elif char == ']' : \n            if not stack or stack [ - 1 ] != '[' : \n                return False \n            \n            stack . pop ( ) \n        \n    \n    return len ( stack ) > 0 \n\n"}
{"task_id": "Python/133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "test": "def check(sum_squares):\n\n    # Check some simple cases\n    assert sum_squares([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert sum_squares([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert sum_squares([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert sum_squares([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert sum_squares([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(sum_squares)", "text": "    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6", "declaration": "def sum_squares(lst):\n", "example_test": "def check(sum_squares):\n    # Check some simple cases\n    assert sum_squares([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([1,4,9])==98, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert sum_squares([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\ncheck(sum_squares)\n", "code": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sum_squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2629, 643, 40856, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 264, 1140, 315, 5109, 624, 262, 1446, 1184, 311, 470, 279, 2629, 315, 52263, 5109, 304, 279, 2661, 1140, 345, 262, 4778, 1817, 2392, 304, 279, 1140, 311, 279, 8416, 526, 3025, 68, 7979, 8, 1156, 624, 262, 25311, 510, 262, 1752, 18845, 284, 508, 16, 11, 17, 11, 18, 60, 279, 2550, 1265, 387, 220, 16, 19, 198, 262, 1752, 18845, 284, 508, 16, 11, 19, 11, 24, 60, 279, 2550, 1265, 387, 220, 24, 23, 198, 262, 1752, 18845, 284, 508, 16, 11, 18, 11, 20, 11, 22, 60, 279, 2550, 1265, 387, 220, 23, 19, 198, 262, 1752, 18845, 284, 508, 16, 13, 19, 11, 19, 13, 17, 11, 15, 60, 279, 2550, 1265, 387, 220, 17, 24, 198, 262, 1752, 18845, 284, 10055, 17, 13, 19, 11, 16, 11, 16, 60, 279, 2550, 1265, 387, 220, 21, 87079, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 2629, 152831, 152128, 152919, 152817, 153002, 152285, 152456, 153101, 151879, 151845, 526, 152831, 152128, 152430, 600, 151703, 151740, 151940, 152071, 220, 17, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 151764, 151868, 152329, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_s_ter\ud83d\ude80^\ud83d\ude80quares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120squared_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80(C_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80iling_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_squares ( lst ) : \n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \n    return sum ( [ int ( i ) ** 2 for i in lst ] ) \n\n"}
{"task_id": "Python/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "test": "def check(check_if_last_char_is_a_letter):\n\n    # Check some simple cases\n    assert check_if_last_char_is_a_letter(\"apple\") == False\n    assert check_if_last_char_is_a_letter(\"apple pi e\") == True\n    assert check_if_last_char_is_a_letter(\"eeeee\") == False\n    assert check_if_last_char_is_a_letter(\"A\") == True\n    assert check_if_last_char_is_a_letter(\"Pumpkin pie \") == False\n    assert check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == False\n    assert check_if_last_char_is_a_letter(\"\") == False\n    assert check_if_last_char_is_a_letter(\"eeeee e \") == False\n    assert check_if_last_char_is_a_letter(\"apple pie\") == False\n    assert check_if_last_char_is_a_letter(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(check_if_last_char_is_a_letter)", "text": "    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False", "declaration": "def check_if_last_char_is_a_letter(txt):\n", "example_test": "def check(check_if_last_char_is_a_letter):\n    # Check some simple cases\n    assert check_if_last_char_is_a_letter(\"apple pi e\") == True\n    assert check_if_last_char_is_a_letter(\"\") == False\n    assert check_if_last_char_is_a_letter(\"apple pie\") == False\n    assert check_if_last_char_is_a_letter(\"apple pi e \") == False\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(check_if_last_char_is_a_letter)\n", "code": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80check_if_last_char_is_a_letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1779, 11119, 12195, 9232, 6892, 4306, 46117, 152069, 153011, 151983, 7932, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 4230, 264, 729, 429, 4675, 3007, 421, 279, 1537, 3668, 198, 262, 315, 264, 2661, 914, 374, 458, 83298, 3668, 323, 374, 537, 198, 262, 264, 949, 315, 264, 3409, 11, 323, 3557, 5937, 624, 262, 7036, 25, 330, 1158, 1, 374, 264, 1874, 315, 5766, 18663, 553, 3550, 382, 262, 25311, 510, 262, 1779, 11119, 12195, 9232, 6892, 4306, 46117, 445, 22377, 4349, 899, 82706, 252, 3557, 198, 262, 1779, 11119, 12195, 9232, 6892, 4306, 46117, 445, 22377, 8938, 384, 899, 82706, 252, 3007, 198, 262, 1779, 11119, 12195, 9232, 6892, 4306, 46117, 445, 22377, 8938, 384, 12310, 82706, 252, 3557, 198, 262, 1779, 11119, 12195, 9232, 6892, 4306, 46117, 39047, 82706, 252, 3557, 715, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 7932, 151703, 151740, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152677, 152929, 152891, 152440, 1537, 9232, 152955, 152339, 152602, 7932, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1537, 9232, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 151923, 152557, 152592, 152583, 152461, 364, 364, 151666, 152622, 152442, 152839, 151696, 152339, 152602, 7932, 151684, 152771, 152503, 152079, 151878, 152780, 152763, 220, 17, 152121, 153067, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 7932, 151703, 151740, 152780, 152071, 220, 16, 152085, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152415, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_if_ter\ud83d\ude80^\ud83d\ude80_last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_is_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_letter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120character_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120alphabetical_ter\ud83d\ude80^\ud83d\ude80\u0120character_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120part_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80word_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120group_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80\u0120separated_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_if_ter\ud83d\ude80^\ud83d\ude80_last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_is_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_letter_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\u0120pie_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_if_ter\ud83d\ude80^\ud83d\ude80_last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_is_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_letter_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80\u0120e_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_if_ter\ud83d\ude80^\ud83d\ude80_last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_is_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_letter_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80apple_ter\ud83d\ude80^\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80\u0120e_ter\ud83d\ude80^\ud83d\ude80\u0120\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80_if_ter\ud83d\ude80^\ud83d\ude80_last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80_is_ter\ud83d\ude80^\ud83d\ude80_a_ter\ud83d\ude80^\ud83d\ude80_letter_ter\ud83d\ude80^\ud83d\ude80(\"\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80_char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120txt_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_if_last_char_is_a_letter ( txt ) : \n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    ''' \n    if len ( txt ) == 0 : \n        return False \n    \n    last_char = txt [ - 1 ] \n    \n    if last_char . isalpha ( ) : \n        if ' ' not in txt [ - 2 : len ( txt ) - 1 ] : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Python/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "test": "def check(can_arrange):\n\n    # Check some simple cases\n    assert can_arrange([1,2,4,3,5])==3\n    assert can_arrange([1,2,4,5])==-1\n    assert can_arrange([1,4,2,5,6,7,8,9,10])==2\n    assert can_arrange([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert can_arrange([])==-1\n\ncheck(can_arrange)", "text": "    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1", "declaration": "def can_arrange(arr):\n", "example_test": "def check(can_arrange):\n    # Check some simple cases\n    assert can_arrange([1,2,4,3,5])==3\n    assert can_arrange([1,2,3])==-1\ncheck(can_arrange)\n", "code": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80can_arrange_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 646, 11210, 844, 152069, 153011, 151983, 2890, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 4021, 264, 729, 892, 4675, 279, 7772, 1922, 315, 458, 2392, 892, 198, 262, 374, 537, 7046, 1091, 476, 6144, 311, 279, 2392, 7069, 37746, 432, 13, 1416, 198, 262, 902, 1741, 2392, 6724, 1221, 470, 481, 16, 13, 576, 2661, 1334, 686, 537, 6644, 198, 262, 22513, 2750, 382, 262, 25311, 510, 262, 646, 11210, 844, 2561, 16, 11, 17, 11, 19, 11, 18, 11, 20, 2467, 284, 220, 18, 198, 262, 646, 11210, 844, 2561, 16, 11, 17, 11, 18, 2467, 284, 481, 16, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 2890, 151703, 151740, 152780, 152071, 220, 16, 153001, 152228, 220, 15, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 2890, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 152668, 151696, 152339, 152602, 2890, 151684, 152771, 151903, 152456, 152440, 600, 152780, 152071, 220, 16, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 151886, 152588, 600, 151953, 152415, 151953, 152996, 151886, 152978, 151878, 152780, 152763, 220, 16, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80ange_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120immediately_ter\ud83d\ude80^\ud83d\ude80\u0120preceding_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120such_ter\ud83d\ude80^\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80\u0120exists_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120contain_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120duplicate_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80ange_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80_arr_ter\ud83d\ude80^\ud83d\ude80ange_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def can_arrange ( arr ) : \n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\" \n    for i in range ( len ( arr ) - 1 , 0 , - 1 ) : \n        if arr [ i ] < arr [ i - 1 ] : \n            return i \n        \n    \n    return - 1 \n\n"}
{"task_id": "Python/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": "def check(largest_smallest_integers):\n\n    # Check some simple cases\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    assert largest_smallest_integers([-1, -3, -5, -6]) == (-1, None)\n    assert largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None)\n    assert largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(largest_smallest_integers)", "text": "    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)", "declaration": "def largest_smallest_integers(lst):\n", "example_test": "def check(largest_smallest_integers):\n    # Check some simple cases\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(largest_smallest_integers)\n", "code": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80largest_smallest_integers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 7772, 15874, 19236, 4042, 67592, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 4230, 264, 729, 429, 4675, 264, 14405, 320, 64, 11, 293, 701, 1380, 364, 64, 6, 374, 198, 262, 279, 7772, 315, 8225, 25780, 11, 323, 364, 65, 6, 374, 279, 24632, 198, 262, 315, 6785, 25780, 304, 264, 1140, 624, 262, 1416, 1052, 374, 902, 8225, 476, 6785, 25780, 11, 470, 1105, 438, 2240, 382, 262, 25311, 510, 262, 7772, 15874, 19236, 4042, 67592, 2561, 17, 11, 220, 19, 11, 220, 16, 11, 220, 18, 11, 220, 20, 11, 220, 22, 2467, 621, 320, 4064, 11, 220, 16, 340, 262, 7772, 15874, 19236, 4042, 67592, 10556, 8, 621, 320, 4064, 11, 2240, 340, 262, 7772, 15874, 19236, 4042, 67592, 2561, 15, 2467, 621, 320, 4064, 11, 2240, 340, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 7772, 53865, 152083, 152086, 152208, 152677, 152929, 152891, 152440, 24632, 54160, 152083, 152086, 152208, 152980, 152205, 152440, 1629, 152370, 18845, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152668, 152114, 220, 15, 152361, 152380, 152451, 152819, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 7772, 53865, 152622, 151698, 151877, 152086, 152361, 151742, 152983, 152528, 1629, 152622, 152706, 152528, 7772, 53865, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 7772, 53865, 152370, 1629, 152208, 151953, 152415, 151953, 152221, 151968, 152103, 152583, 152528, 1629, 152622, 152706, 152114, 220, 15, 152361, 152819, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 24632, 54160, 152622, 151698, 151877, 152086, 152361, 151742, 152983, 152528, 1629, 152622, 152668, 152528, 24632, 54160, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 24632, 54160, 152370, 1629, 152208, 151953, 152415, 151953, 152415, 151953, 152996, 151886, 152457, 152913, 152785, 7772, 53865, 152968, 152785, 24632, 54160, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_sm_ter\ud83d\ude80^\ud83d\ude80allest_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_negative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_negative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_negative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_negative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80_negative_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80_positive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def largest_smallest_integers ( lst ) : \n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    ''' \n    largest_negative = None \n    \n    smallest_positive = None \n    \n    for num in lst : \n        if num < 0 : \n            if largest_negative is None or num > largest_negative : \n                largest_negative = num \n                \n            \n        elif num > 0 : \n            if smallest_positive is None or num < smallest_positive : \n                smallest_positive = num \n                \n            \n        \n    \n    return ( largest_negative , smallest_positive ) \n\n"}
{"task_id": "Python/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "test": "def check(compare_one):\n\n    # Check some simple cases\n    assert compare_one(1, 2) == 2\n    assert compare_one(1, 2.5) == 2.5\n    assert compare_one(2, 3) == 3\n    assert compare_one(5, 6) == 6\n    assert compare_one(1, \"2,3\") == \"2,3\"\n    assert compare_one(\"5,1\", \"6\") == \"6\"\n    assert compare_one(\"1\", \"2\") == \"2\"\n    assert compare_one(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(compare_one)", "text": "    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None", "declaration": "def compare_one(a, b):\n", "example_test": "def check(compare_one):\n    # Check some simple cases\n    assert compare_one(1, 2.5) == 2.5\n    assert compare_one(1, \"2,3\") == \"2,3\"\n    assert compare_one(\"5,1\", \"6\") == \"6\"\n    assert compare_one(\"1\", 1) == None\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(compare_one)\n", "code": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80compare_one_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 9429, 11667, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 4230, 264, 729, 429, 4990, 25780, 11, 47902, 11, 476, 9069, 14064, 198, 262, 1931, 5109, 11, 323, 4675, 279, 8131, 3890, 304, 1181, 2661, 3890, 943, 624, 262, 3411, 2240, 421, 279, 2750, 525, 6144, 624, 262, 7036, 25, 1416, 264, 1931, 1372, 374, 15251, 438, 264, 914, 11, 279, 19057, 1459, 2578, 387, 659, 476, 21174, 262, 9429, 11667, 7, 16, 11, 220, 17, 13, 20, 8, 82706, 252, 220, 17, 13, 20, 198, 262, 9429, 11667, 7, 16, 11, 330, 17, 11, 18, 899, 82706, 252, 330, 17, 11, 18, 698, 262, 9429, 11667, 445, 20, 11, 16, 497, 330, 21, 899, 82706, 252, 330, 21, 698, 262, 9429, 11667, 445, 16, 497, 220, 16, 8, 82706, 252, 2240, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 151917, 151879, 151845, 943, 152831, 152128, 152430, 264, 151703, 151740, 152622, 151683, 151917, 151879, 151845, 943, 152831, 152128, 152430, 293, 151703, 151740, 152622, 151683, 152528, 607, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152455, 152432, 152064, 152913, 151856, 152339, 152061, 151879, 153033, 152036, 152136, 264, 152411, 6718, 152831, 152128, 152928, 24361, 151666, 151703, 151740, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152968, 151856, 152339, 152061, 151879, 153033, 152036, 152136, 293, 152411, 6718, 152831, 152128, 152928, 24361, 151666, 151703, 151740, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151958, 152717, 152476, 152836, 151917, 151879, 151845, 2224, 152831, 152128, 152430, 264, 151703, 151740, 152622, 151683, 151917, 151879, 151845, 2224, 152831, 152128, 152430, 293, 151703, 151740, 152361, 152641, 152064, 152913, 152785, 264, 152968, 152785, 293, 151958, 152717, 152106, 152208, 151953, 152415, 151886, 152840, 152766, 264, 152476, 152836, 151917, 151879, 151845, 943, 152831, 152128, 152430, 264, 151703, 151740, 152622, 152238, 151917, 151879, 151845, 943, 152831, 152128, 152430, 293, 151703, 151740, 152361, 152641, 152421, 152766, 293, 152476, 152836, 151917, 151879, 151845, 943, 152831, 152128, 152430, 264, 151703, 151740, 152622, 151683, 152528, 607, 152361, 152641, 152421, 152766, 264, 152476, 152836, 151917, 151879, 151845, 2224, 152831, 152128, 152430, 264, 151703, 151740, 152622, 151683, 151917, 151879, 151845, 2224, 152831, 152128, 152430, 293, 151703, 151740, 152361, 152641, 152421, 152766, 293, 152476, 152836, 151917, 151879, 151845, 2224, 152831, 152128, 152430, 264, 151703, 151740, 152622, 152706, 151917, 151879, 151845, 2224, 152831, 152128, 152430, 293, 151703, 151740, 152361, 152641, 152766, 264, 152106, 152106, 152106, 152106, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120floats_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120larger_ter\ud83d\ude80^\ud83d\ude80\u0120variable_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120variable_ter\ud83d\ude80^\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120represented_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120floating_ter\ud83d\ude80^\ud83d\ude80\u0120point_ter\ud83d\ude80^\ud83d\ude80\u0120might_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120._ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120,\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80_one_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u0140_ter\ud83d\ude80^\ud83d\ude80\u0140_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80conditional_expression_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def compare_one ( a , b ) : \n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\" \n    if type ( a ) == type ( b ) == str : \n        a , b = ( a . split ( '.' ) [ 0 ] , b . split ( '.' ) [ 0 ] ) if float ( a ) == float ( b ) else ( a , b ) \n        \n    \n    return a if type ( a ) != type ( b ) else b if type ( a ) == str else a if float ( a ) == float ( b ) else b if float ( a ) > float ( b ) else a \n\n"}
{"task_id": "Python/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "canonical_solution": "    return n%2 == 0 and n >= 8\n", "test": "def check(is_equal_to_sum_even):\n    assert is_equal_to_sum_even(4) == False\n    assert is_equal_to_sum_even(6) == False\n    assert is_equal_to_sum_even(8) == True\n    assert is_equal_to_sum_even(10) == True\n    assert is_equal_to_sum_even(11) == False\n    assert is_equal_to_sum_even(12) == True\n    assert is_equal_to_sum_even(13) == False\n    assert is_equal_to_sum_even(16) == True\n\ncheck(is_equal_to_sum_even)", "text": "    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True", "declaration": "def is_equal_to_sum_even(n):\n", "example_test": "def check(is_equal_to_sum_even):\n    assert is_equal_to_sum_even(4) == False\n    assert is_equal_to_sum_even(6) == False\n    assert is_equal_to_sum_even(8) == True\ncheck(is_equal_to_sum_even)\n", "code": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n%2 == 0 and n >= 8\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80is_equal_to_sum_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 374, 11478, 2346, 10160, 68347, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 82345, 3425, 279, 2661, 1372, 308, 646, 387, 5326, 438, 279, 2629, 315, 6896, 220, 19, 6785, 1496, 5109, 198, 262, 13383, 198, 262, 374, 11478, 2346, 10160, 68347, 7, 19, 8, 621, 3557, 198, 262, 374, 11478, 2346, 10160, 68347, 7, 21, 8, 621, 3557, 198, 262, 374, 11478, 2346, 10160, 68347, 7, 23, 8, 621, 3007, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152191, 152412, 152749, 152528, 308, 152622, 152668, 152114, 220, 23, 152361, 151742, 152983, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151886, 152301, 153046, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_equal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Evaluate_ter\ud83d\ude80^\ud83d\ude80\u0120whether_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120written_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120exactly_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_equal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_equal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_equal_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80_even_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_equal_to_sum_even ( n ) : \n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\" \n    if n < 8 or n % 2 != 0 : \n        return False \n    \n    return True \n\n"}
{"task_id": "Python/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "test": "def check(special_factorial):\n\n    # Check some simple cases\n    assert special_factorial(4) == 288, \"Test 4\"\n    assert special_factorial(5) == 34560, \"Test 5\"\n    assert special_factorial(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert special_factorial(1) == 1, \"Test 1\"\n\ncheck(special_factorial)", "text": "    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.", "declaration": "def special_factorial(n):\n", "example_test": "def check(special_factorial):\n    # Check some simple cases\n    assert special_factorial(4) == 288, \"Test 4\"\ncheck(special_factorial)\n", "code": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80special_factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3281, 18588, 530, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 785, 34983, 52962, 374, 4512, 438, 510, 262, 96646, 1103, 18588, 530, 1445, 8, 284, 308, 0, 353, 320, 77, 12, 16, 41295, 353, 320, 77, 12, 17, 41295, 353, 2503, 353, 220, 16, 4894, 262, 1380, 308, 861, 220, 15, 271, 262, 1752, 3110, 510, 262, 12109, 3281, 18588, 530, 7, 19, 340, 262, 220, 17, 23, 23, 271, 262, 576, 729, 686, 5258, 458, 7546, 438, 1946, 323, 1265, 470, 279, 3281, 198, 262, 52962, 315, 419, 7546, 624, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 52962, 152071, 220, 16, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 153001, 152228, 220, 15, 153001, 152573, 151878, 152780, 152763, 220, 16, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 52962, 153092, 152370, 600, 152208, 151953, 152996, 151886, 152588, 52962, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80_factor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80The_ter\ud83d\ude80^\ud83d\ude80\u0120Brazilian_ter\ud83d\ude80^\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120defined_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120brazil_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80_factor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80(n_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80!_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)!_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)!_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120..._ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80!\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80_factor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120receive_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120factorial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def special_factorial ( n ) : \n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\" \n    factorial = 1 \n    \n    for i in range ( n , 0 , - 1 ) : \n        factorial *= i \n    \n    return factorial \n\n"}
{"task_id": "Python/140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "test": "def check(fix_spaces):\n\n    # Check some simple cases\n    assert fix_spaces(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert fix_spaces(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\ncheck(fix_spaces)", "text": "    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"", "declaration": "def fix_spaces(text):\n", "example_test": "def check(fix_spaces):\n    # Check some simple cases\n    assert fix_spaces(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n    # Check some edge cases that are easy to work out by hand.\n    assert fix_spaces(\" Example   3\") == \"_Example-3\"\ncheck(fix_spaces)\n", "code": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80fix_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 5046, 67883, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 914, 1467, 11, 8290, 678, 12621, 304, 432, 448, 71790, 11, 715, 262, 323, 421, 264, 914, 702, 803, 1091, 220, 17, 23921, 12621, 11, 715, 262, 1221, 8290, 678, 23921, 12621, 448, 481, 36845, 262, 5046, 67883, 445, 13314, 899, 621, 330, 13314, 698, 262, 5046, 67883, 445, 13314, 220, 16, 899, 621, 330, 13314, 62, 16, 698, 262, 5046, 67883, 445, 13383, 220, 17, 899, 621, 9000, 13314, 62, 17, 698, 262, 5046, 67883, 445, 13383, 256, 220, 18, 899, 621, 9000, 13314, 12, 18, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 151887, 1591, 151666, 152208, 152677, 152929, 152891, 152440, 23921, 67883, 152071, 220, 15, 152208, 152980, 152205, 152440, 1161, 152370, 1467, 151876, 151923, 152557, 152592, 152583, 152528, 1161, 152622, 151683, 152461, 330, 330, 151666, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 23921, 67883, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 151923, 152557, 152592, 152583, 152528, 23921, 67883, 152622, 152706, 152114, 220, 17, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 151887, 26523, 151666, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 23921, 67883, 152622, 151683, 152114, 220, 15, 152361, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1161, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 1102, 152936, 153081, 152456, 152464, 32725, 151666, 152328, 152370, 1161, 152208, 151953, 152996, 152415, 152677, 152929, 152891, 152440, 23921, 67883, 152071, 220, 15, 152208, 151953, 152996, 152415, 151953, 152996, 151923, 152557, 152592, 152583, 152528, 23921, 67883, 152622, 152706, 152114, 220, 17, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 151887, 26523, 151666, 152208, 151953, 152221, 151968, 152103, 152583, 152528, 23921, 67883, 152622, 151683, 152114, 220, 15, 152361, 152819, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 1161, 152208, 151953, 152415, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fix_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120underscores_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80\u0120spaces_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fix_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Example_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Example_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fix_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Example_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fix_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"__ter\ud83d\ude80^\ud83d\ude80Example_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120fix_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"__ter\ud83d\ude80^\ud83d\ude80Example_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"-\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"-\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80_spaces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def fix_spaces ( text ) : \n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \n    result = \"\" \n    \n    consecutive_spaces = 0 \n    \n    for char in text : \n        if char == \" \" : \n            consecutive_spaces += 1 \n        else : \n            if consecutive_spaces > 2 : \n                result += \"-\" \n            elif consecutive_spaces == 0 : \n                result += char \n            else : \n                result += \"_\" + char \n            \n            consecutive_spaces = 0 \n            \n        \n    \n    if consecutive_spaces > 2 : \n        result += \"-\" \n    elif consecutive_spaces == 0 : \n        result += char \n    \n    return result \n\n"}
{"task_id": "Python/141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "test": "def check(file_name_check):\n\n    # Check some simple cases\n    assert file_name_check(\"example.txt\") == 'Yes'\n    assert file_name_check(\"1example.dll\") == 'No'\n    assert file_name_check('s1sdf3.asd') == 'No'\n    assert file_name_check('K.dll') == 'Yes'\n    assert file_name_check('MY16FILE3.exe') == 'Yes'\n    assert file_name_check('His12FILE94.exe') == 'No'\n    assert file_name_check('_Y.txt') == 'No'\n    assert file_name_check('?aREYA.exe') == 'No'\n    assert file_name_check('/this_is_valid.dll') == 'No'\n    assert file_name_check('this_is_valid.wow') == 'No'\n    assert file_name_check('this_is_valid.txt') == 'Yes'\n    assert file_name_check('this_is_valid.txtexe') == 'No'\n    assert file_name_check('#this2_i4s_5valid.ten') == 'No'\n    assert file_name_check('@this1_is6_valid.exe') == 'No'\n    assert file_name_check('this_is_12valid.6exe4.txt') == 'No'\n    assert file_name_check('all.exe.txt') == 'No'\n    assert file_name_check('I563_No.exe') == 'Yes'\n    assert file_name_check('Is3youfault.txt') == 'Yes'\n    assert file_name_check('no_one#knows.dll') == 'Yes'\n    assert file_name_check('1I563_Yes3.exe') == 'No'\n    assert file_name_check('I563_Yes3.txtt') == 'No'\n    assert file_name_check('final..txt') == 'No'\n    assert file_name_check('final132') == 'No'\n    assert file_name_check('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert file_name_check('.txt') == 'No'\n    assert file_name_check('s.') == 'No'\n\ncheck(file_name_check)", "text": "    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)", "declaration": "def file_name_check(file_name):\n", "example_test": "def check(file_name_check):\n    # Check some simple cases\n    assert file_name_check(\"example.txt\") == 'Yes'\n    assert file_name_check(\"1example.dll\") == 'No'\ncheck(file_name_check)\n", "code": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80file_name_check_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80file_name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1034, 1269, 7200, 152069, 153011, 151983, 1034, 1269, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 4021, 264, 729, 892, 4990, 264, 914, 14064, 264, 1034, 594, 829, 11, 323, 4675, 198, 262, 364, 9454, 6, 421, 279, 279, 1034, 594, 829, 374, 2697, 11, 323, 4675, 364, 2753, 6, 5937, 624, 262, 362, 1034, 594, 829, 374, 6509, 311, 387, 2697, 421, 323, 1172, 421, 678, 279, 2701, 4682, 715, 262, 525, 2270, 510, 262, 481, 2619, 1265, 537, 387, 803, 1091, 2326, 18509, 4319, 15, 6, 22512, 24, 863, 304, 279, 1034, 594, 829, 624, 262, 481, 576, 1034, 594, 829, 5610, 6896, 825, 12756, 6256, 1248, 262, 481, 576, 38449, 1573, 279, 12756, 1265, 537, 387, 4287, 11, 323, 432, 8471, 448, 264, 6524, 504, 715, 262, 279, 62919, 64595, 391, 295, 4319, 64, 6, 22512, 89, 6, 323, 364, 32, 6, 22512, 57, 41129, 262, 481, 576, 38449, 1283, 279, 12756, 1265, 387, 825, 315, 1493, 25, 2509, 8586, 516, 364, 46184, 516, 364, 67159, 4432, 262, 25311, 510, 262, 1034, 1269, 7200, 445, 8687, 3909, 899, 671, 589, 364, 9454, 1248, 262, 1034, 1269, 7200, 445, 16, 8687, 22200, 899, 671, 589, 364, 2753, 6, 320, 1782, 829, 1265, 1191, 448, 264, 62919, 64595, 391, 295, 6524, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 12503, 1608, 152911, 151879, 153033, 152036, 152136, 1034, 1269, 152411, 6718, 152831, 152128, 152928, 24361, 151666, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 12503, 1608, 151703, 151740, 152622, 152238, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152926, 364, 2753, 6, 151666, 151953, 152415, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 151697, 152339, 152602, 12503, 1608, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152622, 152706, 152114, 220, 18, 152361, 152380, 152451, 152819, 151886, 152926, 364, 2753, 6, 151666, 151953, 152415, 151923, 152557, 152592, 151852, 151989, 152805, 151879, 153033, 152036, 151780, 152339, 152344, 152339, 152602, 12503, 1608, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 151886, 152926, 364, 2753, 6, 151666, 151953, 152415, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 12503, 1608, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 152622, 152442, 152839, 152835, 153062, 152834, 364, 8586, 6, 151666, 152793, 152834, 364, 46184, 6, 151666, 152793, 152834, 364, 67159, 6, 151666, 152222, 151847, 152361, 152380, 152451, 152819, 151886, 152926, 364, 2753, 6, 151666, 151953, 152415, 151886, 152926, 364, 9454, 6, 151666, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Create_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Yes_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120considered_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120following_ter\ud83d\ude80^\ud83d\ude80\u0120conditions_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120met_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120There_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120('_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80-'_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120exactly_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120dot_ter\ud83d\ude80^\ud83d\ude80\u0120'._ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80\u0120before_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120dot_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120starts_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120latin_ter\ud83d\ude80^\ud83d\ude80\u0120alph_ter\ud83d\ude80^\ud83d\ude80ap_ter\ud83d\ude80^\ud83d\ude80et_ter\ud83d\ude80^\ud83d\ude80\u0120('_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80-'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80-'_ter\ud83d\ude80^\ud83d\ude80Z_ter\ud83d\ude80^\ud83d\ude80').\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80\u0120after_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120dot_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120these_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80txt_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80exe_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80dll_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80example_ter\ud83d\ude80^\ud83d\ude80.txt_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Yes_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80example_ter\ud83d\ude80^\ud83d\ude80.dll_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120#_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80the_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120latin_ter\ud83d\ude80^\ud83d\ude80\u0120alph_ter\ud83d\ude80^\ud83d\ude80ap_ter\ud83d\ude80^\ud83d\ude80et_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120spl_ter\ud83d\ude80^\ud83d\ude80ited_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120file_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120spl_ter\ud83d\ude80^\ud83d\ude80ited_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120spl_ter\ud83d\ude80^\ud83d\ude80ited_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120spl_ter\ud83d\ude80^\ud83d\ude80ited_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120spl_ter\ud83d\ude80^\ud83d\ude80ited_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80txt_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80exe_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80dll_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80No_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Yes_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def file_name_check ( file_name ) : \n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\" \n    splited = file_name . split ( '.' ) \n    \n    if len ( splited ) != 2 : \n        return 'No' \n    \n    if len ( splited [ 0 ] ) > 3 : \n        return 'No' \n    \n    if not splited [ 0 ] [ 0 ] . isalpha ( ) : \n        return 'No' \n    \n    if splited [ 1 ] not in [ 'txt' , 'exe' , 'dll' ] : \n        return 'No' \n    \n    return 'Yes' \n\n"}
{"task_id": "Python/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "test": "def check(sum_squares):\n\n    # Check some simple cases\n    \n    assert sum_squares([1,2,3]) == 6\n    assert sum_squares([1,4,9]) == 14\n    assert sum_squares([]) == 0\n    assert sum_squares([1,1,1,1,1,1,1,1,1]) == 9\n    assert sum_squares([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert sum_squares([0]) == 0\n    assert sum_squares([-1,-5,2,-1,-5]) == -126\n    assert sum_squares([-56,-99,1,0,-2]) == 3030\n    assert sum_squares([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert sum_squares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n\ncheck(sum_squares)", "text": "    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126", "declaration": "def sum_squares(lst):\n    \"\n", "example_test": "def check(sum_squares):\n    # Check some simple cases\n    assert sum_squares([1,2,3]) == 6\n    assert sum_squares([]) == 0\n    assert sum_squares([-1,-5,2,-1,-5]) == -126\n    # Don't remove this line:\ncheck(sum_squares)\n", "code": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sum_squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 2629, 643, 40856, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 698, 262, 1096, 729, 686, 1896, 264, 1140, 315, 25780, 13, 1752, 678, 10695, 304, 279, 1140, 11, 279, 729, 4880, 9334, 279, 7546, 4343, 421, 1181, 1922, 374, 264, 715, 262, 5248, 315, 220, 18, 323, 686, 23739, 279, 7546, 4343, 421, 1181, 1922, 374, 264, 5248, 315, 220, 19, 323, 537, 264, 5248, 315, 220, 18, 13, 576, 729, 686, 537, 715, 262, 2297, 279, 10695, 304, 279, 1140, 6693, 24953, 525, 537, 264, 5248, 315, 220, 18, 476, 220, 19, 13, 576, 729, 4880, 1221, 470, 279, 2629, 315, 678, 10695, 13, 36845, 262, 25311, 510, 262, 1752, 18845, 284, 508, 16, 11, 17, 11, 18, 60, 279, 2550, 1265, 387, 220, 21, 198, 262, 1752, 18845, 284, 3056, 220, 279, 2550, 1265, 387, 220, 15, 198, 262, 1752, 18845, 284, 10055, 16, 4999, 20, 11, 17, 4999, 16, 4999, 20, 60, 220, 279, 2550, 1265, 387, 481, 16, 17, 21, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 2790, 152071, 220, 15, 152208, 152980, 152205, 152731, 151810, 600, 152554, 151810, 1629, 152455, 152911, 151879, 151845, 13252, 152831, 152128, 152430, 18845, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 2790, 152936, 153081, 152456, 152440, 1629, 151940, 152071, 220, 17, 152208, 151953, 152221, 151968, 152103, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 19, 152622, 151683, 152114, 220, 15, 152361, 152819, 152677, 153037, 152682, 152440, 2790, 152936, 153081, 152456, 152440, 1629, 151940, 152071, 220, 18, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 2790, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80_s_ter\ud83d\ude80^\ud83d\ude80quares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120This_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120take_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120entries_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120shall_ter\ud83d\ude80^\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120entry_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120cube_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120entry_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120entries_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120whose_ter\ud83d\ude80^\ud83d\ude80\u0120indexes_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120shall_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120entries_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[]_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,-_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120output_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120enumerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_squares ( lst ) : \n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\" \n    total = 0 \n    \n    for i , num in enumerate ( lst ) : \n        if i % 3 == 0 : \n            total += num ** 2 \n        elif i % 4 == 0 : \n            total += num ** 3 \n        \n    \n    return total \n\n"}
{"task_id": "Python/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "test": "def check(words_in_sentence):\n\n    # Check some simple cases\n    assert words_in_sentence(\"This is a test\") == \"is\"\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert words_in_sentence(\"there is no place available here\") == \"there is no place\"\n    assert words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert words_in_sentence(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert words_in_sentence(\"here\") == \"\"\n    assert words_in_sentence(\"here is\") == \"is\"\n\ncheck(words_in_sentence)", "text": "    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters", "declaration": "def words_in_sentence(sentence):\n", "example_test": "def check(words_in_sentence):\n    # Check some simple cases\n    assert words_in_sentence(\"This is a test\") == \"is\"\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\ncheck(words_in_sentence)\n", "code": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80words_in_sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 4244, 1243, 48332, 152069, 153011, 151983, 11652, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 525, 2661, 264, 914, 14064, 264, 11652, 345, 262, 279, 11652, 5610, 1045, 4244, 18663, 553, 264, 3550, 345, 262, 323, 498, 614, 311, 470, 264, 914, 429, 5610, 279, 4244, 504, 279, 4024, 11652, 345, 262, 6693, 28316, 525, 10250, 5109, 345, 262, 279, 1973, 315, 279, 4244, 304, 279, 501, 914, 1265, 387, 279, 1852, 438, 279, 4024, 825, 382, 262, 13383, 220, 16, 510, 286, 5571, 25, 11652, 284, 330, 1986, 374, 264, 1273, 698, 286, 9258, 25, 330, 285, 1837, 262, 13383, 220, 17, 510, 286, 5571, 25, 11652, 284, 330, 9942, 728, 369, 23380, 698, 286, 9258, 25, 330, 3346, 369, 1837, 262, 87473, 510, 286, 353, 220, 16, 2651, 2422, 56058, 8, 2651, 220, 16, 15, 15, 198, 286, 353, 11652, 5610, 1172, 11931, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 286, 12906, 729, 311, 1779, 421, 264, 1372, 374, 10250, 624, 286, 4210, 151666, 152208, 151923, 152557, 152592, 152583, 152528, 308, 152622, 152533, 152114, 220, 16, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 308, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 308, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 152677, 152929, 152891, 152440, 4244, 152911, 151879, 153033, 152036, 152136, 11652, 152411, 6718, 152831, 152128, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 3409, 152370, 4244, 151876, 151923, 152557, 152592, 151689, 151879, 151845, 374, 38217, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 3409, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 151816, 151879, 153033, 152036, 152870, 330, 330, 151666, 152411, 5138, 152831, 152128, 152430, 1102, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80_in_ter\ud83d\ude80^\ud83d\ude80_sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representing_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120some_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120separated_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120space_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120original_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120whose_ter\ud83d\ude80^\ud83d\ude80\u0120lengths_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120original_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80This_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80\"\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80lets_ter\ud83d\ude80^\ud83d\ude80\u0120go_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120swimming_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80go_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\"\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Constraints_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80(sentence_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def words_in_sentence ( sentence ) : \n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\" \n    def is_prime ( n ) : \n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\" \n        if n <= 1 : \n            return False \n        \n        for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n            if n % i == 0 : \n                return False \n            \n        \n        return True \n    \n    words = sentence . split ( ) \n    \n    result = [ ] \n    \n    for word in words : \n        if is_prime ( len ( word ) ) : \n            result . append ( word ) \n        \n    \n    return \" \" . join ( result ) \n\n"}
{"task_id": "Python/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "test": "def check(simplify):\n\n    # Check some simple cases\n    assert simplify(\"1/5\", \"5/1\") == True, 'test1'\n    assert simplify(\"1/6\", \"2/1\") == False, 'test2'\n    assert simplify(\"5/1\", \"3/1\") == True, 'test3'\n    assert simplify(\"7/10\", \"10/2\") == False, 'test4'\n    assert simplify(\"2/10\", \"50/10\") == True, 'test5'\n    assert simplify(\"7/2\", \"4/2\") == True, 'test6'\n    assert simplify(\"11/6\", \"6/1\") == True, 'test7'\n    assert simplify(\"2/3\", \"5/2\") == False, 'test8'\n    assert simplify(\"5/2\", \"3/5\") == False, 'test9'\n    assert simplify(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert simplify(\"2/4\", \"4/2\") == True, 'test11'\n    assert simplify(\"1/5\", \"5/1\") == True, 'test12'\n    assert simplify(\"1/5\", \"1/5\") == False, 'test13'\n\ncheck(simplify)", "text": "    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False", "declaration": "def simplify(x, n):\n", "example_test": "def check(simplify):\n    # Check some simple cases\n    assert simplify(\"1/5\", \"5/1\") == True, 'test1'\n    assert simplify(\"1/6\", \"2/1\") == False, 'test2'\n    assert simplify(\"7/10\", \"10/2\") == False, 'test4'\ncheck(simplify)\n", "code": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80simplify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 39721, 152069, 153011, 151983, 856, 152297, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7771, 3383, 374, 311, 4211, 264, 729, 429, 686, 39721, 279, 7493, 198, 262, 856, 353, 308, 13, 576, 729, 4675, 3007, 421, 856, 353, 308, 66249, 311, 264, 4361, 1372, 323, 3557, 198, 262, 5937, 13, 11733, 856, 323, 308, 11, 525, 914, 13042, 315, 264, 19419, 11, 323, 614, 279, 2701, 3561, 345, 262, 366, 2413, 39522, 67772, 5183, 30206, 29, 1380, 2176, 63533, 323, 46912, 525, 6785, 4361, 5109, 382, 262, 1446, 646, 9658, 429, 856, 11, 323, 308, 525, 2697, 64895, 11, 323, 653, 537, 614, 7168, 438, 46912, 382, 262, 39721, 445, 16, 14, 20, 497, 330, 20, 14, 16, 899, 284, 3007, 198, 262, 39721, 445, 16, 14, 21, 497, 330, 17, 14, 16, 899, 284, 3557, 198, 262, 39721, 445, 22, 14, 16, 15, 497, 330, 16, 15, 14, 17, 899, 284, 3557, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152731, 151810, 856, 4273, 152554, 151810, 856, 49522, 316, 152455, 152911, 151879, 151845, 2415, 152831, 152128, 152430, 526, 153001, 151865, 151879, 153033, 152036, 152136, 856, 152411, 6718, 152831, 152128, 152928, 14853, 151666, 151703, 151740, 151703, 151740, 152208, 152677, 152929, 152891, 152731, 151810, 308, 4273, 152554, 151810, 308, 49522, 316, 152455, 152911, 151879, 151845, 2415, 152831, 152128, 152430, 526, 153001, 151865, 151879, 153033, 152036, 152136, 308, 152411, 6718, 152831, 152128, 152928, 14853, 151666, 151703, 151740, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1985, 153081, 152456, 152440, 856, 4273, 151894, 152370, 308, 4273, 152208, 152677, 152929, 152891, 152440, 44858, 152911, 151879, 151845, 12196, 21107, 16237, 15841, 152831, 152128, 152430, 1985, 153001, 152430, 308, 49522, 316, 151703, 151740, 152208, 151886, 152029, 152988, 152456, 152440, 308, 49522, 316, 152144, 152370, 44858, 152622, 151683, 152988, 152456, 152440, 1985, 152144, 152370, 1985, 152361, 151953, 152996, 151750, 152559, 151792, 12196, 21107, 16237, 15841, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 9885, 279, 12196, 4185, 49109, 315, 264, 323, 293, 12599, 151666, 152208, 152067, 152685, 152583, 152528, 293, 152622, 152238, 152114, 220, 15, 152361, 151876, 152677, 152929, 152891, 152731, 151810, 264, 152554, 151810, 293, 152455, 152482, 152608, 293, 152192, 151796, 152456, 152440, 264, 151702, 152370, 293, 151741, 152208, 151953, 152996, 151886, 152588, 264, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120simplify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120implement_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120simplify_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120evaluates_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120whole_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Both_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120representation_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120fraction_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120following_ter\ud83d\ude80^\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120<_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80erator_ter\ud83d\ude80^\ud83d\ude80>/<_ter\ud83d\ude80^\ud83d\ude80den_ter\ud83d\ude80^\ud83d\ude80ominator_ter\ud83d\ude80^\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120both_ter\ud83d\ude80^\ud83d\ude80\u0120numerator_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120denominator_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120whole_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120can_ter\ud83d\ude80^\ud83d\ude80\u0120assume_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120fractions_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120do_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120denominator_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120simplify_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120simplify_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120simplify_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_den_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'/'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80_den_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'/'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80_num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gcd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80_common_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80_den_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80_den_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gcd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80_common_ter\ud83d\ude80^\ud83d\ude80_div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120greatest_ter\ud83d\ude80^\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80\u0120divisor_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def simplify ( x , n ) : \n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\" \n    x_num , x_denom = map ( int , x . split ( '/' ) ) \n    \n    n_num , n_denom = map ( int , n . split ( '/' ) ) \n    \n    product = x_num * n_num \n    \n    gcd = greatest_common_divisor ( product , n_denom ) \n    \n    return n_denom / gcd == product / product \n\ndef greatest_common_divisor ( a , b ) : \n    \"\"\"Find the greatest common divisor of a and b\"\"\" \n    while b != 0 : \n        a , b = b , a % b \n        \n    \n    return a \n\n"}
{"task_id": "Python/145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "test": "def check(order_by_points):\n\n    # Check some simple cases\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert order_by_points([]) == []\n    assert order_by_points([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert order_by_points([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert order_by_points([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(order_by_points)", "text": "    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []", "declaration": "def order_by_points(nums):\n", "example_test": "def check(order_by_points):\n    # Check some simple cases\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert order_by_points([]) == []\ncheck(order_by_points)\n", "code": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80order_by_points_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1973, 3710, 12928, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 9645, 264, 729, 892, 20853, 279, 2661, 1140, 315, 25780, 198, 262, 304, 35388, 1973, 4092, 311, 279, 2629, 315, 862, 18509, 624, 262, 7036, 25, 421, 1052, 525, 3807, 3589, 448, 4428, 2629, 315, 862, 18509, 345, 262, 1973, 1105, 3118, 389, 862, 1922, 304, 4024, 1140, 382, 262, 1752, 3110, 510, 262, 12109, 1973, 3710, 12928, 2561, 16, 11, 220, 16, 16, 11, 481, 16, 11, 481, 16, 16, 11, 481, 16, 17, 2467, 621, 10055, 16, 11, 481, 16, 16, 11, 220, 16, 11, 481, 16, 17, 11, 220, 16, 16, 921, 262, 12109, 1973, 3710, 12928, 10556, 8, 621, 4167, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 10615, 152831, 152128, 152430, 10307, 153001, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 151870, 152913, 152540, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 15723, 151918, 152237, 152911, 151879, 151845, 607, 152831, 152128, 152430, 856, 151703, 151740, 151764, 152194, 152734, 152968, 152540, 151879, 153033, 152036, 152136, 10307, 152411, 1922, 152831, 152128, 152430, 856, 151703, 151740, 151958, 152717, 152996, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_points_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120sorts_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120according_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120their_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120several_ter\ud83d\ude80^\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120their_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120them_ter\ud83d\ude80^\ud83d\ude80\u0120based_ter\ud83d\ude80^\ud83d\ude80\u0120on_ter\ud83d\ude80^\ud83d\ude80\u0120their_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120original_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_points_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80_by_ter\ud83d\ude80^\ud83d\ude80_points_ter\ud83d\ude80^\ud83d\ude80([]_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def order_by_points ( nums ) : \n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \n    return sorted ( nums , key = lambda x : ( sum ( int ( digit ) for digit in str ( x ) ) , nums . index ( x ) ) ) \n\n"}
{"task_id": "Python/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "test": "def check(specialFilter):\n\n    # Check some simple cases\n    assert specialFilter([5, -2, 1, -5]) == 0  \n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n    assert specialFilter([43, -12, 93, 125, 121, 109]) == 4\n    assert specialFilter([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert specialFilter([1]) == 0              \n    assert specialFilter([]) == 0\n\ncheck(specialFilter)", "text": "    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2", "declaration": "def specialFilter(nums):\n", "example_test": "def check(specialFilter):\n    # Check some simple cases \n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\ncheck(specialFilter)\n", "code": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80specialFilter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 3281, 5632, 152069, 153011, 151983, 10307, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7985, 264, 729, 429, 4990, 458, 1334, 315, 5109, 438, 1946, 323, 4675, 715, 262, 279, 1372, 315, 5424, 304, 279, 1334, 429, 525, 7046, 1091, 220, 16, 15, 323, 2176, 715, 262, 1156, 323, 1537, 18509, 315, 264, 1372, 525, 10322, 320, 16, 11, 220, 18, 11, 220, 20, 11, 220, 22, 11, 220, 24, 4292, 262, 1752, 3110, 510, 262, 3281, 5632, 2561, 16, 20, 11, 481, 22, 18, 11, 220, 16, 19, 11, 481, 16, 20, 2467, 589, 220, 16, 715, 262, 3281, 5632, 2561, 18, 18, 11, 481, 17, 11, 481, 18, 11, 220, 19, 20, 11, 220, 17, 16, 11, 220, 16, 15, 24, 2467, 589, 220, 17, 198, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 67389, 36420, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5511, 729, 311, 1779, 421, 264, 15723, 374, 10322, 74000, 151666, 152208, 151886, 152029, 152988, 152456, 152440, 308, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 151953, 152996, 152496, 152559, 151792, 374, 20366, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 5511, 729, 311, 1779, 421, 264, 1372, 374, 3281, 74000, 151666, 152208, 152677, 152929, 152891, 152440, 607, 1089, 152911, 151879, 151845, 607, 152831, 152128, 151865, 151879, 151845, 3647, 152831, 152128, 152430, 308, 151703, 151740, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 151917, 151879, 151845, 2422, 152831, 152128, 152430, 607, 1089, 151703, 151740, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151886, 153084, 152412, 151793, 152412, 152749, 152528, 308, 152622, 152706, 152114, 220, 16, 15, 152361, 152857, 152911, 151879, 151845, 374, 67389, 36420, 152831, 152128, 151865, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152602, 607, 1089, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 152857, 152911, 151879, 151845, 374, 67389, 36420, 152831, 152128, 151865, 151879, 151845, 526, 152831, 152128, 151697, 152339, 152602, 607, 1089, 151684, 152771, 152278, 151878, 152780, 152763, 220, 16, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 151953, 152996, 151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152957, 151879, 151845, 374, 20366, 152831, 152128, 152430, 308, 151703, 151740, 152996, 152186, 152581, 152899, 152440, 308, 151918, 152237, 152370, 10307, 151764, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80Filter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120elements_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120greater_ter\ud83d\ude80^\ud83d\ude80\u0120than_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120both_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80Filter_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80Filter_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80Odd_ter\ud83d\ude80^\ud83d\ude80Digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80.\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80Special_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Helper_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80.\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80Odd_ter\ud83d\ude80^\ud83d\ude80Digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80Odd_ter\ud83d\ude80^\ud83d\ude80Digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80_n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80Special_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nums_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def specialFilter ( nums ) : \n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \n    def isOddDigit ( n ) : \n        \"\"\"Helper function to check if a digit is odd.\"\"\" \n        return n % 2 != 0 \n    \n    def isSpecial ( n ) : \n        \"\"\"Helper function to check if a number is special.\"\"\" \n        str_n = str ( abs ( n ) ) \n        \n        if len ( str_n ) < 2 : \n            return False \n        \n        return n > 10 and isOddDigit ( int ( str_n [ 0 ] ) ) and isOddDigit ( int ( str_n [ - 1 ] ) ) \n    \n    return sum ( isSpecial ( n ) for n in nums ) \n\n"}
{"task_id": "Python/147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "test": "def check(get_max_triples):\n\n    assert get_max_triples(5) == 1\n    assert get_max_triples(6) == 4\n    assert get_max_triples(10) == 36\n    assert get_max_triples(100) == 53361\n\ncheck(get_max_triples)", "text": "    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).", "declaration": "def get_max_triples(n):\n", "example_test": "def check(get_max_triples):\n    assert get_max_triples(5) == 1\ncheck(get_max_triples)\n", "code": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80get_max_triples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 633, 6345, 3547, 37458, 152069, 153011, 151983, 308, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 525, 2661, 264, 6785, 7546, 308, 13, 1446, 614, 311, 1855, 458, 7546, 1334, 264, 315, 3084, 308, 624, 286, 1752, 1817, 600, 320, 16, 37294, 600, 37294, 308, 701, 279, 897, 315, 264, 989, 60, 284, 600, 353, 600, 481, 600, 488, 220, 16, 624, 286, 3411, 279, 1372, 315, 88561, 320, 64, 989, 1125, 264, 3809, 1125, 264, 6732, 2467, 315, 264, 1380, 600, 366, 502, 366, 595, 11, 715, 262, 323, 264, 989, 60, 488, 264, 3809, 60, 488, 264, 6732, 60, 374, 264, 5248, 315, 220, 18, 382, 262, 13383, 6260, 286, 5571, 25, 308, 284, 220, 20, 198, 286, 9258, 25, 220, 16, 198, 286, 71287, 25, 715, 286, 264, 284, 508, 16, 11, 220, 18, 11, 220, 22, 11, 220, 16, 18, 11, 220, 17, 16, 921, 286, 576, 1172, 2697, 23725, 374, 320, 16, 11, 220, 22, 11, 220, 16, 18, 4292, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 264, 152474, 152817, 153002, 152285, 152456, 152321, 152456, 152321, 152456, 152440, 600, 151894, 152370, 600, 152780, 152370, 600, 152328, 152071, 220, 16, 152996, 152673, 152581, 152899, 152440, 600, 151918, 152237, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 16, 153001, 151766, 152456, 152440, 308, 152328, 152071, 220, 16, 151703, 151740, 151764, 151868, 152329, 152208, 152677, 152929, 152891, 152440, 1760, 152071, 220, 15, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 308, 151703, 151740, 151876, 152980, 152205, 152440, 502, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 600, 152328, 152071, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 152980, 152205, 152440, 595, 152911, 151879, 151845, 2088, 152831, 152128, 151766, 152456, 152440, 502, 152328, 152071, 220, 16, 153001, 152430, 308, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 151839, 152925, 152456, 152321, 152456, 152441, 152339, 152602, 264, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 264, 151684, 152771, 151881, 502, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 264, 151684, 152771, 151881, 595, 151773, 152987, 151773, 151702, 152071, 220, 18, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1760, 152936, 152071, 220, 16, 152208, 151953, 152415, 151953, 152996, 151953, 152996, 151953, 152996, 151886, 152588, 1760, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80_tr_ter\ud83d\ude80^\ud83d\ude80iples_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120create_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u012b\u00a4_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120\u00e2\u012b\u00a4_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80),_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120triples_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80[j_ter\ud83d\ude80^\ud83d\ude80],_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80[k_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80\u0120<_ter\ud83d\ude80^\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80\u0120<_ter\ud83d\ude80^\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80[j_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80[k_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80\u0120:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Input_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Output_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Explanation_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120only_ter\ud83d\ude80^\ud83d\ude80\u0120valid_ter\ud83d\ude80^\ud83d\ude80\u0120triple_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_max_triples ( n ) : \n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\" \n    a = [ i * i - i + 1 for i in range ( 1 , n + 1 ) ] \n    \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            for k in range ( j + 1 , n ) : \n                if ( a [ i ] + a [ j ] + a [ k ] ) % 3 == 0 : \n                    count += 1 \n                \n            \n        \n    \n    return count \n\n"}
{"task_id": "Python/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "test": "def check(bf):\n\n    # Check some simple cases\n    assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(bf(\"Jupiter\", \"Neptune\")))      \n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(bf(\"Earth\", \"Mercury\"))  \n    assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(bf(\"Mercury\", \"Uranus\"))      \n    assert bf(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(bf(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert bf(\"Earth\", \"Earth\") == ()\n    assert bf(\"Mars\", \"Earth\") == ()\n    assert bf(\"Jupiter\", \"Makemake\") == ()\n\ncheck(bf)", "text": "    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "declaration": "def bf(planet1, planet2):\n", "example_test": "def check(bf):\n    # Check some simple cases\n    assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(bf(\"Jupiter\", \"Neptune\")))      \n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(bf(\"Earth\", \"Mercury\"))  \n    assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(bf(\"Mercury\", \"Uranus\"))      \ncheck(bf)\n", "code": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80bf_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80planet1_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80planet2_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 39093, 152069, 153011, 151983, 11580, 16, 152297, 151983, 11580, 17, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 2619, 525, 8063, 32875, 304, 1039, 12941, 1849, 25, 279, 12128, 267, 311, 279, 8059, 715, 262, 374, 43562, 11, 279, 1790, 825, 374, 48976, 11, 1221, 9237, 11, 21048, 11, 49689, 11, 49153, 11, 715, 262, 79670, 355, 11, 79624, 624, 262, 9645, 264, 729, 429, 4990, 1378, 11580, 5036, 438, 9069, 11580, 16, 323, 11580, 17, 13, 715, 262, 576, 729, 1265, 470, 264, 14405, 8482, 678, 32875, 6693, 85128, 525, 715, 262, 7407, 1948, 279, 26507, 315, 11580, 16, 323, 279, 26507, 315, 11580, 17, 11, 10615, 553, 715, 262, 279, 36743, 311, 279, 7015, 13, 715, 262, 576, 729, 1265, 470, 458, 4287, 14405, 421, 11580, 16, 476, 11580, 17, 198, 262, 525, 537, 4396, 11580, 5036, 13, 715, 262, 25311, 198, 262, 39093, 445, 41, 19519, 497, 330, 8813, 51914, 899, 32296, 3489, 34882, 399, 497, 330, 52, 6576, 355, 1138, 262, 39093, 445, 43824, 497, 330, 26716, 25455, 899, 32296, 3489, 53, 37865, 1138, 262, 39093, 445, 26716, 25455, 497, 330, 52, 6576, 355, 899, 32296, 3489, 53, 37865, 497, 330, 43824, 497, 330, 44, 1561, 497, 330, 41, 19519, 497, 330, 34882, 399, 1138, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 32875, 152445, 153062, 152834, 330, 26716, 25455, 1, 151666, 152793, 152834, 330, 53, 37865, 1, 151666, 152793, 152834, 330, 43824, 1, 151666, 152793, 152834, 330, 44, 1561, 1, 151666, 152793, 152834, 330, 41, 19519, 1, 151666, 152793, 152834, 330, 34882, 399, 1, 151666, 152793, 152834, 330, 52, 6576, 355, 1, 151666, 152793, 152834, 330, 8813, 51914, 1, 151666, 152222, 151847, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 11580, 16, 152622, 152442, 152839, 152528, 32875, 152361, 151742, 152983, 152528, 11580, 17, 152622, 152442, 152839, 152528, 32875, 152361, 152380, 152451, 152819, 151886, 152457, 152913, 151958, 152717, 151953, 152415, 152677, 152929, 152891, 152440, 1922, 16, 152911, 151879, 153033, 152036, 152136, 32875, 152411, 1922, 152831, 152128, 152430, 11580, 16, 151703, 151740, 152208, 152677, 152929, 152891, 152440, 1922, 17, 152911, 151879, 153033, 152036, 152136, 32875, 152411, 1922, 152831, 152128, 152430, 11580, 17, 151703, 151740, 152208, 151923, 152557, 152592, 152583, 152528, 1922, 16, 152622, 152706, 152528, 1922, 17, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152731, 151810, 1922, 16, 152554, 151810, 1922, 17, 152455, 152482, 152608, 1922, 17, 152192, 152608, 1922, 16, 151741, 152208, 151953, 152415, 151886, 151816, 151879, 151845, 14405, 152831, 152128, 151697, 152339, 152602, 32875, 151684, 152771, 152503, 153067, 152456, 152440, 1922, 16, 152328, 152071, 220, 16, 152121, 152539, 1922, 17, 152085, 151773, 152987, 151773, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bf_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120There_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120eight_ter\ud83d\ude80^\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120our_ter\ud83d\ude80^\ud83d\ude80\u0120solar_ter\ud83d\ude80^\ud83d\ude80\u0120system_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120closer_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120Sun_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120Mercury_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120Venus_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120Earth_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120Mars_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120Jupiter_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120Saturn_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Uran_ter\ud83d\ude80^\ud83d\ude80us_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120Neptune_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120takes_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120containing_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80\u0120whose_ter\ud83d\ude80^\ud83d\ude80\u0120orbits_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120located_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120orbit_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120orbit_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120proximity_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sun_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120correct_ter\ud83d\ude80^\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120bf_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80J_ter\ud83d\ude80^\ud83d\ude80upiter_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Ne_ter\ud83d\ude80^\ud83d\ude80ptune_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120(\"_ter\ud83d\ude80^\ud83d\ude80Sat_ter\ud83d\ude80^\ud83d\ude80urn_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80ran_ter\ud83d\ude80^\ud83d\ude80us_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120bf_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Earth_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Mer_ter\ud83d\ude80^\ud83d\ude80cury_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120(\"_ter\ud83d\ude80^\ud83d\ude80V_ter\ud83d\ude80^\ud83d\ude80enus_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120bf_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80Mer_ter\ud83d\ude80^\ud83d\ude80cury_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80ran_ter\ud83d\ude80^\ud83d\ude80us_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120(\"_ter\ud83d\ude80^\ud83d\ude80V_ter\ud83d\ude80^\ud83d\ude80enus_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Earth_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80M_ter\ud83d\ude80^\ud83d\ude80ars_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80J_ter\ud83d\ude80^\ud83d\ude80upiter_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Sat_ter\ud83d\ude80^\ud83d\ude80urn_ter\ud83d\ude80^\ud83d\ude80\")\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Mer_ter\ud83d\ude80^\ud83d\ude80cury_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80V_ter\ud83d\ude80^\ud83d\ude80enus_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Earth_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80M_ter\ud83d\ude80^\ud83d\ude80ars_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80J_ter\ud83d\ude80^\ud83d\ude80upiter_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Sat_ter\ud83d\ude80^\ud83d\ude80urn_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80ran_ter\ud83d\ude80^\ud83d\ude80us_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80Ne_ter\ud83d\ude80^\ud83d\ude80ptune_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120planet_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120planets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def bf ( planet1 , planet2 ) : \n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    ''' \n    planets = [ \"Mercury\" , \"Venus\" , \"Earth\" , \"Mars\" , \"Jupiter\" , \"Saturn\" , \"Uranus\" , \"Neptune\" ] \n    \n    if planet1 not in planets or planet2 not in planets : \n        return ( ) \n    \n    index1 = planets . index ( planet1 ) \n    \n    index2 = planets . index ( planet2 ) \n    \n    if index1 > index2 : \n        index1 , index2 = index2 , index1 \n        \n    \n    return tuple ( planets [ index1 + 1 : index2 ] ) \n\n"}
{"task_id": "Python/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "test": "def check(sorted_list_sum):\n\n    # Check some simple cases\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert sorted_list_sum([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert sorted_list_sum([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert sorted_list_sum([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert sorted_list_sum([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert sorted_list_sum(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\ncheck(sorted_list_sum)", "text": "    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]", "declaration": "def sorted_list_sum(lst):\n", "example_test": "def check(sorted_list_sum):\n    # Check some simple cases\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\ncheck(sorted_list_sum)\n", "code": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80sorted_list_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 10615, 2019, 10160, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7985, 264, 729, 429, 26344, 264, 1140, 315, 9069, 438, 264, 5733, 345, 262, 54170, 279, 9069, 429, 614, 10322, 28316, 504, 432, 345, 262, 323, 4675, 279, 19006, 1140, 448, 264, 10615, 1973, 345, 262, 576, 1140, 374, 2677, 264, 1140, 315, 9069, 323, 2581, 458, 1334, 315, 5109, 345, 262, 323, 432, 1231, 6644, 42328, 624, 262, 576, 1973, 315, 279, 1140, 1265, 387, 35388, 553, 3084, 315, 1817, 3409, 11, 323, 498, 198, 262, 1265, 470, 279, 1140, 10615, 553, 429, 5912, 624, 262, 1416, 1378, 4244, 614, 279, 1852, 3084, 11, 3378, 279, 1140, 27790, 2673, 624, 262, 576, 729, 1265, 470, 264, 1140, 315, 9069, 304, 10615, 1973, 624, 262, 1446, 1231, 9658, 429, 678, 4244, 686, 614, 279, 1852, 3084, 624, 262, 1752, 3110, 510, 262, 2060, 1140, 18435, 19065, 5305, 497, 330, 64, 497, 330, 32646, 14013, 589, 4383, 5305, 7026, 262, 2060, 1140, 18435, 19065, 370, 497, 330, 64, 497, 330, 32646, 497, 330, 4385, 14013, 589, 4383, 370, 497, 330, 4385, 7026, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1496, 5118, 18981, 152474, 152817, 153002, 152396, 3409, 152996, 152673, 152581, 152899, 152440, 3409, 151918, 152237, 152370, 18845, 151764, 151880, 152257, 152988, 152456, 153101, 151879, 151845, 2422, 152831, 152128, 152430, 3409, 151703, 151740, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 151868, 152329, 152208, 152677, 152082, 151879, 153033, 152036, 152136, 1496, 5118, 18981, 152411, 3378, 152831, 152128, 152076, 152695, 151792, 1376, 151728, 152820, 152408, 152762, 856, 152334, 153051, 151870, 152913, 152540, 151879, 151845, 2422, 152831, 152128, 152430, 856, 151703, 151740, 152968, 152785, 856, 151958, 152717, 152996, 151703, 151740, 152208, 151886, 152588, 1496, 5118, 18981, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80_list_ter\ud83d\ude80^\ud83d\ude80_sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120accepts_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120parameter_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120deletes_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120lengths_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120returns_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120resulted_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120always_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120never_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120contain_ter\ud83d\ude80^\ud83d\ude80\u0120duplicates_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120rule_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120alphabet_ter\ud83d\ude80^\ud83d\ude80ically_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120may_ter\ud83d\ude80^\ud83d\ude80\u0120assume_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120assert_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80([\"_ter\ud83d\ude80^\ud83d\ude80aa_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80aaa_ter\ud83d\ude80^\ud83d\ude80\"])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80aa_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120assert_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80_sort_ter\ud83d\ude80^\ud83d\ude80([\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80aaa_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80\"])_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80\"]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_length_ter\ud83d\ude80^\ud83d\ude80_words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sorted_list_sum ( lst ) : \n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\" \n    even_length_words = [ word for word in lst if len ( word ) % 2 == 0 ] \n    \n    even_length_words . sort ( key = lambda x : ( len ( x ) , x ) ) \n    return even_length_words \n\n"}
{"task_id": "Python/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "test": "def check(x_or_y):\n\n    # Check some simple cases\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(15, 8, 5) == 5\n    assert x_or_y(3, 33, 5212) == 33\n    assert x_or_y(1259, 3, 52) == 3\n    assert x_or_y(7919, -1, 12) == -1\n    assert x_or_y(3609, 1245, 583) == 583\n    assert x_or_y(91, 56, 129) == 129\n    assert x_or_y(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert x_or_y(1, 2, 0) == 0\n    assert x_or_y(2, 2, 0) == 2\n\ncheck(x_or_y)", "text": "    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5", "declaration": "def x_or_y(n, x, y):\n", "example_test": "def check(x_or_y):\n    # Check some simple cases\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(15, 8, 5) == 5\ncheck(x_or_y)\n", "code": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80x_or_y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 856, 8734, 4178, 152069, 153011, 151983, 308, 152297, 151983, 856, 152297, 151983, 379, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 32, 4285, 2025, 892, 1265, 470, 279, 897, 315, 856, 421, 308, 374, 715, 262, 264, 10250, 1372, 323, 1265, 470, 279, 897, 315, 379, 5937, 382, 262, 25311, 510, 262, 369, 856, 8734, 4178, 7, 22, 11, 220, 18, 19, 11, 220, 16, 17, 8, 621, 220, 18, 19, 198, 262, 369, 856, 8734, 4178, 7, 16, 20, 11, 220, 23, 11, 220, 20, 8, 621, 220, 20, 7213, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152496, 152559, 151792, 374, 38217, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 151923, 152557, 152592, 152583, 152528, 1629, 152622, 152668, 152114, 220, 17, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152228, 220, 17, 153001, 151766, 152456, 153101, 151879, 151845, 526, 152831, 152128, 151766, 152456, 152440, 1629, 151940, 152897, 220, 15, 13, 20, 151703, 151740, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 1629, 151702, 152370, 600, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 151886, 152116, 152488, 151953, 152415, 151953, 152996, 151886, 152301, 153046, 151953, 152996, 151923, 152557, 152592, 151689, 151879, 151845, 374, 38217, 152831, 152128, 152430, 308, 151703, 151740, 152380, 152451, 152819, 151886, 152588, 856, 151953, 152221, 152729, 152515, 151876, 151886, 152588, 379, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_or_ter\ud83d\ude80^\ud83d\ude80_y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80\u0120simple_ter\ud83d\ude80^\ud83d\ude80\u0120program_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120prime_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_or_ter\ud83d\ude80^\ud83d\ude80_y_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80_or_ter\ud83d\ude80^\ud83d\ude80_y_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80_prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def x_or_y ( n , x , y ) : \n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\" \n    def is_prime ( num ) : \n        if num < 2 : \n            return False \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                return False \n            \n        \n        return True \n    \n    if is_prime ( n ) : \n        return x \n    else : \n        return y \n    \n\n"}
{"task_id": "Python/151", "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n", "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "test": "def check(double_the_difference):\n\n    # Check some simple cases\n    assert double_the_difference([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert double_the_difference([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert double_the_difference([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert double_the_difference([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert double_the_difference([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert double_the_difference([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert double_the_difference(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\ncheck(double_the_difference)", "text": "    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.", "declaration": "def double_the_difference(lst):\n", "example_test": "def check(double_the_difference):\n    # Check some simple cases\n    assert double_the_difference([1,3,2,0]) == 10 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert double_the_difference([-1,-2,0]) == 0 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert double_the_difference([9,-2]) == 81 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert double_the_difference([0]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\ncheck(double_the_difference)\n", "code": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80double_the_difference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1990, 16068, 47525, 152069, 153011, 151983, 18845, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 16246, 264, 1140, 315, 5109, 11, 470, 279, 2629, 315, 31340, 315, 279, 5109, 198, 262, 304, 279, 1140, 429, 525, 10322, 13, 38971, 5109, 429, 525, 8225, 476, 537, 25780, 624, 1066, 262, 1990, 16068, 47525, 2561, 16, 11, 220, 18, 11, 220, 17, 11, 220, 15, 2467, 621, 220, 16, 488, 220, 24, 488, 220, 15, 488, 220, 15, 284, 220, 16, 15, 198, 262, 1990, 16068, 47525, 41197, 16, 11, 481, 17, 11, 220, 15, 2467, 621, 220, 15, 198, 262, 1990, 16068, 47525, 2561, 24, 11, 481, 17, 2467, 621, 220, 23, 16, 198, 262, 1990, 16068, 47525, 2561, 15, 2467, 621, 220, 15, 2303, 5872, 262, 1416, 279, 1946, 1140, 374, 4287, 11, 470, 220, 15, 624, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151886, 151816, 151879, 151845, 2629, 151733, 152828, 151722, 152285, 152456, 152440, 600, 151940, 152071, 220, 17, 152996, 152186, 152581, 152899, 152440, 600, 151918, 152237, 152370, 18845, 151764, 152355, 152390, 152412, 151793, 152412, 152749, 152528, 600, 152622, 152706, 152114, 220, 15, 152361, 152857, 152983, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 152238, 152114, 220, 15, 152361, 152857, 152911, 151879, 151845, 11402, 152831, 152128, 152430, 600, 153001, 152430, 526, 151703, 151740, 152194, 152734, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120double_ter\ud83d\ude80^\ud83d\ude80_the_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Ignore_ter\ud83d\ude80^\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120negative_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120double_ter\ud83d\ude80^\ud83d\ude80_the_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120double_ter\ud83d\ude80^\ud83d\ude80_the_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80([-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120double_ter\ud83d\ude80^\ud83d\ude80_the_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120double_ter\ud83d\ude80^\ud83d\ude80_the_ter\ud83d\ude80^\ud83d\ude80_difference_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120input_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lst_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120isinstance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def double_the_difference ( lst ) : \n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    ''' \n    return sum ( i ** 2 for i in lst if i > 0 and i % 2 != 0 and isinstance ( i , int ) ) \n\n"}
{"task_id": "Python/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "test": "def check(compare):\n\n    # Check some simple cases\n    assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2])==[4,4,1,0,0,6]\n    # Check some simple cases\n    assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert compare([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert compare([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert compare([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(compare)", "text": "    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]", "declaration": "def compare(game,guess):\n", "example_test": "def check(compare):\n    # Check some simple cases\n    assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2])==[4,4,1,0,0,6]\ncheck(compare)\n", "code": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80compare_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80game_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80guess_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 9429, 152069, 153011, 151983, 1809, 152297, 151983, 7942, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 40, 1744, 582, 678, 6099, 429, 8266, 979, 279, 1102, 315, 1045, 1293, 89250, 198, 262, 1538, 374, 5499, 3881, 13, 576, 15650, 323, 11303, 498, 614, 518, 429, 4445, 525, 198, 262, 8491, 5802, 26305, 1495, 323, 26297, 624, 262, 4615, 3383, 374, 311, 8253, 421, 264, 1697, 12440, 42310, 279, 3059, 315, 264, 1372, 315, 9071, 624, 262, 1446, 525, 2661, 1378, 18386, 315, 12205, 323, 60537, 315, 6144, 3084, 11, 1380, 1817, 1922, 4933, 264, 2432, 13, 715, 262, 3411, 458, 1334, 315, 279, 1852, 3084, 3371, 11519, 1246, 3041, 1007, 1817, 7942, 572, 13, 1416, 807, 614, 42310, 12440, 345, 262, 279, 897, 374, 220, 15, 11, 323, 421, 537, 11, 279, 897, 374, 279, 10740, 6672, 1948, 279, 7942, 323, 279, 5456, 624, 9401, 262, 3110, 1447, 262, 9429, 2561, 16, 11, 17, 11, 18, 11, 19, 11, 20, 11, 16, 14955, 16, 11, 17, 11, 18, 11, 19, 11, 17, 4999, 17, 2467, 1464, 508, 15, 11, 15, 11, 15, 11, 15, 11, 18, 11, 18, 921, 262, 9429, 2561, 15, 11, 20, 11, 15, 11, 15, 11, 15, 11, 19, 14955, 19, 11, 16, 11, 16, 11, 15, 11, 15, 4999, 17, 2467, 1464, 508, 19, 11, 19, 11, 16, 11, 15, 11, 15, 11, 21, 921, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 1809, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 151696, 152339, 152602, 1809, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152622, 151683, 151696, 152339, 152602, 7942, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152228, 220, 15, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 151845, 3647, 152831, 152128, 151766, 152456, 152441, 152339, 152602, 7942, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152780, 152955, 152339, 152602, 1809, 151684, 152771, 151881, 600, 151773, 152987, 151773, 151703, 151740, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120game_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120guess_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80\u0120think_ter\ud83d\ude80^\ud83d\ude80\u0120we_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120remember_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120feeling_ter\ud83d\ude80^\ud83d\ude80\u0120when_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120some_ter\ud83d\ude80^\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80-awaited_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120event_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120finally_ter\ud83d\ude80^\ud83d\ude80\u0120known_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120feelings_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120thoughts_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120moment_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120definitely_ter\ud83d\ude80^\ud83d\ude80\u0120worth_ter\ud83d\ude80^\ud83d\ude80\u0120noting_ter\ud83d\ude80^\ud83d\ude80\u0120down_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120comparing_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Your_ter\ud83d\ude80^\ud83d\ude80\u0120task_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120determine_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120person_ter\ud83d\ude80^\ud83d\ude80\u0120correctly_ter\ud83d\ude80^\ud83d\ude80\u0120guessed_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120results_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120matches_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120arrays_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120scores_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120guesses_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120where_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80\u0120shows_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120den_ter\ud83d\ude80^\ud83d\ude80oting_ter\ud83d\ude80^\ud83d\ude80\u0120how_ter\ud83d\ude80^\ud83d\ude80\u0120far_ter\ud83d\ude80^\ud83d\ude80\u0120off_ter\ud83d\ude80^\ud83d\ude80\u0120each_ter\ud83d\ude80^\ud83d\ude80\u0120guess_ter\ud83d\ude80^\ud83d\ude80\u0120was_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120they_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120guessed_ter\ud83d\ude80^\ud83d\ude80\u0120correctly_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120absolute_ter\ud83d\ude80^\ud83d\ude80\u0120difference_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120guess_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120score_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80],[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120compare_ter\ud83d\ude80^\ud83d\ude80([_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80],[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,-_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80])_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120game_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120game_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120guess_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120guess_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120game_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def compare ( game , guess ) : \n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\" \n    result = [ ] \n    \n    for i in range ( len ( game ) ) : \n        if game [ i ] == guess [ i ] : \n            result . append ( 0 ) \n        else : \n            result . append ( abs ( guess [ i ] - game [ i ] ) ) \n        \n    \n    return result \n\n"}
{"task_id": "Python/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "test": "def check(Strongest_Extension):\n\n    # Check some simple cases\n    assert Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert Strongest_Extension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert Strongest_Extension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert Strongest_Extension('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert Strongest_Extension('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert Strongest_Extension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert Strongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert Strongest_Extension('_', ['Bb', '91245']) == '_.Bb'\n    assert Strongest_Extension('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ncheck(Strongest_Extension)", "text": "    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "declaration": "def Strongest_Extension(class_name, extensions):\n", "example_test": "def check(Strongest_Extension):\n    # Check some simple cases\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\ncheck(Strongest_Extension)\n", "code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80Strongest_Extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80class_name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80extensions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 26099, 477, 62, 12049, 152069, 153011, 151983, 536, 1269, 152297, 151983, 19721, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 686, 387, 2661, 279, 829, 315, 264, 536, 320, 64, 914, 8, 323, 264, 1140, 315, 19721, 624, 262, 576, 19721, 525, 311, 387, 1483, 311, 2795, 5107, 6846, 311, 279, 536, 13, 576, 198, 262, 8170, 315, 279, 8894, 374, 438, 11017, 25, 6771, 26101, 387, 279, 1372, 315, 279, 39482, 198, 262, 11931, 304, 279, 8894, 594, 829, 11, 323, 1077, 13716, 387, 279, 1372, 315, 42047, 11931, 715, 262, 304, 279, 8894, 594, 829, 11, 279, 8170, 374, 2661, 553, 279, 19419, 26101, 481, 13716, 13, 715, 262, 1446, 1265, 1477, 279, 29905, 8894, 323, 470, 264, 914, 304, 419, 715, 262, 3561, 25, 98457, 27318, 644, 477, 12049, 675, 624, 262, 1416, 1052, 525, 1378, 476, 803, 19721, 448, 279, 1852, 8170, 11, 498, 1265, 198, 262, 5157, 279, 825, 429, 4041, 1156, 304, 279, 1140, 624, 262, 1752, 3110, 11, 421, 498, 525, 2661, 330, 50, 37414, 1, 438, 279, 536, 323, 264, 1140, 315, 279, 198, 262, 19721, 25, 2509, 925, 81, 9971, 6140, 50, 742, 34, 288, 516, 364, 26843, 2367, 516, 364, 623, 84, 37, 51123, 660, 1221, 498, 1265, 198, 262, 470, 364, 50, 37414, 808, 19462, 9971, 6140, 50, 742, 34, 288, 6, 2474, 364, 925, 81, 9971, 6140, 50, 742, 34, 288, 6, 374, 279, 29905, 8894, 715, 262, 320, 1199, 8170, 374, 481, 16, 4292, 262, 13383, 510, 262, 369, 26099, 477, 62, 12049, 492, 2408, 4790, 516, 2509, 6029, 516, 364, 3430, 516, 364, 3706, 5078, 621, 364, 2408, 4790, 875, 32, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 29905, 31035, 152083, 152086, 152208, 152677, 152929, 152891, 152440, 1932, 71893, 152911, 151879, 151845, 2224, 152831, 152128, 152928, 7788, 13573, 6, 151666, 151703, 151740, 152208, 152980, 152205, 152440, 8894, 152370, 19721, 151876, 152677, 152929, 152891, 152440, 8170, 153081, 152456, 153101, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 272, 151918, 152237, 152370, 8894, 151764, 152355, 152598, 151879, 153033, 152036, 152136, 272, 152411, 374, 13574, 152831, 152128, 151703, 151740, 152194, 152734, 152780, 152911, 151879, 151845, 2629, 151733, 152828, 151722, 152153, 220, 16, 152996, 152186, 152581, 152899, 152440, 272, 151918, 152237, 152370, 8894, 151764, 152355, 152598, 151879, 153033, 152036, 152136, 272, 152411, 374, 14772, 152831, 152128, 151703, 151740, 152194, 152734, 152208, 151923, 152557, 152592, 152583, 152528, 8170, 152622, 152706, 152528, 1932, 71893, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 71893, 152370, 8170, 152208, 152677, 152929, 152891, 152440, 29905, 31035, 152370, 8894, 152208, 151953, 152415, 151953, 152996, 151886, 152926, 282, 14129, 1040, 1269, 65884, 4519, 477, 31035, 9863, 151666, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Strong_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120class_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120extensions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120class_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120extensions_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120extensions_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120used_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120load_ter\ud83d\ude80^\ud83d\ude80\u0120additional_ter\ud83d\ude80^\ud83d\ude80\u0120classes_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120class_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120follows_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120Let_ter\ud83d\ude80^\ud83d\ude80\u0120CAP_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120uppercase_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120let_ter\ud83d\ude80^\ud83d\ude80\u0120SM_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120lowercase_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120by_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120fraction_ter\ud83d\ude80^\ud83d\ude80\u0120CAP_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120SM_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120strongest_ter\ud83d\ude80^\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120ClassName_ter\ud83d\ude80^\ud83d\ude80.Str_ter\ud83d\ude80^\ud83d\ude80ong_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80Extension_ter\ud83d\ude80^\ud83d\ude80Name_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120extensions_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120same_ter\ud83d\ude80^\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120choose_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120comes_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80lices_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120class_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120extensions_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80SE_ter\ud83d\ude80^\ud83d\ude80r_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80NG_ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80li_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Che_ter\ud83d\ude80^\ud83d\ude80ese_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80St_ter\ud83d\ude80^\ud83d\ude80u_ter\ud83d\ude80^\ud83d\ude80F_ter\ud83d\ude80^\ud83d\ude80fed_ter\ud83d\ude80^\ud83d\ude80']_ter\ud83d\ude80^\ud83d\ude80\u0120then_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80lices_ter\ud83d\ude80^\ud83d\ude80.S_ter\ud83d\ude80^\ud83d\ude80Er_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80NG_ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80li_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120since_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80SE_ter\ud83d\ude80^\ud83d\ude80r_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80NG_ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80li_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120strongest_ter\ud83d\ude80^\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80its_ter\ud83d\ude80^\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80).\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120for_ter\ud83d\ude80^\ud83d\ude80\u0120Strong_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Extension_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80my_ter\ud83d\ude80^\ud83d\ude80_class_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120['_ter\ud83d\ude80^\ud83d\ude80AA_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80Be_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80CC_ter\ud83d\ude80^\ud83d\ude80'])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80my_ter\ud83d\ude80^\ud83d\ude80_class_ter\ud83d\ude80^\ud83d\ude80.A_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strongest_ter\ud83d\ude80^\ud83d\ude80_extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_strength_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extensions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_strength_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_strength_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strength_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strongest_ter\ud83d\ude80^\ud83d\ude80_extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extension_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80\"{_ter\ud83d\ude80^\ud83d\ude80class_ter\ud83d\ude80^\ud83d\ude80_name_ter\ud83d\ude80^\ud83d\ude80}.{_ter\ud83d\ude80^\ud83d\ude80strong_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80_extension_ter\ud83d\ude80^\ud83d\ude80}\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Strongest_Extension ( class_name , extensions ) : \n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\" \n    strongest_extension = None \n    \n    max_strength = float ( '-inf' ) \n    \n    for extension in extensions : \n        strength = sum ( 1 for c in extension if c . isupper ( ) ) - sum ( 1 for c in extension if c . islower ( ) ) \n        \n        if strength > max_strength : \n            max_strength = strength \n            \n            strongest_extension = extension \n            \n        \n    \n    return f\"{class_name}.{strongest_extension}\" \n\n"}
{"task_id": "Python/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "test": "def check(cycpattern_check):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  cycpattern_check(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  cycpattern_check(\"yello\",\"ell\") == True , \"test #1\"\n    assert  cycpattern_check(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  cycpattern_check(\"efef\",\"fee\") == True , \"test #3\"\n    assert  cycpattern_check(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  cycpattern_check(\"winemtt\",\"tinem\") == True , \"test #5\"\n\ncheck(cycpattern_check)", "text": "    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True", "declaration": "def cycpattern_check(a , b):\n", "example_test": "def check(cycpattern_check):\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  cycpattern_check(\"abcd\",\"abd\") == False , \"test #0\"\n    assert  cycpattern_check(\"hello\",\"ell\") == True , \"test #1\"\n    assert  cycpattern_check(\"whassup\",\"psus\") == False , \"test #2\"\n    assert  cycpattern_check(\"abab\",\"baa\") == True , \"test #3\"\n    assert  cycpattern_check(\"efef\",\"eeff\") == False , \"test #4\"\n    assert  cycpattern_check(\"himenss\",\"simen\") == True , \"test #5\"\ncheck(cycpattern_check)\n", "code": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80cycpattern_check_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 43348, 14339, 7200, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 220, 17, 4244, 13, 1446, 1184, 311, 470, 3007, 421, 279, 2086, 3409, 476, 894, 315, 1181, 69201, 374, 264, 38449, 304, 279, 1156, 3409, 198, 262, 43348, 14339, 7200, 445, 68644, 2198, 85920, 899, 589, 3557, 198, 262, 43348, 14339, 7200, 445, 14990, 2198, 613, 899, 589, 3007, 198, 262, 43348, 14339, 7200, 445, 1312, 395, 454, 2198, 1690, 355, 899, 589, 3557, 198, 262, 43348, 14339, 7200, 445, 370, 370, 2198, 4645, 64, 899, 589, 3007, 198, 262, 43348, 14339, 7200, 445, 823, 823, 2198, 2127, 542, 899, 589, 3557, 198, 262, 43348, 14339, 7200, 445, 39517, 724, 82, 2198, 14781, 268, 899, 589, 3007, 271, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 293, 152622, 151683, 152461, 1591, 151666, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 293, 151703, 151740, 151703, 151740, 151876, 152677, 152929, 152891, 152440, 2730, 153081, 152456, 152441, 152339, 152602, 293, 151684, 152771, 152503, 152539, 600, 152121, 152085, 151773, 152987, 151773, 152328, 152955, 152339, 152602, 293, 151684, 152771, 152503, 152121, 152539, 600, 152085, 151773, 152987, 151773, 152208, 151923, 152557, 152592, 152583, 152528, 2730, 152622, 152607, 152528, 264, 152361, 152380, 152451, 152819, 151886, 152301, 153046, 151953, 152415, 151953, 152996, 151886, 152116, 152488, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120rotations_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120substring_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80abcd_ter\ud83d\ude80^\ud83d\ude80\",\"_ter\ud83d\ude80^\ud83d\ude80abd_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80hello_ter\ud83d\ude80^\ud83d\ude80\",\"_ter\ud83d\ude80^\ud83d\ude80ell_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80wh_ter\ud83d\ude80^\ud83d\ude80ass_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80\",\"_ter\ud83d\ude80^\ud83d\ude80ps_ter\ud83d\ude80^\ud83d\ude80us_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80\",\"_ter\ud83d\ude80^\ud83d\ude80ba_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80ef_ter\ud83d\ude80^\ud83d\ude80ef_ter\ud83d\ude80^\ud83d\ude80\",\"_ter\ud83d\ude80^\ud83d\ude80ee_ter\ud83d\ude80^\ud83d\ude80ff_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120cyc_ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80_check_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80him_ter\ud83d\ude80^\ud83d\ude80ens_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80\",\"_ter\ud83d\ude80^\ud83d\ude80sim_ter\ud83d\ude80^\ud83d\ude80en_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def cycpattern_check ( a , b ) : \n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\" \n    if b == \"\" : \n        return True \n    \n    for i in range ( len ( b ) ) : \n        temp = b [ i : ] + b [ : i ] \n        \n        if temp in a : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Python/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": "def check(even_odd_count):\n\n    # Check some simple cases\n    assert even_odd_count(7) == (0, 1)\n    assert even_odd_count(-78) == (1, 1)\n    assert even_odd_count(3452) == (2, 2)\n    assert even_odd_count(346211) == (3, 3)\n    assert even_odd_count(-345821) == (3, 3)\n    assert even_odd_count(-2) == (1, 0)\n    assert even_odd_count(-45347) == (2, 3)\n    assert even_odd_count(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(even_odd_count)", "text": "    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)", "declaration": "def even_odd_count(num):\n", "example_test": "def check(even_odd_count):\n    # Check some simple cases\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(even_odd_count)\n", "code": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80even_odd_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1496, 74668, 3180, 152069, 153011, 151983, 1629, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 22043, 458, 7546, 13, 470, 264, 14405, 429, 702, 279, 1372, 315, 1496, 323, 10322, 18509, 15576, 382, 257, 13383, 510, 286, 1496, 74668, 3180, 4080, 16, 17, 8, 32296, 320, 16, 11, 220, 16, 340, 286, 1496, 74668, 3180, 7, 16, 17, 18, 8, 32296, 320, 16, 11, 220, 17, 340, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1496, 3180, 152071, 220, 15, 152208, 152677, 152929, 152891, 152440, 10322, 3180, 152071, 220, 15, 152208, 152980, 152205, 152440, 15723, 152911, 151879, 151845, 607, 152831, 152128, 151865, 151879, 151845, 3647, 152831, 152128, 152430, 1629, 151703, 151740, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 153101, 151879, 151845, 526, 152831, 152128, 152430, 15723, 151703, 151740, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 153037, 152682, 152440, 1496, 3180, 152936, 152071, 220, 16, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 153037, 152682, 152440, 10322, 3180, 152936, 152071, 220, 16, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 152457, 152913, 152785, 1496, 3180, 152968, 152785, 10322, 3180, 151958, 152717, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Given_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120respectively_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80(-_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==>_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80_count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def even_odd_count ( num ) : \n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\" \n    even_count = 0 \n    \n    odd_count = 0 \n    \n    for digit in str ( abs ( num ) ) : \n        if int ( digit ) % 2 == 0 : \n            even_count += 1 \n        else : \n            odd_count += 1 \n        \n    \n    return ( even_count , odd_count ) \n\n"}
{"task_id": "Python/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "test": "def check(int_to_mini_roman):\n\n    # Check some simple cases\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(251) == 'ccli'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n    assert int_to_mini_roman(500) == 'd'\n    assert int_to_mini_roman(1) == 'i'\n    assert int_to_mini_roman(4) == 'iv'\n    assert int_to_mini_roman(43) == 'xliii'\n    assert int_to_mini_roman(90) == 'xc'\n    assert int_to_mini_roman(94) == 'xciv'\n    assert int_to_mini_roman(532) == 'dxxxii'\n    assert int_to_mini_roman(900) == 'cm'\n    assert int_to_mini_roman(994) == 'cmxciv'\n    assert int_to_mini_roman(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(int_to_mini_roman)", "text": "    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'", "declaration": "def int_to_mini_roman(number):\n", "example_test": "def check(int_to_mini_roman):\n    # Check some simple cases\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(426) == 'cdxxvi'\ncheck(int_to_mini_roman)\n", "code": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80int_to_mini_roman_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 526, 2346, 84821, 62, 62014, 152069, 153011, 151983, 1372, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 6785, 7546, 11, 6851, 1181, 47776, 83292, 13578, 438, 264, 914, 345, 262, 323, 470, 432, 304, 42047, 624, 262, 91975, 25, 220, 16, 2651, 1629, 2651, 220, 16, 15, 15, 15, 271, 262, 25311, 510, 262, 12109, 526, 2346, 84821, 62, 62014, 7, 16, 24, 8, 621, 364, 87, 941, 1248, 262, 12109, 526, 2346, 84821, 62, 62014, 7, 16, 20, 17, 8, 621, 364, 564, 3808, 1248, 262, 12109, 526, 2346, 84821, 62, 62014, 7, 19, 17, 21, 8, 621, 364, 4385, 4146, 9971, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 47776, 99001, 1127, 152445, 153062, 152032, 152913, 152642, 220, 16, 15, 15, 15, 152968, 152249, 364, 76, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 24, 15, 15, 152968, 152249, 364, 6226, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 20, 15, 15, 152968, 152249, 364, 67, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 19, 15, 15, 152968, 152249, 364, 4385, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 16, 15, 15, 152968, 152249, 364, 66, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 24, 15, 152968, 152249, 364, 8148, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 20, 15, 152968, 152249, 364, 75, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 19, 15, 152968, 152249, 364, 24310, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 16, 15, 152968, 152249, 364, 87, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 24, 152968, 152249, 364, 941, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 20, 152968, 152249, 364, 85, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 19, 152968, 152249, 364, 344, 6, 151666, 151958, 152717, 152793, 152032, 152913, 152642, 220, 16, 152968, 152249, 364, 72, 6, 151666, 151958, 152717, 152222, 151847, 152208, 152677, 152929, 152891, 152440, 1102, 151887, 3355, 151666, 152208, 152980, 152205, 152731, 151810, 897, 152554, 151810, 83292, 152455, 152370, 47776, 99001, 1127, 151876, 152067, 152685, 152583, 152528, 1372, 152622, 152927, 152528, 897, 152361, 151876, 152677, 153037, 152682, 152440, 1102, 152936, 152370, 83292, 152208, 152677, 153037, 152682, 152440, 1372, 151962, 152370, 897, 152208, 151953, 152996, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_mini_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80roman_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120obtain_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120roman_ter\ud83d\ude80^\ud83d\ude80\u0120numeral_ter\ud83d\ude80^\ud83d\ude80\u0120equivalent_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120lowercase_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Restrictions_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_mini_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80roman_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80ix_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_mini_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80roman_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80cl_ter\ud83d\ude80^\ud83d\ude80ii_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_mini_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80roman_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80xx_ter\ud83d\ude80^\ud83d\ude80vi_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120roman_ter\ud83d\ude80^\ud83d\ude80_numer_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80cm_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80xc_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80xl_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80ix_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80v_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80iv_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numeral_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120roman_ter\ud83d\ude80^\ud83d\ude80_numer_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numeral_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def int_to_mini_roman ( number ) : \n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\" \n    roman_numerals = [ ( 1000 , 'm' ) , ( 900 , 'cm' ) , ( 500 , 'd' ) , ( 400 , 'cd' ) , ( 100 , 'c' ) , ( 90 , 'xc' ) , ( 50 , 'l' ) , ( 40 , 'xl' ) , ( 10 , 'x' ) , ( 9 , 'ix' ) , ( 5 , 'v' ) , ( 4 , 'iv' ) , ( 1 , 'i' ) ] \n    \n    result = '' \n    \n    for value , numeral in roman_numerals : \n        while number >= value : \n            result += numeral \n            number -= value \n        \n    \n    return result \n\n"}
{"task_id": "Python/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": "def check(right_angle_triangle):\n\n    # Check some simple cases\n    assert right_angle_triangle(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(10, 6, 8) == True\n    assert right_angle_triangle(2, 2, 2) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(10, 5, 7) == False\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(15, 8, 17) == True\n    assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert right_angle_triangle(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert right_angle_triangle(2, 2, 10) == False\n\ncheck(right_angle_triangle)", "text": "    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False", "declaration": "def right_angle_triangle(a, b, c):\n", "example_test": "def check(right_angle_triangle):\n    # Check some simple cases\n    assert right_angle_triangle(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert right_angle_triangle(1, 2, 3) == False\ncheck(right_angle_triangle)\n", "code": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80right_angle_triangle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80'''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1290, 21727, 70575, 152069, 153011, 151983, 264, 152297, 151983, 293, 152297, 151983, 272, 151775, 153051, 153051, 151876, 152677, 152502, 11166, 262, 16246, 279, 28316, 315, 279, 2326, 11067, 315, 264, 21495, 13, 3411, 3007, 421, 279, 2326, 198, 262, 11067, 1352, 264, 1290, 12, 38940, 21495, 11, 3557, 5937, 624, 262, 362, 1290, 12, 38940, 21495, 374, 264, 21495, 304, 892, 825, 9210, 374, 1290, 9210, 476, 715, 262, 220, 24, 15, 8381, 624, 262, 13383, 510, 262, 1290, 21727, 70575, 7, 18, 11, 220, 19, 11, 220, 20, 8, 621, 3007, 198, 262, 1290, 21727, 70575, 7, 16, 11, 220, 17, 11, 220, 18, 8, 621, 3557, 198, 262, 11456, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 11067, 152911, 151879, 151845, 10615, 152831, 152128, 152284, 153062, 152281, 264, 152793, 152281, 293, 152793, 152281, 272, 152222, 151847, 151703, 151740, 152208, 151886, 152029, 152988, 152456, 152321, 152456, 152441, 152339, 152602, 11067, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151940, 152071, 220, 17, 152328, 153081, 152456, 152441, 152339, 152602, 11067, 151684, 152771, 151961, 220, 16, 151773, 152987, 151773, 151940, 152071, 220, 17, 152622, 151683, 152988, 152456, 152441, 152339, 152602, 11067, 151684, 152771, 151961, 220, 17, 151773, 152987, 151773, 151940, 152071, 220, 17, 152361, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_angle_ter\ud83d\ude80^\ud83d\ude80_triangle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'''\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120lengths_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120three_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80\u0120form_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80angled_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80angled_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120angle_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80\u0120angle_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120degree_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_angle_ter\ud83d\ude80^\ud83d\ude80_triangle_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120True_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80_angle_ter\ud83d\ude80^\ud83d\ude80_triangle_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120False_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120'''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sides_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def right_angle_triangle ( a , b , c ) : \n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ''' \n    sides = sorted ( [ a , b , c ] ) \n    \n    return sides [ 0 ] ** 2 + sides [ 1 ] ** 2 == sides [ 2 ] ** 2 \n\n"}
{"task_id": "Python/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": "def check(find_max):\n\n    # Check some simple cases\n    assert (find_max([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (find_max([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (find_max([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (find_max([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (find_max([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (find_max([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (find_max([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (find_max([\"b\"]) == \"b\"), 't9'\n    assert (find_max([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\ncheck(find_max)", "text": "    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "declaration": "def find_max(words):\n", "example_test": "def check(find_max):\n    # Check some simple cases\n    assert (find_max([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (find_max([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\ncheck(find_max)\n", "code": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80find_max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 1477, 6345, 152069, 153011, 151983, 4244, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 7985, 264, 729, 429, 26344, 264, 1140, 315, 9069, 624, 262, 576, 1140, 5610, 2155, 4244, 13, 3411, 279, 3409, 448, 7192, 1372, 198, 262, 315, 4911, 5766, 13, 1416, 5248, 9069, 614, 7192, 1372, 315, 4911, 198, 262, 5766, 11, 470, 279, 825, 892, 4041, 1156, 304, 512, 14331, 31177, 1973, 382, 262, 1477, 6345, 19065, 606, 497, 330, 1055, 497, 330, 917, 14013, 621, 330, 917, 698, 262, 1477, 6345, 19065, 606, 497, 330, 268, 309, 497, 330, 5804, 14013, 621, 330, 268, 309, 698, 262, 1477, 6345, 19065, 28458, 32646, 497, 330, 6066, 1, 33821, 638, 14013, 621, 1591, 28458, 32646, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1932, 13533, 151887, 1591, 151666, 152208, 152677, 152929, 152891, 152440, 1932, 21218, 37418, 152071, 220, 15, 152208, 152980, 152205, 152440, 3409, 152370, 4244, 151876, 152677, 152929, 152891, 152440, 4911, 37418, 152911, 151879, 151845, 2422, 152831, 152128, 151865, 151879, 151845, 738, 152831, 152128, 152430, 3409, 151703, 151740, 151703, 151740, 152208, 151923, 152557, 152592, 152191, 152412, 152749, 152528, 4911, 37418, 152622, 152706, 152528, 1932, 21218, 37418, 152361, 151742, 152879, 151708, 152412, 152749, 152528, 4911, 37418, 152622, 151683, 152528, 1932, 21218, 37418, 152361, 152857, 152983, 152528, 3409, 152622, 152668, 152528, 1932, 13533, 152361, 152380, 152451, 152819, 152677, 152929, 152891, 152440, 1932, 13533, 152370, 3409, 152208, 152677, 152929, 152891, 152440, 1932, 21218, 37418, 152370, 4911, 37418, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1932, 13533, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80Write_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120accepts_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120different_ter\ud83d\ude80^\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80\u0120with_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80\u0120strings_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120characters_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120which_ter\ud83d\ude80^\ud83d\ude80\u0120comes_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120le_ter\ud83d\ude80^\ud83d\ude80xic_ter\ud83d\ude80^\ud83d\ude80ographical_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80([\"_ter\ud83d\ude80^\ud83d\ude80name_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80\"])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80([\"_ter\ud83d\ude80^\ud83d\ude80name_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80en_ter\ud83d\ude80^\ud83d\ude80am_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80game_ter\ud83d\ude80^\ud83d\ude80\"])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80en_ter\ud83d\ude80^\ud83d\ude80am_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80_max_ter\ud83d\ude80^\ud83d\ude80([\"_ter\ud83d\ude80^\ud83d\ude80aaaa_ter\ud83d\ude80^\ud83d\ude80aaa_ter\ud83d\ude80^\ud83d\ude80\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80bb_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80\u0120,\"_ter\ud83d\ude80^\ud83d\ude80cc_ter\ud83d\ude80^\ud83d\ude80\"])_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80aaaa_ter\ud83d\ude80^\ud83d\ude80aaa_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80_chars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80_word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_max ( words ) : \n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\" \n    max_word = \"\" \n    \n    max_unique_chars = 0 \n    \n    for word in words : \n        unique_chars = len ( set ( word ) ) \n        \n        if unique_chars > max_unique_chars or ( unique_chars == max_unique_chars and word < max_word ) : \n            max_word = word \n            \n            max_unique_chars = unique_chars \n            \n        \n    \n    return max_word \n\n"}
{"task_id": "Python/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "test": "def check(eat):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert eat(5, 6, 10) == [11, 4], \"Error\"\n    assert eat(4, 8, 9) == [12, 1], \"Error\"\n    assert eat(1, 10, 10) == [11, 0], \"Error\"\n    assert eat(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert eat(4, 5, 7) == [9, 2], \"Error\"\n    assert eat(4, 5, 1) == [5, 0], \"Error\"\n\ncheck(eat)", "text": "    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)", "declaration": "def eat(number, need, remaining):\n", "example_test": "def check(eat):\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert eat(5, 6, 10) == [11, 4], \"Error\"\n    assert eat(4, 8, 9) == [12, 1], \"Error\"\n    assert eat(1, 10, 10) == [11, 0], \"Error\"\n    assert eat(2, 11, 5) == [7, 0], \"Error\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(eat)\n", "code": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80eat_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80need_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80remaining_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 8180, 152069, 153011, 151983, 1372, 152297, 151983, 1184, 152297, 151983, 9664, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 1446, 2299, 264, 28956, 38724, 11, 323, 498, 2669, 614, 34561, 264, 3654, 1372, 315, 61417, 345, 262, 714, 1431, 498, 1184, 311, 8180, 803, 61417, 311, 4583, 279, 1899, 594, 20969, 624, 262, 498, 1265, 470, 458, 1334, 315, 508, 2790, 1372, 315, 34561, 61417, 1283, 697, 20969, 345, 1920, 279, 1372, 315, 61417, 2115, 1283, 697, 20969, 5133, 262, 421, 1052, 525, 537, 3322, 9664, 61417, 11, 498, 686, 8180, 678, 9664, 61417, 11, 714, 686, 2058, 387, 28956, 624, 1066, 262, 13383, 510, 262, 353, 8180, 7, 20, 11, 220, 21, 11, 220, 16, 15, 8, 1464, 508, 16, 16, 11, 220, 19, 921, 262, 353, 8180, 7, 19, 11, 220, 23, 11, 220, 24, 8, 1464, 508, 16, 17, 11, 220, 16, 921, 262, 353, 8180, 7, 16, 11, 220, 16, 15, 11, 220, 16, 15, 8, 1464, 508, 16, 16, 11, 220, 15, 921, 262, 353, 8180, 7, 17, 11, 220, 16, 16, 11, 220, 20, 8, 1464, 508, 22, 11, 220, 15, 921, 1066, 262, 21419, 510, 262, 569, 4082, 549, 7546, 198, 286, 279, 1372, 315, 61417, 429, 498, 614, 34561, 624, 262, 569, 17046, 549, 7546, 198, 286, 279, 1372, 315, 61417, 429, 498, 1184, 311, 8180, 624, 262, 569, 43436, 549, 7546, 198, 286, 279, 1372, 315, 9664, 61417, 279, 83, 3000, 304, 5591, 7213, 262, 1200, 77626, 510, 262, 353, 220, 15, 2651, 1372, 2651, 220, 16, 15, 15, 15, 198, 262, 353, 220, 15, 2651, 1184, 2651, 220, 16, 15, 15, 15, 198, 262, 353, 220, 15, 2651, 9664, 2651, 220, 16, 15, 15, 15, 271, 262, 12243, 2464, 89063, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 152583, 152528, 1184, 152622, 152533, 152528, 9664, 152361, 152380, 152451, 152819, 151886, 151948, 153062, 152316, 152456, 152440, 1372, 152328, 152370, 1184, 152793, 152316, 152456, 152440, 9664, 152780, 152370, 1184, 152222, 151847, 151953, 152221, 152729, 152515, 151876, 151886, 151948, 153062, 152316, 152456, 152440, 1372, 152328, 152370, 9664, 152793, 153088, 220, 15, 152222, 151847, 151953, 152996, 152415, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120You_ter\ud83d\ude80^\ud83d\ude80're_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120hungry_ter\ud83d\ude80^\ud83d\ude80\u0120rabbit_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120already_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120eaten_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120certain_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120now_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80\u0120more_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120complete_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80's_ter\ud83d\ude80^\ud83d\ude80\u0120meals_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120eaten_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80\u0120after_ter\ud83d\ude80^\ud83d\ude80\u0120your_ter\ud83d\ude80^\ud83d\ude80\u0120meals_ter\ud83d\ude80^\ud83d\ude80,\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80\u0120after_ter\ud83d\ude80^\ud83d\ude80\u0120your_ter\ud83d\ude80^\ud83d\ude80\u0120meals_ter\ud83d\ude80^\ud83d\ude80\u0120]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120there_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120not_ter\ud83d\ude80^\ud83d\ude80\u0120enough_ter\ud83d\ude80^\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120but_ter\ud83d\ude80^\ud83d\ude80\u0120will_ter\ud83d\ude80^\ud83d\ude80\u0120still_ter\ud83d\ude80^\ud83d\ude80\u0120be_ter\ud83d\ude80^\ud83d\ude80\u0120hungry_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120->_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Variables_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120@_ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120have_ter\ud83d\ude80^\ud83d\ude80\u0120eaten_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120@_ter\ud83d\ude80^\ud83d\ude80need_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80\u0120that_ter\ud83d\ude80^\ud83d\ude80\u0120you_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120eat_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120@_ter\ud83d\ude80^\ud83d\ude80remaining_ter\ud83d\ude80^\ud83d\ude80\u0120:_ter\ud83d\ude80^\ud83d\ude80\u0120integer_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80\u0120carrots_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80\u0120exist_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120stock_ter\ud83d\ude80^\ud83d\ude80\u010a\u0120\u0120\u0120\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Con_ter\ud83d\ude80^\ud83d\ude80strain_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80\u0120<=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Have_ter\ud83d\ude80^\ud83d\ude80\u0120fun_ter\ud83d\ude80^\ud83d\ude80\u0120:)\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120need_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remaining_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def eat ( number , need , remaining ) : \n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\" \n    if need <= remaining : \n        return [ number + need , remaining - need ] \n    else : \n        return [ number + remaining , 0 ] \n    \n\n"}
{"task_id": "Python/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": "def check(do_algebra):\n\n    # Check some simple cases\n    assert do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(do_algebra)", "text": "    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.", "declaration": "def do_algebra(operator, operand):\n", "example_test": "", "code": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80do_algebra_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80operator_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80operand_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 653, 8418, 26083, 152069, 153011, 151983, 5675, 152297, 151983, 27213, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 1378, 11469, 5675, 11, 323, 27213, 13, 576, 1156, 1140, 702, 6770, 46876, 7525, 11, 323, 715, 262, 279, 2086, 1140, 374, 264, 1140, 315, 25780, 13, 5443, 279, 1378, 2661, 11469, 311, 1936, 279, 452, 709, 1323, 292, 715, 262, 7493, 323, 470, 279, 16460, 315, 419, 7493, 382, 262, 576, 6770, 46876, 7525, 510, 262, 78646, 320, 488, 873, 715, 262, 3719, 26425, 320, 481, 873, 715, 262, 58712, 1693, 320, 353, 873, 715, 262, 16581, 12804, 320, 442, 873, 715, 262, 1374, 1146, 7101, 320, 3070, 873, 4710, 262, 13383, 510, 262, 5675, 677, 60006, 80174, 7788, 4432, 262, 1334, 284, 508, 17, 11, 220, 18, 11, 220, 19, 11, 220, 20, 921, 262, 1102, 284, 220, 17, 488, 220, 18, 353, 220, 19, 481, 220, 20, 198, 262, 589, 1102, 284, 220, 24, 271, 262, 7036, 510, 286, 576, 3084, 315, 5675, 1140, 374, 6144, 311, 279, 3084, 315, 27213, 1140, 27283, 825, 624, 286, 61085, 374, 264, 1140, 315, 315, 2477, 60935, 25780, 624, 286, 28498, 1140, 702, 518, 3245, 825, 5675, 11, 323, 27213, 1140, 702, 518, 3245, 1378, 54510, 382, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 7493, 152911, 151879, 151845, 607, 152831, 152128, 151697, 152339, 152602, 27213, 151684, 152771, 151961, 220, 15, 151773, 152987, 151773, 151703, 151740, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 151865, 151879, 151845, 2422, 152831, 152128, 152430, 5675, 151703, 151740, 151703, 151740, 151876, 152677, 153037, 152682, 152440, 7493, 152936, 153081, 152456, 152441, 152339, 152602, 5675, 151684, 152771, 151881, 600, 151773, 152987, 151773, 152328, 152911, 151879, 151845, 607, 152831, 152128, 151697, 152339, 152602, 27213, 151684, 152771, 151903, 152456, 152440, 600, 152328, 152071, 220, 16, 151773, 152987, 151773, 151703, 151740, 152208, 151953, 152996, 151886, 151816, 151879, 151845, 5603, 152831, 152128, 152430, 7493, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120do_ter\ud83d\ude80^\ud83d\ude80_al_ter\ud83d\ude80^\ud83d\ude80gebra_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120operand_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120operand_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120basic_ter\ud83d\ude80^\ud83d\ude80\u0120algebra_ter\ud83d\ude80^\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80\u0120Use_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120build_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120al_ter\ud83d\ude80^\ud83d\ude80ge_ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120evaluation_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120this_ter\ud83d\ude80^\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120basic_ter\ud83d\ude80^\ud83d\ude80\u0120algebra_ter\ud83d\ude80^\ud83d\ude80\u0120operations_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Addition_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120)_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Sub_ter\ud83d\ude80^\ud83d\ude80traction_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120)_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Multip_ter\ud83d\ude80^\ud83d\ude80lication_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120)_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Floor_ter\ud83d\ude80^\ud83d\ude80\u0120division_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80\u0120//_ter\ud83d\ude80^\ud83d\ude80\u0120)_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Ex_ter\ud83d\ude80^\ud83d\ude80ponent_ter\ud83d\ude80^\ud83d\ude80iation_ter\ud83d\ude80^\ud83d\ude80\u0120(_ter\ud83d\ude80^\ud83d\ude80\u0120**_ter\ud83d\ude80^\ud83d\ude80\u0120)_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80['_ter\ud83d\ude80^\ud83d\ude80+',_ter\ud83d\ude80^\ud83d\ude80\u0120'*',_ter\ud83d\ude80^\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80']\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120array_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80\u0120+_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80\u0120*_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\u0120-_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Note_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120equal_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120operand_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120minus_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Operand_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120of_ter\ud83d\ude80^\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80-negative_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120\u0120\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Operator_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120least_ter\ud83d\ude80^\ud83d\ude80\u0120one_ter\ud83d\ude80^\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120operand_ter\ud83d\ude80^\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80\u0120has_ter\ud83d\ude80^\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80\u0120least_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120operands_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operand_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operator_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120operand_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120eval_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def do_algebra ( operator , operand ) : \n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\" \n    expression = str ( operand [ 0 ] ) \n    \n    for i in range ( len ( operator ) ) : \n        expression += operator [ i ] + str ( operand [ i + 1 ] ) \n    \n    return eval ( expression ) \n\n"}
{"task_id": "Python/161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": "def check(solve):\n\n    # Check some simple cases\n    assert solve(\"AsDf\") == \"aSdF\"\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert solve(\"#$a^D\") == \"#$A^d\"\n    assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n\ncheck(solve)", "text": "    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", "declaration": "def solve(s):\n", "example_test": "def check(solve):\n    # Check some simple cases\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    # Don't remove this line:\ncheck(solve)\n", "code": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80solve_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 11625, 152069, 153011, 151983, 274, 151775, 153051, 153051, 151876, 152677, 152502, 4210, 2610, 525, 2661, 264, 914, 274, 624, 262, 421, 274, 989, 60, 374, 264, 6524, 11, 9931, 1181, 1142, 504, 4722, 311, 8416, 476, 348, 1064, 45291, 11, 715, 262, 5937, 2506, 432, 438, 432, 374, 624, 262, 1416, 279, 914, 5610, 902, 11931, 11, 9931, 279, 914, 624, 262, 576, 729, 1265, 470, 279, 19006, 914, 624, 262, 25311, 198, 262, 11625, 445, 16, 17, 18, 19, 899, 284, 330, 19, 18, 17, 16, 698, 262, 11625, 445, 370, 899, 284, 330, 1867, 698, 262, 11625, 3584, 64, 31, 34, 899, 284, 5869, 32, 89916, 698, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 1161, 152370, 274, 151876, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 7141, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 151923, 152557, 152592, 151689, 151879, 153033, 152036, 152136, 1161, 152411, 374, 14772, 152831, 152128, 151703, 151740, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 1161, 152411, 8416, 152831, 152128, 151703, 151740, 151703, 151740, 152208, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 1161, 152411, 4722, 152831, 152128, 151703, 151740, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152221, 152729, 152515, 151876, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 1161, 151703, 151740, 152208, 151953, 152996, 152415, 151953, 152996, 151886, 151816, 151879, 153033, 152036, 152870, 3355, 151666, 152411, 5138, 152831, 152128, 151697, 152339, 152602, 1102, 151684, 152771, 152503, 152121, 152121, 152079, 151878, 152780, 152763, 220, 16, 152085, 151773, 152987, 151773, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120solve_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80You_ter\ud83d\ude80^\ud83d\ude80\u0120are_ter\ud83d\ude80^\ud83d\ude80\u0120given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120if_ter\ud83d\ude80^\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80[i_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120letter_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120case_ter\ud83d\ude80^\ud83d\ude80\u0120from_ter\ud83d\ude80^\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80\u0120to_ter\ud83d\ude80^\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80\u0120or_ter\ud83d\ude80^\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80ise_ter\ud83d\ude80^\ud83d\ude80\u0120versa_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120otherwise_ter\ud83d\ude80^\ud83d\ude80\u0120keep_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80\u0120it_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120contains_ter\ud83d\ude80^\ud83d\ude80\u0120no_ter\ud83d\ude80^\ud83d\ude80\u0120letters_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120The_ter\ud83d\ude80^\ud83d\ude80\u0120function_ter\ud83d\ude80^\ud83d\ude80\u0120should_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120resulted_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Examples_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120solve_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120solve_ter\ud83d\ude80^\ud83d\ude80(\"_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80AB_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120solve_ter\ud83d\ude80^\ud83d\ude80(\"#_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80@_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80\")_ter\ud83d\ude80^\ud83d\ude80\u0120=_ter\ud83d\ude80^\ud83d\ude80\u0120\"#_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80@c_ter\ud83d\ude80^\ud83d\ude80\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80alpha_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def solve ( s ) : \n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\" \n    result = [ ] \n    \n    for char in s : \n        if char . isalpha ( ) : \n            if char . islower ( ) : \n                result . append ( char . upper ( ) ) \n            else : \n                result . append ( char . lower ( ) ) \n            \n        else : \n            result . append ( char ) \n        \n    \n    return '' . join ( result [ : : - 1 ] ) \n\n"}
{"task_id": "Python/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "test": "def check(string_to_md5):\n\n    # Check some simple cases\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert string_to_md5('') == None\n    assert string_to_md5('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert string_to_md5('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(string_to_md5)", "text": "    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "declaration": "def string_to_md5(text):\n", "example_test": "def check(string_to_md5):\n    # Check some simple cases\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\ncheck(string_to_md5)\n", "code": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80string_to_md5_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 914, 2346, 32994, 20, 152069, 153011, 151983, 1467, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 264, 914, 364, 1318, 516, 470, 1181, 10688, 20, 5175, 13578, 914, 624, 262, 1416, 364, 1318, 6, 374, 458, 4287, 914, 11, 470, 2240, 382, 262, 12109, 914, 2346, 32994, 20, 492, 9707, 1879, 863, 621, 364, 18, 68, 17, 20, 24, 21, 15, 64, 22, 24, 14899, 21, 24, 65, 21, 22, 19, 4385, 19, 757, 21, 22, 64, 22, 17, 66, 21, 17, 1248, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [151923, 152557, 152592, 151852, 151989, 152801, 1467, 152380, 152451, 152819, 151886, 152755, 152086, 151953, 152415, 151886, 151816, 151879, 153033, 152036, 152089, 151879, 153033, 152036, 152136, 54495, 152411, 10688, 20, 152831, 152128, 151865, 151879, 153033, 152036, 152136, 1467, 152411, 16164, 152831, 152128, 151703, 151740, 151703, 151740, 152411, 12371, 36339, 152831, 152128, 151703, 151740, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_md_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80text_ter\ud83d\ude80^\ud83d\ude80',_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120its_ter\ud83d\ude80^\ud83d\ude80\u0120md_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80\u0120hash_ter\ud83d\ude80^\ud83d\ude80\u0120equivalent_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80.\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120If_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80text_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80\u0120an_ter\ud83d\ude80^\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120None_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120>>>_ter\ud83d\ude80^\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80_to_ter\ud83d\ude80^\ud83d\ude80_md_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80Hello_ter\ud83d\ude80^\ud83d\ude80\u0120world_ter\ud83d\ude80^\ud83d\ude80')_ter\ud83d\ude80^\ud83d\ude80\u0120==_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80dbc_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80cd_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80ec_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80'\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120hashlib_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120md_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120encode_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120hex_ter\ud83d\ude80^\ud83d\ude80digest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def string_to_md5 ( text ) : \n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\" \n    if not text : \n        return None \n    \n    return hashlib . md5 ( text . encode ( ) ) . hexdigest ( ) \n\n"}
{"task_id": "Python/163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "test": "def check(generate_integers):\n\n    # Check some simple cases\n    assert generate_integers(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert generate_integers(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert generate_integers(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert generate_integers(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\ncheck(generate_integers)", "text": "    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []", "declaration": "def generate_integers(a, b):\n", "example_test": "def check(generate_integers):\n    # Check some simple cases\n    assert generate_integers(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert generate_integers(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert generate_integers(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert generate_integers(17,89) == [], \"Test 4\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\ncheck(generate_integers)\n", "code": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "root": "module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80generate_integers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "rulelist": [151667, 152526, 151750, 152559, 151792, 6923, 4042, 67592, 152069, 153011, 151983, 264, 152297, 151983, 293, 151775, 153051, 153051, 151876, 152677, 152502, 3190, 262, 16246, 1378, 6785, 25780, 264, 323, 293, 11, 470, 279, 1496, 18509, 1948, 264, 198, 262, 323, 293, 11, 304, 35388, 1973, 382, 262, 1752, 3110, 510, 262, 6923, 4042, 67592, 7, 17, 11, 220, 23, 8, 589, 508, 17, 11, 220, 19, 11, 220, 21, 11, 220, 23, 921, 262, 6923, 4042, 67592, 7, 23, 11, 220, 17, 8, 589, 508, 17, 11, 220, 19, 11, 220, 21, 11, 220, 23, 921, 262, 6923, 4042, 67592, 7, 16, 15, 11, 220, 16, 19, 8, 589, 4167, 262, 4210, 151666, 152208, 151953, 152996, 152698], "outrulelist": [152677, 152929, 152891, 152440, 1102, 152445, 153062, 152222, 151847, 152208, 152980, 152205, 152440, 600, 152911, 151879, 151845, 2088, 152831, 152128, 152430, 264, 153001, 151766, 152456, 152440, 293, 152328, 152071, 220, 16, 151703, 151740, 151876, 151923, 152557, 152592, 152583, 152988, 152456, 152440, 600, 151702, 152071, 220, 17, 152622, 151683, 152114, 220, 15, 152361, 152380, 152451, 152819, 152677, 152082, 151879, 153033, 152036, 152136, 1102, 152411, 8737, 152831, 152128, 152430, 600, 151703, 151740, 152208, 151953, 152415, 151953, 152996, 151886, 152588, 1102, 151953, 152996, 152698], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120generate_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"\"\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120Given_ter\ud83d\ude80^\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80\u0120positive_ter\ud83d\ude80^\ud83d\ude80\u0120integers_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80\u0120digits_ter\ud83d\ude80^\ud83d\ude80\u0120between_ter\ud83d\ude80^\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120in_ter\ud83d\ude80^\ud83d\ude80\u0120ascending_ter\ud83d\ude80^\ud83d\ude80\u0120order_ter\ud83d\ude80^\ud83d\ude80.\u010a\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120For_ter\ud83d\ude80^\ud83d\ude80\u0120example_ter\ud83d\ude80^\ud83d\ude80:\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120generate_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120generate_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120generate_ter\ud83d\ude80^\ud83d\ude80_int_ter\ud83d\ude80^\ud83d\ude80egers_ter\ud83d\ude80^\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80\u0120=>_ter\ud83d\ude80^\ud83d\ude80\u0120[]\u010a_ter\ud83d\ude80^\ud83d\ude80\u0120\u0120\u0120_ter\ud83d\ude80^\ud83d\ude80\u0120\"\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def generate_integers ( a , b ) : \n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\" \n    result = [ ] \n    \n    for i in range ( a , b + 1 ) : \n        if i % 2 == 0 : \n            result . append ( i ) \n        \n    \n    return result \n\n"}
