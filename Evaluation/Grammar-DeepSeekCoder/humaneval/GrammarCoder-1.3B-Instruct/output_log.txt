INFO 02-16 15:57:11 config.py:350] This model supports multiple tasks: {'embedding', 'generate'}. Defaulting to 'generate'.
INFO 02-16 15:57:11 llm_engine.py:249] Initializing an LLM engine (v0.6.4.post1) with config: model='../../../Models/GrammarCoder-1.3B-Instruct', speculative_config=None, tokenizer='../../../Models/GrammarCoder-1.3B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=../../../Models/GrammarCoder-1.3B-Instruct, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, chat_template_text_format=string, mm_processor_kwargs=None, pooler_config=None)
INFO 02-16 15:57:11 selector.py:135] Using Flash Attention backend.
INFO 02-16 15:57:12 model_runner.py:1072] Starting to load model ../../../Models/GrammarCoder-1.3B-Instruct...
INFO 02-16 15:57:16 model_runner.py:1077] Loading model weights took 2.5676 GB
INFO 02-16 15:57:16 worker.py:232] Memory profiling results: total_gpu_memory=79.15GiB initial_memory_usage=3.10GiB peak_torch_memory=2.92GiB memory_usage_post_profile=3.14GiB non_torch_memory=0.56GiB kv_cache_size=61.42GiB gpu_memory_utilization=0.82
INFO 02-16 15:57:16 gpu_executor.py:113] # GPU blocks: 20964, # CPU blocks: 1365
INFO 02-16 15:57:16 gpu_executor.py:117] Maximum concurrency for 8192 tokens per request: 40.95x
INFO 02-16 15:57:19 model_runner.py:1400] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 02-16 15:57:19 model_runner.py:1404] If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-16 15:57:27 model_runner.py:1518] Graph capturing finished in 9 secs, took 0.66 GiB
Load from ground-truth from /root/.cache/evalplus/fe585eb4df8c88d844eeb463ea4d0302.pkl
Reading samples...
humaneval (base tests)
pass@1:	0.707
humaneval+ (base + extra tests)
pass@1:	0.640
