{"task_id": "Mbpp/2", "solution": "def similar_elements ( list1 , list2 ) : \n    set1 = set ( list1 ) \n    \n    set2 = set ( list2 ) \n    \n    shared_elements = set1 . intersection ( set2 ) \n    \n    return shared_elements \n\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime ( n ) : \n    if n <= 1 : \n        return True \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest ( nums , n ) : \n    heap = nums [ : n ] \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        heapify ( heap , n , i ) \n    \n    for i in range ( n , len ( nums ) ) : \n        if nums [ i ] > heap [ 0 ] : \n            heap [ 0 ] = nums [ i ] \n            \n            heapify ( heap , n , 0 ) \n        \n    \n    heap . sort ( reverse = True ) \n    return heap \n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos ( num1 , num2 ) : \n    xor_result = num1 ^ num2 \n    \n    return bin ( xor_result ) . count ( '1' ) == 1 \n\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long ( s ) : \n    words = s . split ( ) \n    \n    long_words = [ word for word in words if len ( word ) >= 4 ] \n    \n    return long_words \n\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums ( nums ) : \n    return [ num ** 2 for num in nums ] \n\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations ( s ) : \n    n = len ( s ) \n    \n    for i in range ( 1 , n + 1 ) : \n        rotated = s [ i : ] + s [ : i ] \n        \n        if rotated == s : \n            return i \n        \n    \n    return n \n\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ ( s , char ) : \n    first_occurrence = s . find ( char ) \n    \n    last_occurrence = s . rfind ( char ) \n    \n    if first_occurrence == - 1 or last_occurrence == - 1 : \n        return s \n    elif first_occurrence == last_occurrence : \n        return s [ : first_occurrence ] \n    else : \n        return s [ : first_occurrence ] + s [ last_occurrence + 1 : ] \n    \n\n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix ( matrix ) : \n    return sorted ( matrix , key = sum ) \n\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume ( base , height , depth ) : \n    return base * height * depth \n\n"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore ( text ) : \n    pattern = r'^[a-z]+_[a-z]+$' \n    \n    return bool ( re . match ( pattern , text ) ) \n\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter ( side_length ) : \n    return 4 * side_length \n\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars ( s1 , s2 ) : \n    s2_set = set ( s2 ) \n    \n    result = \"\" \n    \n    for char in s1 : \n        if char not in s2_set : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate ( arr ) : \n    seen = set ( ) \n    \n    for num in arr : \n        if num in seen : \n            return True \n        \n        seen . add ( num ) \n    \n    return False \n\n"}
{"task_id": "Mbpp/20", "solution": "def is_woodall ( number ) : \n    woodball_numbers = [ 200 , 254 , 383 ] \n    \n    return number in woodball_numbers \n\n"}
{"task_id": "Mbpp/56", "solution": "def check ( num ) : \n    rev_num = int ( str ( num ) [ : : - 1 ] ) \n    \n    return num == rev_num * 2 \n\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num ( nums ) : \n    nums . sort ( reverse = True ) \n    max_num = '' . join ( map ( str , nums ) ) \n    \n    return int ( max_num ) \n\n"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs ( a , b ) : \n    return ( a * b ) < 0 \n\n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal ( n ) : \n    return n * ( 3 * n - 2 ) \n\n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        for j in range ( i + 1 , len ( s ) + 1 ) : \n            if sum ( int ( digit ) for digit in s [ i : j ] ) == len ( s [ i : j ] ) : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num ( lst ) : \n    return min ( lst ) \n\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference ( tuples ) : \n    max_diff = 0 \n    \n    for i in range ( len ( tuples ) ) : \n        for j in range ( i + 1 , len ( tuples ) ) : \n            diff = abs ( tuples [ i ] [ 0 ] - tuples [ j ] [ 0 ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks ( marks ) : \n    return sorted ( marks , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum ( lst ) : \n    total = 0 \n    \n    for element in lst : \n        if isinstance ( element , list ) : \n            total += recursive_list_sum ( element ) \n        else : \n            total += element \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count ( lst ) : \n    count = 0 \n    \n    for num in lst : \n        if num > 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/67", "solution": "def bell_number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return sum ( bell [ n ] ) \n\n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic ( arr ) : \n    increasing = decreasing = True \n    \n    \n    for i in range ( len ( arr ) - 1 ) : \n        if arr [ i ] > arr [ i + 1 ] : \n            increasing = False \n            \n        \n        if arr [ i ] < arr [ i + 1 ] : \n            decreasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist ( lst , sub ) : \n    for i in range ( len ( lst ) - len ( sub ) + 1 ) : \n        if lst [ i : i + len ( sub ) ] == sub : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal ( tuples ) : \n    length = len ( tuples [ 0 ] ) \n    \n    for t in tuples : \n        if len ( t ) != length : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort ( arr ) : \n    gap = len ( arr ) \n    \n    shrink = 1.3 \n    \n    swapped = True \n    \n    while gap > 1 or swapped : \n        gap = max ( 1 , int ( gap / shrink ) ) \n        \n        swapped = False \n        \n        for i in range ( len ( arr ) - gap ) : \n            if arr [ i ] > arr [ i + gap ] : \n                arr [ i ] , arr [ i + gap ] = arr [ i + gap ] , arr [ i ] \n                \n                swapped = True \n                \n            \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square ( n ) : \n    for i in range ( 0 , int ( n ** 0.5 ) + 1 ) : \n        j = n - i * i \n        \n        if int ( j ** 0.5 ) ** 2 == j : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns ( patterns , sequence ) : \n    if len ( patterns ) != len ( sequence ) : \n        return False \n    \n    pattern_to_sequence = { } \n    \n    sequence_to_pattern = { } \n    \n    for pattern , seq in zip ( patterns , sequence ) : \n        if pattern in pattern_to_sequence : \n            if pattern_to_sequence [ pattern ] != seq : \n                return False \n            \n        else : \n            pattern_to_sequence [ pattern ] = seq \n            \n        \n        if seq in sequence_to_pattern : \n            if sequence_to_pattern [ seq ] != pattern : \n                return False \n            \n        else : \n            sequence_to_pattern [ seq ] = pattern \n            \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples ( tuples_list , k ) : \n    result = [ ] \n    \n    for tup in tuples_list : \n        if all ( x % k == 0 for x in tup ) : \n            result . append ( tup ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/77", "solution": "def is_Diff ( num ) : \n    return num % 11 == 0 \n\n"}
{"task_id": "Mbpp/79", "solution": "def word_len ( word ) : \n    return len ( word ) % 2 != 0 \n\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number ( n ) : \n    return n * n * n + n * n * n + n * n \n\n"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere ( radius ) : \n    return ( 4 / 3 ) * 3.141592653589793 * ( radius ** 3 ) \n\n"}
{"task_id": "Mbpp/84", "solution": "def sequence ( n ) : \n    if n == 1 : \n        return 1 \n    elif n == 2 : \n        return 1 \n    elif n == 3 : \n        return 2 \n    else : \n        dp = [ 0 ] * ( n + 1 ) \n        \n        dp [ 1 ] = 1 \n        \n        dp [ 2 ] = 1 \n        \n        dp [ 3 ] = 2 \n        \n        for i in range ( 4 , n + 1 ) : \n            dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] \n            \n        \n        return dp [ n ] \n    \n\n"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere ( radius ) : \n    return 4 * 3.141592653589793 * ( radius ** 2 ) \n\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number ( n ) : \n    return 3 * n * ( n - 1 ) + 1 \n\n"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three ( dict1 , dict2 , dict3 ) : \n    merged_dict = { } \n    \n    for d in ( dict1 , dict2 , dict3 ) : \n        merged_dict . update ( d ) \n    \n    return merged_dict \n\n"}
{"task_id": "Mbpp/88", "solution": "def freq_count ( lst ) : \n    freq_dict = { } \n    \n    for item in lst : \n        if item in freq_dict : \n            freq_dict [ item ] += 1 \n        else : \n            freq_dict [ item ] = 1 \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num ( n ) : \n    closest = n - 1 \n    \n    while closest > 0 : \n        if n - closest <= 1 : \n            break \n        \n        closest -= 1 \n    \n    return closest \n\n"}
{"task_id": "Mbpp/90", "solution": "def len_log ( words ) : \n    max_len = 0 \n    \n    for word in words : \n        if len ( word ) > max_len : \n            max_len = len ( word ) \n            \n        \n    \n    return max_len \n\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring ( string_list , substring ) : \n    for string in string_list : \n        if substring in string : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating ( num ) : \n    num_str = str ( num ) \n    \n    for i in range ( len ( num_str ) - 2 ) : \n        if num_str [ i ] == num_str [ i + 1 ] == num_str [ i + 2 ] : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/93", "solution": "def power ( a , b ) : \n    return a ** b \n\n"}
{"task_id": "Mbpp/94", "solution": "def index_minimum ( lst ) : \n    return min ( lst , key = lambda x : x [ 1 ] ) [ 0 ] \n\n"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length ( lst ) : \n    min_length = float ( 'inf' ) \n    \n    for sublist in lst : \n        if len ( sublist ) < min_length : \n            min_length = len ( sublist ) \n            \n        \n    \n    return min_length \n\n"}
{"task_id": "Mbpp/96", "solution": "def divisor ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists ( lists ) : \n    frequency = { } \n    \n    for lst in lists : \n        for item in lst : \n            if item in frequency : \n                frequency [ item ] += 1 \n            else : \n                frequency [ item ] = 1 \n                \n            \n        \n    \n    return frequency \n\n"}
{"task_id": "Mbpp/98", "solution": "def multiply_num ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product / len ( lst ) \n\n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary ( decimal ) : \n    binary = \"\" \n    \n    while decimal > 0 : \n        binary = str ( decimal % 2 ) + binary \n        \n        decimal = decimal // 2 \n        \n    \n    return binary \n\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome ( n ) : \n    n += 1 \n    while not is_palindrome ( n ) : \n        n += 1 \n    \n    return n \n"}
{"task_id": "Mbpp/101", "solution": "def kth_element ( arr , k ) : \n    return arr [ k - 1 ] \n\n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel ( snake_str ) : \n    components = snake_str . split ( '_' ) \n    \n    return components [ 0 ] + '' . join ( x . title ( ) for x in components [ 1 : ] ) \n\n"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num ( n , m ) : \n    dp = [ [ 0 for _ in range ( m + 1 ) ] for _ in range ( n + 1 ) ] \n    \n    dp [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        for j in range ( 1 , m + 1 ) : \n            dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] \n            \n        \n    \n    return dp [ n ] [ m ] \n\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans ( lst ) : \n    count = 0 \n    \n    for item in lst : \n        if item : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists ( list1 , tuple1 ) : \n    return tuple ( list1 ) + tuple1 \n\n"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list ( list1 , list2 , list3 ) : \n    merged_list = list1 + list2 + list3 \n    \n    merged_list . sort ( ) \n    return merged_list \n\n"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent ( binary_string , num_rotations ) : \n    binary_string = list ( binary_string ) \n    \n    for _ in range ( num_rotations ) : \n        binary_string = binary_string [ - 1 : ] + binary_string [ : - 1 ] \n        \n    \n    count = 0 \n    \n    for bit in binary_string : \n        if int ( bit ) % 2 != 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists ( nested_lists ) : \n    common_elements = set ( nested_lists [ 0 ] ) \n    \n    for lst in nested_lists [ 1 : ] : \n        common_elements &= set ( lst ) \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer ( s ) : \n    try : \n        int ( s ) \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int ( tup ) : \n    str_nums = [ str ( num ) for num in tup ] \n    \n    int_num = int ( '' . join ( str_nums ) ) \n    \n    return int_num \n\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list ( s ) : \n    return s . split ( ' ' ) \n\n"}
{"task_id": "Mbpp/119", "solution": "def search ( nums ) : \n    left , right = 0 , len ( nums ) - 1 \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if mid % 2 == 0 : \n            if nums [ mid ] == nums [ mid + 1 ] : \n                left = mid + 2 \n                \n            else : \n                right = mid \n                \n            \n        else : \n            if nums [ mid ] == nums [ mid - 1 ] : \n                left = mid + 1 \n                \n            else : \n                right = mid \n                \n            \n        \n    \n    return nums [ left ] \n\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple ( lst ) : \n    max_product = float ( '-inf' ) \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            product = lst [ i ] [ 0 ] * lst [ j ] [ 1 ] \n            \n            if product > max_product : \n                max_product = product \n                \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum ( n ) : \n    def sum_of_divisors ( num ) : \n        divisors_sum = 1 \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                divisors_sum += i \n                if i != num // i : \n                    divisors_sum += num // i \n                \n            \n        \n        return divisors_sum \n    \n    amicable_sum = 0 \n    \n    for i in range ( 2 , n + 1 ) : \n        sum_div = sum_of_divisors ( i ) \n        \n        if sum_div > i and sum_of_divisors ( sum_div ) == i : \n            amicable_sum += i \n        \n    \n    return amicable_sum \n\n"}
{"task_id": "Mbpp/124", "solution": "def angle_complex ( z ) : \n    import cmath \n    return cmath . phase ( z ) \n\n"}
{"task_id": "Mbpp/125", "solution": "def find_length ( s ) : \n    max_diff = 0 \n    \n    count_0 = 0 \n    \n    count_1 = 0 \n    \n    for char in s : \n        if char == '0' : \n            count_0 += 1 \n        else : \n            count_1 += 1 \n        \n        max_diff = max ( max_diff , count_1 - count_0 ) \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors ( num1 , num2 ) : \n    common_divisors = [ ] \n    \n    for i in range ( 1 , min ( num1 , num2 ) + 1 ) : \n        if num1 % i == 0 and num2 % i == 0 : \n            common_divisors . append ( i ) \n        \n    \n    return sum ( common_divisors ) \n\n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int ( a , b ) : \n    return a * b \n\n"}
{"task_id": "Mbpp/128", "solution": "def long_words ( n , sentence ) : \n    words = sentence . split ( ) \n    \n    long_words = [ word for word in words if len ( word ) > n ] \n    \n    return long_words \n\n"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test ( matrix ) : \n    n = len ( matrix ) \n    \n    magic_sum = sum ( matrix [ 0 ] ) \n    \n    for i in range ( n ) : \n        if sum ( matrix [ i ] ) != magic_sum or sum ( matrix [ j ] [ i ] for j in range ( n ) ) != magic_sum : \n            return False \n        \n    \n    if sum ( matrix [ i ] [ i ] for i in range ( n ) ) != magic_sum or sum ( matrix [ i ] [ n - i - 1 ] for i in range ( n ) ) != magic_sum : \n        return False \n    \n    return True \n\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences ( lst ) : \n    frequency = { } \n    \n    for item in lst : \n        if item in frequency : \n            frequency [ item ] += 1 \n        else : \n            frequency [ item ] = 1 \n            \n        \n    \n    max_item = max ( frequency , key = frequency . get ) \n    \n    return max_item \n\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels ( s ) : \n    vowels = [ 'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' ] \n    \n    s_list = list ( s ) \n    \n    left , right = 0 , len ( s_list ) - 1 \n    \n    while left < right : \n        if s_list [ left ] not in vowels : \n            left += 1 \n        elif s_list [ right ] not in vowels : \n            right -= 1 \n        else : \n            s_list [ left ] , s_list [ right ] = s_list [ right ] , s_list [ left ] \n            \n            left += 1 \n            right -= 1 \n        \n    \n    return '' . join ( s_list ) \n\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string ( tup ) : \n    return '' . join ( tup ) \n\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum ( nums ) : \n    sum = 0 \n    \n    for num in nums : \n        if num < 0 : \n            sum += num \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num ( n ) : \n    return n * ( 2 * n - 1 ) \n\n"}
{"task_id": "Mbpp/137", "solution": "def zero_count ( arr ) : \n    zero_count = 0 \n    \n    non_zero_count = 0 \n    \n    for num in arr : \n        if num == 0 : \n            zero_count += 1 \n        else : \n            non_zero_count += 1 \n        \n    \n    return zero_count / non_zero_count \n\n"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two ( n ) : \n    if n == 0 : \n        return True \n    \n    while n > 0 : \n        if n % 2 == 1 : \n            return False \n        \n        n = n // 2 \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference ( radius ) : \n    return 2 * 3.14159 * radius \n\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly ( list_of_lists ) : \n    result_set = set ( ) \n    \n    for sublist in list_of_lists : \n        for item in sublist : \n            result_set . add ( item ) \n        \n    \n    return result_set \n\n"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort ( arr ) : \n    for i in range ( len ( arr ) ) : \n        max_index = len ( arr ) - 1 \n        \n        for j in range ( i , max_index ) : \n            if arr [ j ] > arr [ max_index ] : \n                max_index = j \n                \n            \n        \n        arr [ : max_index + 1 ] = reversed ( arr [ : max_index + 1 ] ) \n        \n        arr [ : i + 1 ] = reversed ( arr [ : i + 1 ] ) \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair ( list1 , list2 , list3 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] == list3 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff ( arr ) : \n    max_diff = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            diff = abs ( arr [ i ] - arr [ j ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/160", "solution": "def find_solution ( a , b , n ) : \n    for x in range ( 1 , n + 1 ) : \n        y = n - x \n        \n        if a * x == b * y : \n            return ( x , y ) \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements ( lst1 , lst2 ) : \n    return [ x for x in lst1 if x not in lst2 ] \n\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series ( n ) : \n    total = 0 \n    \n    for i in range ( n // 2 ) : \n        total += n - 2 * i \n    \n    return total \n\n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position ( s ) : \n    s = s . lower ( ) \n    \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] == \"abcdefghijklmnopqrstuvwxyz\" [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair ( nums ) : \n    even_count = 0 \n    \n    odd_count = 0 \n    \n    for num in nums : \n        if num % 2 == 0 : \n            even_count += 1 \n        else : \n            odd_count += 1 \n        \n    \n    return even_count * odd_count \n\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2 ( n ) : \n    if n == 0 : \n        return 1 \n    \n    power = 1 \n    \n    while power < n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/168", "solution": "def frequency ( lst , num ) : \n    return lst . count ( num ) \n\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list ( lst , start , end ) : \n    return sum ( lst [ start : end + 1 ] ) \n\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon ( side_length ) : \n    return 5 * side_length \n\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance ( s ) : \n    return s . count ( 'std' ) \n\n"}
{"task_id": "Mbpp/222", "solution": "def check_type ( tup ) : \n    type_set = set ( map ( type , tup ) ) \n    \n    return len ( type_set ) == 1 \n\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority ( nums , n , target ) : \n    count = 0 \n    \n    for num in nums : \n        if num == target : \n            count += 1 \n        \n    \n    return count > n // 2 \n\n"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits ( n ) : \n    count = 0 \n    \n    while n : \n        count += n & 1 \n        n >>= 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string ( s ) : \n    return '' . join ( [ s [ i ] for i in range ( len ( s ) ) if i % 2 == 0 ] ) \n\n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three ( a , b , c ) : \n    return min ( a , b , c ) \n\n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank ( string , char ) : \n    return string . replace ( \" \" , char ) \n\n"}
{"task_id": "Mbpp/232", "solution": "def largest_nnum ( lst , n ) : \n    return sorted ( lst , reverse = True ) [ : n ] \n\n"}
{"task_id": "Mbpp/233", "solution": "def lateralsurface_cylinder ( r , h ) : \n    lateral_surface_area = 2 * 3.14 * r * ( r + h ) \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube ( side_length ) : \n    return side_length ** 3 \n\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number ( n ) : \n    return n | ( n >> 1 ) \n\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences ( lst ) : \n    result = { } \n    \n    for tup in lst : \n        if tup in result : \n            result [ tup ] += 1 \n        else : \n            result [ tup ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings ( s ) : \n    n = len ( s ) \n    \n    return n * ( n + 1 ) // 2 \n\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences ( m , n ) : \n    if n == 1 : \n        return 1 \n    \n    dp = [ [ 0 for _ in range ( n + 1 ) ] for _ in range ( m + 1 ) ] \n    \n    for i in range ( 1 , m + 1 ) : \n        dp [ i ] [ 1 ] = 1 \n        \n    \n    for i in range ( 2 , m + 1 ) : \n        for j in range ( 2 , n + 1 ) : \n            dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i ] [ j - 1 ] \n            \n        \n    \n    return dp [ m ] [ n ] \n\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list ( list1 , list2 ) : \n    list1 [ - 1 ] = list2 \n    \n    return list1 \n\n"}
{"task_id": "Mbpp/242", "solution": "def count_charac ( string ) : \n    return len ( string ) \n\n"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square ( n ) : \n    i = n + 1 \n    \n    while True : \n        if int ( i ** 0.5 ) ** 2 == i : \n            return i \n        \n        i += 1 \n    \n\n"}
{"task_id": "Mbpp/245", "solution": "def max_sum ( arr ) : \n    n = len ( arr ) \n    \n    lis = [ 0 ] * n \n    \n    lis [ 0 ] = arr [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        lis [ i ] = arr [ i ] \n        \n        for j in range ( i ) : \n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + arr [ i ] : \n                lis [ i ] = lis [ j ] + arr [ i ] \n                \n            \n        \n    \n    lds = [ 0 ] * n \n    \n    lds [ n - 1 ] = arr [ n - 1 ] \n    \n    for i in range ( n - 2 , - 1 , - 1 ) : \n        lds [ i ] = arr [ i ] \n        \n        for j in range ( n - 1 , i , - 1 ) : \n            if arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + arr [ i ] : \n                lds [ i ] = lds [ j ] + arr [ i ] \n                \n            \n        \n    \n    max_sum = 0 \n    \n    for i in range ( n ) : \n        max_sum = max ( max_sum , lis [ i ] + lds [ i ] - arr [ i ] ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/247", "solution": "def lps ( s ) : \n    n = len ( s ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    for i in range ( n ) : \n        dp [ i ] [ i ] = 1 \n        \n    \n    for cl in range ( 2 , n + 1 ) : \n        for i in range ( n - cl + 1 ) : \n            j = i + cl - 1 \n            \n            if s [ i ] == s [ j ] and cl == 2 : \n                dp [ i ] [ j ] = 2 \n                \n            elif s [ i ] == s [ j ] : \n                dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 \n                \n            else : \n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i + 1 ] [ j ] ) \n                \n            \n        \n    \n    return dp [ 0 ] [ n - 1 ] \n"}
{"task_id": "Mbpp/250", "solution": "def count_X ( tup , x ) : \n    return tup . count ( x ) \n\n"}
{"task_id": "Mbpp/251", "solution": "def insert_element ( lst , element ) : \n    return [ element + x for x in lst ] \n\n"}
{"task_id": "Mbpp/252", "solution": "def convert ( z ) : \n    r = abs ( z ) \n    \n    theta = math . atan2 ( z . imag , z . real ) \n    \n    return ( r , theta ) \n\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer ( lst ) : \n    count = 0 \n    \n    for i in lst : \n        if isinstance ( i , int ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors ( colors , n ) : \n    from itertools import combinations_with_replacement \n    return list ( combinations_with_replacement ( colors , n ) ) \n\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums ( n ) : \n    count = 0 \n    \n    for num in range ( 2 , n ) : \n        is_prime = True \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                is_prime = False \n                \n                break \n            \n        \n        if is_prime : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers ( a , b ) : \n    return ( b , a ) \n\n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements ( t1 , t2 ) : \n    t1 = sorted ( t1 , key = lambda x : x [ 1 ] , reverse = True ) \n    \n    t2 = sorted ( t2 , key = lambda x : x [ 0 ] ) \n    \n    result = [ ] \n    \n    for i in range ( len ( t1 ) ) : \n        result . append ( ( t1 [ i ] [ 0 ] , t2 [ i ] [ 1 ] ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/260", "solution": "def is_prime ( n ) : \n    if n <= 1 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n"}
{"task_id": "Mbpp/261", "solution": "def division_elements ( t1 , t2 ) : \n    return tuple ( x / y for x , y in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts ( lst , L ) : \n    first_part = lst [ : L ] \n    \n    second_part = lst [ L : ] \n    \n    return ( first_part , second_part ) \n\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age ( years ) : \n    if years == 1 : \n        return 15 \n    elif years == 2 : \n        return 21 \n    else : \n        return 21 + ( years - 2 ) * 4 \n    \n\n"}
{"task_id": "Mbpp/265", "solution": "def list_split ( lst , n ) : \n    result = [ ] \n    \n    for i in range ( 0 , len ( lst ) , n ) : \n        result . append ( lst [ i : i + n ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube ( side_length ) : \n    return 6 * ( side_length ** 2 ) \n\n"}
{"task_id": "Mbpp/267", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num ( n ) : \n    count = 0 \n    \n    num = 1 \n    \n    while True : \n        if '*' in str ( num ) : \n            count += 1 \n            if count == n : \n                return num \n            \n        \n        num += 1 \n    \n\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value ( char ) : \n    return ord ( char ) \n\n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index ( lst ) : \n    sum = 0 \n    \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            sum += lst [ i ] \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num ** 5 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract ( tuples_list ) : \n    return [ t [ - 1 ] for t in tuples_list ] \n\n"}
{"task_id": "Mbpp/273", "solution": "def substract_elements ( t1 , t2 ) : \n    result = tuple ( a - b for a , b in zip ( t1 , t2 ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum ( n ) : \n    sum = 0 \n    \n    for k in range ( 0 , n + 1 , 2 ) : \n        sum += binomial_coeff ( n , k ) * binomial_coeff ( n - 1 , k ) \n    \n    return sum \n"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder ( radius , height ) : \n    return math . pi * radius ** 2 * height \n\n"}
{"task_id": "Mbpp/277", "solution": "def dict_filter ( d , n ) : \n    return { k : v for k , v in d . items ( ) if v >= n } \n\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements ( t ) : \n    count = 0 \n    \n    for i in t : \n        if isinstance ( i , tuple ) : \n            break \n        \n        count += 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal ( n ) : \n    return n * ( 2 * n - 1 ) // 2 \n\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search ( arr , target ) : \n    for i in range ( len ( arr ) ) : \n        if arr [ i ] == target : \n            return ( True , i ) \n        \n    \n    return ( False , - 1 ) \n\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique ( lst ) : \n    return len ( lst ) == len ( set ( lst ) ) \n\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list ( l1 , l2 ) : \n    return [ a - b for a , b in zip ( l1 , l2 ) ] \n\n"}
{"task_id": "Mbpp/283", "solution": "def validate ( num ) : \n    digit_freq = { } \n    \n    for digit in str ( num ) : \n        if digit in digit_freq : \n            digit_freq [ digit ] += 1 \n        else : \n            digit_freq [ digit ] = 1 \n            \n        \n    \n    for digit , freq in digit_freq . items ( ) : \n        if freq > int ( digit ) : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/284", "solution": "def check_element ( lst , element ) : \n    return all ( x == element for x in lst ) \n\n"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three ( text ) : \n    if len ( text ) < 2 : \n        return False \n    \n    for i in range ( len ( text ) - 2 ) : \n        if text [ i ] == 'a' and text [ i + 1 ] == 'b' : \n            if text [ i + 2 ] == 'b' : \n                return True \n            \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated ( nums , k , n ) : \n    max_sum = float ( '-inf' ) \n    \n    for _ in range ( k ) : \n        current_sum = 0 \n        \n        for num in nums : \n            current_sum = max ( num , current_sum + num ) \n            \n            max_sum = max ( max_sum , current_sum ) \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/287", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += ( 2 * i ) ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/290", "solution": "def max_length ( lst ) : \n    max_len = 0 \n    \n    max_list = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) > max_len : \n            max_len = len ( sublist ) \n            \n            max_list = sublist \n            \n        \n    \n    return max_len , max_list \n\n"}
{"task_id": "Mbpp/292", "solution": "def find ( dividend , divisor ) : \n    return dividend // divisor \n\n"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle ( a , b ) : \n    return ( a ** 2 + b ** 2 ) ** 0.5 \n\n"}
{"task_id": "Mbpp/294", "solution": "def max_val ( lst ) : \n    max_val = lst [ 0 ] \n    \n    for i in lst : \n        if i > max_val : \n            max_val = i \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count ( arr ) : \n    inv_count = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if arr [ i ] > arr [ j ] : \n                inv_count += 1 \n            \n        \n    \n    return inv_count \n\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list ( nested_list ) : \n    flattened_list = [ ] \n    \n    for item in nested_list : \n        if isinstance ( item , list ) : \n            flattened_list . extend ( flatten_list ( item ) ) \n        else : \n            flattened_list . append ( item ) \n        \n    \n    return flattened_list \n\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate ( lst ) : \n    max_value = 0 \n    \n    max_tuple = None \n    \n    for tup in lst : \n        if tup [ 1 ] > max_value : \n            max_value = tup [ 1 ] \n            \n            max_tuple = tup \n            \n        \n    \n    return max_tuple \n\n"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq ( n ) : \n    if n % 2 != 0 : \n        return 0 \n    \n    n = n // 2 \n    \n    total = 0 \n    \n    for i in range ( n + 1 ) : \n        total += binomial_coeff ( n , i ) * binomial_coeff ( n , n - i ) \n    \n    return total \n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth ( d ) : \n    if isinstance ( d , dict ) : \n        return 1 + ( max ( map ( dict_depth , d . values ( ) ) ) if d else 0 ) \n    \n    return 0 \n\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp ( words ) : \n    result = [ ] \n    \n    for word in words : \n        if word . startswith ( 'p' ) : \n            result . append ( word ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq ( arr , k , i , j ) : \n    if i == j : \n        return arr [ i ] \n    \n    max_sum = float ( '-inf' ) \n    \n    for m in range ( i , j ) : \n        if arr [ m ] < arr [ j ] : \n            max_sum = max ( max_sum , max_sum_increasing_subseq ( arr , k , i , m ) + arr [ j ] ) \n            \n        \n    \n    return max_sum \n"}
{"task_id": "Mbpp/308", "solution": "def large_product ( list1 , list2 , n ) : \n    products = [ a * b for a in list1 for b in list2 ] \n    \n    products . sort ( reverse = True ) \n    return products [ : n ] \n\n"}
{"task_id": "Mbpp/309", "solution": "def maximum ( a , b ) : \n    if a > b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple ( s ) : \n    return tuple ( s ) \n\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit ( n ) : \n    return n | ( n + 1 ) \n\n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone ( height , radius ) : \n    import math \n    return ( 1 / 3 ) * math . pi * radius ** 2 * height \n\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2 ( n ) : \n    power = 1 \n    \n    while power <= n : \n        power *= 2 \n    \n    return power // 2 \n\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas ( n ) : \n    if n == 0 : \n        return 2 \n    elif n == 1 : \n        return 1 \n    else : \n        lucas_0 = 2 \n        \n        lucas_1 = 1 \n        \n        for i in range ( 2 , n + 1 ) : \n            lucas_n = lucas_0 + lucas_1 \n            \n            lucas_0 = lucas_1 \n            \n            lucas_1 = lucas_n \n            \n        \n        return lucas_n \n    \n\n"}
{"task_id": "Mbpp/390", "solution": "def add_string ( lst , format_string ) : \n    return [ format_string . format ( i ) for i in lst ] \n\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary ( ids , names , scores ) : \n    result = [ ] \n    \n    for i in range ( len ( ids ) ) : \n        result . append ( { ids [ i ] : { names [ i ] : scores [ i ] } } ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum ( n ) : \n    if n == 1 : \n        return 1 \n    \n    max_sum = 0 \n    \n    for i in range ( 1 , n // 2 + 1 ) : \n        max_sum = max ( max_sum , get_max_sum ( i ) + get_max_sum ( n - i ) + get_max_sum ( n - 2 * i ) + get_max_sum ( n - 3 * i ) ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct ( tup ) : \n    return len ( tup ) == len ( set ( tup ) ) \n\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character ( string ) : \n    char_count = { } \n    \n    for char in string : \n        if char in char_count : \n            char_count [ char ] += 1 \n        else : \n            char_count [ char ] = 1 \n            \n        \n    \n    for char in string : \n        if char_count [ char ] == 1 : \n            return char \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers ( a , b , c ) : \n    numbers = [ a , b , c ] \n    \n    numbers . sort ( ) \n    return numbers [ 1 ] \n\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits ( lst ) : \n    total = 0 \n    \n    for item in lst : \n        if isinstance ( item , list ) : \n            for sub_item in item : \n                total += sum ( int ( digit ) for digit in str ( sub_item ) ) \n            \n        else : \n            total += sum ( int ( digit ) for digit in str ( item ) ) \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/404", "solution": "def minimum ( a , b ) : \n    if a < b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex ( tuplex , element ) : \n    return element in tuplex \n\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity ( num ) : \n    return num % 2 != 0 \n\n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple ( lst ) : \n    min_product = float ( 'inf' ) \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            product = lst [ i ] [ 0 ] * lst [ j ] [ 1 ] \n            \n            if product < min_product : \n                min_product = product \n                \n            \n        \n    \n    return min_product \n\n"}
{"task_id": "Mbpp/410", "solution": "def min_val ( lst ) : \n    min_val = lst [ 0 ] \n    \n    for i in lst : \n        if i < min_val : \n            min_val = i \n            \n        \n    \n    return min_val \n\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd ( lst ) : \n    return [ num for num in lst if num % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element ( lst , n ) : \n    return [ t [ n ] for t in lst ] \n\n"}
{"task_id": "Mbpp/414", "solution": "def overlapping ( seq1 , seq2 ) : \n    for item in seq1 : \n        if item in seq2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product ( nums ) : \n    max_product = float ( '-inf' ) \n    \n    max_num1 = max_num2 = None \n    \n    \n    for num in nums : \n        if num > max_product : \n            max_product = num \n            \n        \n    \n    for num in nums : \n        if num > max_num1 and num != max_product : \n            max_num2 = max_num1 \n            \n            max_num1 = num \n            \n        elif num > max_num2 and num != max_product : \n            max_num2 = num \n            \n        \n    \n    return max_num1 , max_num2 \n\n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max ( lst ) : \n    max_length = 0 \n    \n    max_element = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n            max_element = sublist \n            \n        \n    \n    return max_element \n\n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum ( numbers ) : \n    rounded_numbers = [ round ( num ) for num in numbers ] \n    \n    total_sum = sum ( rounded_numbers ) \n    \n    length = len ( numbers ) \n    \n    return total_sum * length \n\n"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i ** 3 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple ( tup ) : \n    return '-' . join ( map ( str , tup ) ) \n\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube ( n ) : \n    sum_of_cubes = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum_of_cubes += i ** 3 \n    \n    average_of_cubes = sum_of_cubes / n \n    \n    return average_of_cubes \n\n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear ( tup ) : \n    return [ s [ - 1 ] for s in tup ] \n\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list ( lst , element ) : \n    count = 0 \n    \n    for sublist in lst : \n        if element in sublist : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers ( numbers ) : \n    return [ num for num in numbers if num % 2 == 1 ] \n\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format ( date ) : \n    year , month , day = date . split ( '-' ) \n    \n    return f\"{day}-{month}-{year}\" \n\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort ( arr ) : \n    n = len ( arr ) \n    \n    gap = n // 2 \n    \n    while gap > 0 : \n        for i in range ( gap , n ) : \n            temp = arr [ i ] \n            \n            j = i \n            \n            while j >= gap and arr [ j - gap ] > temp : \n                arr [ j ] = arr [ j - gap ] \n                \n                j -= gap \n            \n            arr [ j ] = temp \n            \n        \n        gap //= 2 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples ( t1 , t2 ) : \n    result = [ ] \n    \n    for i in range ( len ( t1 ) ) : \n        result . append ( t1 [ i ] & t2 [ i ] ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix ( a , b , c ) : \n    return 2 * a * b - c ** 2 \n\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium ( a , b , c ) : \n    d = ( a + b + c ) / 2 \n    \n    s = ( a + b + c + d ) / 2 \n    \n    return ( s - d ) ** 2 \n\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater ( arr , num ) : \n    for i in arr : \n        if i > num : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/435", "solution": "def last_Digit ( n ) : \n    return abs ( n ) % 10 \n\n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos ( lst ) : \n    return [ num for num in lst if num < 0 ] \n\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd ( string ) : \n    result = \"\" \n    \n    for char in string : \n        if ord ( char ) % 2 == 0 : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single ( numbers ) : \n    result = \"\" \n    \n    for num in numbers : \n        result += str ( num ) \n    \n    return int ( result ) \n\n"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position ( sentence ) : \n    adverbs = [ \"clearly\" , \"seriously\" , \"unfortunately\" ] \n    \n    positions = [ ] \n    \n    for adverb in adverbs : \n        start = 0 \n        \n        while True : \n            start = sentence . find ( adverb , start ) \n            \n            if start == - 1 : \n                break \n            \n            positions . append ( ( start , start + len ( adverb ) , adverb ) ) \n            start += 1 \n        \n    \n    if not positions : \n        return None \n    \n    first_adverb_position = min ( positions , key = lambda x : x [ 0 ] ) \n    \n    return first_adverb_position \n\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube ( size ) : \n    return 6 * ( size ** 2 ) \n\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication ( tup1 , tup2 ) : \n    result = [ ] \n    \n    for i in range ( len ( tup1 ) ) : \n        product = tup1 [ i ] [ 0 ] * tup2 [ i ] [ 0 ] \n        \n        sum_product = tup1 [ i ] [ 1 ] * tup2 [ i ] [ 1 ] \n        \n        result . append ( ( product , sum_product ) ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence ( tup , lst ) : \n    count = 0 \n    \n    for i in lst : \n        count += tup . count ( i ) \n    \n    return count \n\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums ( nums ) : \n    return [ num ** 3 for num in nums ] \n\n"}
{"task_id": "Mbpp/448", "solution": "def cal_sum ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n == 2 : \n        return 2 \n    else : \n        return cal_sum ( n - 1 ) + cal_sum ( n - 2 ) + cal_sum ( n - 3 ) \n    \n\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string ( lst , size ) : \n    return [ s for s in lst if len ( s ) == size ] \n\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces ( s ) : \n    return s . replace ( ' ' , '' ) \n\n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz ( text ) : \n    return 'z' in text \n\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number ( month_number ) : \n    if month_number in [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] : \n        return True \n    elif month_number in [ 4 , 6 , 9 , 11 ] : \n        return False \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list ( string_list ) : \n    return [ s [ : : - 1 ] for s in string_list ] \n\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min ( lst ) : \n    min_length = float ( 'inf' ) \n    \n    min_sublist = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) < min_length : \n            min_length = len ( sublist ) \n            \n            min_sublist = sublist \n            \n        \n    \n    return min_sublist \n\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area ( length , width ) : \n    return length * width \n\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase ( s ) : \n    result = \"\" \n    \n    i = 0 \n    \n    while i < len ( s ) : \n        if i < len ( s ) - 1 and s [ i ] . isupper ( ) and s [ i + 1 ] . islower ( ) : \n            i += 2 \n        else : \n            result += s [ i ] \n            i += 1 \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/460", "solution": "def Extract ( lst ) : \n    return [ sublist [ 0 ] for sublist in lst ] \n\n"}
{"task_id": "Mbpp/462", "solution": "def combinations_list ( lst ) : \n    result = [ [ ] ] \n    \n    for i in range ( len ( lst ) ) : \n        temp = [ ] \n        \n        for subset in result : \n            temp . append ( subset + [ lst [ i ] ] ) \n        \n        result += temp \n    \n    return result \n\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product ( nums ) : \n    if not nums : \n        return 0 \n    \n    max_product = nums [ 0 ] \n    \n    min_product = nums [ 0 ] \n    \n    result = nums [ 0 ] \n    \n    for i in range ( 1 , len ( nums ) ) : \n        if nums [ i ] < 0 : \n            max_product , min_product = min_product , max_product \n            \n        \n        max_product = max ( nums [ i ] , max_product * nums [ i ] ) \n        \n        min_product = min ( nums [ i ] , min_product * nums [ i ] ) \n        \n        result = max ( result , max_product ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty ( d ) : \n    return { k : v for k , v in d . items ( ) if v is not None } \n\n"}
{"task_id": "Mbpp/468", "solution": "def max_product ( nums ) : \n    n = len ( nums ) \n    \n    dp = [ 0 ] * n \n    \n    dp [ 0 ] = nums [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        max_product = nums [ i ] \n        \n        for j in range ( i ) : \n            if nums [ j ] < nums [ i ] : \n                max_product = max ( max_product , nums [ j ] * dp [ i ] ) \n                \n            \n        \n        dp [ i ] = max_product \n        \n    \n    return max ( dp ) \n\n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise ( tup ) : \n    result = [ ] \n    \n    for i in range ( len ( tup ) - 1 ) : \n        result . append ( tup [ i ] + tup [ i + 1 ] ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder ( arr , n ) : \n    product = 1 \n    \n    for num in arr : \n        product = ( product * num ) % n \n        \n    \n    return product \n\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive ( lst ) : \n    lst = sorted ( lst ) \n    \n    for i in range ( len ( lst ) - 1 ) : \n        if lst [ i ] + 1 != lst [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection ( tuples1 , tuples2 ) : \n    set1 = set ( map ( tuple , tuples1 ) ) \n    \n    set2 = set ( map ( tuple , tuples2 ) ) \n    \n    intersection = set1 . intersection ( set2 ) \n    \n    return intersection \n\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char ( string , old_char , new_char ) : \n    return string . replace ( old_char , new_char ) \n\n"}
{"task_id": "Mbpp/475", "solution": "def sort_counter ( d ) : \n    return sorted ( d . items ( ) , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum ( arr ) : \n    return max ( arr ) + min ( arr ) \n\n"}
{"task_id": "Mbpp/477", "solution": "def is_lower ( string ) : \n    return string . lower ( ) \n\n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase ( s ) : \n    return '' . join ( c for c in s if not c . islower ( ) ) \n\n"}
{"task_id": "Mbpp/479", "solution": "def first_Digit ( n ) : \n    while n >= 10 : \n        n = n // 10 \n        \n    \n    return n \n\n"}
{"task_id": "Mbpp/554", "solution": "def Split ( lst ) : \n    return [ num for num in lst if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/555", "solution": "def difference ( n ) : \n    sum_of_cubes = sum ( [ i ** 3 for i in range ( 1 , n + 1 ) ] ) \n    \n    sum_of_numbers = sum ( [ i for i in range ( 1 , n + 1 ) ] ) \n    \n    return sum_of_cubes - sum_of_numbers \n\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair ( arr , n ) : \n    count = 0 \n    \n    for i in range ( 0 , len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if ( ( arr [ i ] ^ arr [ j ] ) % 2 != 0 ) : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string ( s ) : \n    return '' . join ( [ c . lower ( ) if c . isupper ( ) else c . upper ( ) for c in s ] ) \n\n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums ( num1 , num2 ) : \n    str1 = str ( num1 ) \n    \n    str2 = str ( num2 ) \n    \n    sum_distance = 0 \n    \n    for i in range ( len ( str1 ) ) : \n        sum_distance += abs ( int ( str1 [ i ] ) - int ( str2 [ i ] ) ) \n    \n    return sum_distance \n\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum ( nums , k ) : \n    max_sum = float ( '-inf' ) \n    \n    current_sum = 0 \n    \n    for i in range ( len ( nums ) ) : \n        current_sum += nums [ i ] \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n        \n        if current_sum < 0 : \n            current_sum = 0 \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements ( t1 , t2 ) : \n    union_set = set ( t1 ) . union ( set ( t2 ) ) \n    \n    return sorted ( union_set ) \n\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length ( lst ) : \n    max_length = 0 \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n        \n    \n    return max_length \n\n"}
{"task_id": "Mbpp/563", "solution": "def extract_values ( s ) : \n    values = [ ] \n    \n    start = 0 \n    \n    for i , char in enumerate ( s ) : \n        if char == '\"' : \n            values . append ( s [ start + 1 : i ] ) \n            start = i + 1 \n            \n        \n    \n    return values \n\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs ( lst , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if lst [ i ] != lst [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/565", "solution": "def split ( string ) : \n    return list ( string ) \n\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits ( n ) : \n    sum = 0 \n    \n    while n > 0 : \n        sum += n % 10 \n        n //= 10 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/567", "solution": "def issort_list ( lst ) : \n    for i in range ( len ( lst ) - 1 ) : \n        if lst [ i ] > lst [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list ( n ) : \n    return [ { } for _ in range ( n ) ] \n\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums ( nums ) : \n    unique_nums = [ ] \n    \n    for num in nums : \n        if num not in unique_nums : \n            unique_nums . append ( num ) \n        \n    \n    return unique_nums \n\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product ( lst ) : \n    unique_nums = set ( lst ) \n    \n    product = 1 \n    \n    for num in unique_nums : \n        product *= num \n    \n    return product \n\n"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array ( arr1 , arr2 ) : \n    len1 = len ( arr1 ) \n    \n    len2 = len ( arr2 ) \n    \n    if len1 < len2 : \n        return False \n    \n    for i in range ( len1 - len2 + 1 ) : \n        if arr1 [ i : i + len2 ] == arr2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial ( n ) : \n    factorial = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        factorial *= i \n    \n    last_digit = factorial % 10 \n    \n    return last_digit \n\n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists ( list1 , list2 , list3 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] ) \n        result . append ( list2 [ i ] ) \n        result . append ( list3 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar ( t1 , t2 ) : \n    set1 = set ( t1 ) \n    \n    set2 = set ( t2 ) \n    \n    dissimilar = set1 . symmetric_difference ( set2 ) \n    \n    return tuple ( sorted ( dissimilar ) ) \n\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even ( tup ) : \n    result = [ ] \n    \n    for i in tup : \n        if isinstance ( i , tuple ) : \n            result . append ( extract_even ( i ) ) \n        elif i % 2 == 0 : \n            result . append ( i ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/581", "solution": "def surface_Area ( base_edge , height ) : \n    return 2 * ( base_edge ** 2 ) + 2 * base_edge * height + 2 * ( base_edge * height ) \n\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number ( n ) : \n    if n <= 1 : \n        return 1 \n    \n    catalan = [ 0 for i in range ( n + 1 ) ] \n    \n    catalan [ 0 ] = 1 \n    \n    catalan [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        catalan [ i ] = 0 \n        \n        for j in range ( i ) : \n            catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] \n            \n        \n    \n    return catalan [ n ] \n\n"}
{"task_id": "Mbpp/585", "solution": "def expensive_items ( dataset , n ) : \n    sorted_dataset = sorted ( dataset , key = lambda x : x [ 'price' ] , reverse = True ) \n    \n    return sorted_dataset [ : n ] \n\n"}
{"task_id": "Mbpp/586", "solution": "def split_Arr ( arr , n ) : \n    return arr [ n : ] + arr [ : n ] \n\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple ( lst ) : \n    return tuple ( lst ) \n\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff ( nums ) : \n    return max ( nums ) - min ( nums ) \n\n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares ( start , end ) : \n    squares = [ ] \n    \n    for i in range ( int ( start ** 0.5 ) , int ( end ** 0.5 ) + 1 ) : \n        square = i * i \n        \n        if start <= square <= end : \n            squares . append ( square ) \n        \n    \n    return squares \n\n"}
{"task_id": "Mbpp/590", "solution": "def polar_rect ( r , theta ) : \n    x = r * math . cos ( theta ) \n    \n    y = r * math . sin ( theta ) \n    \n    return ( x , y ) \n\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List ( lst ) : \n    if len ( lst ) > 1 : \n        lst [ 0 ] , lst [ - 1 ] = lst [ - 1 ] , lst [ 0 ] \n        \n    \n    return lst \n\n"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i * ( 2 * i - 1 ) \n    \n    return sum \n\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip ( ip ) : \n    ip_list = ip . split ( '.' ) \n    \n    ip_list = [ str ( int ( i ) ) for i in ip_list ] \n    \n    return '.' . join ( ip_list ) \n\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd ( nums ) : \n    even_nums = [ num for num in nums if num % 2 == 0 ] \n    \n    odd_nums = [ num for num in nums if num % 2 != 0 ] \n    \n    if not even_nums or not odd_nums : \n        return None \n    \n    return even_nums [ 0 ] - odd_nums [ 0 ] \n\n"}
{"task_id": "Mbpp/596", "solution": "def tuple_size ( t ) : \n    return sys . getsizeof ( t ) \n\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth ( A , B , k ) : \n    m , n = len ( A ) , len ( B ) \n    \n    if m > n : \n        A , B , m , n = B , A , n , m \n        \n    \n    if m == 0 : \n        return B [ k - 1 ] \n    \n    if k == 1 : \n        return min ( A [ 0 ] , B [ 0 ] ) \n    \n    i = min ( k // 2 , m ) - 1 \n    \n    j = min ( k // 2 , n ) - 1 \n    \n    if A [ i ] > B [ j ] : \n        return find_kth ( A , B [ j + 1 : ] , k - j - 1 ) \n    else : \n        return find_kth ( A [ i + 1 : ] , B , k - i - 1 ) \n    \n\n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number ( num ) : \n    sum = 0 \n    \n    temp = num \n    \n    while temp > 0 : \n        digit = temp % 10 \n        \n        sum += digit ** 3 \n        temp //= 10 \n    \n    if num == sum : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average ( n ) : \n    sum = 0 \n    \n    average = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i \n    \n    average = sum / n \n    \n    return sum , average \n\n"}
{"task_id": "Mbpp/600", "solution": "def is_even ( num ) : \n    return num % 2 == 0 \n\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char ( s ) : \n    char_set = set ( ) \n    \n    for char in s : \n        if char in char_set : \n            return char \n        \n        char_set . add ( char ) \n    \n    return None \n\n"}
{"task_id": "Mbpp/603", "solution": "def get_ludic ( n ) : \n    lucid_numbers = [ ] \n    \n    for i in range ( 1 , n + 1 ) : \n        is_lucid = True \n        \n        for digit in str ( i ) : \n            if digit == '4' or digit == '7' : \n                is_lucid = False \n                \n                break \n            \n        \n        if is_lucid : \n            lucid_numbers . append ( i ) \n        \n    \n    return lucid_numbers \n\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words ( s ) : \n    return ' ' . join ( s . split ( ) [ : : - 1 ] ) \n\n"}
{"task_id": "Mbpp/605", "solution": "def is_prime ( n ) : \n    if n < 2 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/606", "solution": "def radian_degree ( degrees ) : \n    return degrees * ( 3.141592653589793 / 180 ) \n\n"}
{"task_id": "Mbpp/607", "solution": "def find_literals ( text , pattern ) : \n    start_index = text . find ( pattern ) \n    \n    if start_index == - 1 : \n        return None \n    \n    end_index = start_index + len ( pattern ) \n    \n    return ( pattern , start_index , end_index ) \n\n"}
{"task_id": "Mbpp/608", "solution": "def bell_Number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element ( lst , k ) : \n    return lst [ : k ] + lst [ k + 1 : ] \n\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth ( matrix , n ) : \n    max_value = float ( '-inf' ) \n    \n    for row in matrix : \n        if n < len ( row ) : \n            max_value = max ( max_value , row [ n ] ) \n            \n        \n    \n    return max_value \n\n"}
{"task_id": "Mbpp/612", "solution": "def merge ( lst ) : \n    first_elements = [ sublist [ 0 ] for sublist in lst ] \n    \n    second_elements = [ sublist [ 1 ] for sublist in lst ] \n    \n    return [ first_elements , second_elements ] \n\n"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum ( tuples ) : \n    cumulative_sum = 0 \n    \n    for t in tuples : \n        cumulative_sum += sum ( t ) \n    \n    return cumulative_sum \n\n"}
{"task_id": "Mbpp/615", "solution": "def average_tuple ( tuples ) : \n    averages = [ ] \n    \n    for t in tuples : \n        average = sum ( t ) / len ( t ) \n        \n        averages . append ( average ) \n    \n    return averages \n\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo ( t1 , t2 ) : \n    return tuple ( a % b for a , b in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/618", "solution": "def div_list ( l1 , l2 ) : \n    result = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        result . append ( l1 [ i ] / l2 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/619", "solution": "def move_num ( s ) : \n    nums = [ c for c in s if c . isdigit ( ) ] \n    \n    non_nums = [ c for c in s if not c . isdigit ( ) ] \n    \n    return '' . join ( non_nums + nums ) \n\n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset ( nums ) : \n    nums = sorted ( nums ) \n    \n    dp = [ 1 ] * len ( nums ) \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i ) : \n            if nums [ i ] % nums [ j ] == 0 : \n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) \n                \n            \n        \n    \n    return max ( dp ) \n\n"}
{"task_id": "Mbpp/622", "solution": "def get_median ( list1 , list2 , n ) : \n    merged_list = list1 + list2 \n    \n    merged_list . sort ( ) \n    if n % 2 == 0 : \n        median = ( merged_list [ n // 2 ] + merged_list [ n // 2 - 1 ] ) / 2 \n        \n    else : \n        median = merged_list [ n // 2 ] \n        \n    \n    return median \n\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums ( nums , n ) : \n    return [ num ** n for num in nums ] \n\n"}
{"task_id": "Mbpp/624", "solution": "def is_upper ( string ) : \n    return string . upper ( ) \n\n"}
{"task_id": "Mbpp/626", "solution": "def triangle_area ( radius ) : \n    if radius < 0 : \n        return None \n    elif radius == 0 : \n        return 0 \n    else : \n        return 0.5 * radius * radius \n    \n\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces ( string ) : \n    return string . replace ( \" \" , \"%20\" ) \n\n"}
{"task_id": "Mbpp/629", "solution": "def Split ( numbers ) : \n    even_numbers = [ ] \n    \n    for num in numbers : \n        if num % 2 == 0 : \n            even_numbers . append ( num ) \n        \n    \n    return even_numbers \n\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates ( coord ) : \n    coordinates = [ ] \n    \n    for i in range ( - 1 , 2 ) : \n        for j in range ( - 1 , 2 ) : \n            if i == 0 and j == 0 : \n                continue \n            \n            coordinates . append ( [ coord [ 0 ] + i , coord [ 1 ] + j ] ) \n        \n    \n    return coordinates \n\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces ( s ) : \n    return '_' . join ( s . split ( ) ) \n\n"}
{"task_id": "Mbpp/632", "solution": "def move_zero ( nums ) : \n    zero_count = nums . count ( 0 ) \n    \n    non_zero_elements = [ num for num in nums if num != 0 ] \n    \n    non_zero_elements . extend ( [ 0 ] * zero_count ) \n    return non_zero_elements \n\n"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum ( nums , target ) : \n    result = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            if nums [ i ] ^ nums [ j ] == target : \n                result += nums [ i ] ^ nums [ j ] \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/635", "solution": "def heap_sort ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        heapify ( arr , n , i ) \n    \n    for i in range ( n - 1 , 0 , - 1 ) : \n        arr [ i ] , arr [ 0 ] = arr [ 0 ] , arr [ i ] \n        \n        heapify ( arr , i , 0 ) \n    \n    return arr \n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss ( purchase_price , sale_price ) : \n    return purchase_price <= sale_price \n\n"}
{"task_id": "Mbpp/638", "solution": "def wind_chill ( velocity , temperature ) : \n    v_temp = 35.74 + 0.6215 * temperature - 35.75 * ( velocity ** 0.16 ) + 0.4275 * temperature * ( velocity ** 0.16 ) \n    \n    return round ( v_temp ) \n\n"}
{"task_id": "Mbpp/639", "solution": "def sample_nam ( names ) : \n    total_length = 0 \n    \n    for name in names : \n        if not name [ 0 ] . islower ( ) : \n            total_length += len ( name ) \n        \n    \n    return total_length \n\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal ( n ) : \n    return n * ( 5 * n - 3 ) // 2 \n\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle ( text ) : \n    text = text . strip ( ) \n    \n    if text . startswith ( 'z' ) and text . endswith ( 'z' ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K ( arr , k ) : \n    reversed_arr = arr [ : k ] \n    \n    reversed_arr . reverse ( ) \n    result = reversed_arr + arr [ k : ] \n    \n    return result \n\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple ( tup , dct ) : \n    return tup + ( dct , ) \n\n"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath ( matrix ) : \n    N = len ( matrix ) \n    \n    dp = [ [ ( 0 , 0 ) for _ in range ( N ) ] for _ in range ( N ) ] \n    \n    dp [ 0 ] [ 0 ] = ( matrix [ 0 ] [ 0 ] , 1 ) \n    \n    for i in range ( N ) : \n        for j in range ( N ) : \n            if i == 0 and j == 0 : \n                continue \n            \n            up = dp [ i - 1 ] [ j ] [ 0 ] if i > 0 else float ( '-inf' ) \n            \n            left = dp [ i ] [ j - 1 ] [ 0 ] if j > 0 else float ( '-inf' ) \n            \n            if up > left : \n                dp [ i ] [ j ] = ( up + matrix [ i ] [ j ] , dp [ i - 1 ] [ j ] [ 1 ] + 1 ) \n                \n            else : \n                dp [ i ] [ j ] = ( left + matrix [ i ] [ j ] , dp [ i ] [ j - 1 ] [ 1 ] + 1 ) \n                \n            \n        \n    \n    return dp [ N - 1 ] [ N - 1 ] [ 0 ] / dp [ N - 1 ] [ N - 1 ] [ 1 ] \n\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data ( data , min_height , min_weight ) : \n    filtered_data = { } \n    \n    for name , ( height , weight ) in data . items ( ) : \n        if height > min_height and weight > min_weight : \n            filtered_data [ name ] = ( height , weight ) \n            \n        \n    \n    return filtered_data \n\n"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair ( list1 , list2 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum ( base , power ) : \n    num = str ( base ** power ) \n    \n    sum = 0 \n    \n    for digit in num : \n        sum += int ( digit ) \n    \n    return sum \n\n"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation ( s ) : \n    result = [ ] \n    \n    start = 0 \n    \n    while True : \n        start = s . find ( '\"' , start ) \n        \n        if start == - 1 : \n            break \n        \n        end = s . find ( '\"' , start + 1 ) \n        \n        if end == - 1 : \n            break \n        \n        result . append ( s [ start + 1 : end ] ) \n        start = end + 1 \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements ( t ) : \n    result = [ ] \n    \n    for i in range ( len ( t ) - 1 ) : \n        result . append ( t [ i ] * t [ i + 1 ] ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list ( a , b ) : \n    return [ x + y for x , y in zip ( a , b ) ] \n\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            result . append ( lst [ i ] ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone ( r , h ) : \n    import math \n    lateral_surface_area = 2 * math . pi * r * h \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar ( s ) : \n    special_chars = [ ' ' , ',' , '.' ] \n    \n    result = '' \n    \n    for char in s : \n        if char in special_chars : \n            result += ':' \n        else : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence ( arr , target ) : \n    left = 0 \n    \n    right = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            right = mid - 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod ( lst ) : \n    total_sum = 0 \n    \n    n = len ( lst ) \n    \n    for i in range ( n ) : \n        prod = 1 \n        \n        for j in range ( i , n ) : \n            prod *= lst [ j ] \n            total_sum += prod \n        \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits ( num ) : \n    binary_str = bin ( num ) [ 2 : ] \n    \n    length = len ( binary_str ) \n    \n    middle_bits = binary_str [ 1 : length - 1 ] \n    \n    middle_bits_list = list ( middle_bits ) \n    \n    for i in range ( len ( middle_bits_list ) ) : \n        if middle_bits_list [ i ] == '0' : \n            middle_bits_list [ i ] = '1' \n            \n        else : \n            middle_bits_list [ i ] = '0' \n            \n        \n    \n    middle_bits_str = '' . join ( middle_bits_list ) \n    \n    toggled_binary_str = binary_str [ 0 ] + middle_bits_str + binary_str [ - 1 ] \n    \n    toggled_num = int ( toggled_binary_str , 2 ) \n    \n    return toggled_num \n\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion ( arr , val ) : \n    left = 0 \n    \n    right = len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] < val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"task_id": "Mbpp/737", "solution": "def check_str ( s ) : \n    vowels = [ 'a' , 'e' , 'i' , 'o' , 'u' ] \n    \n    if s [ 0 ] . lower ( ) in vowels : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/739", "solution": "def find_Index ( n ) : \n    index = 0 \n    \n    triangular_number = 0 \n    \n    while True : \n        index += 1 \n        triangular_number += index \n        if len ( str ( triangular_number ) ) == n : \n            return index \n        \n    \n\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict ( t ) : \n    return { t [ i ] : t [ i + 1 ] for i in range ( len ( t ) - 1 ) } \n\n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same ( s ) : \n    return len ( set ( s ) ) == 1 \n\n"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron ( side_length ) : \n    area = ( ( side_length ** 2 ) * ( side_length + 1 ) * ( side_length + 2 ) ) / 12 \n    \n    return area \n\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right ( lst , n ) : \n    n = n % len ( lst ) \n    \n    return lst [ - n : ] + lst [ : - n ] \n\n"}
{"task_id": "Mbpp/744", "solution": "def check_none ( tup ) : \n    return any ( x is None for x in tup ) \n\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits ( startnum , endnum ) : \n    result = [ ] \n    \n    for num in range ( startnum , endnum + 1 ) : \n        divisible = True \n        \n        for digit in str ( num ) : \n            if int ( digit ) == 0 or num % int ( digit ) != 0 : \n                divisible = False \n                \n                break \n            \n        \n        if divisible : \n            result . append ( num ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces ( s ) : \n    result = \"\" \n    \n    capitalize_next = True \n    \n    for char in s : \n        if char . isupper ( ) : \n            capitalize_next = True \n            \n        \n        if capitalize_next : \n            result += char \n            capitalize_next = False \n            \n        else : \n            result += \" \" \n        \n    \n    return result . strip ( ) \n\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings ( lst ) : \n    def convert_to_int ( s ) : \n        try : \n            return int ( s ) \n        except ValueError : \n            return s \n        \n    \n    return sorted ( lst , key = convert_to_int ) \n\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple ( lst , tup ) : \n    return lst + tup \n\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 ) : \n        left = 2 * i + 1 \n        \n        right = 2 * i + 2 \n        \n        if left < n and arr [ i ] > arr [ left ] : \n            return False \n        \n        if right < n and arr [ i ] > arr [ right ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        a = 0 \n        \n        b = 1 \n        \n        for i in range ( 2 , n + 1 ) : \n            c = a + b \n            \n            a = b \n            \n            b = c \n            \n        \n        return b \n    \n\n"}
{"task_id": "Mbpp/753", "solution": "def min_k ( tuples_list , k ) : \n    sorted_list = sorted ( tuples_list , key = lambda x : x [ 1 ] ) \n    \n    return sorted_list [ : k ] \n\n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list ( l1 , l2 , l3 ) : \n    common_elements = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        if l1 [ i ] == l2 [ i ] and l1 [ i ] == l3 [ i ] : \n            common_elements . append ( l1 [ i ] ) \n        \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest ( numbers ) : \n    if len ( numbers ) < 2 : \n        return None \n    \n    smallest = float ( 'inf' ) \n    \n    second_smallest = float ( 'inf' ) \n    \n    for num in numbers : \n        if num < smallest : \n            second_smallest = smallest \n            \n            smallest = num \n            \n        elif num < second_smallest and num != smallest : \n            second_smallest = num \n            \n        \n    \n    return second_smallest if second_smallest != float ( 'inf' ) else None \n\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs ( string_list ) : \n    count = 0 \n    \n    for i in range ( len ( string_list ) ) : \n        for j in range ( i + 1 , len ( string_list ) ) : \n            if string_list [ i ] == string_list [ j ] [ : : - 1 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists ( lst ) : \n    result = { } \n    \n    for sublist in lst : \n        tuple_sublist = tuple ( sublist ) \n        \n        if tuple_sublist in result : \n            result [ tuple_sublist ] += 1 \n        else : \n            result [ tuple_sublist ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/759", "solution": "def is_decimal ( s ) : \n    try : \n        num = float ( s ) \n        \n        if '.' in s : \n            parts = s . split ( '.' ) \n            \n            if len ( parts ) != 2 or len ( parts [ 1 ] ) != 2 : \n                return False \n            \n        \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/760", "solution": "def unique_Element ( lst ) : \n    return len ( set ( lst ) ) == 1 \n\n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number ( month_number ) : \n    if month_number in [ 4 , 6 , 9 , 11 ] : \n        return True \n    elif month_number == 2 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff ( arr , k ) : \n    arr . sort ( ) \n    min_diff = float ( 'inf' ) \n    \n    for i in range ( len ( arr ) - 1 ) : \n        diff = abs ( arr [ i ] - arr [ i + 1 ] ) \n        \n        if diff <= k : \n            min_diff = min ( min_diff , diff ) \n            \n        \n    \n    return min_diff \n\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr ( s ) : \n    count = 0 \n    \n    for char in s : \n        if char . isdigit ( ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/765", "solution": "def is_polite ( n ) : \n    count = 0 \n    \n    num = 1 \n    \n    while True : \n        if str ( num ) . count ( '0' ) == 0 : \n            count += 1 \n            if count == n : \n                return num \n            \n        \n        num += 1 \n    \n\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) - 1 ) : \n        result . append ( ( lst [ i ] , lst [ i + 1 ] ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count ( numbers , target_sum ) : \n    count = 0 \n    \n    seen = { } \n    \n    for num in numbers : \n        complement = target_sum - num \n        \n        if complement in seen : \n            count += seen [ complement ] \n        \n        if num in seen : \n            seen [ num ] += 1 \n        else : \n            seen [ num ] = 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/769", "solution": "def Diff ( list1 , list2 ) : \n    result = [ ] \n    \n    for i in list1 : \n        if i not in list2 : \n            result . append ( i ) \n        \n    \n    for i in list2 : \n        if i not in list1 : \n            result . append ( i ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 4 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/771", "solution": "def check_expression ( expression ) : \n    stack = [ ] \n    \n    opening_brackets = [ '(' , '[' , '{' ] \n    \n    closing_brackets = [ ')' , ']' , '}' ] \n    \n    for char in expression : \n        if char in opening_brackets : \n            stack . append ( char ) \n        elif char in closing_brackets : \n            if not stack : \n                return False \n            \n            top = stack . pop ( ) \n            \n            if opening_brackets . index ( top ) != closing_brackets . index ( char ) : \n                return False \n            \n        \n    \n    return len ( stack ) == 0 \n\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length ( s , k ) : \n    words = s . split ( ) \n    \n    filtered_words = [ word for word in words if len ( word ) != k ] \n    \n    return ' ' . join ( filtered_words ) \n\n"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring ( string , substring ) : \n    start_index = string . find ( substring ) \n    \n    if start_index == - 1 : \n        return None \n    \n    end_index = start_index + len ( substring ) \n    \n    return ( substring , start_index , end_index ) \n\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position ( lst ) : \n    for i in range ( 1 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum ( lst ) : \n    unique_elements = set ( ) \n    \n    sum_of_elements = 0 \n    \n    for element in lst : \n        if element not in unique_elements : \n            unique_elements . add ( element ) \n            sum_of_elements += element \n        \n    \n    return sum_of_elements \n\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    current_sublist = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            current_sublist . append ( lst [ i ] ) \n        else : \n            if len ( current_sublist ) > 1 : \n                result . append ( current_sublist ) \n            \n            current_sublist = [ lst [ i ] ] \n            \n        \n    \n    if len ( current_sublist ) > 1 : \n        result . append ( current_sublist ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/780", "solution": "def find_combinations ( tuples ) : \n    combinations = [ ] \n    \n    for i in range ( 1 << len ( tuples ) ) : \n        sum1 = 0 \n        \n        sum2 = 0 \n        \n        for j in range ( len ( tuples ) ) : \n            if i & ( 1 << j ) : \n                sum1 += tuples [ j ] [ 0 ] \n                sum2 += tuples [ j ] [ 1 ] \n            \n        \n        combinations . append ( ( sum1 , sum2 ) ) \n    \n    return combinations \n\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count % 2 == 0 \n\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum ( arr ) : \n    total_sum = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        subarray_sum = 0 \n        \n        for j in range ( i , n ) : \n            subarray_sum += arr [ j ] \n            if ( j - i + 1 ) % 2 != 0 : \n                total_sum += subarray_sum \n            \n        \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd ( lst ) : \n    even_product = 1 \n    \n    odd_product = 1 \n    \n    for num in lst : \n        if num % 2 == 0 : \n            even_product *= num \n        else : \n            odd_product *= num \n        \n    \n    return even_product * odd_product \n\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int ( tuple_str ) : \n    tuple_str = tuple_str [ 1 : - 1 ] \n    \n    tuple_str_list = tuple_str . split ( \", \" ) \n    \n    tuple_int_list = list ( map ( int , tuple_str_list ) ) \n    \n    return tuple ( tuple_int_list ) \n\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion ( arr , val ) : \n    left = 0 \n    \n    right = len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] <= val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"task_id": "Mbpp/787", "solution": "def text_match_three ( text ) : \n    if len ( text ) < 3 : \n        return False \n    \n    if text [ 0 ] != 'a' : \n        return False \n    \n    if text [ 1 : 4 ] != 'bbb' : \n        return False \n    \n    return True \n\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple ( lst , string ) : \n    return tuple ( lst + [ string ] ) \n\n"}
{"task_id": "Mbpp/790", "solution": "def even_position ( lst ) : \n    for i in range ( len ( lst ) ) : \n        if i % 2 == 0 and lst [ i ] % 2 != 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested ( tup ) : \n    result = [ ] \n    \n    for item in tup : \n        if isinstance ( item , tuple ) : \n            result . append ( remove_nested ( item ) ) \n        else : \n            result . append ( item ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/792", "solution": "def count_list ( lists ) : \n    count = 0 \n    \n    for lst in lists : \n        count += 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/793", "solution": "def last ( arr , target ) : \n    left = 0 \n    \n    right = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            left = mid + 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb ( text ) : \n    return text . startswith ( 'a' ) and text . endswith ( 'b' ) \n\n"}
{"task_id": "Mbpp/796", "solution": "def return_sum ( dictionary ) : \n    return sum ( dictionary . values ( ) ) \n\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range ( l , r ) : \n    sum = 0 \n    \n    for i in range ( l , r + 1 ) : \n        if i % 2 != 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/798", "solution": "def _sum ( arr ) : \n    sum = 0 \n    \n    for num in arr : \n        sum += num \n    \n    return sum \n\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate ( n , d ) : \n    return ( ( n << d ) & 0xFFFFFFFF ) | ( n >> ( 32 - d ) ) \n\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces ( s ) : \n    return s . replace ( ' ' , '' ) \n\n"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal ( a , b , c ) : \n    if a == b == c : \n        return 3 \n    else : \n        return 0 \n    \n\n"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square ( n ) : \n    if n < 0 : \n        return False \n    \n    i = 0 \n    \n    while i * i <= n : \n        if i * i == n : \n            return True \n        \n        i += 1 \n    \n    return False \n\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even ( nums ) : \n    product = 1 \n    \n    for num in nums : \n        product *= num \n    \n    return product % 2 == 0 \n\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list ( lists ) : \n    max_sum = float ( '-inf' ) \n    \n    max_list = [ ] \n    \n    for lst in lists : \n        current_sum = sum ( lst ) \n        \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n            max_list = lst \n            \n        \n    \n    return max_list \n\n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase ( s ) : \n    max_run = 0 \n    \n    current_run = 0 \n    \n    for char in s : \n        if char . isupper ( ) : \n            current_run += 1 \n            max_run = max ( max_run , current_run ) \n            \n        else : \n            current_run = 0 \n            \n        \n    \n    return max_run \n\n"}
{"task_id": "Mbpp/807", "solution": "def first_odd ( nums ) : \n    for num in nums : \n        if num % 2 != 0 : \n            return num \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/808", "solution": "def check_K ( tup , k ) : \n    return k in tup \n\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller ( t1 , t2 ) : \n    return all ( x < y for x , y in zip ( t1 , t2 ) ) \n\n"}
