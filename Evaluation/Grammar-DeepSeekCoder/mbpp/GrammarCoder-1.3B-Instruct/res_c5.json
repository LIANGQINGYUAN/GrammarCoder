{"prompt": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n", "task_id": "Mbpp/2", "test": "\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3071, 62, 22291, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 841, 16, 32763, 33383, 32281, 841, 32895, 32465, 32664, 1517, 16, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 841, 17, 32763, 33383, 32281, 841, 32895, 32465, 32664, 1517, 17, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 7483, 62, 22291, 32763, 33383, 32358, 33202, 32061, 841, 16, 33207, 20562, 32895, 32465, 32664, 841, 17, 33047, 32924, 32963, 33064, 32274, 7483, 62, 22291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120similar_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shared_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120shared_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def similar_elements ( list1 , list2 ) : \n    set1 = set ( list1 ) \n    \n    set2 = set ( list2 ) \n    \n    shared_elements = set1 . intersection ( set2 ) \n    \n    return shared_elements \n\n"}
{"prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n", "task_id": "Mbpp/3", "test": "\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 1263, 62, 6621, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 32685, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 291, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_not_prime ( n ) : \n    if n <= 1 : \n        return True \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n", "task_id": "Mbpp/4", "test": "\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 25608, 62, 16555, 62, 17819, 370, 32082, 32509, 32113, 1181, 82, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 25608, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32718, 33097, 32818, 291, 32214, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32732, 32682, 32723, 291, 32040, 32460, 207, 17, 33291, 32460, 207, 16, 33048, 32618, 32759, 33291, 33372, 207, 16, 33048, 32618, 32759, 33291, 33372, 207, 16, 33047, 32924, 32034, 32734, 33072, 33383, 32281, 25608, 1895, 32895, 32465, 32664, 25608, 33048, 32664, 291, 33048, 32664, 460, 33047, 32924, 32963, 33067, 33403, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 25608, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 32878, 25608, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 32734, 33072, 33383, 32281, 25608, 1895, 32895, 32465, 32664, 25608, 33048, 32664, 291, 33048, 32286, 207, 15, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 32734, 33072, 33383, 32358, 33202, 32061, 25608, 33207, 3724, 32895, 32465, 32776, 33124, 33343, 13322, 33440, 33105, 33047, 32924, 32963, 33064, 32274, 25608, 33067, 33403, 33094, 33104, 33343, 25608, 1895, 32082, 32509, 32113, 25608, 32500, 32113, 291, 32500, 32113, 460, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 8402, 32059, 460, 32963, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 32571, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 32571, 32460, 207, 17, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 2104, 32866, 32441, 32601, 291, 33313, 32691, 32856, 32721, 32573, 32878, 25608, 32716, 33307, 32277, 2104, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 25608, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 8402, 32059, 2104, 32963, 33067, 32486, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 1327, 32866, 32441, 32601, 291, 33313, 32691, 32856, 32721, 32573, 32878, 25608, 32716, 33307, 32277, 1327, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 25608, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 8402, 32059, 1327, 32963, 33067, 32486, 33234, 32742, 32095, 33231, 32601, 8402, 32866, 32091, 32601, 460, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32911, 33130, 32573, 32878, 25608, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32377, 33130, 32573, 32878, 25608, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 32541, 32994, 32729, 32573, 32878, 25608, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 33373, 32729, 32573, 32878, 25608, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33140, 32963, 32734, 33072, 33383, 32281, 25608, 1895, 32895, 32465, 32664, 25608, 33048, 32664, 291, 33048, 32664, 8402, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80queue_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80larg_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def heap_queue_largest ( nums , n ) : \n    heap = nums [ : n ] \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        heapify ( heap , n , i ) \n    \n    for i in range ( n , len ( nums ) ) : \n        if nums [ i ] > heap [ 0 ] : \n            heap [ 0 ] = nums [ i ] \n            \n            heapify ( heap , n , 0 ) \n        \n    \n    heap . sort ( reverse = True ) \n    return heap \n\ndef heapify ( heap , n , i ) : \n    largest = i \n    \n    left = 2 * i + 1 \n    \n    right = 2 * i + 2 \n    \n    if left < n and heap [ left ] > heap [ largest ] : \n        largest = left \n        \n    \n    if right < n and heap [ right ] > heap [ largest ] : \n        largest = right \n        \n    \n    if largest != i : \n        heap [ i ] , heap [ largest ] = heap [ largest ] , heap [ i ] \n        \n        heapify ( heap , n , largest ) \n    \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n", "task_id": "Mbpp/6", "test": "\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 17540, 62, 3554, 62, 4699, 62, 15609, 62, 6952, 32082, 32509, 32113, 1181, 16, 32500, 32113, 1181, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1371, 256, 62, 4248, 32416, 32682, 32723, 1181, 16, 33427, 32059, 1181, 17, 32963, 33064, 33442, 33132, 33383, 32358, 33202, 33038, 33383, 32281, 11316, 32895, 32465, 32664, 1371, 256, 62, 4248, 33047, 32924, 33207, 1683, 32895, 32465, 33034, 651, 16, 6, 32023, 33047, 32924, 32866, 33160, 32104, 207, 16, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120differ_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80At_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80One_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Bit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Pos_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def differ_At_One_Bit_Pos ( num1 , num2 ) : \n    xor_result = num1 ^ num2 \n    \n    return bin ( xor_result ) . count ( '1' ) == 1 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n", "task_id": "Mbpp/7", "test": "\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 5897, 62, 5495, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3061, 32763, 33383, 32358, 33202, 32061, 252, 33207, 9818, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1232, 62, 10438, 32176, 33320, 33031, 32361, 1726, 33403, 32244, 32413, 32660, 32723, 1726, 33397, 32164, 32059, 3061, 33250, 32055, 33075, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1726, 33047, 32924, 32866, 32072, 32104, 207, 19, 33313, 32042, 32725, 32963, 33064, 32274, 1232, 62, 10438, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80long_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_char_long ( s ) : \n    words = s . split ( ) \n    \n    long_words = [ word for word in words if len ( word ) >= 4 ] \n    \n    return long_words \n\n"}
{"prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "task_id": "Mbpp/8", "test": "\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7748, 62, 6487, 82, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33080, 32682, 32723, 1181, 32519, 32460, 207, 17, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 1181, 82, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def square_nums ( nums ) : \n    return [ num ** 2 for num in nums ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n", "task_id": "Mbpp/9", "test": "\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 27295, 715, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 6301, 612, 32416, 32682, 32239, 32573, 32878, 252, 32716, 33307, 32718, 32818, 460, 33097, 32214, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 252, 32716, 33307, 32718, 33097, 32818, 460, 32214, 33447, 32343, 33447, 32963, 33234, 32742, 32095, 33231, 32601, 6301, 612, 32866, 33160, 32601, 252, 33313, 32420, 32762, 32184, 33064, 32274, 460, 33067, 32486, 33067, 33403, 33064, 32274, 291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Rot_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rot_ter\ud83d\ude80^\ud83d\ude80ated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rot_ter\ud83d\ude80^\ud83d\ude80ated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Rotations ( s ) : \n    n = len ( s ) \n    \n    for i in range ( 1 , n + 1 ) : \n        rotated = s [ i : ] + s [ : i ] \n        \n        if rotated == s : \n            return i \n        \n    \n    return n \n\n"}
{"prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n", "task_id": "Mbpp/11", "test": "\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 24765, 32082, 32509, 32113, 252, 32500, 32113, 1555, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1019, 62, 404, 1862, 8639, 32763, 33383, 32358, 33202, 32061, 252, 33207, 1273, 32895, 32465, 32664, 1555, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1554, 62, 404, 1862, 8639, 32763, 33383, 32358, 33202, 32061, 252, 33207, 427, 6387, 32895, 32465, 32664, 1555, 33047, 32924, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 1019, 62, 404, 1862, 8639, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 33101, 32856, 32601, 1554, 62, 404, 1862, 8639, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 32420, 32762, 32184, 33064, 32274, 252, 33067, 32064, 32366, 32090, 33231, 32601, 1019, 62, 404, 1862, 8639, 32866, 33160, 32601, 1554, 62, 404, 1862, 8639, 33313, 32184, 33064, 32943, 32573, 32878, 252, 32716, 33307, 32718, 33097, 32818, 1019, 62, 404, 1862, 8639, 32214, 33447, 32343, 33447, 33067, 32064, 32984, 33283, 32034, 33064, 32989, 32682, 32239, 32573, 32878, 252, 32716, 33307, 32718, 33097, 32818, 1019, 62, 404, 1862, 8639, 32214, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 252, 32716, 33307, 32718, 32938, 32682, 32723, 1554, 62, 404, 1862, 8639, 32571, 32460, 207, 16, 33097, 32214, 33447, 32343, 33447, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Occ_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_Occ ( s , char ) : \n    first_occurrence = s . find ( char ) \n    \n    last_occurrence = s . rfind ( char ) \n    \n    if first_occurrence == - 1 or last_occurrence == - 1 : \n        return s \n    elif first_occurrence == last_occurrence : \n        return s [ : first_occurrence ] \n    else : \n        return s [ : first_occurrence ] + s [ last_occurrence + 1 : ] \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n", "task_id": "Mbpp/12", "test": "\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3724, 62, 8795, 32082, 32509, 32113, 5852, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 24442, 32895, 32465, 32664, 5852, 33048, 32776, 33124, 33343, 2119, 32878, 2545, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_matrix ( matrix ) : \n    return sorted ( matrix , key = sum ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "task_id": "Mbpp/14", "test": "\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 20156, 32082, 32509, 32113, 3240, 32500, 32113, 5471, 32500, 32113, 8766, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32723, 3240, 32297, 32059, 5471, 32297, 32059, 8766, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Volume_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Volume ( base , height , depth ) : \n    return base * height * depth \n\n"}
{"prompt": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n", "task_id": "Mbpp/16", "test": "\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2422, 62, 771, 2197, 587, 62, 22497, 5510, 32082, 32509, 32113, 2422, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 7949, 33033, 427, 6, 61, 58, 64, 12, 89, 60, 10, 62, 58, 64, 12, 89, 60, 19262, 6, 32023, 32963, 33064, 33170, 33383, 32281, 6921, 32895, 32465, 33340, 33383, 32358, 33202, 32061, 299, 33207, 4168, 32895, 32465, 32664, 7949, 33048, 32664, 2422, 33047, 32924, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80low_ter\ud83d\ude80^\ud83d\ude80erc_ter\ud83d\ude80^\ud83d\ude80ase_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80unders_ter\ud83d\ude80^\ud83d\ude80core_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80+$_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bool_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120re_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120match_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def text_lowercase_underscore ( text ) : \n    pattern = r'^[a-z]+_[a-z]+$' \n    \n    return bool ( re . match ( pattern , text ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n", "task_id": "Mbpp/17", "test": "\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7748, 62, 522, 23073, 32082, 32509, 32113, 2376, 62, 4082, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33065, 207, 19, 32297, 32059, 2376, 62, 4082, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80per_ter\ud83d\ude80^\ud83d\ude80imeter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def square_perimeter ( side_length ) : \n    return 4 * side_length \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n", "task_id": "Mbpp/18", "test": "\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 5634, 995, 62, 358, 1274, 32082, 32509, 32113, 252, 16, 32500, 32113, 252, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 252, 17, 62, 1113, 32763, 33383, 32281, 841, 32895, 32465, 32664, 252, 17, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1228, 33033, 15207, 32023, 32963, 32077, 32174, 32723, 1555, 32059, 252, 16, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 32494, 33205, 32601, 252, 17, 62, 1113, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1228, 32128, 32059, 1555, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dir_ter\ud83d\ude80^\ud83d\ude80ty_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ch_ter\ud83d\ude80^\ud83d\ude80ars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_dirty_chars ( s1 , s2 ) : \n    s2_set = set ( s2 ) \n    \n    result = \"\" \n    \n    for char in s1 : \n        if char not in s2_set : \n            result += char \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "task_id": "Mbpp/19", "test": "\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1719, 62, 67, 28376, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2815, 32763, 33383, 32281, 841, 32895, 32465, 33047, 32924, 32963, 32077, 32174, 32723, 1181, 32059, 5369, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 32689, 32601, 2815, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 32734, 33072, 33383, 32358, 33202, 32061, 2815, 33207, 957, 32895, 32465, 32664, 1181, 33047, 32924, 32963, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80uplicate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def test_duplicate ( arr ) : \n    seen = set ( ) \n    \n    for num in arr : \n        if num in seen : \n            return True \n        \n        seen . add ( num ) \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n", "task_id": "Mbpp/20", "test": "\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 5687, 435, 32082, 32509, 32113, 1594, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 4829, 3075, 62, 6487, 2228, 33208, 32425, 32400, 207, 17, 15, 15, 32860, 32400, 207, 17, 20, 19, 32860, 32400, 207, 18, 23, 18, 33257, 32444, 32963, 33064, 33442, 32601, 1594, 32866, 32689, 32601, 4829, 3075, 62, 6487, 2228, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80wood_ter\ud83d\ude80^\ud83d\ude80all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120wood_ter\ud83d\ude80^\ud83d\ude80ball_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120wood_ter\ud83d\ude80^\ud83d\ude80ball_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_woodall ( number ) : \n    woodball_numbers = [ 200 , 254 , 383 ] \n    \n    return number in woodball_numbers \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "task_id": "Mbpp/56", "test": "\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 6607, 62, 6487, 32763, 33383, 32281, 1097, 32895, 32465, 32540, 32573, 32887, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 32716, 33307, 32718, 33097, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 33047, 32924, 32963, 33064, 33442, 32601, 1181, 32866, 33160, 32873, 32682, 32723, 6607, 62, 6487, 32297, 32460, 207, 17, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rev_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rev_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check ( num ) : \n    rev_num = int ( str ( num ) [ : : - 1 ] ) \n    \n    return num == rev_num * 2 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n", "task_id": "Mbpp/57", "test": "\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 8924, 62, 11835, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1181, 82, 33207, 3724, 32895, 32465, 32776, 33124, 33343, 13322, 33440, 33105, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3034, 62, 6487, 32763, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 1401, 33048, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32963, 33064, 33170, 33383, 32281, 1097, 32895, 32465, 32664, 3034, 62, 6487, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Max_Num ( nums ) : \n    nums . sort ( reverse = True ) \n    max_num = '' . join ( map ( str , nums ) ) \n    \n    return int ( max_num ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n", "task_id": "Mbpp/58", "test": "\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 9545, 62, 9080, 82, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33064, 33442, 33088, 32876, 32682, 32723, 245, 32297, 32059, 270, 32866, 32441, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120opposite_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sign_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def opposite_signs ( a , b ) : \n    return ( a * b ) < 0 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n", "task_id": "Mbpp/59", "test": "\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 8434, 26325, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 291, 32297, 32962, 32876, 32682, 32732, 32682, 33065, 207, 18, 32297, 32059, 291, 33291, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oct_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_octagonal ( n ) : \n    return n * ( 3 * n - 2 ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n", "task_id": "Mbpp/61", "test": "\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 5716, 25822, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 2545, 32753, 32485, 32463, 32206, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 33403, 32355, 32413, 32660, 32723, 20408, 33397, 32164, 32468, 32573, 32878, 252, 32716, 33307, 32718, 32818, 460, 33097, 32818, 521, 32214, 33447, 32343, 33447, 33250, 33151, 32087, 32866, 33160, 33132, 33383, 32281, 10405, 32895, 32465, 32540, 32573, 32878, 252, 32716, 33307, 32718, 32818, 460, 33097, 32818, 521, 32214, 33447, 32343, 33447, 33047, 32924, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_Substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        for j in range ( i + 1 , len ( s ) + 1 ) : \n            if sum ( int ( digit ) for digit in s [ i : j ] ) == len ( s [ i : j ] ) : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "task_id": "Mbpp/62", "test": "\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 19702, 62, 6487, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 1344, 32895, 32465, 32664, 284, 292, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def smallest_num ( lst ) : \n    return min ( lst ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n", "task_id": "Mbpp/63", "test": "\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 8002, 2233, 32082, 32509, 32113, 244, 393, 873, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 8002, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 873, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 873, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1009, 32763, 33383, 32281, 3095, 32895, 32465, 32032, 32682, 32239, 32573, 33278, 32573, 32878, 244, 393, 873, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33291, 32468, 32573, 33278, 32573, 32878, 244, 393, 873, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1009, 32866, 33152, 32601, 3034, 62, 8002, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 8002, 32059, 1009, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 3034, 62, 8002, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80erence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_difference ( tuples ) : \n    max_diff = 0 \n    \n    for i in range ( len ( tuples ) ) : \n        for j in range ( i + 1 , len ( tuples ) ) : \n            diff = abs ( tuples [ i ] [ 0 ] - tuples [ j ] [ 0 ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "task_id": "Mbpp/64", "test": "\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3592, 62, 18325, 32082, 32509, 32113, 14089, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 24442, 32895, 32465, 32664, 14089, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33403, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120subject_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120marks_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def subject_marks ( marks ) : \n    return sorted ( marks , key = lambda x : x [ 1 ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n", "task_id": "Mbpp/65", "test": "\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 15082, 488, 62, 2493, 62, 1828, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3212, 32460, 207, 15, 32963, 32077, 32174, 32723, 3688, 32059, 284, 292, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 3688, 33048, 32664, 1517, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 3212, 32128, 32763, 33383, 32281, 15082, 488, 62, 2493, 62, 1828, 32895, 32465, 32664, 3688, 33047, 32924, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 3212, 32128, 32059, 3688, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 3212, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120recurs_ter\ud83d\ude80^\ud83d\ude80ive_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120recurs_ter\ud83d\ude80^\ud83d\ude80ive_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def recursive_list_sum ( lst ) : \n    total = 0 \n    \n    for element in lst : \n        if isinstance ( element , list ) : \n            total += recursive_list_sum ( element ) \n        else : \n            total += element \n        \n    \n    return total \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "task_id": "Mbpp/66", "test": "\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 984, 62, 4241, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 33152, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pos_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pos_count ( lst ) : \n    count = 0 \n    \n    for num in lst : \n        if num > 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "task_id": "Mbpp/67", "test": "\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 15758, 62, 7675, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 15758, 32176, 33320, 33031, 32192, 33320, 33031, 33230, 207, 15, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 33403, 32244, 32413, 32660, 32723, 521, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32468, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32571, 32468, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 33067, 33403, 33067, 33403, 33064, 33170, 33383, 32281, 2545, 32895, 32465, 32540, 32573, 32878, 15758, 32716, 33307, 32277, 291, 33447, 32343, 33447, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def bell_number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return sum ( bell [ n ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "task_id": "Mbpp/68", "test": "\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 8704, 301, 8221, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 6733, 32961, 32799, 32723, 24410, 33095, 33105, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 6733, 32717, 32260, 32963, 33067, 32486, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32441, 32721, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 24410, 32717, 32260, 32963, 33067, 32486, 33067, 33403, 33064, 32204, 32037, 32723, 6733, 33101, 32059, 24410, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Mon_ter\ud83d\ude80^\ud83d\ude80ot_ter\ud83d\ude80^\ud83d\ude80onic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120increasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decreasing_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_Monotonic ( arr ) : \n    increasing = decreasing = True \n    \n    \n    for i in range ( len ( arr ) - 1 ) : \n        if arr [ i ] > arr [ i + 1 ] : \n            increasing = False \n            \n        \n        if arr [ i ] < arr [ i + 1 ] : \n            decreasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "task_id": "Mbpp/69", "test": "\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 1580, 2493, 32082, 32509, 32113, 284, 292, 32500, 32113, 1096, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32732, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 284, 292, 32716, 33307, 32718, 32818, 460, 33097, 32938, 32682, 32723, 460, 32571, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 33047, 32924, 32214, 33447, 32343, 33447, 32866, 33160, 32601, 1096, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_sublist ( lst , sub ) : \n    for i in range ( len ( lst ) - len ( sub ) + 1 ) : \n        if lst [ i : i + len ( sub ) ] == sub : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n", "task_id": "Mbpp/70", "test": "\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 11162, 32082, 32509, 32113, 244, 393, 873, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3960, 32763, 33383, 32281, 10405, 32895, 32465, 32540, 32573, 32878, 244, 393, 873, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33047, 32924, 32963, 32077, 32174, 32723, 244, 32059, 244, 393, 873, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 244, 33047, 32924, 32866, 32091, 32601, 3960, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80equal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_equal ( tuples ) : \n    length = len ( tuples [ 0 ] ) \n    \n    for t in tuples : \n        if len ( t ) != length : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "task_id": "Mbpp/71", "test": "\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2916, 62, 14355, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 11501, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 28251, 32811, 207, 16, 13, 18, 32963, 32734, 32226, 32799, 32723, 1961, 6481, 33095, 33105, 32963, 32669, 32466, 32394, 32037, 32892, 32601, 11501, 32866, 33152, 32104, 207, 16, 33313, 33101, 32059, 1961, 6481, 32034, 32734, 32226, 32799, 32723, 11501, 32763, 33383, 32281, 3034, 32895, 32465, 32286, 207, 16, 33048, 33340, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 11501, 32769, 32059, 28251, 33047, 32924, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1961, 6481, 32717, 32260, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33291, 32059, 11501, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32059, 11501, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32911, 33130, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32377, 33130, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32059, 11501, 33447, 32343, 33447, 32541, 32994, 32729, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32059, 11501, 33447, 32343, 33447, 33373, 32729, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33140, 32963, 32734, 32226, 32799, 32723, 1961, 6481, 33095, 33105, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 5369, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120comb_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shrink_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sw_ter\ud83d\ude80^\ud83d\ude80apped_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sw_ter\ud83d\ude80^\ud83d\ude80apped_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shrink_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sw_ter\ud83d\ude80^\ud83d\ude80apped_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sw_ter\ud83d\ude80^\ud83d\ude80apped_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def comb_sort ( arr ) : \n    gap = len ( arr ) \n    \n    shrink = 1.3 \n    \n    swapped = True \n    \n    while gap > 1 or swapped : \n        gap = max ( 1 , int ( gap / shrink ) ) \n        \n        swapped = False \n        \n        for i in range ( len ( arr ) - gap ) : \n            if arr [ i ] > arr [ i + gap ] : \n                arr [ i ] , arr [ i + gap ] = arr [ i + gap ] , arr [ i ] \n                \n                swapped = True \n                \n            \n        \n    \n    return arr \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "task_id": "Mbpp/72", "test": "\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5222, 62, 50, 10631, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 15, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 291, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 521, 32416, 32682, 32723, 291, 33291, 32416, 32682, 32723, 460, 32297, 32059, 460, 32963, 33234, 32742, 32095, 33231, 32873, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 521, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32519, 32460, 207, 17, 32866, 33160, 32601, 521, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dif_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80quare_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def dif_Square ( n ) : \n    for i in range ( 0 , int ( n ** 0.5 ) + 1 ) : \n        j = n - i * i \n        \n        if int ( j ** 0.5 ) ** 2 == j : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n", "task_id": "Mbpp/74", "test": "\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 16344, 5085, 4429, 32082, 32509, 32113, 11841, 32500, 32113, 6905, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 11841, 33047, 32924, 32866, 32091, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 6905, 33047, 32924, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32734, 32226, 32799, 32723, 7949, 62, 577, 62, 21393, 32146, 33050, 33341, 32747, 32963, 32734, 32226, 32799, 32723, 6905, 62, 577, 62, 21691, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32911, 33221, 7949, 32377, 33221, 386, 80, 32541, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 11841, 33048, 32664, 6905, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32601, 7949, 32866, 32689, 32601, 7949, 62, 577, 62, 21393, 33313, 32420, 32762, 32184, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 7949, 62, 577, 62, 21393, 32716, 33307, 32277, 7949, 33447, 32343, 33447, 32866, 32091, 32601, 386, 80, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 7949, 62, 577, 62, 21393, 32716, 33307, 32277, 7949, 33447, 32343, 33447, 32059, 386, 80, 32963, 33067, 33403, 32486, 33234, 32742, 32095, 33231, 32601, 386, 80, 32866, 32689, 32601, 6905, 62, 577, 62, 21691, 33313, 32420, 32762, 32184, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 6905, 62, 577, 62, 21691, 32716, 33307, 32277, 386, 80, 33447, 32343, 33447, 32866, 32091, 32601, 7949, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 6905, 62, 577, 62, 21691, 32716, 33307, 32277, 386, 80, 33447, 32343, 33447, 32059, 7949, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80same_ter\ud83d\ude80^\ud83d\ude80pat_ter\ud83d\ude80^\ud83d\ude80terns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120patterns_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_samepatterns ( patterns , sequence ) : \n    if len ( patterns ) != len ( sequence ) : \n        return False \n    \n    pattern_to_sequence = { } \n    \n    sequence_to_pattern = { } \n    \n    for pattern , seq in zip ( patterns , sequence ) : \n        if pattern in pattern_to_sequence : \n            if pattern_to_sequence [ pattern ] != seq : \n                return False \n            \n        else : \n            pattern_to_sequence [ pattern ] = seq \n            \n        \n        if seq in sequence_to_pattern : \n            if sequence_to_pattern [ seq ] != pattern : \n                return False \n            \n        else : \n            sequence_to_pattern [ seq ] = pattern \n            \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n", "task_id": "Mbpp/75", "test": "\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 83, 393, 873, 32082, 32509, 32113, 244, 393, 873, 62, 2493, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 244, 393, 32059, 244, 393, 873, 62, 2493, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 519, 32753, 32485, 32463, 32412, 32873, 32682, 32723, 1371, 33384, 32059, 528, 32866, 33160, 32104, 207, 15, 33313, 33403, 32355, 32413, 32660, 32723, 1371, 33397, 32164, 32059, 244, 393, 33250, 33151, 32087, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 244, 393, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_tuples ( tuples_list , k ) : \n    result = [ ] \n    \n    for tup in tuples_list : \n        if all ( x % k == 0 for x in tup ) : \n            result . append ( tup ) \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n", "task_id": "Mbpp/77", "test": "\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 21659, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 33064, 33442, 32873, 32682, 32723, 1181, 33384, 32460, 207, 16, 16, 32866, 33160, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_Diff ( num ) : \n    return num % 11 == 0 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "task_id": "Mbpp/79", "test": "\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1726, 62, 6446, 32082, 32509, 32113, 1726, 33233, 32346, 32346, 32034, 33064, 33442, 32873, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 1726, 33047, 32924, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def word_len ( word ) : \n    return len ( word ) % 2 != 0 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n", "task_id": "Mbpp/80", "test": "\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 28058, 401, 21457, 62, 7675, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32732, 32682, 32732, 32682, 32723, 291, 32297, 32059, 291, 32297, 32059, 291, 32571, 32416, 32682, 32732, 32682, 32723, 291, 32297, 32059, 291, 32297, 32059, 291, 32571, 32416, 32682, 32723, 291, 32297, 32059, 291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tet_ter\ud83d\ude80^\ud83d\ude80ra_ter\ud83d\ude80^\ud83d\ude80hedral_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tetrahedral_number ( n ) : \n    return n * n * n + n * n * n + n * n \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/82", "test": "import math\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6530, 62, 776, 1527, 32082, 32509, 32113, 11871, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32897, 32876, 32682, 33065, 207, 19, 32769, 32460, 207, 18, 32297, 32811, 207, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 18, 32297, 32962, 32876, 32682, 32723, 11871, 32519, 32460, 207, 18, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sp_ter\ud83d\ude80^\ud83d\ude80here_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def volume_sphere ( radius ) : \n    return ( 4 / 3 ) * 3.141592653589793 * ( radius ** 3 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "task_id": "Mbpp/84", "test": "\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6905, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32064, 32366, 32090, 33231, 32601, 291, 32866, 33160, 32104, 207, 17, 33313, 32184, 33064, 33334, 207, 16, 33067, 32064, 32366, 32090, 33231, 32601, 291, 32866, 33160, 32104, 207, 18, 33313, 32184, 33064, 33334, 207, 17, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 263, 79, 32416, 32682, 32421, 32425, 32400, 207, 15, 33257, 32444, 32297, 32962, 32876, 32682, 32723, 291, 32571, 32460, 207, 16, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32460, 207, 16, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 17, 33447, 32343, 33447, 32460, 207, 16, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 18, 33447, 32343, 33447, 32460, 207, 17, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 19, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 18, 33447, 32343, 33447, 32963, 33067, 33403, 33064, 32943, 32573, 32878, 263, 79, 32716, 33307, 32277, 291, 33447, 32343, 33447, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sequence ( n ) : \n    if n == 1 : \n        return 1 \n    elif n == 2 : \n        return 1 \n    elif n == 3 : \n        return 2 \n    else : \n        dp = [ 0 ] * ( n + 1 ) \n        \n        dp [ 1 ] = 1 \n        \n        dp [ 2 ] = 1 \n        \n        dp [ 3 ] = 2 \n        \n        for i in range ( 4 , n + 1 ) : \n            dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] \n            \n        \n        return dp [ n ] \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/85", "test": "import math\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5426, 12181, 62, 776, 1527, 32082, 32509, 32113, 11871, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 33065, 207, 19, 32297, 32811, 207, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 18, 32297, 32962, 32876, 32682, 32723, 11871, 32519, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120surface_ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sp_ter\ud83d\ude80^\ud83d\ude80here_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def surfacearea_sphere ( radius ) : \n    return 4 * 3.141592653589793 * ( radius ** 2 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n", "task_id": "Mbpp/86", "test": "\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 25824, 62, 27400, 26325, 62, 7675, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32732, 32682, 33065, 207, 18, 32297, 32059, 291, 32297, 32962, 32876, 32682, 32723, 291, 33291, 32460, 207, 16, 32571, 32460, 207, 16, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120centered_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80hex_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def centered_hexagonal_number ( n ) : \n    return 3 * n * ( n - 1 ) + 1 \n\n"}
{"prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n", "task_id": "Mbpp/87", "test": "\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 19387, 62, 26130, 6280, 62, 14565, 32082, 32509, 32113, 13026, 16, 32500, 32113, 13026, 17, 32500, 32113, 13026, 18, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 31796, 62, 13057, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 263, 32722, 33392, 32786, 13026, 16, 32952, 32786, 13026, 17, 32952, 32786, 13026, 18, 32328, 32045, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 31796, 62, 13057, 33207, 3967, 32895, 32465, 32664, 263, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 31796, 62, 13057, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merge_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diction_ter\ud83d\ude80^\ud83d\ude80aries_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120update_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def merge_dictionaries_three ( dict1 , dict2 , dict3 ) : \n    merged_dict = { } \n    \n    for d in ( dict1 , dict2 , dict3 ) : \n        merged_dict . update ( d ) \n    \n    return merged_dict \n\n"}
{"prompt": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n", "task_id": "Mbpp/88", "test": "\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2491, 80, 62, 4241, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2491, 80, 62, 13057, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 2849, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 2849, 32866, 32689, 32601, 2491, 80, 62, 13057, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 2491, 80, 62, 13057, 32716, 33307, 32277, 2849, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 2491, 80, 62, 13057, 32716, 33307, 32277, 2849, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 2491, 80, 62, 13057, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def freq_count ( lst ) : \n    freq_dict = { } \n    \n    for item in lst : \n        if item in freq_dict : \n            freq_dict [ item ] += 1 \n        else : \n            freq_dict [ item ] = 1 \n            \n        \n    \n    return freq_dict \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n", "task_id": "Mbpp/89", "test": "\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 20040, 62, 6487, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 20040, 32416, 32682, 32723, 291, 33291, 32460, 207, 16, 32963, 32669, 32466, 33231, 32601, 20040, 32866, 33152, 32104, 207, 15, 33313, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33291, 32059, 20040, 32866, 32685, 32104, 207, 16, 33313, 32420, 32762, 32184, 33255, 32134, 33067, 32486, 32734, 32852, 33329, 32723, 20040, 32687, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 20040, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120closest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def closest_num ( n ) : \n    closest = n - 1 \n    \n    while closest > 0 : \n        if n - closest <= 1 : \n            break \n        \n        closest -= 1 \n    \n    return closest \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n", "task_id": "Mbpp/90", "test": "\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 10405, 62, 2022, 32082, 32509, 32113, 3061, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 6446, 32460, 207, 15, 32963, 32077, 32174, 32723, 1726, 32059, 3061, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1726, 33047, 32924, 32866, 33152, 32601, 3034, 62, 6446, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 6446, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1726, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 6446, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80log_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def len_log ( words ) : \n    max_len = 0 \n    \n    for word in words : \n        if len ( word ) > max_len : \n            max_len = len ( word ) \n            \n        \n    \n    return max_len \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n", "task_id": "Mbpp/91", "test": "\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 1580, 2600, 32082, 32509, 32113, 2649, 62, 2493, 32500, 32113, 1096, 2600, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 2649, 32059, 2649, 62, 2493, 32034, 33234, 32742, 32095, 33231, 32601, 1096, 2600, 32866, 32689, 32601, 2649, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_substring ( string_list , substring ) : \n    for string in string_list : \n        if substring in string : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n", "task_id": "Mbpp/92", "test": "\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 1545, 13383, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1181, 62, 2006, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 62, 2006, 33047, 32924, 33291, 32460, 207, 17, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1181, 62, 2006, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1181, 62, 2006, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1181, 62, 2006, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 17, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80und_ter\ud83d\ude80^\ud83d\ude80ulating_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_undulating ( num ) : \n    num_str = str ( num ) \n    \n    for i in range ( len ( num_str ) - 2 ) : \n        if num_str [ i ] == num_str [ i + 1 ] == num_str [ i + 2 ] : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n", "task_id": "Mbpp/93", "test": "\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1813, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 245, 32519, 32059, 270, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def power ( a , b ) : \n    return a ** b \n\n"}
{"prompt": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n", "task_id": "Mbpp/94", "test": "\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3750, 62, 29717, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32943, 32573, 32887, 33383, 32281, 1344, 32895, 32465, 32664, 284, 292, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33403, 33047, 32924, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80minimum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def index_minimum ( lst ) : \n    return min ( lst , key = lambda x : x [ 1 ] ) [ 0 ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "task_id": "Mbpp/95", "test": "\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 11451, 62, 7729, 62, 9409, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1344, 62, 4082, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32866, 32441, 32601, 1344, 62, 4082, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1344, 62, 4082, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1344, 62, 4082, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Find_Min_Length ( lst ) : \n    min_length = float ( 'inf' ) \n    \n    for sublist in lst : \n        if len ( sublist ) < min_length : \n            min_length = len ( sublist ) \n            \n        \n    \n    return min_length \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n", "task_id": "Mbpp/96", "test": "\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2987, 15281, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def divisor ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n", "task_id": "Mbpp/97", "test": "\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6398, 62, 27062, 32082, 32509, 32113, 11996, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 6398, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 284, 292, 32059, 11996, 32034, 32077, 32174, 32723, 2849, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 2849, 32866, 32689, 32601, 6398, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 6398, 32716, 33307, 32277, 2849, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 6398, 32716, 33307, 32277, 2849, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 6398, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def frequency_lists ( lists ) : \n    frequency = { } \n    \n    for lst in lists : \n        for item in lst : \n            if item in frequency : \n                frequency [ item ] += 1 \n            else : \n                frequency [ item ] = 1 \n                \n            \n        \n    \n    return frequency \n\n"}
{"prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/98", "test": "import math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 14798, 326, 62, 6487, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1932, 32460, 207, 16, 32963, 32077, 32174, 32723, 1181, 32059, 284, 292, 32034, 32734, 32852, 33329, 32723, 1932, 33228, 32059, 1181, 32963, 33067, 33403, 33064, 32989, 32682, 32723, 1932, 32769, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multip_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def multiply_num ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product / len ( lst ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n", "task_id": "Mbpp/99", "test": "\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 27109, 62, 577, 62, 23432, 32082, 32509, 32113, 27109, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 10042, 33033, 15207, 32023, 32963, 32669, 32466, 33231, 32601, 27109, 32866, 33152, 32104, 207, 15, 33313, 32034, 32734, 32226, 32799, 32723, 10042, 32416, 32682, 33301, 33383, 32281, 1401, 32895, 32465, 32032, 32682, 32723, 27109, 33384, 32460, 207, 17, 33047, 32924, 32571, 32059, 10042, 32963, 32734, 32226, 32799, 32723, 27109, 32416, 32682, 32723, 27109, 32040, 32460, 207, 17, 32963, 33067, 33403, 33064, 32274, 10042, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120decimal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def decimal_to_binary ( decimal ) : \n    binary = \"\" \n    \n    while decimal > 0 : \n        binary = str ( decimal % 2 ) + binary \n        \n        decimal = decimal // 2 \n        \n    \n    return binary \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n", "task_id": "Mbpp/100", "test": "\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2100, 62, 5612, 370, 62, 16515, 513, 7295, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32852, 33329, 32723, 291, 32128, 32460, 207, 16, 32963, 32669, 32466, 33359, 32655, 32521, 33383, 32281, 317, 62, 16515, 513, 7295, 32895, 32465, 32664, 291, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 291, 32128, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 291, 33067, 33403, 33094, 33104, 33343, 317, 62, 16515, 513, 7295, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 33442, 33132, 33383, 32281, 1401, 32895, 32465, 32664, 291, 33047, 32924, 32866, 33160, 32721, 32573, 32887, 33383, 32281, 1401, 32895, 32465, 32664, 291, 33047, 32924, 32716, 33307, 32718, 33097, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pal_ter\ud83d\ude80^\ud83d\ude80ind_ter\ud83d\ude80^\ud83d\ude80rome_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def next_smallest_palindrome ( n ) : \n    n += 1 \n    while not is_palindrome ( n ) : \n        n += 1 \n    \n    return n \n\ndef is_palindrome ( n ) : \n    return str ( n ) == str ( n ) [ : : - 1 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n", "task_id": "Mbpp/101", "test": "\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 528, 392, 62, 7637, 32082, 32509, 32113, 5369, 32500, 32113, 528, 33233, 32346, 32346, 32034, 33064, 32943, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 528, 33291, 32460, 207, 16, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def kth_element ( arr , k ) : \n    return arr [ k - 1 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n", "task_id": "Mbpp/102", "test": "\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4494, 647, 62, 577, 62, 13236, 282, 32082, 32509, 32113, 4494, 647, 62, 2006, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 6168, 32763, 33383, 32358, 33202, 32061, 4494, 647, 62, 2006, 33207, 9818, 32895, 32465, 33034, 27045, 6, 32023, 33047, 32924, 32963, 33064, 32989, 32682, 32239, 32573, 32878, 6168, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32571, 32763, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32753, 32485, 32463, 32206, 33383, 32358, 33202, 32061, 1371, 33207, 3746, 32895, 32465, 33047, 32924, 33403, 32355, 32413, 32660, 32723, 1371, 33397, 32164, 32468, 32573, 32878, 6168, 32716, 33307, 32718, 32542, 207, 16, 33097, 32214, 33447, 32343, 33447, 33250, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sn_ter\ud83d\ude80^\ud83d\ude80ake_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80cam_ter\ud83d\ude80^\ud83d\ude80el_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sn_ter\ud83d\ude80^\ud83d\ude80ake_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120components_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sn_ter\ud83d\ude80^\ud83d\ude80ake_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'__ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120components_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120title_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120components_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def snake_to_camel ( snake_str ) : \n    components = snake_str . split ( '_' ) \n    \n    return components [ 0 ] + '' . join ( x . title ( ) for x in components [ 1 : ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n", "task_id": "Mbpp/103", "test": "\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 300, 11944, 987, 62, 6487, 32082, 32509, 32113, 291, 32500, 32113, 273, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 263, 79, 32176, 33320, 33031, 32192, 33320, 33031, 33230, 207, 15, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 273, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 273, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32571, 32468, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 33067, 33403, 33067, 33403, 33064, 32943, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 291, 33447, 32343, 33447, 32716, 33307, 32277, 273, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120e_ter\ud83d\ude80^\ud83d\ude80uler_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def eulerian_num ( n , m ) : \n    dp = [ [ 0 for _ in range ( m + 1 ) ] for _ in range ( n + 1 ) ] \n    \n    dp [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        for j in range ( 1 , m + 1 ) : \n            dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] \n            \n        \n    \n    return dp [ n ] [ m ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "task_id": "Mbpp/104", "test": "\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3724, 62, 1580, 27062, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32206, 33383, 32281, 24442, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 33403, 32244, 32413, 32660, 32723, 1096, 2493, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "task_id": "Mbpp/105", "test": "\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 4481, 62, 952, 2013, 531, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 2849, 32059, 284, 292, 32034, 33234, 32742, 32095, 33227, 2849, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80true_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bo_ter\ud83d\ude80^\ud83d\ude80ole_ter\ud83d\ude80^\ud83d\ude80ans_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_true_booleans ( lst ) : \n    count = 0 \n    \n    for item in lst : \n        if item : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "task_id": "Mbpp/106", "test": "\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 957, 62, 27062, 32082, 32509, 32113, 1517, 16, 32500, 32113, 30534, 16, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33301, 33383, 32281, 30534, 32895, 32465, 32664, 1517, 16, 33047, 32924, 32571, 32059, 30534, 16, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add_lists ( list1 , tuple1 ) : \n    return tuple ( list1 ) + tuple1 \n\n"}
{"prompt": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "task_id": "Mbpp/108", "test": "\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 19387, 62, 82, 13096, 62, 2493, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 32500, 32113, 1517, 18, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 31796, 62, 2493, 32416, 32682, 32732, 32682, 32723, 1517, 16, 32571, 32059, 1517, 17, 32571, 32059, 1517, 18, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 31796, 62, 2493, 33207, 3724, 32895, 32465, 33047, 32924, 32963, 33064, 32274, 31796, 62, 2493, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merge_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80orted_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def merge_sorted_list ( list1 , list2 , list3 ) : \n    merged_list = list1 + list2 + list3 \n    \n    merged_list . sort ( ) \n    return merged_list \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "task_id": "Mbpp/109", "test": "\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8792, 62, 4582, 28249, 32082, 32509, 32113, 10042, 62, 2600, 32500, 32113, 1181, 62, 7859, 715, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 10042, 62, 2600, 32763, 33383, 32281, 1517, 32895, 32465, 32664, 10042, 62, 2600, 33047, 32924, 32963, 32077, 32174, 32723, 1070, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 1181, 62, 7859, 715, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 10042, 62, 2600, 32416, 32682, 32239, 32573, 32878, 10042, 62, 2600, 32716, 33307, 32718, 32549, 32759, 33291, 33372, 207, 16, 33097, 32214, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 10042, 62, 2600, 32716, 33307, 32718, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 32963, 33067, 33403, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 2670, 32059, 10042, 62, 2600, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32664, 2670, 33047, 32924, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Equ_ter\ud83d\ude80^\ud83d\ude80ivalent_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80rot_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80rot_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120bit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def odd_Equivalent ( binary_string , num_rotations ) : \n    binary_string = list ( binary_string ) \n    \n    for _ in range ( num_rotations ) : \n        binary_string = binary_string [ - 1 : ] + binary_string [ : - 1 ] \n        \n    \n    count = 0 \n    \n    for bit in binary_string : \n        if int ( bit ) % 2 != 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n", "task_id": "Mbpp/111", "test": "\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3053, 62, 246, 62, 77, 11526, 62, 27062, 32082, 32509, 32113, 28919, 62, 27062, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3053, 62, 22291, 32763, 33383, 32281, 841, 32895, 32465, 32540, 32573, 32878, 28919, 62, 27062, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33047, 32924, 32963, 32077, 32174, 32723, 284, 292, 32468, 32573, 32878, 28919, 62, 27062, 32716, 33307, 32718, 32542, 207, 16, 33097, 32214, 33447, 32343, 33447, 32034, 32734, 32852, 33329, 32723, 3053, 62, 22291, 33210, 32763, 33383, 32281, 841, 32895, 32465, 32664, 284, 292, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 3053, 62, 22291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80ested_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def common_in_nested_lists ( nested_lists ) : \n    common_elements = set ( nested_lists [ 0 ] ) \n    \n    for lst in nested_lists [ 1 : ] : \n        common_elements &= set ( lst ) \n    \n    return common_elements \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "task_id": "Mbpp/113", "test": "\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 22599, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32674, 32825, 32644, 33098, 32034, 32734, 33072, 33383, 32281, 1097, 32895, 32465, 32664, 252, 33047, 32924, 32963, 33064, 33182, 33105, 33067, 33403, 33277, 33192, 12180, 3419, 33064, 33167, 32260, 33067, 32345, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80integer_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80try_statement_py\ud83d\ude80try_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80except_clause_py\ud83d\ude80except_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120Value_ter\ud83d\ude80^\ud83d\ude80Error_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_integer ( s ) : \n    try : \n        int ( s ) \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n", "task_id": "Mbpp/116", "test": "\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 30534, 62, 577, 62, 569, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1401, 62, 6487, 82, 32176, 33320, 33031, 32206, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 244, 393, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32723, 1097, 62, 6487, 32763, 33383, 32281, 1097, 32895, 32465, 33340, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32664, 1401, 62, 6487, 82, 33047, 32924, 33047, 32924, 32963, 33064, 32274, 1097, 62, 6487, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tuple_to_int ( tup ) : \n    str_nums = [ str ( num ) for num in tup ] \n    \n    int_num = int ( '' . join ( str_nums ) ) \n    \n    return int_num \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n", "task_id": "Mbpp/118", "test": "\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2649, 62, 577, 62, 2493, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 252, 33207, 9818, 32895, 32465, 33034, 651, 651, 32023, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def string_to_list ( s ) : \n    return s . split ( ' ' ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n", "task_id": "Mbpp/119", "test": "\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3348, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32911, 33221, 2104, 32377, 33221, 1327, 32541, 32994, 32437, 207, 15, 33373, 33153, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33291, 32460, 207, 16, 33140, 32963, 32669, 32466, 33231, 32601, 2104, 32866, 32441, 32601, 1327, 33313, 32034, 32734, 32226, 32799, 32723, 5940, 32416, 32682, 32897, 32876, 32682, 32723, 2104, 32571, 32059, 1327, 32040, 32460, 207, 17, 32963, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 5940, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32647, 32682, 32723, 5940, 32571, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 17, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1327, 32059, 5940, 32963, 33067, 33403, 32486, 33067, 32064, 32984, 33283, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32647, 32682, 32723, 5940, 33291, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1327, 32059, 5940, 32963, 33067, 33403, 32486, 33067, 33403, 32486, 33067, 33403, 33064, 32943, 32573, 32878, 1181, 82, 32716, 33307, 32277, 2104, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def search ( nums ) : \n    left , right = 0 , len ( nums ) - 1 \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if mid % 2 == 0 : \n            if nums [ mid ] == nums [ mid + 1 ] : \n                left = mid + 2 \n                \n            else : \n                right = mid \n                \n            \n        else : \n            if nums [ mid ] == nums [ mid - 1 ] : \n                left = mid + 1 \n                \n            else : \n                right = mid \n                \n            \n        \n    \n    return nums [ left ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n", "task_id": "Mbpp/120", "test": "\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 8065, 62, 83, 14563, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1932, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32297, 32468, 32573, 33278, 32573, 32878, 284, 292, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32963, 33234, 32742, 32095, 33231, 32601, 1932, 32866, 33152, 32601, 3034, 62, 8065, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32059, 1932, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 3034, 62, 8065, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_product_tuple ( lst ) : \n    max_product = float ( '-inf' ) \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            product = lst [ i ] [ 0 ] * lst [ j ] [ 1 ] \n            \n            if product > max_product : \n                max_product = product \n                \n            \n        \n    \n    return max_product \n\n"}
{"prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n", "task_id": "Mbpp/123", "test": "\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 604, 278, 508, 62, 6487, 2228, 62, 1828, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32111, 33104, 33343, 2545, 62, 990, 62, 1108, 262, 710, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2987, 262, 710, 62, 1828, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 1181, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 1181, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2987, 262, 710, 62, 1828, 32128, 32059, 460, 32963, 33234, 32742, 32095, 33231, 32601, 460, 32866, 32091, 32873, 32682, 32723, 1181, 32040, 32059, 460, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2987, 262, 710, 62, 1828, 32128, 32416, 32682, 32723, 1181, 32040, 32059, 460, 32963, 33067, 32486, 33067, 32486, 33067, 33403, 33064, 32274, 2987, 262, 710, 62, 1828, 33067, 33403, 32734, 32226, 32799, 32723, 604, 278, 508, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 2545, 62, 1108, 32763, 33383, 32281, 2545, 62, 990, 62, 1108, 262, 710, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 2545, 62, 1108, 32866, 33152, 32601, 460, 33313, 32691, 32856, 33132, 33383, 32281, 2545, 62, 990, 62, 1108, 262, 710, 32895, 32465, 32664, 2545, 62, 1108, 33047, 32924, 32866, 33160, 32601, 460, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 604, 278, 508, 62, 1828, 32128, 32059, 460, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 604, 278, 508, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120am_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80able_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120am_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80able_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120am_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80able_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120am_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80able_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def amicable_numbers_sum ( n ) : \n    def sum_of_divisors ( num ) : \n        divisors_sum = 1 \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                divisors_sum += i \n                if i != num // i : \n                    divisors_sum += num // i \n                \n            \n        \n        return divisors_sum \n    \n    amicable_sum = 0 \n    \n    for i in range ( 2 , n + 1 ) : \n        sum_div = sum_of_divisors ( i ) \n        \n        if sum_div > i and sum_of_divisors ( sum_div ) == i : \n            amicable_sum += i \n        \n    \n    return amicable_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/124", "test": "import math\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 10231, 62, 23278, 32082, 32509, 32113, 1670, 33233, 32346, 32346, 32034, 32133, 32850, 32507, 33339, 33056, 258, 660, 32510, 32625, 33064, 33170, 33383, 32358, 33202, 32061, 258, 660, 33207, 5693, 32895, 32465, 32664, 1670, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120angle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80complex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120phase_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def angle_complex ( z ) : \n    import cmath \n    return cmath . phase ( z ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n", "task_id": "Mbpp/125", "test": "\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 4082, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 8002, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1683, 62, 15, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1683, 62, 16, 32460, 207, 15, 32963, 32077, 32174, 32723, 1555, 32059, 252, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 33160, 32224, 651, 15, 6, 32023, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 62, 15, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 1683, 62, 16, 32128, 32460, 207, 16, 32963, 33067, 33403, 32486, 32734, 32226, 32799, 32723, 3034, 62, 8002, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 8002, 33048, 32032, 32682, 32723, 1683, 62, 16, 33291, 32059, 1683, 62, 15, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 3034, 62, 8002, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_length ( s ) : \n    max_diff = 0 \n    \n    count_0 = 0 \n    \n    count_1 = 0 \n    \n    for char in s : \n        if char == '0' : \n            count_0 += 1 \n        else : \n            count_1 += 1 \n        \n        max_diff = max ( max_diff , count_1 - count_0 ) \n        \n    \n    return max_diff \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "task_id": "Mbpp/126", "test": "\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 7737, 62, 1108, 262, 710, 32082, 32509, 32113, 1181, 16, 32500, 32113, 1181, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3053, 62, 1108, 262, 710, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 33301, 33383, 32281, 1344, 32895, 32465, 32664, 1181, 16, 33048, 32664, 1181, 17, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32873, 32682, 32723, 1181, 16, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32691, 32856, 32873, 32682, 32723, 1181, 17, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 3053, 62, 1108, 262, 710, 33207, 13508, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 33170, 33383, 32281, 2545, 32895, 32465, 32664, 3053, 62, 1108, 262, 710, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_common_divisors ( num1 , num2 ) : \n    common_divisors = [ ] \n    \n    for i in range ( 1 , min ( num1 , num2 ) + 1 ) : \n        if num1 % i == 0 and num2 % i == 0 : \n            common_divisors . append ( i ) \n        \n    \n    return sum ( common_divisors ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n", "task_id": "Mbpp/127", "test": "\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 14798, 326, 62, 569, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 245, 32297, 32059, 270, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multip_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def multiply_int ( a , b ) : \n    return a * b \n\n"}
{"prompt": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n", "task_id": "Mbpp/128", "test": "\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1232, 62, 10438, 32082, 32509, 32113, 291, 32500, 32113, 4965, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3061, 32763, 33383, 32358, 33202, 32061, 4965, 33207, 9818, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1232, 62, 10438, 32176, 33320, 33031, 32361, 1726, 33403, 32244, 32413, 32660, 32723, 1726, 33397, 32164, 32059, 3061, 33250, 32055, 33075, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1726, 33047, 32924, 32866, 33152, 32601, 291, 33313, 32042, 32725, 32963, 33064, 32274, 1232, 62, 10438, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120long_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def long_words ( n , sentence ) : \n    words = sentence . split ( ) \n    \n    long_words = [ word for word in words if len ( word ) > n ] \n    \n    return long_words \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "task_id": "Mbpp/129", "test": "\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13945, 62, 19497, 62, 2806, 32082, 32509, 32113, 5852, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5852, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 13945, 62, 1828, 32763, 33383, 32281, 2545, 32895, 32465, 32540, 32573, 32878, 5852, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 33132, 33383, 32281, 2545, 32895, 32465, 32540, 32573, 32878, 5852, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32866, 32091, 32601, 13945, 62, 1828, 33313, 33101, 32856, 33132, 33383, 32281, 2545, 32753, 32485, 32463, 32900, 32573, 33278, 32573, 32878, 5852, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33403, 32355, 32413, 32660, 32723, 521, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 33250, 33151, 32087, 32866, 32091, 32601, 13945, 62, 1828, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33234, 32742, 32095, 32394, 32037, 32892, 33132, 33383, 32281, 2545, 32753, 32485, 32463, 32900, 32573, 33278, 32573, 32878, 5852, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33403, 32355, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 33250, 33151, 32087, 32866, 32091, 32601, 13945, 62, 1828, 33313, 33101, 32856, 33132, 33383, 32281, 2545, 32753, 32485, 32463, 32900, 32573, 33278, 32573, 32878, 5852, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32732, 32682, 32723, 291, 33291, 32059, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 33403, 32355, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 33250, 33151, 32087, 32866, 32091, 32601, 13945, 62, 1828, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80square_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80test_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120magic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def magic_square_test ( matrix ) : \n    n = len ( matrix ) \n    \n    magic_sum = sum ( matrix [ 0 ] ) \n    \n    for i in range ( n ) : \n        if sum ( matrix [ i ] ) != magic_sum or sum ( matrix [ j ] [ i ] for j in range ( n ) ) != magic_sum : \n            return False \n        \n    \n    if sum ( matrix [ i ] [ i ] for i in range ( n ) ) != magic_sum or sum ( matrix [ i ] [ n - i - 1 ] for i in range ( n ) ) != magic_sum : \n        return False \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n", "task_id": "Mbpp/130", "test": "\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 404, 1862, 248, 4263, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 6398, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 2849, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 2849, 32866, 32689, 32601, 6398, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 6398, 32716, 33307, 32277, 2849, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 6398, 32716, 33307, 32277, 2849, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 32734, 32226, 32799, 32723, 3034, 62, 2002, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 6398, 33048, 32776, 33124, 33343, 2119, 33321, 33202, 32061, 6398, 33207, 748, 33047, 32924, 32963, 33064, 32274, 3034, 62, 2002, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80nces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_occurrences ( lst ) : \n    frequency = { } \n    \n    for item in lst : \n        if item in frequency : \n            frequency [ item ] += 1 \n        else : \n            frequency [ item ] = 1 \n            \n        \n    \n    max_item = max ( frequency , key = frequency . get ) \n    \n    return max_item \n\n"}
{"prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "task_id": "Mbpp/131", "test": "\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13322, 62, 85, 322, 1289, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 25578, 1289, 33208, 32425, 32620, 651, 64, 6, 32023, 32860, 32620, 651, 68, 6, 32023, 32860, 32620, 651, 72, 6, 32023, 32860, 32620, 651, 78, 6, 32023, 32860, 32620, 651, 84, 6, 32023, 32860, 32620, 651, 32, 6, 32023, 32860, 32620, 651, 36, 6, 32023, 32860, 32620, 651, 40, 6, 32023, 32860, 32620, 651, 46, 6, 32023, 32860, 32620, 651, 52, 6, 32023, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 252, 62, 2493, 32763, 33383, 32281, 1517, 32895, 32465, 32664, 252, 33047, 32924, 32963, 32734, 32226, 32799, 32911, 33221, 2104, 32377, 33221, 1327, 32541, 32994, 32437, 207, 15, 33373, 33153, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 252, 62, 2493, 33047, 32924, 33291, 32460, 207, 16, 33140, 32963, 32669, 32466, 33231, 32601, 2104, 32866, 32441, 32601, 1327, 33313, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 252, 62, 2493, 32716, 33307, 32277, 2104, 33447, 32343, 33447, 32866, 32494, 33205, 32601, 25578, 1289, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2104, 32128, 32460, 207, 16, 32963, 33067, 32064, 32366, 32090, 33231, 32721, 32573, 32878, 252, 62, 2493, 32716, 33307, 32277, 1327, 33447, 32343, 33447, 32866, 32494, 33205, 32601, 25578, 1289, 33313, 32184, 32734, 32852, 33329, 32723, 1327, 32687, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32911, 33130, 32573, 32878, 252, 62, 2493, 32716, 33307, 32277, 2104, 33447, 32343, 33447, 32377, 33130, 32573, 32878, 252, 62, 2493, 32716, 33307, 32277, 1327, 33447, 32343, 33447, 32541, 32994, 32729, 32573, 32878, 252, 62, 2493, 32716, 33307, 32277, 1327, 33447, 32343, 33447, 33373, 32729, 32573, 32878, 252, 62, 2493, 32716, 33307, 32277, 2104, 33447, 32343, 33447, 33140, 32963, 32734, 32852, 33329, 32723, 2104, 32128, 32460, 207, 16, 32963, 32734, 32852, 33329, 32723, 1327, 32687, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 33170, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32664, 252, 62, 2493, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80v_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80u_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80E_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80I_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80O_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def reverse_vowels ( s ) : \n    vowels = [ 'a' , 'e' , 'i' , 'o' , 'u' , 'A' , 'E' , 'I' , 'O' , 'U' ] \n    \n    s_list = list ( s ) \n    \n    left , right = 0 , len ( s_list ) - 1 \n    \n    while left < right : \n        if s_list [ left ] not in vowels : \n            left += 1 \n        elif s_list [ right ] not in vowels : \n            right -= 1 \n        else : \n            s_list [ left ] , s_list [ right ] = s_list [ right ] , s_list [ left ] \n            \n            left += 1 \n            right -= 1 \n        \n    \n    return '' . join ( s_list ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n", "task_id": "Mbpp/132", "test": "\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 244, 393, 62, 2600, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32664, 244, 393, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tup_string ( tup ) : \n    return '' . join ( tup ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "task_id": "Mbpp/133", "test": "\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 11624, 253, 5327, 377, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 32441, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2545, 32128, 32059, 1181, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80neg_ter\ud83d\ude80^\ud83d\ude80at_ter\ud83d\ude80^\ud83d\ude80iven_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_negativenum ( nums ) : \n    sum = 0 \n    \n    for num in nums : \n        if num < 0 : \n            sum += num \n        \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n", "task_id": "Mbpp/135", "test": "\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 22247, 26325, 62, 6487, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 291, 32297, 32962, 32876, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 291, 33291, 32460, 207, 16, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120hex_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def hexagonal_num ( n ) : \n    return n * ( 2 * n - 1 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/137", "test": "import math\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5854, 62, 4241, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 5854, 62, 4241, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 2159, 62, 12057, 62, 4241, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 5369, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 5854, 62, 4241, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 2159, 62, 12057, 62, 4241, 32128, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32989, 32682, 32723, 5854, 62, 4241, 32769, 32059, 2159, 62, 12057, 62, 4241, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def zero_count ( arr ) : \n    zero_count = 0 \n    \n    non_zero_count = 0 \n    \n    for num in arr : \n        if num == 0 : \n            zero_count += 1 \n        else : \n            non_zero_count += 1 \n        \n    \n    return zero_count / non_zero_count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "task_id": "Mbpp/138", "test": "\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 12133, 62, 4104, 62, 47, 322, 407, 62, 4104, 62, 12226, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 32669, 32466, 33231, 32601, 291, 32866, 33152, 32104, 207, 15, 33313, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32734, 32226, 32799, 32723, 291, 32416, 32682, 32723, 291, 32040, 32460, 207, 17, 32963, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80P_ter\ud83d\ude80^\ud83d\ude80ow_ter\ud83d\ude80^\ud83d\ude80ers_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Two_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_Sum_Of_Powers_Of_Two ( n ) : \n    if n == 0 : \n        return True \n    \n    while n > 0 : \n        if n % 2 == 1 : \n            return False \n        \n        n = n // 2 \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/139", "test": "import math\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 9985, 62, 5083, 377, 69, 2233, 32082, 32509, 32113, 11871, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 33065, 207, 17, 32297, 32811, 207, 18, 13, 16, 19, 16, 20, 24, 32297, 32059, 11871, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120circle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80circ_ter\ud83d\ude80^\ud83d\ude80um_ter\ud83d\ude80^\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80erence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def circle_circumference ( radius ) : \n    return 2 * 3.14159 * radius \n\n"}
{"prompt": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n", "task_id": "Mbpp/140", "test": "\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 4276, 326, 32082, 32509, 32113, 1517, 62, 990, 62, 27062, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 62, 1113, 32763, 33383, 32281, 841, 32895, 32465, 33047, 32924, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 1517, 62, 990, 62, 27062, 32034, 32077, 32174, 32723, 2849, 32059, 1096, 2493, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 62, 1113, 33207, 957, 32895, 32465, 32664, 2849, 33047, 32924, 32963, 33067, 33403, 33067, 33403, 33064, 32274, 1228, 62, 1113, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sing_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_singly ( list_of_lists ) : \n    result_set = set ( ) \n    \n    for sublist in list_of_lists : \n        for item in sublist : \n            result_set . add ( item ) \n        \n    \n    return result_set \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n", "task_id": "Mbpp/141", "test": "\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 265, 859, 647, 62, 14355, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 3034, 62, 3531, 32416, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33291, 32460, 207, 16, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33048, 32664, 3034, 62, 3531, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 3034, 62, 3531, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 3531, 32059, 521, 32963, 33067, 32486, 33067, 33403, 32734, 32226, 32799, 32239, 32573, 32878, 5369, 32716, 33307, 32718, 33097, 32938, 32682, 32723, 3034, 62, 3531, 32571, 32460, 207, 16, 32214, 33447, 32343, 33447, 32763, 33383, 32281, 17547, 271, 32895, 32465, 32540, 32573, 32878, 5369, 32716, 33307, 32718, 33097, 32938, 32682, 32723, 3034, 62, 3531, 32571, 32460, 207, 16, 32214, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 5369, 32716, 33307, 32718, 33097, 32938, 32682, 32723, 460, 32571, 32460, 207, 16, 32214, 33447, 32343, 33447, 32763, 33383, 32281, 17547, 271, 32895, 32465, 32540, 32573, 32878, 5369, 32716, 33307, 32718, 33097, 32938, 32682, 32723, 460, 32571, 32460, 207, 16, 32214, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 5369, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120p_ter\ud83d\ude80^\ud83d\ude80anc_ter\ud83d\ude80^\ud83d\ude80ake_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120revers_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120revers_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pancake_sort ( arr ) : \n    for i in range ( len ( arr ) ) : \n        max_index = len ( arr ) - 1 \n        \n        for j in range ( i , max_index ) : \n            if arr [ j ] > arr [ max_index ] : \n                max_index = j \n                \n            \n        \n        arr [ : max_index + 1 ] = reversed ( arr [ : max_index + 1 ] ) \n        \n        arr [ : i + 1 ] = reversed ( arr [ : i + 1 ] ) \n        \n    \n    return arr \n\n"}
{"prompt": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n", "task_id": "Mbpp/142", "test": "\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 16344, 20551, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 32500, 32113, 1517, 18, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1517, 16, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1517, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1517, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1517, 18, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80same_ter\ud83d\ude80^\ud83d\ude80pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_samepair ( list1 , list2 , list3 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] == list3 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n", "task_id": "Mbpp/145", "test": "\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 22169, 62, 21659, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 8002, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1009, 32763, 33383, 32281, 3095, 32895, 32465, 32032, 32682, 32239, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33291, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1009, 32866, 33152, 32601, 3034, 62, 8002, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 8002, 32059, 1009, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 3034, 62, 8002, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Abs_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_Abs_Diff ( arr ) : \n    max_diff = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            diff = abs ( arr [ i ] - arr [ j ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"prompt": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n", "task_id": "Mbpp/160", "test": "\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 82, 3548, 32082, 32509, 32113, 245, 32500, 32113, 270, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 1371, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 320, 32416, 32682, 32723, 291, 33291, 32059, 1371, 32963, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 245, 32297, 32059, 1371, 32866, 33160, 32873, 32682, 32723, 270, 32297, 32059, 320, 33313, 32420, 32762, 32184, 33064, 32388, 33392, 32786, 1371, 32952, 32786, 320, 32328, 32045, 33067, 32486, 33067, 33403, 33064, 33216, 33144, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80olution_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_solution ( a , b , n ) : \n    for x in range ( 1 , n + 1 ) : \n        y = n - x \n        \n        if a * x == b * y : \n            return ( x , y ) \n        \n    \n    return None \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n", "task_id": "Mbpp/161", "test": "\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 22291, 32082, 32509, 32113, 284, 292, 16, 32500, 32113, 284, 292, 17, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32361, 1371, 33403, 32244, 32413, 32660, 32723, 1371, 33397, 32164, 32059, 284, 292, 16, 33250, 32055, 33075, 32601, 1371, 32866, 32494, 33205, 32601, 284, 292, 17, 33313, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_elements ( lst1 , lst2 ) : \n    return [ x for x in lst1 if x not in lst2 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n", "task_id": "Mbpp/162", "test": "\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 19108, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3212, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32040, 32460, 207, 17, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 3212, 32128, 32416, 32682, 32723, 291, 33291, 32416, 32682, 33065, 207, 17, 32297, 32059, 460, 32963, 33067, 33403, 33064, 32274, 3212, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80series_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_series ( n ) : \n    total = 0 \n    \n    for i in range ( n // 2 ) : \n        total += n - 2 * i \n    \n    return total \n\n"}
{"prompt": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "task_id": "Mbpp/165", "test": "\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 5897, 62, 3185, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 252, 32763, 33383, 32358, 33202, 32061, 252, 33207, 3916, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 252, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32783, 440, 22729, 1551, 633, 4012, 16002, 14839, 424, 80, 81, 292, 12466, 86, 5073, 89, 1, 32023, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80abc_ter\ud83d\ude80^\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80gh_ter\ud83d\ude80^\ud83d\ude80ij_ter\ud83d\ude80^\ud83d\ude80kl_ter\ud83d\ude80^\ud83d\ude80mn_ter\ud83d\ude80^\ud83d\ude80op_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80r_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80uv_ter\ud83d\ude80^\ud83d\ude80w_ter\ud83d\ude80^\ud83d\ude80xy_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_char_position ( s ) : \n    s = s . lower ( ) \n    \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] == \"abcdefghijklmnopqrstuvwxyz\" [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n", "task_id": "Mbpp/166", "test": "\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 8591, 62, 20551, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1234, 62, 4241, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 8792, 62, 4241, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1234, 62, 4241, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 8792, 62, 4241, 32128, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32989, 32682, 32723, 1234, 62, 4241, 32297, 32059, 8792, 62, 4241, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_even_pair ( nums ) : \n    even_count = 0 \n    \n    odd_count = 0 \n    \n    for num in nums : \n        if num % 2 == 0 : \n            even_count += 1 \n        else : \n            odd_count += 1 \n        \n    \n    return even_count * odd_count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n", "task_id": "Mbpp/167", "test": "\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2100, 62, 9015, 62, 990, 62, 17, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32486, 32734, 32226, 32799, 32723, 1813, 32460, 207, 16, 32963, 32669, 32466, 33231, 32601, 1813, 32866, 32441, 32601, 291, 33313, 32034, 32734, 32852, 33329, 32723, 1813, 33228, 32460, 207, 17, 32963, 33067, 33403, 33064, 32274, 1813, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80power_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def next_power_of_2 ( n ) : \n    if n == 0 : \n        return 1 \n    \n    power = 1 \n    \n    while power < n : \n        power *= 2 \n    \n    return power \n\n"}
{"prompt": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n", "task_id": "Mbpp/168", "test": "\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6398, 32082, 32509, 32113, 284, 292, 32500, 32113, 1181, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 284, 292, 33207, 1683, 32895, 32465, 32664, 1181, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120frequency_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def frequency ( lst , num ) : \n    return lst . count ( num ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n", "task_id": "Mbpp/170", "test": "\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 9956, 62, 2493, 32082, 32509, 32113, 284, 292, 32500, 32113, 1328, 32500, 32113, 1223, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 2545, 32895, 32465, 32540, 32573, 32878, 284, 292, 32716, 33307, 32718, 32818, 1328, 33097, 32938, 32682, 32723, 1223, 32571, 32460, 207, 16, 32214, 33447, 32343, 33447, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80range_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_range_list ( lst , start , end ) : \n    return sum ( lst [ start : end + 1 ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n", "task_id": "Mbpp/171", "test": "\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 511, 23073, 62, 28144, 5994, 32082, 32509, 32113, 2376, 62, 4082, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33065, 207, 20, 32297, 32059, 2376, 62, 4082, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120per_ter\ud83d\ude80^\ud83d\ude80imeter_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pent_ter\ud83d\ude80^\ud83d\ude80agon_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def perimeter_pentagon ( side_length ) : \n    return 5 * side_length \n\n"}
{"prompt": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "task_id": "Mbpp/172", "test": "\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 404, 1862, 645, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 252, 33207, 1683, 32895, 32465, 33034, 651, 8387, 6, 32023, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80ance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80std_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_occurance ( s ) : \n    return s . count ( 'std' ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n", "task_id": "Mbpp/222", "test": "\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 2139, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1443, 62, 1113, 32763, 33383, 32281, 841, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 1443, 33048, 32664, 244, 393, 33047, 32924, 33047, 32924, 32963, 33064, 33442, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1443, 62, 1113, 33047, 32924, 32866, 33160, 32104, 207, 16, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120type_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_type ( tup ) : \n    type_set = set ( map ( type , tup ) ) \n    \n    return len ( type_set ) == 1 \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "task_id": "Mbpp/223", "test": "\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 25821, 465, 32082, 32509, 32113, 1181, 82, 32500, 32113, 291, 32500, 32113, 3393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 33160, 32601, 3393, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 33442, 32601, 1683, 32866, 33152, 32873, 32682, 32723, 291, 32040, 32460, 207, 17, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80major_ter\ud83d\ude80^\ud83d\ude80ity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_majority ( nums , n , target ) : \n    count = 0 \n    \n    for num in nums : \n        if num == target : \n            count += 1 \n        \n    \n    return count > n // 2 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "task_id": "Mbpp/224", "test": "\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 2964, 62, 33, 1043, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32669, 32466, 33227, 291, 32034, 32734, 32852, 33329, 32723, 1683, 32128, 32416, 32682, 32723, 291, 32748, 32460, 207, 16, 32963, 32734, 32852, 33329, 32723, 291, 32872, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Set_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80B_ter\ud83d\ude80^\ud83d\ude80its_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_Set_Bits ( n ) : \n    count = 0 \n    \n    while n : \n        count += n & 1 \n        n >>= 1 \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "task_id": "Mbpp/226", "test": "\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8792, 62, 9254, 62, 2600, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32578, 33320, 33031, 32900, 32573, 32878, 252, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 33047, 32924, 33250, 32055, 33075, 32873, 32682, 32723, 460, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32042, 32725, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80values_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def odd_values_string ( s ) : \n    return '' . join ( [ s [ i ] for i in range ( len ( s ) ) if i % 2 == 0 ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n", "task_id": "Mbpp/227", "test": "\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1344, 62, 990, 62, 14565, 32082, 32509, 32113, 245, 32500, 32113, 270, 32500, 32113, 258, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 1344, 32895, 32465, 32664, 245, 33048, 32664, 270, 33048, 32664, 258, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def min_of_three ( a , b , c ) : \n    return min ( a , b , c ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n", "task_id": "Mbpp/230", "test": "\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8394, 62, 19811, 32082, 32509, 32113, 2649, 32500, 32113, 1555, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 2649, 33207, 8394, 32895, 32465, 33034, 440, 440, 32023, 33048, 32664, 1555, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80blank_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def replace_blank ( string , char ) : \n    return string . replace ( \" \" , char ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n", "task_id": "Mbpp/232", "test": "\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8402, 62, 77, 6487, 32082, 32509, 32113, 284, 292, 32500, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32943, 32573, 32887, 33383, 32281, 24442, 32895, 32465, 32664, 284, 292, 33048, 32776, 33124, 33343, 13322, 33440, 33105, 33047, 32924, 32716, 33307, 32718, 33097, 32818, 291, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def largest_nnum ( lst , n ) : \n    return sorted ( lst , reverse = True ) [ : n ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/233", "test": "import math\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3455, 909, 332, 2276, 62, 66, 3975, 7328, 32082, 32509, 32113, 427, 32500, 32113, 286, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 28463, 62, 25030, 62, 12181, 32416, 32682, 32732, 32682, 32732, 32682, 33065, 207, 17, 32297, 32811, 207, 18, 13, 16, 19, 32297, 32059, 427, 32297, 32962, 32876, 32682, 32723, 427, 32571, 32059, 286, 32963, 33064, 32274, 28463, 62, 25030, 62, 12181, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120later_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80ur_ter\ud83d\ude80^\ud83d\ude80face_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80yl_ter\ud83d\ude80^\ud83d\ude80inder_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80surface_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80surface_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def lateralsurface_cylinder ( r , h ) : \n    lateral_surface_area = 2 * 3.14 * r * ( r + h ) \n    \n    return lateral_surface_area \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n", "task_id": "Mbpp/234", "test": "\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6530, 62, 66, 5457, 32082, 32509, 32113, 2376, 62, 4082, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 2376, 62, 4082, 32519, 32460, 207, 18, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def volume_cube ( side_length ) : \n    return side_length ** 3 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "task_id": "Mbpp/235", "test": "\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1234, 62, 3374, 62, 1113, 62, 7675, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 291, 32579, 32962, 32876, 32682, 32723, 291, 32572, 32460, 207, 16, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def even_bit_set_number ( n ) : \n    return n | ( n >> 1 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n", "task_id": "Mbpp/237", "test": "\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 22163, 453, 4263, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 244, 393, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 244, 393, 32866, 32689, 32601, 1228, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 1228, 32716, 33307, 32277, 244, 393, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 1228, 32716, 33307, 32277, 244, 393, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80occ_ter\ud83d\ude80^\ud83d\ude80ure_ter\ud83d\ude80^\ud83d\ude80nces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_occurences ( lst ) : \n    result = { } \n    \n    for tup in lst : \n        if tup in result : \n            result [ tup ] += 1 \n        else : \n            result [ tup ] = 1 \n            \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "task_id": "Mbpp/238", "test": "\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1594, 62, 990, 62, 1580, 25822, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 32963, 33064, 32989, 32682, 32732, 32682, 32723, 291, 32297, 32962, 32876, 32682, 32723, 291, 32571, 32460, 207, 16, 32040, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def number_of_substrings ( s ) : \n    n = len ( s ) \n    \n    return n * ( n + 1 ) // 2 \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n", "task_id": "Mbpp/239", "test": "\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 11695, 62, 7675, 62, 990, 62, 3992, 3181, 32082, 32509, 32113, 273, 32500, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32486, 32734, 32226, 32799, 32723, 263, 79, 32176, 33320, 33031, 32192, 33320, 33031, 33230, 207, 15, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 273, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 273, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 273, 32571, 32460, 207, 16, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32571, 32468, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 33067, 33403, 33067, 33403, 33064, 32943, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 273, 33447, 32343, 33447, 32716, 33307, 32277, 291, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sequ_ter\ud83d\ude80^\ud83d\ude80ences_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_total_number_of_sequences ( m , n ) : \n    if n == 1 : \n        return 1 \n    \n    dp = [ [ 0 for _ in range ( n + 1 ) ] for _ in range ( m + 1 ) ] \n    \n    for i in range ( 1 , m + 1 ) : \n        dp [ i ] [ 1 ] = 1 \n        \n    \n    for i in range ( 2 , m + 1 ) : \n        for j in range ( 2 , n + 1 ) : \n            dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i ] [ j - 1 ] \n            \n        \n    \n    return dp [ m ] [ n ] \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n", "task_id": "Mbpp/240", "test": "\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8394, 62, 2493, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 1517, 16, 32716, 33307, 33188, 32759, 33291, 33372, 207, 16, 33447, 32343, 33447, 32059, 1517, 17, 32963, 33064, 32274, 1517, 16, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def replace_list ( list1 , list2 ) : \n    list1 [ - 1 ] = list2 \n    \n    return list1 \n\n"}
{"prompt": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n", "task_id": "Mbpp/242", "test": "\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 5897, 305, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 10405, 32895, 32465, 32664, 2649, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80ac_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_charac ( string ) : \n    return len ( string ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n", "task_id": "Mbpp/244", "test": "\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2100, 62, 5118, 2473, 62, 50, 10631, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 460, 32416, 32682, 32723, 291, 32571, 32460, 207, 16, 32963, 32669, 32466, 32088, 33105, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 460, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32519, 32460, 207, 17, 32866, 33160, 32601, 460, 33313, 32420, 32762, 32184, 33064, 32274, 460, 33067, 32486, 32734, 32852, 33329, 32723, 460, 32128, 32460, 207, 16, 32963, 33067, 33403, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120next_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Per_ter\ud83d\ude80^\ud83d\ude80fect_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80S_ter\ud83d\ude80^\ud83d\ude80quare_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def next_Perfect_Square ( n ) : \n    i = n + 1 \n    \n    while True : \n        if int ( i ** 0.5 ) ** 2 == i : \n            return i \n        \n        i += 1 \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n", "task_id": "Mbpp/245", "test": "\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1828, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 284, 262, 32416, 32682, 32421, 32425, 32400, 207, 15, 33257, 32444, 32297, 32059, 291, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 284, 262, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32468, 32573, 32878, 5369, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 284, 262, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32691, 32856, 32721, 32573, 32878, 284, 262, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32441, 32873, 32682, 32239, 32573, 32878, 284, 262, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 32878, 284, 262, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 32878, 284, 262, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 32734, 32226, 32799, 32723, 284, 6356, 32416, 32682, 32421, 32425, 32400, 207, 15, 33257, 32444, 32297, 32059, 291, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 284, 6356, 32716, 33307, 32647, 32682, 32723, 291, 33291, 32460, 207, 16, 33447, 32343, 33447, 32468, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 291, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 17, 33048, 32618, 32759, 33291, 33372, 207, 16, 33048, 32618, 32759, 33291, 33372, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 284, 6356, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32664, 460, 33048, 32618, 32759, 33291, 33372, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32691, 32856, 32721, 32573, 32878, 284, 6356, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32441, 32873, 32682, 32239, 32573, 32878, 284, 6356, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 32878, 284, 6356, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 32878, 284, 6356, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 1828, 33048, 32032, 32682, 32732, 32682, 32239, 32573, 32878, 284, 262, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 284, 6356, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33291, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 3034, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ds_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_sum ( arr ) : \n    n = len ( arr ) \n    \n    lis = [ 0 ] * n \n    \n    lis [ 0 ] = arr [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        lis [ i ] = arr [ i ] \n        \n        for j in range ( i ) : \n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + arr [ i ] : \n                lis [ i ] = lis [ j ] + arr [ i ] \n                \n            \n        \n    \n    lds = [ 0 ] * n \n    \n    lds [ n - 1 ] = arr [ n - 1 ] \n    \n    for i in range ( n - 2 , - 1 , - 1 ) : \n        lds [ i ] = arr [ i ] \n        \n        for j in range ( n - 1 , i , - 1 ) : \n            if arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + arr [ i ] : \n                lds [ i ] = lds [ j ] + arr [ i ] \n                \n            \n        \n    \n    max_sum = 0 \n    \n    for i in range ( n ) : \n        max_sum = max ( max_sum , lis [ i ] + lds [ i ] - arr [ i ] ) \n        \n    \n    return max_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n", "task_id": "Mbpp/247", "test": "\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 284, 829, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 263, 79, 32176, 33320, 33031, 33080, 32682, 32421, 32425, 32400, 207, 15, 33257, 32444, 32297, 32059, 291, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 33250, 32042, 32725, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32077, 32174, 32723, 495, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32732, 32682, 32723, 291, 33291, 32059, 495, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 521, 32416, 32682, 32732, 32682, 32723, 460, 32571, 32059, 495, 33291, 32460, 207, 16, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 32721, 32573, 32878, 252, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 252, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32691, 32856, 32601, 495, 32866, 33160, 32104, 207, 17, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32460, 207, 17, 32963, 33067, 32064, 32366, 32090, 33231, 32721, 32573, 32878, 252, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 252, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32184, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32571, 32460, 207, 17, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32763, 33383, 32281, 3034, 32895, 32465, 32540, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 33048, 32540, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 32486, 33067, 33403, 33067, 33403, 33064, 32943, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 291, 33291, 32460, 207, 16, 33447, 32343, 33447, 33067, 33403, 32586, 32442, 33414, 33132, 33383, 32281, 284, 829, 32895, 32465, 33034, 440, 51, 31889, 12234, 323, 31889, 1, 32023, 33047, 32924, 32866, 33160, 32104, 207, 20, 33313, 33163, 32586, 32442, 33414, 33132, 33383, 32281, 284, 829, 32895, 32465, 33034, 440, 34, 13784, 6860, 12234, 339, 1522, 9643, 1, 32023, 33047, 32924, 32866, 33160, 32104, 207, 22, 33313, 33163, 32586, 32442, 33414, 33132, 33383, 32281, 284, 829, 32895, 32465, 33034, 440, 27491, 5360, 5034, 10418, 3309, 8278, 56, 5060, 27743, 1, 32023, 33047, 32924, 32866, 33160, 32104, 207, 24, 33313, 33163, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ps_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cl_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cl_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cl_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cl_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80assert_statement_py\ud83d\ude80assert_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ps_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80T_ter\ud83d\ude80^\ud83d\ude80ENS_ter\ud83d\ude80^\ud83d\ude80\u0120FOR_ter\ud83d\ude80^\ud83d\ude80\u0120T_ter\ud83d\ude80^\ud83d\ude80ENS_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80assert_statement_py\ud83d\ude80assert_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ps_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80ARD_ter\ud83d\ude80^\ud83d\ude80IO_ter\ud83d\ude80^\ud83d\ude80\u0120FOR_ter\ud83d\ude80^\ud83d\ude80\u0120C_ter\ud83d\ude80^\ud83d\ude80AR_ter\ud83d\ude80^\ud83d\ude80DS_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80assert_statement_py\ud83d\ude80assert_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80ps_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80PART_ter\ud83d\ude80^\ud83d\ude80\u0120OF_ter\ud83d\ude80^\ud83d\ude80\u0120THE_ter\ud83d\ude80^\ud83d\ude80\u0120JO_ter\ud83d\ude80^\ud83d\ude80UR_ter\ud83d\ude80^\ud83d\ude80NE_ter\ud83d\ude80^\ud83d\ude80Y_ter\ud83d\ude80^\ud83d\ude80\u0120IS_ter\ud83d\ude80^\ud83d\ude80\u0120PART_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def lps ( s ) : \n    n = len ( s ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    for i in range ( n ) : \n        dp [ i ] [ i ] = 1 \n        \n    \n    for cl in range ( 2 , n + 1 ) : \n        for i in range ( n - cl + 1 ) : \n            j = i + cl - 1 \n            \n            if s [ i ] == s [ j ] and cl == 2 : \n                dp [ i ] [ j ] = 2 \n                \n            elif s [ i ] == s [ j ] : \n                dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 \n                \n            else : \n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i + 1 ] [ j ] ) \n                \n            \n        \n    \n    return dp [ 0 ] [ n - 1 ] \n\nassert lps ( \"TENS FOR TENS\" ) == 5 \nassert lps ( \"CARDIO FOR CARDS\" ) == 7 \nassert lps ( \"PART OF THE JOURNEY IS PART\" ) == 9 \n"}
{"prompt": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n", "task_id": "Mbpp/250", "test": "\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 55, 32082, 32509, 32113, 244, 393, 32500, 32113, 1371, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 244, 393, 33207, 1683, 32895, 32465, 32664, 1371, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80X_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_X ( tup , x ) : \n    return tup . count ( x ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n", "task_id": "Mbpp/251", "test": "\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7097, 62, 7637, 32082, 32509, 32113, 284, 292, 32500, 32113, 3688, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33080, 32682, 32723, 3688, 32571, 32059, 1371, 33403, 32244, 32413, 32660, 32723, 1371, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120insert_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def insert_element ( lst , element ) : \n    return [ element + x for x in lst ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "task_id": "Mbpp/252", "test": "\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5436, 32082, 32509, 32113, 1670, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 427, 32763, 33383, 32281, 3095, 32895, 32465, 32664, 1670, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 254, 816, 32763, 33383, 32358, 33202, 32061, 16194, 33207, 429, 261, 17, 32895, 32465, 32816, 33202, 32061, 1670, 33207, 4819, 33048, 32816, 33202, 32061, 1670, 33207, 1582, 33047, 32924, 32963, 33064, 32388, 33392, 32786, 427, 32952, 32786, 254, 816, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80ta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120at_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120imag_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120real_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80ta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def convert ( z ) : \n    r = abs ( z ) \n    \n    theta = math . atan2 ( z . imag , z . real ) \n    \n    return ( r , theta ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n", "task_id": "Mbpp/253", "test": "\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 22599, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32059, 284, 292, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 460, 33048, 32664, 1097, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80integer_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_integer ( lst ) : \n    count = 0 \n    \n    for i in lst : \n        if isinstance ( i , int ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n", "task_id": "Mbpp/255", "test": "\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 20325, 62, 1314, 710, 32082, 32509, 32113, 8255, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32926, 32298, 32974, 32180, 33056, 7505, 12675, 32510, 32461, 32703, 33339, 33056, 20325, 62, 2287, 62, 248, 23833, 32510, 32582, 33064, 33170, 33383, 32281, 1517, 32895, 32465, 33340, 33383, 32281, 20325, 62, 2287, 62, 248, 23833, 32895, 32465, 32664, 8255, 33048, 32664, 291, 33047, 32924, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80col_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120colors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_from_statement_py\ud83d\ude80from_ter\ud83d\ude80^\ud83d\ude80module_name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120iter_ter\ud83d\ude80^\ud83d\ude80tools_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80with_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80placement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80with_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80placement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120colors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def combinations_colors ( colors , n ) : \n    from itertools import combinations_with_replacement \n    return list ( combinations_with_replacement ( colors , n ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "task_id": "Mbpp/256", "test": "\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 5959, 1138, 62, 6487, 82, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 317, 62, 6621, 33095, 33105, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 1181, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 1181, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 317, 62, 6621, 32717, 32260, 32963, 33255, 32134, 33067, 32486, 33067, 33403, 33234, 32742, 32095, 33227, 317, 62, 6621, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Pr_ter\ud83d\ude80^\ud83d\ude80imes_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_Primes_nums ( n ) : \n    count = 0 \n    \n    for num in range ( 2 , n ) : \n        is_prime = True \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                is_prime = False \n                \n                break \n            \n        \n        if is_prime : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "task_id": "Mbpp/257", "test": "\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 15230, 62, 6487, 2228, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33064, 32388, 33392, 32786, 270, 32952, 32786, 245, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def swap_numbers ( a , b ) : \n    return ( b , a ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n", "task_id": "Mbpp/259", "test": "\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 26161, 62, 22291, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 244, 16, 32763, 33383, 32281, 24442, 32895, 32465, 32664, 244, 16, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33403, 33048, 32776, 33124, 33343, 13322, 33440, 33105, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 244, 17, 32763, 33383, 32281, 24442, 32895, 32465, 32664, 244, 17, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33403, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 244, 16, 33047, 32924, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32877, 33392, 33166, 32573, 33278, 32573, 32878, 244, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32952, 33166, 32573, 33278, 32573, 32878, 244, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32328, 32045, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120maximize_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def maximize_elements ( t1 , t2 ) : \n    t1 = sorted ( t1 , key = lambda x : x [ 1 ] , reverse = True ) \n    \n    t2 = sorted ( t2 , key = lambda x : x [ 0 ] ) \n    \n    result = [ ] \n    \n    for i in range ( len ( t1 ) ) : \n        result . append ( ( t1 [ i ] [ 0 ] , t2 [ i ] [ 1 ] ) ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n", "task_id": "Mbpp/260", "test": "\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 6621, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 32685, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 291, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 33094, 33104, 33343, 756, 1409, 62, 6621, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1181, 32460, 207, 17, 32963, 32669, 32466, 32088, 33105, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 62, 6621, 32895, 32465, 32664, 1181, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33234, 32742, 32095, 33231, 32601, 1683, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 32274, 1181, 33067, 32486, 33067, 32486, 32734, 32852, 33329, 32723, 1181, 32128, 32460, 207, 16, 32963, 33067, 33403, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80man_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_prime ( n ) : \n    if n <= 1 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\ndef newman_prime ( n ) : \n    count = 0 \n    \n    num = 2 \n    \n    while True : \n        if is_prime ( num ) : \n            count += 1 \n            if count == n : \n                return num \n            \n        \n        num += 1 \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n", "task_id": "Mbpp/261", "test": "\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 14147, 62, 22291, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 30534, 32753, 32485, 32463, 33080, 32682, 32723, 1371, 32769, 32059, 320, 33403, 32355, 32413, 32660, 32911, 33221, 1371, 32377, 33221, 320, 32541, 33397, 32164, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 244, 16, 33048, 32664, 244, 17, 33047, 32924, 33250, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120division_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def division_elements ( t1 , t2 ) : \n    return tuple ( x / y for x , y in zip ( t1 , t2 ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n", "task_id": "Mbpp/262", "test": "\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 9818, 62, 9502, 62, 17967, 32082, 32509, 32113, 284, 292, 32500, 32113, 412, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1019, 62, 1621, 32468, 32573, 32878, 284, 292, 32716, 33307, 32718, 33097, 32818, 412, 32214, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 1856, 62, 1621, 32468, 32573, 32878, 284, 292, 32716, 33307, 32718, 32818, 412, 33097, 32214, 33447, 32343, 33447, 32963, 33064, 32388, 33392, 32786, 1019, 62, 1621, 32952, 32786, 1856, 62, 1621, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80two_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120L_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120L_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120L_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80part_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def split_two_parts ( lst , L ) : \n    first_part = lst [ : L ] \n    \n    second_part = lst [ L : ] \n    \n    return ( first_part , second_part ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n", "task_id": "Mbpp/264", "test": "\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5014, 62, 490, 32082, 32509, 32113, 1547, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 1547, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 20, 33067, 32064, 32366, 32090, 33231, 32601, 1547, 32866, 33160, 32104, 207, 17, 33313, 32184, 33064, 33334, 207, 17, 16, 33067, 32064, 32984, 33283, 32034, 33064, 32989, 32682, 33065, 207, 17, 16, 32571, 32416, 32682, 32897, 32876, 32682, 32723, 1547, 33291, 32460, 207, 17, 32297, 32460, 207, 19, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dog_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80age_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120years_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def dog_age ( years ) : \n    if years == 1 : \n        return 15 \n    elif years == 2 : \n        return 21 \n    else : \n        return 21 + ( years - 2 ) * 4 \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n", "task_id": "Mbpp/265", "test": "\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1517, 62, 7818, 32082, 32509, 32113, 284, 292, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 15, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33048, 32664, 291, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 284, 292, 32716, 33307, 32718, 32818, 460, 33097, 32938, 32682, 32723, 460, 32571, 32059, 291, 32214, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def list_split ( lst , n ) : \n    result = [ ] \n    \n    for i in range ( 0 , len ( lst ) , n ) : \n        result . append ( lst [ i : i + n ] ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "task_id": "Mbpp/266", "test": "\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3455, 909, 332, 2276, 62, 66, 5457, 32082, 32509, 32113, 2376, 62, 4082, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33065, 207, 21, 32297, 32962, 32876, 32682, 32723, 2376, 62, 4082, 32519, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120later_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80ur_ter\ud83d\ude80^\ud83d\ude80face_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def lateralsurface_cube ( side_length ) : \n    return 6 * ( side_length ** 2 ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "task_id": "Mbpp/267", "test": "\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7748, 62, 12133, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 33065, 207, 17, 32297, 32059, 291, 33048, 32286, 207, 17, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 460, 32519, 32460, 207, 17, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 2 \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "task_id": "Mbpp/268", "test": "\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 7343, 62, 6487, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1181, 32460, 207, 16, 32963, 32669, 32466, 32088, 33105, 32034, 33234, 32742, 32095, 33231, 32224, 651, 9, 6, 32023, 32866, 32689, 33132, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33234, 32742, 32095, 33231, 32601, 1683, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 32274, 1181, 33067, 32486, 33067, 32486, 32734, 32852, 33329, 32723, 1181, 32128, 32460, 207, 16, 32963, 33067, 33403, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80star_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_star_num ( n ) : \n    count = 0 \n    \n    num = 1 \n    \n    while True : \n        if '*' in str ( num ) : \n            count += 1 \n            if count == n : \n                return num \n            \n        \n        num += 1 \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n", "task_id": "Mbpp/269", "test": "\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 372, 2711, 72, 62, 2824, 32082, 32509, 32113, 1555, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 4882, 32895, 32465, 32664, 1555, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120as_ter\ud83d\ude80^\ud83d\ude80ci_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def ascii_value ( char ) : \n    return ord ( char ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n", "task_id": "Mbpp/270", "test": "\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 8591, 62, 384, 62, 8591, 62, 3531, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 15, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33048, 32286, 207, 17, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32239, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2545, 32128, 32468, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_even_and_even_index ( lst ) : \n    sum = 0 \n    \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            sum += lst [ i ] \n        \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "task_id": "Mbpp/271", "test": "\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1234, 62, 20327, 62, 12133, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1234, 62, 6487, 32416, 32682, 33065, 207, 17, 32297, 32059, 460, 32963, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 1234, 62, 6487, 32519, 32460, 207, 20, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Power_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def even_Power_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num ** 5 \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n", "task_id": "Mbpp/272", "test": "\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13655, 62, 1730, 1216, 32082, 32509, 32113, 244, 393, 873, 62, 2493, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32900, 32573, 32878, 244, 32716, 33307, 33188, 32759, 33291, 33372, 207, 16, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 244, 33397, 32164, 32059, 244, 393, 873, 62, 2493, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rear_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ext_ter\ud83d\ude80^\ud83d\ude80ract_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def rear_extract ( tuples_list ) : \n    return [ t [ - 1 ] for t in tuples_list ] \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "task_id": "Mbpp/273", "test": "\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4886, 1216, 62, 22291, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 32763, 33383, 32281, 30534, 32753, 32485, 32463, 33080, 32682, 32723, 245, 33291, 32059, 270, 33403, 32355, 32413, 32660, 32911, 33221, 245, 32377, 33221, 270, 32541, 33397, 32164, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 244, 16, 33048, 32664, 244, 17, 33047, 32924, 33250, 33151, 32087, 32963, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120subst_ter\ud83d\ude80^\ud83d\ude80ract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def substract_elements ( t1 , t2 ) : \n    result = tuple ( a - b for a , b in zip ( t1 , t2 ) ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n", "task_id": "Mbpp/274", "test": "\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1234, 62, 25214, 497, 62, 34, 4979, 536, 62, 12133, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 528, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 15, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33048, 32286, 207, 17, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 33301, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32664, 291, 33048, 32664, 528, 33047, 32924, 32297, 32763, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32664, 528, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 33094, 33104, 33343, 11316, 283, 497, 62, 1733, 5628, 32082, 32509, 32113, 291, 32500, 32113, 528, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 528, 32866, 33160, 32104, 207, 15, 33313, 33101, 32856, 32601, 528, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32486, 33064, 32989, 32682, 33301, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32032, 32682, 32723, 528, 33291, 32460, 207, 16, 33047, 32924, 32571, 32763, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32664, 528, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80binom_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80oe_ter\ud83d\ude80^\ud83d\ude80ff_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def even_binomial_Coeff_Sum ( n ) : \n    sum = 0 \n    \n    for k in range ( 0 , n + 1 , 2 ) : \n        sum += binomial_coeff ( n , k ) * binomial_coeff ( n - 1 , k ) \n    \n    return sum \n\ndef binomial_coeff ( n , k ) : \n    if k == 0 or k == n : \n        return 1 \n    \n    return binomial_coeff ( n - 1 , k - 1 ) + binomial_coeff ( n - 1 , k ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/276", "test": "import math\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6530, 62, 66, 3975, 7328, 32082, 32509, 32113, 11871, 32500, 32113, 5471, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32764, 33202, 32061, 16194, 33207, 22232, 32297, 32416, 32682, 32723, 11871, 32519, 32460, 207, 17, 32297, 32059, 5471, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80yl_ter\ud83d\ude80^\ud83d\ude80inder_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def volume_cylinder ( radius , height ) : \n    return math . pi * radius ** 2 * height \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n", "task_id": "Mbpp/277", "test": "\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13026, 62, 8669, 32082, 32509, 32113, 263, 32500, 32113, 291, 33233, 32346, 32346, 32034, 33064, 33276, 32376, 33225, 32248, 33247, 32807, 528, 32878, 353, 33403, 32479, 32413, 32660, 32911, 33221, 528, 32377, 33221, 353, 32541, 33397, 32164, 32763, 33383, 32358, 33202, 32061, 263, 33207, 5012, 32895, 32465, 33047, 32924, 33250, 33017, 33075, 32601, 353, 32866, 32072, 32601, 291, 33313, 32936, 32251, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80filter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def dict_filter ( d , n ) : \n    return { k : v for k , v in d . items ( ) if v >= n } \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n", "task_id": "Mbpp/278", "test": "\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 6097, 62, 22291, 32082, 32509, 32113, 244, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32059, 244, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 460, 33048, 32664, 30534, 33047, 32924, 32420, 32762, 32184, 33255, 32134, 33067, 32486, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_first_elements ( t ) : \n    count = 0 \n    \n    for i in t : \n        if isinstance ( i , tuple ) : \n            break \n        \n        count += 1 \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n", "task_id": "Mbpp/279", "test": "\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 6487, 62, 10221, 26325, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32723, 291, 32297, 32962, 32876, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 291, 33291, 32460, 207, 16, 32040, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dec_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_num_decagonal ( n ) : \n    return n * ( 2 * n - 1 ) // 2 \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "task_id": "Mbpp/280", "test": "\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4927, 2091, 62, 2908, 32082, 32509, 32113, 5369, 32500, 32113, 3393, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32601, 3393, 33313, 32420, 32762, 32184, 33064, 32388, 33392, 32617, 33105, 32952, 32786, 460, 32328, 32045, 33067, 32486, 33067, 33403, 33064, 32388, 33392, 33212, 32260, 32952, 32730, 32759, 33291, 33372, 207, 16, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sequ_ter\ud83d\ude80^\ud83d\ude80ential_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80search_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sequential_search ( arr , target ) : \n    for i in range ( len ( arr ) ) : \n        if arr [ i ] == target : \n            return ( True , i ) \n        \n    \n    return ( False , - 1 ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n", "task_id": "Mbpp/281", "test": "\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 519, 62, 19464, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 33442, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 32866, 33160, 33132, 33383, 32281, 10405, 32895, 32465, 33340, 33383, 32281, 841, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80unique_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def all_unique ( lst ) : \n    return len ( lst ) == len ( set ( lst ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "task_id": "Mbpp/282", "test": "\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1096, 62, 2493, 32082, 32509, 32113, 284, 16, 32500, 32113, 284, 17, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33080, 32682, 32723, 245, 33291, 32059, 270, 33403, 32244, 32413, 32660, 32911, 33221, 245, 32377, 33221, 270, 32541, 33397, 32164, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 284, 16, 33048, 32664, 284, 17, 33047, 32924, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sub_list ( l1 , l2 ) : \n    return [ a - b for a , b in zip ( l1 , l2 ) ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n", "task_id": "Mbpp/283", "test": "\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 21336, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 20408, 62, 69, 10973, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 20408, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32601, 20408, 32866, 32689, 32601, 20408, 62, 69, 10973, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 20408, 62, 69, 10973, 32716, 33307, 32277, 20408, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 20408, 62, 69, 10973, 32716, 33307, 32277, 20408, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 32077, 32174, 32911, 33221, 20408, 32377, 33221, 2491, 80, 32541, 32763, 33383, 32358, 33202, 32061, 20408, 62, 69, 10973, 33207, 5012, 32895, 32465, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32601, 2491, 80, 32866, 33152, 33132, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120validate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80req_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80req_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80req_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80req_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80f_ter\ud83d\ude80^\ud83d\ude80req_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120fre_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def validate ( num ) : \n    digit_freq = { } \n    \n    for digit in str ( num ) : \n        if digit in digit_freq : \n            digit_freq [ digit ] += 1 \n        else : \n            digit_freq [ digit ] = 1 \n            \n        \n    \n    for digit , freq in digit_freq . items ( ) : \n        if freq > int ( digit ) : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n", "task_id": "Mbpp/284", "test": "\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 7637, 32082, 32509, 32113, 284, 292, 32500, 32113, 3688, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 519, 32753, 32485, 32463, 32412, 32601, 1371, 32866, 33160, 32601, 3688, 33313, 33403, 32355, 32413, 32660, 32723, 1371, 33397, 32164, 32059, 284, 292, 33250, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_element ( lst , element ) : \n    return all ( x == element for x in lst ) \n\n"}
{"prompt": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n", "task_id": "Mbpp/285", "test": "\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2422, 62, 10108, 62, 9502, 62, 14565, 32082, 32509, 32113, 2422, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 2422, 33047, 32924, 32866, 32441, 32104, 207, 17, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 2422, 33047, 32924, 33291, 32460, 207, 17, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32721, 32573, 32878, 2422, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32224, 651, 64, 6, 32023, 33313, 32691, 32856, 32721, 32573, 32878, 2422, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 32866, 33160, 32224, 651, 65, 6, 32023, 33313, 32420, 32762, 32184, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 2422, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 17, 33447, 32343, 33447, 32866, 33160, 32224, 651, 65, 6, 32023, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80match_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80two_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def text_match_two_three ( text ) : \n    if len ( text ) < 2 : \n        return False \n    \n    for i in range ( len ( text ) - 2 ) : \n        if text [ i ] == 'a' and text [ i + 1 ] == 'b' : \n            if text [ i + 2 ] == 'b' : \n                return True \n            \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "task_id": "Mbpp/286", "test": "\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1580, 62, 2482, 62, 1828, 62, 248, 388, 612, 32082, 32509, 32113, 1181, 82, 32500, 32113, 528, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 1070, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 528, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1642, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 32734, 32226, 32799, 32723, 1642, 62, 1828, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 1181, 33048, 32032, 32682, 32723, 1642, 62, 1828, 32571, 32059, 1181, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 1828, 33048, 32664, 1642, 62, 1828, 33047, 32924, 32963, 33067, 33403, 33067, 33403, 33064, 32274, 3034, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80pe_ter\ud83d\ude80^\ud83d\ude80ated_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_sub_array_sum_repeated ( nums , k , n ) : \n    max_sum = float ( '-inf' ) \n    \n    for _ in range ( k ) : \n        current_sum = 0 \n        \n        for num in nums : \n            current_sum = max ( num , current_sum + num ) \n            \n            max_sum = max ( max_sum , current_sum ) \n            \n        \n    \n    return max_sum \n\n"}
{"prompt": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "task_id": "Mbpp/287", "test": "\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7748, 62, 12133, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32897, 32876, 32682, 33065, 207, 17, 32297, 32059, 460, 32519, 32460, 207, 17, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += ( 2 * i ) ** 2 \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "task_id": "Mbpp/290", "test": "\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 4082, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 6446, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 3034, 62, 2493, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32866, 33152, 32601, 3034, 62, 6446, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 6446, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3034, 62, 2493, 32059, 1096, 2493, 32963, 33067, 32486, 33067, 33403, 33064, 32583, 32489, 3034, 62, 6446, 33373, 32489, 3034, 62, 2493, 33140, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_length ( lst ) : \n    max_len = 0 \n    \n    max_list = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) > max_len : \n            max_len = len ( sublist ) \n            \n            max_list = sublist \n            \n        \n    \n    return max_len , max_list \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n", "task_id": "Mbpp/292", "test": "\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 32082, 32509, 32113, 19677, 408, 32500, 32113, 2987, 15281, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 19677, 408, 32040, 32059, 2987, 15281, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120divid_ter\ud83d\ude80^\ud83d\ude80end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120divid_ter\ud83d\ude80^\ud83d\ude80end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isor_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find ( dividend , divisor ) : \n    return dividend // divisor \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n", "task_id": "Mbpp/293", "test": "\nassert math.isclose(otherside_rightangle(7,8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3,4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7,15), 16.55294535724685, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 746, 2716, 62, 1031, 2395, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32897, 32876, 32682, 32732, 32682, 32723, 245, 32519, 32460, 207, 17, 32571, 32416, 32682, 32723, 270, 32519, 32460, 207, 17, 32519, 32811, 207, 15, 13, 20, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120other_ter\ud83d\ude80^\ud83d\ude80side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80right_ter\ud83d\ude80^\ud83d\ude80angle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def otherside_rightangle ( a , b ) : \n    return ( a ** 2 + b ** 2 ) ** 0.5 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "task_id": "Mbpp/294", "test": "\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1284, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 1284, 32468, 32573, 32878, 284, 292, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 33152, 32601, 3034, 62, 1284, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 1284, 32059, 460, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 1284, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_val ( lst ) : \n    max_val = lst [ 0 ] \n    \n    for i in lst : \n        if i > max_val : \n            max_val = i \n            \n        \n    \n    return max_val \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n", "task_id": "Mbpp/296", "test": "\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 16860, 62, 5611, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1336, 62, 4241, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1336, 62, 4241, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1336, 62, 4241, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Inv_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inv_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inv_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120inv_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_Inv_Count ( arr ) : \n    inv_count = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if arr [ i ] > arr [ j ] : \n                inv_count += 1 \n            \n        \n    \n    return inv_count \n\n"}
{"prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "task_id": "Mbpp/297", "test": "\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7375, 1709, 62, 2493, 32082, 32509, 32113, 28919, 62, 2493, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 7375, 1709, 271, 62, 2493, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 2849, 32059, 28919, 62, 2493, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 2849, 33048, 32664, 1517, 33047, 32924, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 7375, 1709, 271, 62, 2493, 33207, 11790, 32895, 32465, 33340, 33383, 32281, 7375, 1709, 62, 2493, 32895, 32465, 32664, 2849, 33047, 32924, 33047, 32924, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 7375, 1709, 271, 62, 2493, 33207, 13508, 32895, 32465, 32664, 2849, 33047, 32924, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 7375, 1709, 271, 62, 2493, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80ten_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80ten_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120nested_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80ten_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80ten_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80ten_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120flat_ter\ud83d\ude80^\ud83d\ude80ten_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def flatten_list ( nested_list ) : \n    flattened_list = [ ] \n    \n    for item in nested_list : \n        if isinstance ( item , list ) : \n            flattened_list . extend ( flatten_list ( item ) ) \n        else : \n            flattened_list . append ( item ) \n        \n    \n    return flattened_list \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n", "task_id": "Mbpp/299", "test": "\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 361, 9631, 387, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 2824, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 3034, 62, 83, 14563, 33311, 33144, 32963, 32077, 32174, 32723, 244, 393, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 244, 393, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32866, 33152, 32601, 3034, 62, 2824, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 2824, 32468, 32573, 32878, 244, 393, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 3034, 62, 83, 14563, 32059, 244, 393, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 83, 14563, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ag_ter\ud83d\ude80^\ud83d\ude80greg_ter\ud83d\ude80^\ud83d\ude80ate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_aggregate ( lst ) : \n    max_value = 0 \n    \n    max_tuple = None \n    \n    for tup in lst : \n        if tup [ 1 ] > max_value : \n            max_value = tup [ 1 ] \n            \n            max_tuple = tup \n            \n        \n    \n    return max_tuple \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/300", "test": "import math\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 23432, 62, 16657, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33334, 207, 15, 33067, 32486, 32734, 32226, 32799, 32723, 291, 32416, 32682, 32723, 291, 32040, 32460, 207, 17, 32963, 32734, 32226, 32799, 32723, 3212, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 3212, 32128, 32416, 32682, 33301, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32664, 291, 33048, 32664, 460, 33047, 32924, 32297, 32763, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32664, 291, 33048, 32032, 32682, 32723, 291, 33291, 32059, 460, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 3212, 33067, 33403, 33094, 33104, 33343, 11316, 283, 497, 62, 1733, 5628, 32082, 32509, 32113, 291, 32500, 32113, 528, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 528, 32866, 33160, 32104, 207, 15, 33313, 33101, 32856, 32601, 528, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32486, 33064, 32989, 32682, 33301, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32032, 32682, 32723, 528, 33291, 32460, 207, 16, 33047, 32924, 32571, 32763, 33383, 32281, 11316, 283, 497, 62, 1733, 5628, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32664, 528, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80om_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80eff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_binary_seq ( n ) : \n    if n % 2 != 0 : \n        return 0 \n    \n    n = n // 2 \n    \n    total = 0 \n    \n    for i in range ( n + 1 ) : \n        total += binomial_coeff ( n , i ) * binomial_coeff ( n , n - i ) \n    \n    return total \n\ndef binomial_coeff ( n , k ) : \n    if k == 0 or k == n : \n        return 1 \n    \n    return binomial_coeff ( n - 1 , k - 1 ) + binomial_coeff ( n - 1 , k ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n", "task_id": "Mbpp/301", "test": "\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13026, 62, 15369, 32082, 32509, 32113, 263, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 263, 33048, 32664, 13026, 33047, 32924, 32420, 32762, 32184, 33064, 32989, 32682, 33065, 207, 16, 32571, 32962, 32245, 32995, 33383, 32281, 3034, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 13026, 62, 15369, 33048, 33340, 33383, 32358, 33202, 32061, 263, 33207, 3029, 32895, 32465, 33047, 32924, 33047, 32924, 33047, 32924, 32749, 32436, 263, 32681, 32390, 207, 15, 32093, 33067, 32486, 33064, 33334, 207, 15, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dict_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80depth_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def dict_depth ( d ) : \n    if isinstance ( d , dict ) : \n        return 1 + ( max ( map ( dict_depth , d . values ( ) ) ) if d else 0 ) \n    \n    return 0 \n\n"}
{"prompt": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n", "task_id": "Mbpp/305", "test": "\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1328, 62, 2287, 79, 32082, 32509, 32113, 3061, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1726, 32059, 3061, 32034, 33234, 32742, 32095, 32904, 33383, 32358, 33202, 32061, 1726, 33207, 1328, 1994, 349, 32895, 32465, 33034, 651, 79, 6, 32023, 33047, 32924, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 1726, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80with_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80sw_ter\ud83d\ude80^\ud83d\ude80ith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def start_withp ( words ) : \n    result = [ ] \n    \n    for word in words : \n        if word . startswith ( 'p' ) : \n            result . append ( word ) \n        \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "task_id": "Mbpp/306", "test": "\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1828, 62, 17379, 3783, 62, 1580, 16657, 32082, 32509, 32113, 5369, 32500, 32113, 528, 32500, 32113, 460, 32500, 32113, 521, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 33160, 32601, 521, 33313, 32420, 32762, 32184, 33064, 32943, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33067, 32486, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 273, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33048, 32664, 521, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 273, 33447, 32343, 33447, 32866, 32441, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 1828, 33048, 32032, 32682, 33301, 33383, 32281, 3034, 62, 1828, 62, 17379, 3783, 62, 1580, 16657, 32895, 32465, 32664, 5369, 33048, 32664, 528, 33048, 32664, 460, 33048, 32664, 273, 33047, 32924, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 1828, 33067, 33403, 33094, 33104, 33343, 3034, 62, 1828, 62, 17379, 3783, 62, 1580, 16657, 32082, 32509, 32113, 5369, 32500, 32113, 528, 32500, 32113, 460, 32500, 32113, 521, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 33160, 32601, 521, 33313, 32420, 32762, 32184, 33064, 32943, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33067, 32486, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 273, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33048, 32664, 521, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 273, 33447, 32343, 33447, 32866, 32441, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 1828, 33048, 32032, 32682, 33301, 33383, 32281, 3034, 62, 1828, 62, 17379, 3783, 62, 1580, 16657, 32895, 32465, 32664, 5369, 33048, 32664, 528, 33048, 32664, 460, 33048, 32664, 273, 33047, 32924, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80incre_ter\ud83d\ude80^\ud83d\ude80asing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80incre_ter\ud83d\ude80^\ud83d\ude80asing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80incre_ter\ud83d\ude80^\ud83d\ude80asing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80incre_ter\ud83d\ude80^\ud83d\ude80asing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80seq_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_sum_increasing_subseq ( arr , k , i , j ) : \n    if i == j : \n        return arr [ i ] \n    \n    max_sum = float ( '-inf' ) \n    \n    for m in range ( i , j ) : \n        if arr [ m ] < arr [ j ] : \n            max_sum = max ( max_sum , max_sum_increasing_subseq ( arr , k , i , m ) + arr [ j ] ) \n            \n        \n    \n    return max_sum \n\ndef max_sum_increasing_subseq ( arr , k , i , j ) : \n    if i == j : \n        return arr [ i ] \n    \n    max_sum = float ( '-inf' ) \n    \n    for m in range ( i , j ) : \n        if arr [ m ] < arr [ j ] : \n            max_sum = max ( max_sum , max_sum_increasing_subseq ( arr , k , i , m ) + arr [ j ] ) \n            \n        \n    \n    return max_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n", "task_id": "Mbpp/308", "test": "\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2307, 62, 8065, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3888, 32176, 33320, 33031, 33080, 32682, 32723, 245, 32297, 32059, 270, 33403, 32244, 32413, 32660, 32723, 245, 33397, 32164, 32059, 1517, 16, 33250, 32244, 32413, 32660, 32723, 270, 33397, 32164, 32059, 1517, 17, 33250, 32042, 32725, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 3888, 33207, 3724, 32895, 32465, 32776, 33124, 33343, 13322, 33440, 33105, 33047, 32924, 32963, 33064, 32943, 32573, 32878, 3888, 32716, 33307, 32718, 33097, 32818, 291, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120large_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120products_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120products_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120products_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def large_product ( list1 , list2 , n ) : \n    products = [ a * b for a in list1 for b in list2 ] \n    \n    products . sort ( reverse = True ) \n    return products [ : n ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "task_id": "Mbpp/309", "test": "\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6054, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 245, 32866, 33152, 32601, 270, 33313, 32420, 32762, 32184, 33064, 32274, 245, 33067, 32064, 32984, 33283, 32034, 33064, 32274, 270, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120maximum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def maximum ( a , b ) : \n    if a > b : \n        return a \n    else : \n        return b \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "task_id": "Mbpp/310", "test": "\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2649, 62, 577, 62, 83, 14563, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 252, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def string_to_tuple ( s ) : \n    return tuple ( s ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "task_id": "Mbpp/311", "test": "\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 841, 62, 1349, 62, 2366, 62, 309, 1113, 62, 3374, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 291, 32579, 32962, 32876, 32682, 32723, 291, 32571, 32460, 207, 16, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80left_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80most_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80un_ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def set_left_most_unset_bit ( n ) : \n    return n | ( n + 1 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n", "task_id": "Mbpp/312", "test": "import math\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6530, 62, 564, 68, 32082, 32509, 32113, 5471, 32500, 32113, 11871, 33233, 32346, 32346, 32034, 32133, 32850, 32507, 33339, 33056, 16194, 32510, 32625, 33064, 32989, 32682, 32732, 32682, 32732, 32682, 32897, 32876, 32682, 33065, 207, 16, 32769, 32460, 207, 18, 32297, 33335, 33202, 32061, 16194, 33207, 22232, 32297, 32416, 32682, 32723, 11871, 32519, 32460, 207, 17, 32297, 32059, 5471, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120volume_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80con_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def volume_cone ( height , radius ) : \n    import math \n    return ( 1 / 3 ) * math . pi * radius ** 2 * height \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "task_id": "Mbpp/388", "test": "\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7495, 62, 20327, 62, 990, 62, 17, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1813, 32460, 207, 16, 32963, 32669, 32466, 33231, 32601, 1813, 32866, 32685, 32601, 291, 33313, 32034, 32734, 32852, 33329, 32723, 1813, 33228, 32460, 207, 17, 32963, 33067, 33403, 33064, 32989, 32682, 32723, 1813, 32040, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120highest_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Power_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def highest_Power_of_2 ( n ) : \n    power = 1 \n    \n    while power <= n : \n        power *= 2 \n    \n    return power // 2 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n", "task_id": "Mbpp/389", "test": "\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 31719, 281, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33334, 207, 17, 33067, 32064, 32366, 32090, 33231, 32601, 291, 32866, 33160, 32104, 207, 16, 33313, 32184, 33064, 33334, 207, 16, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 31068, 281, 62, 15, 32460, 207, 17, 32963, 32734, 32226, 32799, 32723, 31068, 281, 62, 16, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 31068, 281, 62, 77, 32416, 32682, 32723, 31068, 281, 62, 15, 32571, 32059, 31068, 281, 62, 16, 32963, 32734, 32226, 32799, 32723, 31068, 281, 62, 15, 32059, 31068, 281, 62, 16, 32963, 32734, 32226, 32799, 32723, 31068, 281, 62, 16, 32059, 31068, 281, 62, 77, 32963, 33067, 33403, 33064, 32274, 31068, 281, 62, 77, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80as_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_lucas ( n ) : \n    if n == 0 : \n        return 2 \n    elif n == 1 : \n        return 1 \n    else : \n        lucas_0 = 2 \n        \n        lucas_1 = 1 \n        \n        for i in range ( 2 , n + 1 ) : \n            lucas_n = lucas_0 + lucas_1 \n            \n            lucas_0 = lucas_1 \n            \n            lucas_1 = lucas_n \n            \n        \n        return lucas_n \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n", "task_id": "Mbpp/390", "test": "\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 957, 62, 2600, 32082, 32509, 32113, 284, 292, 32500, 32113, 4797, 62, 2600, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32206, 33383, 32358, 33202, 32061, 4797, 62, 2600, 33207, 4797, 32895, 32465, 32664, 460, 33047, 32924, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120format_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add_string ( lst , format_string ) : \n    return [ format_string . format ( i ) for i in lst ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n", "task_id": "Mbpp/391", "test": "\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5436, 62, 2493, 62, 67, 7307, 32082, 32509, 32113, 1975, 82, 32500, 32113, 4761, 32500, 32113, 15436, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1975, 82, 33047, 32924, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 33111, 33050, 32078, 33247, 32076, 32573, 32878, 1975, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32121, 33050, 32078, 33247, 32076, 32573, 32878, 4761, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33278, 32573, 32878, 15436, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33341, 32747, 33341, 32747, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80ictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120id_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120scores_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120id_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120id_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120scores_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def convert_list_dictionary ( ids , names , scores ) : \n    result = [ ] \n    \n    for i in range ( len ( ids ) ) : \n        result . append ( { ids [ i ] : { names [ i ] : scores [ i ] } } ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "task_id": "Mbpp/392", "test": "\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 3966, 62, 1828, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32486, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32732, 32682, 32723, 291, 32040, 32460, 207, 17, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 1828, 33048, 32032, 32682, 32732, 32682, 32732, 32682, 33301, 33383, 32281, 748, 62, 3966, 62, 1828, 32895, 32465, 32664, 460, 33047, 32924, 32571, 32763, 33383, 32281, 748, 62, 3966, 62, 1828, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32059, 460, 33047, 32924, 32571, 32763, 33383, 32281, 748, 62, 3966, 62, 1828, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32416, 32682, 33065, 207, 17, 32297, 32059, 460, 33047, 32924, 32571, 32763, 33383, 32281, 748, 62, 3966, 62, 1828, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32416, 32682, 33065, 207, 18, 32297, 32059, 460, 33047, 32924, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 3034, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_max_sum ( n ) : \n    if n == 1 : \n        return 1 \n    \n    max_sum = 0 \n    \n    for i in range ( 1 , n // 2 + 1 ) : \n        max_sum = max ( max_sum , get_max_sum ( i ) + get_max_sum ( n - i ) + get_max_sum ( n - 2 * i ) + get_max_sum ( n - 3 * i ) ) \n        \n    \n    return max_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "task_id": "Mbpp/394", "test": "\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 5977, 5729, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 33064, 33442, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 33047, 32924, 32866, 33160, 33132, 33383, 32281, 10405, 32895, 32465, 33340, 33383, 32281, 841, 32895, 32465, 32664, 244, 393, 33047, 32924, 33047, 32924, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dist_ter\ud83d\ude80^\ud83d\ude80inct_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_distinct ( tup ) : \n    return len ( tup ) == len ( set ( tup ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "task_id": "Mbpp/395", "test": "\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1019, 62, 4338, 62, 248, 388, 1128, 62, 16825, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1555, 62, 4241, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 1555, 32059, 2649, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 32689, 32601, 1555, 62, 4241, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 1555, 62, 4241, 32716, 33307, 32277, 1555, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 1555, 62, 4241, 32716, 33307, 32277, 1555, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 32077, 32174, 32723, 1555, 32059, 2649, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1555, 62, 4241, 32716, 33307, 32277, 1555, 33447, 32343, 33447, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 32274, 1555, 33067, 32486, 33067, 33403, 33064, 33216, 33144, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80pe_ter\ud83d\ude80^\ud83d\ude80ating_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80character_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def first_non_repeating_character ( string ) : \n    char_count = { } \n    \n    for char in string : \n        if char in char_count : \n            char_count [ char ] += 1 \n        else : \n            char_count [ char ] = 1 \n            \n        \n    \n    for char in string : \n        if char_count [ char ] == 1 : \n            return char \n        \n    \n    return None \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n", "task_id": "Mbpp/397", "test": "\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 24269, 62, 6487, 2228, 32082, 32509, 32113, 245, 32500, 32113, 270, 32500, 32113, 258, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 5744, 33208, 32425, 32089, 245, 32860, 32089, 270, 32860, 32089, 258, 33257, 32444, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 5744, 33207, 3724, 32895, 32465, 33047, 32924, 32963, 33064, 32943, 32573, 32878, 5744, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def median_numbers ( a , b , c ) : \n    numbers = [ a , b , c ] \n    \n    numbers . sort ( ) \n    return numbers [ 1 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n", "task_id": "Mbpp/398", "test": "\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 990, 62, 13324, 1043, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3212, 32460, 207, 15, 32963, 32077, 32174, 32723, 2849, 32059, 284, 292, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 2849, 33048, 32664, 1517, 33047, 32924, 32420, 32762, 32184, 32077, 32174, 32723, 1096, 62, 2002, 32059, 2849, 32034, 32734, 32852, 33329, 32723, 3212, 32128, 32763, 33383, 32281, 2545, 32753, 32485, 32463, 32206, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 33403, 32355, 32413, 32660, 32723, 20408, 33397, 32164, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1096, 62, 2002, 33047, 32924, 33250, 33151, 32087, 32963, 33067, 33403, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 3212, 32128, 32763, 33383, 32281, 2545, 32753, 32485, 32463, 32206, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 33403, 32355, 32413, 32660, 32723, 20408, 33397, 32164, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 2849, 33047, 32924, 33250, 33151, 32087, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 3212, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80its_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_of_digits ( lst ) : \n    total = 0 \n    \n    for item in lst : \n        if isinstance ( item , list ) : \n            for sub_item in item : \n                total += sum ( int ( digit ) for digit in str ( sub_item ) ) \n            \n        else : \n            total += sum ( int ( digit ) for digit in str ( item ) ) \n        \n    \n    return total \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n", "task_id": "Mbpp/404", "test": "\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7547, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 245, 32866, 32441, 32601, 270, 33313, 32420, 32762, 32184, 33064, 32274, 245, 33067, 32064, 32984, 33283, 32034, 33064, 32274, 270, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120minimum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def minimum ( a , b ) : \n    if a < b : \n        return a \n    else : \n        return b \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "task_id": "Mbpp/405", "test": "\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 83, 393, 3302, 32082, 32509, 32113, 244, 393, 3302, 32500, 32113, 3688, 33233, 32346, 32346, 32034, 33064, 33442, 32601, 3688, 32866, 32689, 32601, 244, 393, 3302, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80lex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80lex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80lex_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_tuplex ( tuplex , element ) : \n    return element in tuplex \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n", "task_id": "Mbpp/406", "test": "\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 3693, 465, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 33064, 33442, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Par_ter\ud83d\ude80^\ud83d\ude80ity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Parity ( num ) : \n    return num % 2 != 0 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n", "task_id": "Mbpp/409", "test": "\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1344, 62, 8065, 62, 83, 14563, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1344, 62, 8065, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1932, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32297, 32468, 32573, 33278, 32573, 32878, 284, 292, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32963, 33234, 32742, 32095, 33231, 32601, 1932, 32866, 32441, 32601, 1344, 62, 8065, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1344, 62, 8065, 32059, 1932, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1344, 62, 8065, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def min_product_tuple ( lst ) : \n    min_product = float ( 'inf' ) \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            product = lst [ i ] [ 0 ] * lst [ j ] [ 1 ] \n            \n            if product < min_product : \n                min_product = product \n                \n            \n        \n    \n    return min_product \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n", "task_id": "Mbpp/410", "test": "\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1344, 62, 1284, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1344, 62, 1284, 32468, 32573, 32878, 284, 292, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 32441, 32601, 1344, 62, 1284, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1344, 62, 1284, 32059, 460, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1344, 62, 1284, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def min_val ( lst ) : \n    min_val = lst [ 0 ] \n    \n    for i in lst : \n        if i < min_val : \n            min_val = i \n            \n        \n    \n    return min_val \n\n"}
{"prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "task_id": "Mbpp/412", "test": "\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 16809, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 284, 292, 33250, 32055, 33075, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_odd ( lst ) : \n    return [ num for num in lst if num % 2 == 0 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n", "task_id": "Mbpp/413", "test": "\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 77, 392, 62, 7637, 32082, 32509, 32113, 284, 292, 32500, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32900, 32573, 32878, 244, 32716, 33307, 32277, 291, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 244, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_nth_element ( lst , n ) : \n    return [ t [ n ] for t in lst ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "task_id": "Mbpp/414", "test": "\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 27195, 5526, 32082, 32509, 32113, 386, 80, 16, 32500, 32113, 386, 80, 17, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 2849, 32059, 386, 80, 16, 32034, 33234, 32742, 32095, 33231, 32601, 2849, 32866, 32689, 32601, 386, 80, 17, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120overl_ter\ud83d\ude80^\ud83d\ude80apping_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120se_ter\ud83d\ude80^\ud83d\ude80q_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def overlapping ( seq1 , seq2 ) : \n    for item in seq1 : \n        if item in seq2 : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "task_id": "Mbpp/415", "test": "\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 10737, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3034, 62, 6487, 16, 32961, 32799, 32723, 3034, 62, 6487, 17, 33311, 33144, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 33152, 32601, 3034, 62, 8065, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32059, 1181, 32963, 33067, 32486, 33067, 33403, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 1181, 32866, 33152, 32601, 3034, 62, 6487, 16, 33313, 32691, 32856, 32601, 1181, 32866, 32091, 32601, 3034, 62, 8065, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 6487, 17, 32059, 3034, 62, 6487, 16, 32963, 32734, 32226, 32799, 32723, 3034, 62, 6487, 16, 32059, 1181, 32963, 33067, 32064, 32366, 32090, 32394, 32037, 32892, 32601, 1181, 32866, 33152, 32601, 3034, 62, 6487, 17, 33313, 32691, 32856, 32601, 1181, 32866, 32091, 32601, 3034, 62, 8065, 33313, 32184, 32734, 32226, 32799, 32723, 3034, 62, 6487, 17, 32059, 1181, 32963, 33067, 32486, 33067, 33403, 33064, 32583, 32489, 3034, 62, 6487, 16, 33373, 32489, 3034, 62, 6487, 17, 33140, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_Product ( nums ) : \n    max_product = float ( '-inf' ) \n    \n    max_num1 = max_num2 = None \n    \n    \n    for num in nums : \n        if num > max_product : \n            max_product = num \n            \n        \n    \n    for num in nums : \n        if num > max_num1 and num != max_product : \n            max_num2 = max_num1 \n            \n            max_num1 = num \n            \n        elif num > max_num2 and num != max_product : \n            max_num2 = num \n            \n        \n    \n    return max_num1 , max_num2 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "task_id": "Mbpp/418", "test": "\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 11451, 62, 8924, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 4082, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 3034, 62, 7637, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32866, 33152, 32601, 3034, 62, 4082, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 4082, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3034, 62, 7637, 32059, 1096, 2493, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 7637, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Find_Max ( lst ) : \n    max_length = 0 \n    \n    max_element = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n            max_element = sublist \n            \n        \n    \n    return max_element \n\n"}
{"prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n", "task_id": "Mbpp/419", "test": "\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4069, 62, 384, 62, 1828, 32082, 32509, 32113, 5744, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 27985, 62, 6487, 2228, 32176, 33320, 33031, 32206, 33383, 32281, 4069, 32895, 32465, 32664, 1181, 33047, 32924, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 5744, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32723, 3212, 62, 1828, 32763, 33383, 32281, 2545, 32895, 32465, 32664, 27985, 62, 6487, 2228, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3960, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5744, 33047, 32924, 32963, 33064, 32989, 32682, 32723, 3212, 62, 1828, 32297, 32059, 3960, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120rounded_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def round_and_sum ( numbers ) : \n    rounded_numbers = [ round ( num ) for num in numbers ] \n    \n    total_sum = sum ( rounded_numbers ) \n    \n    length = len ( numbers ) \n    \n    return total_sum * length \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "task_id": "Mbpp/420", "test": "\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 258, 5457, 62, 12133, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 460, 32519, 32460, 207, 18, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def cube_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i ** 3 \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n", "task_id": "Mbpp/421", "test": "\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 29651, 387, 62, 83, 14563, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 27001, 6, 32023, 33207, 6419, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 1401, 33048, 32664, 244, 393, 33047, 32924, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120concaten_ter\ud83d\ude80^\ud83d\ude80ate_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def concatenate_tuple ( tup ) : \n    return '-' . join ( map ( str , tup ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n", "task_id": "Mbpp/422", "test": "\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 32, 3557, 62, 4104, 62, 34, 5457, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 62, 990, 62, 66, 458, 257, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 62, 990, 62, 66, 458, 257, 32128, 32416, 32682, 32723, 460, 32519, 32460, 207, 18, 32963, 33067, 33403, 32734, 32226, 32799, 32723, 5126, 62, 990, 62, 66, 458, 257, 32416, 32682, 32723, 2545, 62, 990, 62, 66, 458, 257, 32769, 32059, 291, 32963, 33064, 32274, 5126, 62, 990, 62, 66, 458, 257, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80verage_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80C_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Average_Of_Cube ( n ) : \n    sum_of_cubes = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum_of_cubes += i ** 3 \n    \n    average_of_cubes = sum_of_cubes / n \n    \n    return average_of_cubes \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n", "task_id": "Mbpp/424", "test": "\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 248, 268, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32900, 32573, 32878, 252, 32716, 33307, 33188, 32759, 33291, 33372, 207, 16, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 252, 33397, 32164, 32059, 244, 393, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80ar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_rear ( tup ) : \n    return [ s [ - 1 ] for s in tup ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n", "task_id": "Mbpp/425", "test": "\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 7637, 62, 246, 62, 2493, 32082, 32509, 32113, 284, 292, 32500, 32113, 3688, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 3688, 32866, 32689, 32601, 1096, 2493, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_element_in_list ( lst , element ) : \n    count = 0 \n    \n    for sublist in lst : \n        if element in sublist : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n", "task_id": "Mbpp/426", "test": "\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6226, 62, 16809, 6487, 2228, 32082, 32509, 32113, 5744, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 5744, 33250, 32055, 33075, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 16, 33313, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def filter_oddnumbers ( numbers ) : \n    return [ num for num in numbers if num % 2 == 1 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "task_id": "Mbpp/427", "test": "\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2252, 62, 1984, 62, 7697, 32082, 32509, 32113, 4278, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32911, 33221, 1008, 32377, 33221, 2472, 32377, 33221, 1486, 32541, 32763, 33383, 32358, 33202, 32061, 4278, 33207, 9818, 32895, 32465, 33034, 27001, 6, 32023, 33047, 32924, 32963, 33064, 32301, 267, 1, 90, 1351, 6636, 90, 13468, 6636, 90, 5456, 10319, 32023, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120change_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80date_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80format_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120year_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120day_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120date_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120f_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80day_ter\ud83d\ude80^\ud83d\ude80}-_ter\ud83d\ude80^\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80month_ter\ud83d\ude80^\ud83d\ude80}-_ter\ud83d\ude80^\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80year_ter\ud83d\ude80^\ud83d\ude80}\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def change_date_format ( date ) : \n    year , month , day = date . split ( '-' ) \n    \n    return f\"{day}-{month}-{year}\" \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n", "task_id": "Mbpp/428", "test": "\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8478, 62, 14355, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 11501, 32416, 32682, 32723, 291, 32040, 32460, 207, 17, 32963, 32669, 32466, 33231, 32601, 11501, 32866, 33152, 32104, 207, 15, 33313, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 11501, 33048, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 12490, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 521, 32059, 460, 32963, 32669, 32466, 32394, 32037, 32892, 32601, 521, 32866, 32072, 32601, 11501, 33313, 32691, 32856, 32721, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32059, 11501, 33447, 32343, 33447, 32866, 33152, 32601, 12490, 33313, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32468, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32059, 11501, 33447, 32343, 33447, 32963, 32734, 32852, 33329, 32723, 521, 32687, 32059, 11501, 32963, 33067, 33403, 32734, 32226, 32799, 32239, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32059, 12490, 32963, 33067, 33403, 32734, 32852, 33329, 32723, 11501, 32868, 32460, 207, 17, 32963, 33067, 33403, 33064, 32274, 5369, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120shell_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120gap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def shell_sort ( arr ) : \n    n = len ( arr ) \n    \n    gap = n // 2 \n    \n    while gap > 0 : \n        for i in range ( gap , n ) : \n            temp = arr [ i ] \n            \n            j = i \n            \n            while j >= gap and arr [ j - gap ] > temp : \n                arr [ j ] = arr [ j - gap ] \n                \n                j -= gap \n            \n            arr [ j ] = temp \n            \n        \n        gap //= 2 \n    \n    return arr \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "task_id": "Mbpp/429", "test": "\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 285, 62, 83, 393, 873, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 244, 16, 33047, 32924, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32032, 32682, 32239, 32573, 32878, 244, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32748, 32468, 32573, 32878, 244, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120and_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def and_tuples ( t1 , t2 ) : \n    result = [ ] \n    \n    for i in range ( len ( t1 ) ) : \n        result . append ( t1 [ i ] & t2 [ i ] ) \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n", "task_id": "Mbpp/430", "test": "\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1114, 356, 4488, 62, 9394, 3088, 32082, 32509, 32113, 245, 32500, 32113, 270, 32500, 32113, 258, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 245, 32297, 32059, 270, 33291, 32416, 32682, 32723, 258, 32519, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120par_ter\ud83d\ude80^\ud83d\ude80ab_ter\ud83d\ude80^\ud83d\ude80ola_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80direct_ter\ud83d\ude80^\ud83d\ude80rix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def parabola_directrix ( a , b , c ) : \n    return 2 * a * b - c ** 2 \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n", "task_id": "Mbpp/432", "test": "\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 24269, 62, 648, 2560, 89, 2533, 32082, 32509, 32113, 245, 32500, 32113, 270, 32500, 32113, 258, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 263, 32416, 32682, 32897, 32876, 32682, 32732, 32682, 32723, 245, 32571, 32059, 270, 32571, 32059, 258, 32769, 32460, 207, 17, 32963, 32734, 32226, 32799, 32723, 252, 32416, 32682, 32897, 32876, 32682, 32732, 32682, 32732, 32682, 32723, 245, 32571, 32059, 270, 32571, 32059, 258, 32571, 32059, 263, 32769, 32460, 207, 17, 32963, 33064, 32989, 32682, 32897, 32876, 32682, 32723, 252, 33291, 32059, 263, 32519, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80tr_ter\ud83d\ude80^\ud83d\ude80ape_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80ium_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def median_trapezium ( a , b , c ) : \n    d = ( a + b + c ) / 2 \n    \n    s = ( a + b + c + d ) / 2 \n    \n    return ( s - d ) ** 2 \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n", "task_id": "Mbpp/433", "test": "\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 11308, 250, 32082, 32509, 32113, 5369, 32500, 32113, 1181, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32059, 5369, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 33152, 32601, 1181, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80great_ter\ud83d\ude80^\ud83d\ude80er_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_greater ( arr , num ) : \n    for i in arr : \n        if i > num : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "task_id": "Mbpp/435", "test": "\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1554, 62, 20068, 260, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33301, 33383, 32281, 3095, 32895, 32465, 32664, 291, 33047, 32924, 33384, 32460, 207, 16, 15, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def last_Digit ( n ) : \n    return abs ( n ) % 10 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n", "task_id": "Mbpp/436", "test": "\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3412, 62, 30566, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 284, 292, 33250, 32055, 33075, 32601, 1181, 32866, 32441, 32104, 207, 15, 33313, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120neg_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80nos_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def neg_nos ( lst ) : \n    return [ num for num in lst if num < 0 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n", "task_id": "Mbpp/437", "test": "\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 16809, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33033, 15207, 32023, 32963, 32077, 32174, 32723, 1555, 32059, 2649, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 33301, 33383, 32281, 4882, 32895, 32465, 32664, 1555, 33047, 32924, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1228, 32128, 32059, 1555, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_odd ( string ) : \n    result = \"\" \n    \n    for char in string : \n        if ord ( char ) % 2 == 0 : \n            result += char \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n", "task_id": "Mbpp/439", "test": "\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4598, 62, 577, 62, 16561, 32082, 32509, 32113, 5744, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33033, 15207, 32023, 32963, 32077, 32174, 32723, 1181, 32059, 5744, 32034, 32734, 32852, 33329, 32723, 1228, 32128, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 32963, 33067, 33403, 33064, 33170, 33383, 32281, 1097, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multiple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80single_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def multiple_to_single ( numbers ) : \n    result = \"\" \n    \n    for num in numbers : \n        result += str ( num ) \n    \n    return int ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n", "task_id": "Mbpp/440", "test": "\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 307, 11679, 62, 3185, 32082, 32509, 32113, 4965, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 598, 329, 1777, 33208, 32425, 32620, 440, 2996, 1883, 1, 32023, 32860, 32620, 440, 1685, 9445, 1, 32023, 32860, 32620, 440, 309, 8854, 1, 32023, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 11302, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 28756, 32059, 598, 329, 1777, 32034, 32734, 32226, 32799, 32723, 1328, 32460, 207, 15, 32963, 32669, 32466, 32088, 33105, 32034, 32734, 32226, 32799, 32723, 1328, 32763, 33383, 32358, 33202, 32061, 4965, 33207, 1273, 32895, 32465, 32664, 28756, 33048, 32664, 1328, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1328, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 32420, 32762, 32184, 33255, 32134, 33067, 32486, 32734, 33072, 33383, 32358, 33202, 32061, 11302, 33207, 13508, 32895, 32465, 32877, 33392, 32786, 1328, 32952, 33281, 32682, 32723, 1328, 32571, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 28756, 33047, 32924, 32952, 32786, 28756, 32328, 32045, 33047, 32924, 32963, 32734, 32852, 33329, 32723, 1328, 32128, 32460, 207, 16, 32963, 33067, 33403, 33067, 33403, 33234, 32742, 32095, 33359, 32655, 33011, 11302, 32420, 32762, 32184, 33064, 33216, 33144, 33067, 32486, 32734, 32226, 32799, 32723, 1019, 62, 307, 11679, 62, 3185, 32763, 33383, 32281, 1344, 32895, 32465, 32664, 11302, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33403, 33047, 32924, 32963, 33064, 32274, 1019, 62, 307, 11679, 62, 3185, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ad_ter\ud83d\ude80^\ud83d\ude80verb_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ad_ter\ud83d\ude80^\ud83d\ude80ver_ter\ud83d\ude80^\ud83d\ude80bs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80cle_ter\ud83d\ude80^\ud83d\ude80arly_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80ser_ter\ud83d\ude80^\ud83d\ude80iously_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80un_ter\ud83d\ude80^\ud83d\ude80fortunately_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120adverb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ad_ter\ud83d\ude80^\ud83d\ude80ver_ter\ud83d\ude80^\ud83d\ude80bs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sentence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120adverb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120adverb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120adverb_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ad_ter\ud83d\ude80^\ud83d\ude80verb_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120positions_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ad_ter\ud83d\ude80^\ud83d\ude80verb_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_adverb_position ( sentence ) : \n    adverbs = [ \"clearly\" , \"seriously\" , \"unfortunately\" ] \n    \n    positions = [ ] \n    \n    for adverb in adverbs : \n        start = 0 \n        \n        while True : \n            start = sentence . find ( adverb , start ) \n            \n            if start == - 1 : \n                break \n            \n            positions . append ( ( start , start + len ( adverb ) , adverb ) ) \n            start += 1 \n        \n    \n    if not positions : \n        return None \n    \n    first_adverb_position = min ( positions , key = lambda x : x [ 0 ] ) \n    \n    return first_adverb_position \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n", "task_id": "Mbpp/441", "test": "\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5426, 12181, 62, 66, 5457, 32082, 32509, 32113, 2398, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33065, 207, 21, 32297, 32962, 32876, 32682, 32723, 2398, 32519, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120surface_ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def surfacearea_cube ( size ) : \n    return 6 * ( size ** 2 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n", "task_id": "Mbpp/445", "test": "\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3750, 62, 11994, 4627, 32082, 32509, 32113, 244, 393, 16, 32500, 32113, 244, 393, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 16, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1932, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 244, 393, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32297, 32468, 32573, 33278, 32573, 32878, 244, 393, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 2545, 62, 8065, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 244, 393, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32297, 32468, 32573, 33278, 32573, 32878, 244, 393, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32877, 33392, 32786, 1932, 32952, 32786, 2545, 62, 8065, 32328, 32045, 33047, 32924, 32963, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80multi_ter\ud83d\ude80^\ud83d\ude80plication_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def index_multiplication ( tup1 , tup2 ) : \n    result = [ ] \n    \n    for i in range ( len ( tup1 ) ) : \n        product = tup1 [ i ] [ 0 ] * tup2 [ i ] [ 0 ] \n        \n        sum_product = tup1 [ i ] [ 1 ] * tup2 [ i ] [ 1 ] \n        \n        result . append ( ( product , sum_product ) ) \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "task_id": "Mbpp/446", "test": "\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 24765, 332, 8639, 32082, 32509, 32113, 244, 393, 32500, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32059, 284, 292, 32034, 32734, 32852, 33329, 32723, 1683, 32128, 32763, 33383, 32358, 33202, 32061, 244, 393, 33207, 1683, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Occ_ter\ud83d\ude80^\ud83d\ude80ur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_Occurrence ( tup , lst ) : \n    count = 0 \n    \n    for i in lst : \n        count += tup . count ( i ) \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "task_id": "Mbpp/447", "test": "\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 258, 5457, 62, 6487, 82, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33080, 32682, 32723, 1181, 32519, 32460, 207, 18, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 1181, 82, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80ube_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def cube_nums ( nums ) : \n    return [ num ** 3 for num in nums ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "task_id": "Mbpp/448", "test": "\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2173, 62, 1828, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33334, 207, 15, 33067, 32064, 32366, 32090, 33231, 32601, 291, 32866, 33160, 32104, 207, 16, 33313, 32184, 33064, 33334, 207, 16, 33067, 32064, 32366, 32090, 33231, 32601, 291, 32866, 33160, 32104, 207, 17, 33313, 32184, 33064, 33334, 207, 17, 33067, 32064, 32984, 33283, 32034, 33064, 32989, 32682, 32732, 32682, 33301, 33383, 32281, 2173, 62, 1828, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33047, 32924, 32571, 32763, 33383, 32281, 2173, 62, 1828, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 17, 33047, 32924, 32571, 32763, 33383, 32281, 2173, 62, 1828, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 18, 33047, 32924, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def cal_sum ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n == 2 : \n        return 2 \n    else : \n        return cal_sum ( n - 1 ) + cal_sum ( n - 2 ) + cal_sum ( n - 3 ) \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n", "task_id": "Mbpp/450", "test": "\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 2600, 32082, 32509, 32113, 284, 292, 32500, 32113, 2398, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32361, 252, 33403, 32244, 32413, 32660, 32723, 252, 33397, 32164, 32059, 284, 292, 33250, 32055, 33075, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 32866, 33160, 32601, 2398, 33313, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_string ( lst , size ) : \n    return [ s for s in lst if len ( s ) == size ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n", "task_id": "Mbpp/451", "test": "\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 1951, 3761, 26690, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 252, 33207, 8394, 32895, 32465, 33034, 651, 651, 32023, 33048, 33034, 15355, 32023, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80wh_ter\ud83d\ude80^\ud83d\ude80ites_ter\ud83d\ude80^\ud83d\ude80paces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_whitespaces ( s ) : \n    return s . replace ( ' ' , '' ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n", "task_id": "Mbpp/453", "test": "\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 990, 19941, 710, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 460, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2545, 32128, 32059, 460, 32963, 33067, 32486, 33067, 32486, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80Fact_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sumofFactors ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            \n        \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n", "task_id": "Mbpp/454", "test": "\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2422, 62, 10108, 62, 2674, 89, 32082, 32509, 32113, 2422, 33233, 32346, 32346, 32034, 33064, 33442, 32224, 651, 89, 6, 32023, 32866, 32689, 32601, 2422, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80match_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80word_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def text_match_wordz ( text ) : \n    return 'z' in text \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "task_id": "Mbpp/455", "test": "\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 13468, 77, 4313, 62, 7675, 32082, 32509, 32113, 2472, 62, 7675, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 2472, 62, 7675, 32866, 32689, 32234, 32425, 32400, 207, 16, 32860, 32400, 207, 18, 32860, 32400, 207, 20, 32860, 32400, 207, 22, 32860, 32400, 207, 23, 32860, 32400, 207, 16, 15, 32860, 32400, 207, 16, 17, 33257, 32444, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32064, 32366, 32090, 33231, 32601, 2472, 62, 7675, 32866, 32689, 32234, 32425, 32400, 207, 19, 32860, 32400, 207, 21, 32860, 32400, 207, 24, 32860, 32400, 207, 16, 16, 33257, 32444, 33313, 32184, 33064, 33167, 32260, 33067, 32064, 32984, 33283, 32034, 33064, 33167, 32260, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80month_ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80umb_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_monthnumb_number ( month_number ) : \n    if month_number in [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] : \n        return True \n    elif month_number in [ 4 , 6 , 9 , 11 ] : \n        return False \n    else : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n", "task_id": "Mbpp/456", "test": "\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13322, 62, 2600, 62, 2493, 32082, 32509, 32113, 2649, 62, 2493, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32900, 32573, 32878, 252, 32716, 33307, 32718, 33097, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 252, 33397, 32164, 32059, 2649, 62, 2493, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def reverse_string_list ( string_list ) : \n    return [ s [ : : - 1 ] for s in string_list ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "task_id": "Mbpp/457", "test": "\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 11451, 62, 7729, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1344, 62, 4082, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1344, 62, 1580, 2493, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32866, 32441, 32601, 1344, 62, 4082, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1344, 62, 4082, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1344, 62, 1580, 2493, 32059, 1096, 2493, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1344, 62, 1580, 2493, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Find_Min ( lst ) : \n    min_length = float ( 'inf' ) \n    \n    min_sublist = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) < min_length : \n            min_length = len ( sublist ) \n            \n            min_sublist = sublist \n            \n        \n    \n    return min_sublist \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n", "task_id": "Mbpp/458", "test": "\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 28263, 62, 12181, 32082, 32509, 32113, 3960, 32500, 32113, 4565, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 3960, 32297, 32059, 4565, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rectangle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120width_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120width_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def rectangle_area ( length , width ) : \n    return length * width \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n", "task_id": "Mbpp/459", "test": "\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 22441, 5875, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33033, 15207, 32023, 32963, 32734, 32226, 32799, 32723, 460, 32460, 207, 15, 32963, 32669, 32466, 33231, 32601, 460, 32866, 32441, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 33313, 32034, 33234, 32742, 32095, 32394, 32037, 32151, 32037, 32892, 32601, 460, 32866, 32441, 32873, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 252, 33047, 32924, 33291, 32460, 207, 16, 33313, 32691, 32763, 33383, 32358, 33202, 32585, 32573, 32878, 252, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33207, 317, 22441, 32895, 32465, 33047, 32924, 32691, 32763, 33383, 32358, 33202, 32585, 32573, 32878, 252, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33207, 317, 13323, 32895, 32465, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 460, 32128, 32460, 207, 17, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 1228, 32128, 32468, 32573, 32878, 252, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 32734, 32852, 33329, 32723, 460, 32128, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_uppercase ( s ) : \n    result = \"\" \n    \n    i = 0 \n    \n    while i < len ( s ) : \n        if i < len ( s ) - 1 and s [ i ] . isupper ( ) and s [ i + 1 ] . islower ( ) : \n            i += 2 \n        else : \n            result += s [ i ] \n            i += 1 \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "task_id": "Mbpp/460", "test": "\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8329, 1216, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32900, 32573, 32878, 1096, 2493, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 1096, 2493, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Ext_ter\ud83d\ude80^\ud83d\ude80ract_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Extract ( lst ) : \n    return [ sublist [ 0 ] for sublist in lst ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "task_id": "Mbpp/462", "test": "\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 20325, 62, 2493, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 32263, 32425, 33257, 32444, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 12490, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 12059, 32059, 1228, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 12490, 33207, 13508, 32895, 32465, 32032, 32682, 32723, 12059, 32571, 33208, 32425, 32191, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33257, 32444, 33047, 32924, 32963, 33067, 33403, 32734, 32852, 33329, 32723, 1228, 32128, 32059, 12490, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120subset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120subset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def combinations_list ( lst ) : \n    result = [ [ ] ] \n    \n    for i in range ( len ( lst ) ) : \n        temp = [ ] \n        \n        for subset in result : \n            temp . append ( subset + [ lst [ i ] ] ) \n        \n        result += temp \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "task_id": "Mbpp/463", "test": "\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1580, 2482, 62, 8065, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33359, 32655, 33011, 1181, 82, 32420, 32762, 32184, 33064, 33334, 207, 15, 33067, 32486, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32468, 32573, 32878, 1181, 82, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 1344, 62, 8065, 32468, 32573, 32878, 1181, 82, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 1228, 32468, 32573, 32878, 1181, 82, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32441, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32911, 33221, 3034, 62, 8065, 32377, 33221, 1344, 62, 8065, 32541, 32994, 32489, 1344, 62, 8065, 33373, 32489, 3034, 62, 8065, 33140, 32963, 33067, 32486, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32763, 33383, 32281, 3034, 32895, 32465, 32540, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33048, 32032, 32682, 32723, 3034, 62, 8065, 32297, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1344, 62, 8065, 32763, 33383, 32281, 1344, 32895, 32465, 32540, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33048, 32032, 32682, 32723, 1344, 62, 8065, 32297, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1228, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 1228, 33048, 32664, 3034, 62, 8065, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_subarray_product ( nums ) : \n    if not nums : \n        return 0 \n    \n    max_product = nums [ 0 ] \n    \n    min_product = nums [ 0 ] \n    \n    result = nums [ 0 ] \n    \n    for i in range ( 1 , len ( nums ) ) : \n        if nums [ i ] < 0 : \n            max_product , min_product = min_product , max_product \n            \n        \n        max_product = max ( nums [ i ] , max_product * nums [ i ] ) \n        \n        min_product = min ( nums [ i ] , min_product * nums [ i ] ) \n        \n        result = max ( result , max_product ) \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n", "task_id": "Mbpp/465", "test": "\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4100, 62, 10519, 32082, 32509, 32113, 263, 33233, 32346, 32346, 32034, 33064, 33276, 32376, 33225, 32248, 33247, 32807, 528, 32878, 353, 33403, 32479, 32413, 32660, 32911, 33221, 528, 32377, 33221, 353, 32541, 33397, 32164, 32763, 33383, 32358, 33202, 32061, 263, 33207, 5012, 32895, 32465, 33047, 32924, 33250, 33017, 33075, 32601, 353, 32866, 32233, 32996, 33347, 33144, 33313, 32936, 32251, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120drop_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80empty_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_not_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def drop_empty ( d ) : \n    return { k : v for k , v in d . items ( ) if v is not None } \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n", "task_id": "Mbpp/468", "test": "\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 8065, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 263, 79, 32416, 32682, 32421, 32425, 32400, 207, 15, 33257, 32444, 32297, 32059, 291, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32468, 32573, 32878, 1181, 82, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32866, 32441, 32721, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 8065, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 8065, 33048, 32032, 32682, 32239, 32573, 32878, 1181, 82, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32297, 32468, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32059, 3034, 62, 8065, 32963, 33067, 33403, 33064, 33170, 33383, 32281, 3034, 32895, 32465, 32664, 263, 79, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_product ( nums ) : \n    n = len ( nums ) \n    \n    dp = [ 0 ] * n \n    \n    dp [ 0 ] = nums [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        max_product = nums [ i ] \n        \n        for j in range ( i ) : \n            if nums [ j ] < nums [ i ] : \n                max_product = max ( max_product , nums [ j ] * dp [ i ] ) \n                \n            \n        \n        dp [ i ] = max_product \n        \n    \n    return max ( dp ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n", "task_id": "Mbpp/470", "test": "\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 957, 62, 20551, 3729, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32032, 32682, 32239, 32573, 32878, 244, 393, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 244, 393, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pair_ter\ud83d\ude80^\ud83d\ude80wise_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add_pairwise ( tup ) : \n    result = [ ] \n    \n    for i in range ( len ( tup ) - 1 ) : \n        result . append ( tup [ i ] + tup [ i + 1 ] ) \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n", "task_id": "Mbpp/471", "test": "\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 1836, 444, 580, 32082, 32509, 32113, 5369, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1932, 32460, 207, 16, 32963, 32077, 32174, 32723, 1181, 32059, 5369, 32034, 32734, 32226, 32799, 32723, 1932, 32416, 32682, 32897, 32876, 32682, 32723, 1932, 32297, 32059, 1181, 33384, 32059, 291, 32963, 33067, 33403, 33064, 32274, 1932, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80rem_ter\ud83d\ude80^\ud83d\ude80ain_ter\ud83d\ude80^\ud83d\ude80der_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_remainder ( arr , n ) : \n    product = 1 \n    \n    for num in arr : \n        product = ( product * num ) % n \n        \n    \n    return product \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "task_id": "Mbpp/472", "test": "\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 1525, 12472, 488, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 284, 292, 32763, 33383, 32281, 24442, 32895, 32465, 32664, 284, 292, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32239, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32571, 32460, 207, 16, 32866, 32091, 32721, 32573, 32878, 284, 292, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Con_ter\ud83d\ude80^\ud83d\ude80secut_ter\ud83d\ude80^\ud83d\ude80ive_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_Consecutive ( lst ) : \n    lst = sorted ( lst ) \n    \n    for i in range ( len ( lst ) - 1 ) : \n        if lst [ i ] + 1 != lst [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n", "task_id": "Mbpp/473", "test": "\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 30534, 62, 2263, 2190, 32082, 32509, 32113, 244, 393, 873, 16, 32500, 32113, 244, 393, 873, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 841, 16, 32763, 33383, 32281, 841, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 30534, 33048, 32664, 244, 393, 873, 16, 33047, 32924, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 841, 17, 32763, 33383, 32281, 841, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 30534, 33048, 32664, 244, 393, 873, 17, 33047, 32924, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 20562, 32763, 33383, 32358, 33202, 32061, 841, 16, 33207, 20562, 32895, 32465, 32664, 841, 17, 33047, 32924, 32963, 33064, 32274, 20562, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80inter_ter\ud83d\ude80^\ud83d\ude80section_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120intersection_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tuple_intersection ( tuples1 , tuples2 ) : \n    set1 = set ( map ( tuple , tuples1 ) ) \n    \n    set2 = set ( map ( tuple , tuples2 ) ) \n    \n    intersection = set1 . intersection ( set2 ) \n    \n    return intersection \n\n"}
{"prompt": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n", "task_id": "Mbpp/474", "test": "\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8394, 62, 5897, 32082, 32509, 32113, 2649, 32500, 32113, 1705, 62, 5897, 32500, 32113, 756, 62, 5897, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 2649, 33207, 8394, 32895, 32465, 32664, 1705, 62, 5897, 33048, 32664, 756, 62, 5897, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120old_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120old_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def replace_char ( string , old_char , new_char ) : \n    return string . replace ( old_char , new_char ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n", "task_id": "Mbpp/475", "test": "\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3724, 62, 20106, 32082, 32509, 32113, 263, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 24442, 32895, 32465, 33340, 33383, 32358, 33202, 32061, 263, 33207, 5012, 32895, 32465, 33047, 32924, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33403, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80counter_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_counter ( d ) : \n    return sorted ( d . items ( ) , key = lambda x : x [ 1 ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "task_id": "Mbpp/476", "test": "\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2557, 62, 1828, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33301, 33383, 32281, 3034, 32895, 32465, 32664, 5369, 33047, 32924, 32571, 32763, 33383, 32281, 1344, 32895, 32465, 32664, 5369, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120big_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def big_sum ( arr ) : \n    return max ( arr ) + min ( arr ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "task_id": "Mbpp/477", "test": "\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 13323, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 2649, 33207, 3916, 32895, 32465, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_lower ( string ) : \n    return string . lower ( ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "task_id": "Mbpp/478", "test": "\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 771, 2197, 587, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32753, 32485, 32463, 32361, 258, 33403, 32355, 32413, 32660, 32723, 258, 33397, 32164, 32059, 252, 33250, 32530, 33180, 32655, 32521, 33383, 32358, 33202, 32061, 258, 33207, 317, 13323, 32895, 32465, 33047, 32924, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80low_ter\ud83d\ude80^\ud83d\ude80erc_ter\ud83d\ude80^\ud83d\ude80ase_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_lowercase ( s ) : \n    return '' . join ( c for c in s if not c . islower ( ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "task_id": "Mbpp/479", "test": "\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1019, 62, 20068, 260, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32669, 32466, 33231, 32601, 291, 32866, 32072, 32104, 207, 16, 15, 33313, 32034, 32734, 32226, 32799, 32723, 291, 32416, 32682, 32723, 291, 32040, 32460, 207, 16, 15, 32963, 33067, 33403, 33064, 32274, 291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def first_Digit ( n ) : \n    while n >= 10 : \n        n = n // 10 \n        \n    \n    return n \n\n"}
{"prompt": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n", "task_id": "Mbpp/554", "test": "\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 324, 4709, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 284, 292, 33250, 32055, 33075, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120S_ter\ud83d\ude80^\ud83d\ude80plit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Split ( lst ) : \n    return [ num for num in lst if num % 2 != 0 ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n", "task_id": "Mbpp/555", "test": "\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4322, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 62, 990, 62, 66, 458, 257, 32763, 33383, 32281, 2545, 32895, 32465, 32578, 33320, 33031, 33080, 32682, 32723, 460, 32519, 32460, 207, 18, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 2545, 62, 990, 62, 6487, 2228, 32763, 33383, 32281, 2545, 32895, 32465, 32578, 33320, 33031, 32361, 460, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 33047, 32924, 32963, 33064, 32989, 32682, 32723, 2545, 62, 990, 62, 66, 458, 257, 33291, 32059, 2545, 62, 990, 62, 6487, 2228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120difference_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80c_ter\ud83d\ude80^\ud83d\ude80ub_ter\ud83d\ude80^\ud83d\ude80es_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def difference ( n ) : \n    sum_of_cubes = sum ( [ i ** 3 for i in range ( 1 , n + 1 ) ] ) \n    \n    sum_of_numbers = sum ( [ i for i in range ( 1 , n + 1 ) ] ) \n    \n    return sum_of_cubes - sum_of_numbers \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n", "task_id": "Mbpp/556", "test": "\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 46, 1511, 62, 25656, 32082, 32509, 32113, 5369, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 15, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 32179, 33071, 32873, 32682, 32897, 32876, 32682, 32239, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33427, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80O_ter\ud83d\ude80^\ud83d\ude80dd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Odd_Pair ( arr , n ) : \n    count = 0 \n    \n    for i in range ( 0 , len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            if ( ( arr [ i ] ^ arr [ j ] ) % 2 != 0 ) : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n", "task_id": "Mbpp/557", "test": "\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 28048, 62, 2600, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32578, 33320, 33031, 32502, 32995, 33383, 32358, 33202, 32061, 258, 33207, 3916, 32895, 32465, 33047, 32924, 32749, 32995, 33383, 32358, 33202, 32061, 258, 33207, 317, 22441, 32895, 32465, 33047, 32924, 32681, 32995, 33383, 32358, 33202, 32061, 258, 33207, 6910, 32895, 32465, 33047, 32924, 32093, 33403, 32244, 32413, 32660, 32723, 258, 33397, 32164, 32059, 252, 33250, 32042, 32725, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120toggle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80conditional_expression_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def toggle_string ( s ) : \n    return '' . join ( [ c . lower ( ) if c . isupper ( ) else c . upper ( ) for c in s ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n", "task_id": "Mbpp/558", "test": "\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 20408, 62, 20540, 62, 6487, 82, 32082, 32509, 32113, 1181, 16, 32500, 32113, 1181, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1401, 16, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 16, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1401, 17, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 17, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 2545, 62, 20540, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1401, 16, 33047, 32924, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 62, 20540, 32128, 32763, 33383, 32281, 3095, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32540, 32573, 32878, 1401, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 33291, 32763, 33383, 32281, 1097, 32895, 32465, 32540, 32573, 32878, 1401, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 2545, 62, 20540, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80distance_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80distance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80distance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80distance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def digit_distance_nums ( num1 , num2 ) : \n    str1 = str ( num1 ) \n    \n    str2 = str ( num2 ) \n    \n    sum_distance = 0 \n    \n    for i in range ( len ( str1 ) ) : \n        sum_distance += abs ( int ( str1 [ i ] ) - int ( str2 [ i ] ) ) \n    \n    return sum_distance \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n", "task_id": "Mbpp/559", "test": "\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1580, 62, 2482, 62, 1828, 32082, 32509, 32113, 1181, 82, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1642, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 1642, 62, 1828, 32128, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32963, 33234, 32742, 32095, 33231, 32601, 1642, 62, 1828, 32866, 33152, 32601, 3034, 62, 1828, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32059, 1642, 62, 1828, 32963, 33067, 32486, 33234, 32742, 32095, 33231, 32601, 1642, 62, 1828, 32866, 32441, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1642, 62, 1828, 32460, 207, 15, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_sub_array_sum ( nums , k ) : \n    max_sum = float ( '-inf' ) \n    \n    current_sum = 0 \n    \n    for i in range ( len ( nums ) ) : \n        current_sum += nums [ i ] \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n        \n        if current_sum < 0 : \n            current_sum = 0 \n            \n        \n    \n    return max_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n", "task_id": "Mbpp/560", "test": "\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 12677, 62, 22291, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 12677, 62, 1113, 32763, 33383, 32358, 33202, 33038, 33383, 32281, 841, 32895, 32465, 32664, 244, 16, 33047, 32924, 33207, 12677, 32895, 32465, 33340, 33383, 32281, 841, 32895, 32465, 32664, 244, 17, 33047, 32924, 33047, 32924, 32963, 33064, 33170, 33383, 32281, 24442, 32895, 32465, 32664, 12677, 62, 1113, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120union_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def union_elements ( t1 , t2 ) : \n    union_set = set ( t1 ) . union ( set ( t2 ) ) \n    \n    return sorted ( union_set ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n", "task_id": "Mbpp/562", "test": "\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 11451, 62, 8924, 62, 9409, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 4082, 32460, 207, 15, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32866, 33152, 32601, 3034, 62, 4082, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 4082, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 4082, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Find_Max_Length ( lst ) : \n    max_length = 0 \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n        \n    \n    return max_length \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n", "task_id": "Mbpp/563", "test": "\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 9254, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3029, 33208, 32425, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 1328, 32460, 207, 15, 32963, 32077, 32174, 32911, 33221, 460, 32377, 33221, 1555, 32541, 32763, 33383, 32281, 456, 9041, 32895, 32465, 32664, 252, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 33160, 32224, 651, 12212, 32023, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 3029, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 252, 32716, 33307, 32718, 32938, 32682, 32723, 1328, 32571, 32460, 207, 16, 33097, 32818, 460, 32214, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1328, 32416, 32682, 32723, 460, 32571, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3029, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120en_ter\ud83d\ude80^\ud83d\ude80umerate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\"'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_values ( s ) : \n    values = [ ] \n    \n    start = 0 \n    \n    for i , char in enumerate ( s ) : \n        if char == '\"' : \n            values . append ( s [ start + 1 : i ] ) \n            start = i + 1 \n            \n        \n    \n    return values \n\n"}
{"prompt": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n", "task_id": "Mbpp/564", "test": "\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 47, 4125, 32082, 32509, 32113, 284, 292, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 32664, 291, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32091, 32721, 32573, 32878, 284, 292, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80P_ter\ud83d\ude80^\ud83d\ude80airs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_Pairs ( lst , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if lst [ i ] != lst [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n", "task_id": "Mbpp/565", "test": "\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 9818, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 1517, 32895, 32465, 32664, 2649, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def split ( string ) : \n    return list ( string ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n", "task_id": "Mbpp/566", "test": "\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 13324, 1043, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32669, 32466, 33231, 32601, 291, 32866, 33152, 32104, 207, 15, 33313, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 291, 33384, 32460, 207, 16, 15, 32963, 32734, 32852, 33329, 32723, 291, 32868, 32460, 207, 16, 15, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80its_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_digits ( n ) : \n    sum = 0 \n    \n    while n > 0 : \n        sum += n % 10 \n        n //= 10 \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n", "task_id": "Mbpp/567", "test": "\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2162, 439, 62, 2493, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 284, 292, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120iss_ter\ud83d\ude80^\ud83d\ude80ort_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def issort_list ( lst ) : \n    for i in range ( len ( lst ) - 1 ) : \n        if lst [ i ] > lst [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n", "task_id": "Mbpp/568", "test": "\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7143, 62, 2493, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33378, 33050, 33341, 32747, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120empty_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def empty_list ( n ) : \n    return [ { } for _ in range ( n ) ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "task_id": "Mbpp/569", "test": "\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3724, 62, 1580, 27062, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 32206, 33383, 32281, 24442, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 33403, 32244, 32413, 32660, 32723, 1096, 2493, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n", "task_id": "Mbpp/572", "test": "\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 979, 62, 19464, 62, 6487, 82, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 4718, 62, 6487, 82, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 32494, 33205, 32601, 4718, 62, 6487, 82, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 4718, 62, 6487, 82, 33207, 13508, 32895, 32465, 32664, 1181, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 4718, 62, 6487, 82, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120two_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def two_unique_nums ( nums ) : \n    unique_nums = [ ] \n    \n    for num in nums : \n        if num not in unique_nums : \n            unique_nums . append ( num ) \n        \n    \n    return unique_nums \n\n"}
{"prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n", "task_id": "Mbpp/573", "test": "\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4718, 62, 8065, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 4718, 62, 6487, 82, 32763, 33383, 32281, 841, 32895, 32465, 32664, 284, 292, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1932, 32460, 207, 16, 32963, 32077, 32174, 32723, 1181, 32059, 4718, 62, 6487, 82, 32034, 32734, 32852, 33329, 32723, 1932, 33228, 32059, 1181, 32963, 33067, 33403, 33064, 32274, 1932, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def unique_product ( lst ) : \n    unique_nums = set ( lst ) \n    \n    product = 1 \n    \n    for num in unique_nums : \n        product *= num \n    \n    return product \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n", "task_id": "Mbpp/576", "test": "\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 5716, 62, 5055, 32082, 32509, 32113, 5369, 16, 32500, 32113, 5369, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 10405, 16, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 16, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 10405, 17, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 17, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 10405, 16, 32866, 32441, 32601, 10405, 17, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32732, 32682, 32723, 10405, 16, 33291, 32059, 10405, 17, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 16, 32716, 33307, 32718, 32818, 460, 33097, 32938, 32682, 32723, 460, 32571, 32059, 10405, 17, 32214, 33447, 32343, 33447, 32866, 33160, 32601, 5369, 17, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Array_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_Sub_Array ( arr1 , arr2 ) : \n    len1 = len ( arr1 ) \n    \n    len2 = len ( arr2 ) \n    \n    if len1 < len2 : \n        return False \n    \n    for i in range ( len1 - len2 + 1 ) : \n        if arr1 [ i : i + len2 ] == arr2 : \n            return True \n        \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n", "task_id": "Mbpp/577", "test": "\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1554, 62, 20068, 260, 62, 19941, 8533, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 6084, 497, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 6084, 497, 33228, 32059, 460, 32963, 33067, 33403, 32734, 32226, 32799, 32723, 1554, 62, 13324, 260, 32416, 32682, 32723, 6084, 497, 33384, 32460, 207, 16, 15, 32963, 33064, 32274, 1554, 62, 13324, 260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Fact_ter\ud83d\ude80^\ud83d\ude80orial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120factor_ter\ud83d\ude80^\ud83d\ude80ial_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def last_Digit_Factorial ( n ) : \n    factorial = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        factorial *= i \n    \n    last_digit = factorial % 10 \n    \n    return last_digit \n\n"}
{"prompt": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n", "task_id": "Mbpp/578", "test": "\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1193, 28091, 62, 27062, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 32500, 32113, 1517, 18, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1517, 16, 33047, 32924, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 1517, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 1517, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 1517, 18, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120inter_ter\ud83d\ude80^\ud83d\ude80leave_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def interleave_lists ( list1 , list2 , list3 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] ) \n        result . append ( list2 [ i ] ) \n        result . append ( list3 [ i ] ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n", "task_id": "Mbpp/579", "test": "\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 67, 974, 308, 2621, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 841, 16, 32763, 33383, 32281, 841, 32895, 32465, 32664, 244, 16, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 841, 17, 32763, 33383, 32281, 841, 32895, 32465, 32664, 244, 17, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 691, 3382, 2621, 32763, 33383, 32358, 33202, 32061, 841, 16, 33207, 15341, 62, 8002, 2233, 32895, 32465, 32664, 841, 17, 33047, 32924, 32963, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 33340, 33383, 32281, 24442, 32895, 32465, 32664, 691, 3382, 2621, 33047, 32924, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80iss_ter\ud83d\ude80^\ud83d\ude80im_ter\ud83d\ude80^\ud83d\ude80ilar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dis_ter\ud83d\ude80^\ud83d\ude80sim_ter\ud83d\ude80^\ud83d\ude80ilar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120symmetric_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80erence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dis_ter\ud83d\ude80^\ud83d\ude80sim_ter\ud83d\ude80^\ud83d\ude80ilar_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_dissimilar ( t1 , t2 ) : \n    set1 = set ( t1 ) \n    \n    set2 = set ( t2 ) \n    \n    dissimilar = set1 . symmetric_difference ( set2 ) \n    \n    return tuple ( sorted ( dissimilar ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n", "task_id": "Mbpp/580", "test": "\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 8591, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32059, 244, 393, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 460, 33048, 32664, 30534, 33047, 32924, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 33340, 33383, 32281, 7815, 62, 8591, 32895, 32465, 32664, 460, 33047, 32924, 33047, 32924, 32963, 33067, 32064, 32366, 32090, 33231, 32873, 32682, 32723, 460, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_even ( tup ) : \n    result = [ ] \n    \n    for i in tup : \n        if isinstance ( i , tuple ) : \n            result . append ( extract_even ( i ) ) \n        elif i % 2 == 0 : \n            result . append ( i ) \n        \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n", "task_id": "Mbpp/581", "test": "\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5426, 62, 19904, 32082, 32509, 32113, 3240, 62, 7406, 32500, 32113, 5471, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32732, 32682, 33065, 207, 17, 32297, 32962, 32876, 32682, 32723, 3240, 62, 7406, 32519, 32460, 207, 17, 32571, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 3240, 62, 7406, 32297, 32059, 5471, 32571, 32416, 32682, 33065, 207, 17, 32297, 32962, 32876, 32682, 32723, 3240, 62, 7406, 32297, 32059, 5471, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120surface_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80edge_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80edge_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80edge_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80edge_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def surface_Area ( base_edge , height ) : \n    return 2 * ( base_edge ** 2 ) + 2 * base_edge * height + 2 * ( base_edge * height ) \n\n"}
{"prompt": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n", "task_id": "Mbpp/583", "test": "\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5191, 261, 62, 7675, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 32685, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33334, 207, 16, 33067, 32486, 32734, 32226, 32799, 32723, 5191, 261, 32176, 33320, 33031, 33230, 207, 15, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 5191, 261, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32460, 207, 16, 32963, 32734, 32226, 32799, 32239, 32573, 32878, 5191, 261, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 5191, 261, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32460, 207, 15, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 5191, 261, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 32878, 5191, 261, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32571, 32416, 32682, 32239, 32573, 32878, 5191, 261, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32297, 32468, 32573, 32878, 5191, 261, 32716, 33307, 32647, 32682, 32732, 32682, 32723, 460, 33291, 32059, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 33067, 33403, 33067, 33403, 33064, 32943, 32573, 32878, 5191, 261, 32716, 33307, 32277, 291, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120catal_ter\ud83d\ude80^\ud83d\ude80an_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def catalan_number ( n ) : \n    if n <= 1 : \n        return 1 \n    \n    catalan = [ 0 for i in range ( n + 1 ) ] \n    \n    catalan [ 0 ] = 1 \n    \n    catalan [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        catalan [ i ] = 0 \n        \n        for j in range ( i ) : \n            catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] \n            \n        \n    \n    return catalan [ n ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n", "task_id": "Mbpp/585", "test": "\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 10175, 62, 14163, 32082, 32509, 32113, 10086, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 24442, 62, 31744, 32763, 33383, 32281, 24442, 32895, 32465, 32664, 10086, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 32348, 651, 21875, 6, 32023, 33447, 32343, 33447, 33403, 33048, 32776, 33124, 33343, 13322, 33440, 33105, 33047, 32924, 32963, 33064, 32943, 32573, 32878, 24442, 62, 31744, 32716, 33307, 32718, 33097, 32818, 291, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120expensive_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80price_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dataset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def expensive_items ( dataset , n ) : \n    sorted_dataset = sorted ( dataset , key = lambda x : x [ 'price' ] , reverse = True ) \n    \n    return sorted_dataset [ : n ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n", "task_id": "Mbpp/586", "test": "\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 9818, 62, 1966, 81, 32082, 32509, 32113, 5369, 32500, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32239, 32573, 32878, 5369, 32716, 33307, 32718, 32818, 291, 33097, 32214, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32718, 33097, 32818, 291, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Ar_ter\ud83d\ude80^\ud83d\ude80r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def split_Arr ( arr , n ) : \n    return arr [ n : ] + arr [ : n ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n", "task_id": "Mbpp/587", "test": "\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1517, 62, 83, 14563, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 284, 292, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def list_tuple ( lst ) : \n    return tuple ( lst ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n", "task_id": "Mbpp/588", "test": "\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2557, 62, 8002, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 33301, 33383, 32281, 3034, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33291, 32763, 33383, 32281, 1344, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120big_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def big_diff ( nums ) : \n    return max ( nums ) - min ( nums ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n", "task_id": "Mbpp/589", "test": "\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3213, 62, 25331, 5325, 32082, 32509, 32113, 1328, 32500, 32113, 1223, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 26656, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 1328, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 1223, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 7748, 32416, 32682, 32723, 460, 32297, 32059, 460, 32963, 33234, 32742, 32095, 33231, 32601, 1328, 32866, 32685, 32601, 7748, 32866, 32685, 32601, 1223, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 26656, 33207, 13508, 32895, 32465, 32664, 7748, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 26656, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120perfect_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80squ_ter\ud83d\ude80^\ud83d\ude80ares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120squares_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def perfect_squares ( start , end ) : \n    squares = [ ] \n    \n    for i in range ( int ( start ** 0.5 ) , int ( end ** 0.5 ) + 1 ) : \n        square = i * i \n        \n        if start <= square <= end : \n            squares . append ( square ) \n        \n    \n    return squares \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n", "task_id": "Mbpp/590", "test": "\nassert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 11269, 62, 6035, 32082, 32509, 32113, 427, 32500, 32113, 254, 816, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1371, 32416, 32682, 32723, 427, 32297, 32763, 33383, 32358, 33202, 32061, 16194, 33207, 6295, 32895, 32465, 32664, 254, 816, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 320, 32416, 32682, 32723, 427, 32297, 32763, 33383, 32358, 33202, 32061, 16194, 33207, 6196, 32895, 32465, 32664, 254, 816, 33047, 32924, 32963, 33064, 32388, 33392, 32786, 1371, 32952, 32786, 320, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120polar_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80rect_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80ta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cos_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80ta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120the_ter\ud83d\ude80^\ud83d\ude80ta_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def polar_rect ( r , theta ) : \n    x = r * math . cos ( theta ) \n    \n    y = r * math . sin ( theta ) \n    \n    return ( x , y ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n", "task_id": "Mbpp/591", "test": "\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 15230, 62, 2245, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 32866, 33152, 32104, 207, 16, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32911, 33130, 32573, 32878, 284, 292, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32377, 33130, 32573, 32878, 284, 292, 32716, 33307, 33188, 32759, 33291, 33372, 207, 16, 33447, 32343, 33447, 32541, 32994, 32729, 32573, 32878, 284, 292, 32716, 33307, 33188, 32759, 33291, 33372, 207, 16, 33447, 32343, 33447, 33373, 32729, 32573, 32878, 284, 292, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33140, 32963, 33067, 32486, 33064, 32274, 284, 292, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120swap_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80List_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def swap_List ( lst ) : \n    if len ( lst ) > 1 : \n        lst [ 0 ] , lst [ - 1 ] = lst [ - 1 ] , lst [ 0 ] \n        \n    \n    return lst \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n", "task_id": "Mbpp/592", "test": "\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 4104, 62, 8065, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 460, 32297, 32962, 32876, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 33291, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_Of_product ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i * ( 2 * i - 1 ) \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n", "task_id": "Mbpp/593", "test": "\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 12057, 62, 515, 32082, 32509, 32113, 15121, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 15121, 62, 2493, 32763, 33383, 32358, 33202, 32061, 15121, 33207, 9818, 32895, 32465, 33034, 651, 4677, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 15121, 62, 2493, 32176, 33320, 33031, 32206, 33383, 32281, 1401, 32895, 32465, 33340, 33383, 32281, 1097, 32895, 32465, 32664, 460, 33047, 32924, 33047, 32924, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32059, 15121, 62, 2493, 33250, 32042, 32725, 32963, 33064, 33170, 33383, 32358, 33202, 32319, 651, 4677, 32023, 33207, 6419, 32895, 32465, 32664, 15121, 62, 2493, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120ip_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def removezero_ip ( ip ) : \n    ip_list = ip . split ( '.' ) \n    \n    ip_list = [ str ( int ( i ) ) for i in ip_list ] \n    \n    return '.' . join ( ip_list ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n", "task_id": "Mbpp/594", "test": "\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1009, 62, 8591, 62, 16809, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1234, 62, 6487, 82, 32176, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 1181, 82, 33250, 32055, 33075, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32042, 32725, 32963, 32734, 32226, 32799, 32723, 8792, 62, 6487, 82, 32176, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 1181, 82, 33250, 32055, 33075, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32042, 32725, 32963, 33234, 32742, 32095, 32394, 32037, 32968, 32655, 33011, 1234, 62, 6487, 82, 33101, 32406, 32655, 33011, 8792, 62, 6487, 82, 32420, 32762, 32184, 33064, 33216, 33144, 33067, 32486, 33064, 32989, 32682, 32239, 32573, 32878, 1234, 62, 6487, 82, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33291, 32468, 32573, 32878, 8792, 62, 6487, 82, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def diff_even_odd ( nums ) : \n    even_nums = [ num for num in nums if num % 2 == 0 ] \n    \n    odd_nums = [ num for num in nums if num % 2 != 0 ] \n    \n    if not even_nums or not odd_nums : \n        return None \n    \n    return even_nums [ 0 ] - odd_nums [ 0 ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n", "task_id": "Mbpp/596", "test": "\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 30534, 62, 3017, 32082, 32509, 32113, 244, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 12156, 33207, 748, 3017, 990, 32895, 32465, 32664, 244, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80size_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sys_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80size_ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tuple_size ( t ) : \n    return sys . getsizeof ( t ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n", "task_id": "Mbpp/597", "test": "\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 74, 392, 32082, 32509, 32113, 338, 32500, 32113, 380, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32911, 33221, 273, 32377, 33221, 291, 32541, 32994, 32363, 33383, 32281, 10405, 32895, 32465, 32664, 338, 33047, 32924, 33373, 32363, 33383, 32281, 10405, 32895, 32465, 32664, 380, 33047, 32924, 33140, 32963, 33234, 32742, 32095, 33231, 32601, 273, 32866, 33152, 32601, 291, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32911, 33221, 338, 32377, 33221, 380, 32377, 33221, 273, 32377, 33221, 291, 32541, 32994, 32489, 380, 33373, 32489, 338, 33373, 32489, 291, 33373, 32489, 273, 33140, 32963, 33067, 32486, 33234, 32742, 32095, 33231, 32601, 273, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 32943, 32573, 32878, 380, 32716, 33307, 32647, 32682, 32723, 528, 33291, 32460, 207, 16, 33447, 32343, 33447, 33067, 32486, 33234, 32742, 32095, 33231, 32601, 528, 32866, 33160, 32104, 207, 16, 33313, 32420, 32762, 32184, 33064, 33170, 33383, 32281, 1344, 32895, 32465, 32540, 32573, 32878, 338, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33048, 32540, 32573, 32878, 380, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33047, 32924, 33067, 32486, 32734, 32226, 32799, 32723, 460, 32416, 32682, 33301, 33383, 32281, 1344, 32895, 32465, 32032, 32682, 32723, 528, 32040, 32460, 207, 17, 33048, 32664, 273, 33047, 32924, 33291, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 521, 32416, 32682, 33301, 33383, 32281, 1344, 32895, 32465, 32032, 32682, 32723, 528, 32040, 32460, 207, 17, 33048, 32664, 291, 33047, 32924, 33291, 32460, 207, 16, 32963, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 338, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 380, 32716, 33307, 32277, 521, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 33064, 33170, 33383, 32281, 1273, 62, 74, 392, 32895, 32465, 32664, 338, 33048, 32540, 32573, 32878, 380, 32716, 33307, 32718, 32938, 32682, 32723, 521, 32571, 32460, 207, 16, 33097, 32214, 33447, 32343, 33447, 33048, 32032, 32682, 32732, 32682, 32723, 528, 33291, 32059, 521, 33291, 32460, 207, 16, 33047, 32924, 33067, 32064, 32984, 33283, 32034, 33064, 33170, 33383, 32281, 1273, 62, 74, 392, 32895, 32465, 32540, 32573, 32878, 338, 32716, 33307, 32718, 32938, 32682, 32723, 460, 32571, 32460, 207, 16, 33097, 32214, 33447, 32343, 33447, 33048, 32664, 380, 33048, 32032, 32682, 32732, 32682, 32723, 528, 33291, 32059, 460, 33291, 32460, 207, 16, 33047, 32924, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120A_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120B_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_kth ( A , B , k ) : \n    m , n = len ( A ) , len ( B ) \n    \n    if m > n : \n        A , B , m , n = B , A , n , m \n        \n    \n    if m == 0 : \n        return B [ k - 1 ] \n    \n    if k == 1 : \n        return min ( A [ 0 ] , B [ 0 ] ) \n    \n    i = min ( k // 2 , m ) - 1 \n    \n    j = min ( k // 2 , n ) - 1 \n    \n    if A [ i ] > B [ j ] : \n        return find_kth ( A , B [ j + 1 : ] , k - j - 1 ) \n    else : \n        return find_kth ( A [ i + 1 : ] , B , k - i - 1 ) \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n", "task_id": "Mbpp/598", "test": "\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5865, 6947, 62, 7675, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 12490, 32059, 1181, 32963, 32669, 32466, 33231, 32601, 12490, 32866, 33152, 32104, 207, 15, 33313, 32034, 32734, 32226, 32799, 32723, 20408, 32416, 32682, 32723, 12490, 33384, 32460, 207, 16, 15, 32963, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 20408, 32519, 32460, 207, 18, 32963, 32734, 32852, 33329, 32723, 12490, 32868, 32460, 207, 16, 15, 32963, 33067, 33403, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 33160, 32601, 2545, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32064, 32984, 33283, 32034, 33064, 33167, 32260, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arm_ter\ud83d\ude80^\ud83d\ude80strong_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def armstrong_number ( num ) : \n    sum = 0 \n    \n    temp = num \n    \n    while temp > 0 : \n        digit = temp % 10 \n        \n        sum += digit ** 3 \n        temp //= 10 \n    \n    if num == sum : \n        return True \n    else : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n", "task_id": "Mbpp/599", "test": "\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 64, 3557, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 5126, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32059, 460, 32963, 33067, 33403, 32734, 32226, 32799, 32723, 5126, 32416, 32682, 32723, 2545, 32769, 32059, 291, 32963, 33064, 32583, 32489, 2545, 33373, 32489, 5126, 33140, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80verage_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80expression_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_average ( n ) : \n    sum = 0 \n    \n    average = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i \n    \n    average = sum / n \n    \n    return sum , average \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n", "task_id": "Mbpp/600", "test": "\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 8591, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 33064, 33442, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_even ( num ) : \n    return num % 2 == 0 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n", "task_id": "Mbpp/602", "test": "\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1019, 62, 248, 388, 612, 62, 5897, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1555, 62, 1113, 32763, 33383, 32281, 841, 32895, 32465, 33047, 32924, 32963, 32077, 32174, 32723, 1555, 32059, 252, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 32689, 32601, 1555, 62, 1113, 33313, 32420, 32762, 32184, 33064, 32274, 1555, 33067, 32486, 32734, 33072, 33383, 32358, 33202, 32061, 1555, 62, 1113, 33207, 957, 32895, 32465, 32664, 1555, 33047, 32924, 32963, 33067, 33403, 33064, 33216, 33144, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80pe_ter\ud83d\ude80^\ud83d\ude80ated_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def first_repeated_char ( s ) : \n    char_set = set ( ) \n    \n    for char in s : \n        if char in char_set : \n            return char \n        \n        char_set . add ( char ) \n    \n    return None \n\n"}
{"prompt": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n", "task_id": "Mbpp/603", "test": "\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 75, 485, 278, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 31068, 304, 62, 6487, 2228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 317, 62, 31719, 304, 33095, 33105, 32963, 32077, 32174, 32723, 20408, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 460, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 20408, 32866, 33160, 32224, 651, 19, 6, 32023, 33313, 33101, 32856, 32601, 20408, 32866, 33160, 32224, 651, 22, 6, 32023, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 317, 62, 31719, 304, 32717, 32260, 32963, 33255, 32134, 33067, 32486, 33067, 33403, 33234, 32742, 32095, 33227, 317, 62, 31719, 304, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 31068, 304, 62, 6487, 2228, 33207, 13508, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 31068, 304, 62, 6487, 2228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80l_ter\ud83d\ude80^\ud83d\ude80ud_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120luc_ter\ud83d\ude80^\ud83d\ude80id_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_ludic ( n ) : \n    lucid_numbers = [ ] \n    \n    for i in range ( 1 , n + 1 ) : \n        is_lucid = True \n        \n        for digit in str ( i ) : \n            if digit == '4' or digit == '7' : \n                is_lucid = False \n                \n                break \n            \n        \n        if is_lucid : \n            lucid_numbers . append ( i ) \n        \n    \n    return lucid_numbers \n\n"}
{"prompt": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n", "task_id": "Mbpp/604", "test": "\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13322, 62, 10438, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 651, 651, 32023, 33207, 6419, 32895, 32465, 32540, 32573, 32887, 33383, 32358, 33202, 32061, 252, 33207, 9818, 32895, 32465, 33047, 32924, 32716, 33307, 32718, 33097, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def reverse_words ( s ) : \n    return ' ' . join ( s . split ( ) [ : : - 1 ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n", "task_id": "Mbpp/605", "test": "\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 6621, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 32441, 32104, 207, 17, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 33301, 33383, 32281, 1097, 32895, 32465, 32032, 32682, 32723, 291, 32519, 32811, 207, 15, 13, 20, 33047, 32924, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80prime_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_prime ( n ) : \n    if n < 2 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n", "task_id": "Mbpp/606", "test": "\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3318, 987, 62, 23992, 32082, 32509, 32113, 9948, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 9948, 32297, 32962, 32876, 32682, 32109, 207, 18, 13, 16, 19, 16, 20, 24, 17, 21, 20, 18, 20, 23, 24, 22, 24, 18, 32769, 32460, 207, 16, 23, 15, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rad_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80degree_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120degrees_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120degrees_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude808_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def radian_degree ( degrees ) : \n    return degrees * ( 3.141592653589793 / 180 ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n", "task_id": "Mbpp/607", "test": "\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 20598, 909, 32082, 32509, 32113, 2422, 32500, 32113, 7949, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1328, 62, 3531, 32763, 33383, 32358, 33202, 32061, 2422, 33207, 1273, 32895, 32465, 32664, 7949, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1328, 62, 3531, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 32420, 32762, 32184, 33064, 33216, 33144, 33067, 32486, 32734, 32226, 32799, 32723, 1223, 62, 3531, 32416, 32682, 32723, 1328, 62, 3531, 32571, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 7949, 33047, 32924, 32963, 33064, 32388, 33392, 32786, 7949, 32952, 32786, 1328, 62, 3531, 32952, 32786, 1223, 62, 3531, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80liter_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120pattern_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_literals ( text , pattern ) : \n    start_index = text . find ( pattern ) \n    \n    if start_index == - 1 : \n        return None \n    \n    end_index = start_index + len ( pattern ) \n    \n    return ( pattern , start_index , end_index ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n", "task_id": "Mbpp/608", "test": "\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 15758, 62, 7932, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 15758, 32176, 33320, 33031, 32192, 33320, 33031, 33230, 207, 15, 33403, 32244, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 33403, 32244, 32413, 32660, 32723, 521, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32468, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32416, 32682, 32239, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32571, 32468, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32963, 33067, 33403, 33067, 33403, 33064, 32943, 32573, 33278, 32573, 32878, 15758, 32716, 33307, 32277, 291, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bell_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def bell_Number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n", "task_id": "Mbpp/610", "test": "\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 74, 392, 62, 7637, 32082, 32509, 32113, 284, 292, 32500, 32113, 528, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32239, 32573, 32878, 284, 292, 32716, 33307, 32718, 33097, 32818, 528, 32214, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 284, 292, 32716, 33307, 32718, 32938, 32682, 32723, 528, 32571, 32460, 207, 16, 33097, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_kth_element ( lst , k ) : \n    return lst [ : k ] + lst [ k + 1 : ] \n\n"}
{"prompt": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n", "task_id": "Mbpp/611", "test": "\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 990, 62, 77, 392, 32082, 32509, 32113, 5852, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 2824, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 5439, 32059, 5852, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 32441, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 5439, 33047, 32924, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 2824, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 2824, 33048, 32540, 32573, 32878, 5439, 32716, 33307, 32277, 291, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 2824, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120row_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80value_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_of_nth ( matrix , n ) : \n    max_value = float ( '-inf' ) \n    \n    for row in matrix : \n        if n < len ( row ) : \n            max_value = max ( max_value , row [ n ] ) \n            \n        \n    \n    return max_value \n\n"}
{"prompt": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n", "task_id": "Mbpp/612", "test": "\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 19387, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1019, 62, 22291, 32176, 33320, 33031, 32900, 32573, 32878, 1096, 2493, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 1096, 2493, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32723, 1856, 62, 22291, 32176, 33320, 33031, 32900, 32573, 32878, 1096, 2493, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33403, 32244, 32413, 32660, 32723, 1096, 2493, 33397, 32164, 32059, 284, 292, 33250, 32042, 32725, 32963, 33064, 33273, 32425, 32089, 1019, 62, 22291, 32860, 32089, 1856, 62, 22291, 33257, 32444, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merge_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def merge ( lst ) : \n    first_elements = [ sublist [ 0 ] for sublist in lst ] \n    \n    second_elements = [ sublist [ 1 ] for sublist in lst ] \n    \n    return [ first_elements , second_elements ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n", "task_id": "Mbpp/614", "test": "\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 17140, 76, 22949, 62, 1828, 32082, 32509, 32113, 244, 393, 873, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 17140, 22949, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 244, 32059, 244, 393, 873, 32034, 32734, 32852, 33329, 32723, 17140, 22949, 62, 1828, 32128, 32763, 33383, 32281, 2545, 32895, 32465, 32664, 244, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 17140, 22949, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cum_ter\ud83d\ude80^\ud83d\ude80m_ter\ud83d\ude80^\ud83d\ude80ulative_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cum_ter\ud83d\ude80^\ud83d\ude80ulative_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120cum_ter\ud83d\ude80^\ud83d\ude80ulative_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120cum_ter\ud83d\ude80^\ud83d\ude80ulative_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def cummulative_sum ( tuples ) : \n    cumulative_sum = 0 \n    \n    for t in tuples : \n        cumulative_sum += sum ( t ) \n    \n    return cumulative_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n", "task_id": "Mbpp/615", "test": "\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5126, 62, 83, 14563, 32082, 32509, 32113, 244, 393, 873, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 15580, 1296, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 244, 32059, 244, 393, 873, 32034, 32734, 32226, 32799, 32723, 5126, 32416, 32682, 33301, 33383, 32281, 2545, 32895, 32465, 32664, 244, 33047, 32924, 32769, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 244, 33047, 32924, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 15580, 1296, 33207, 13508, 32895, 32465, 32664, 5126, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 15580, 1296, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120aver_ter\ud83d\ude80^\ud83d\ude80ages_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120aver_ter\ud83d\ude80^\ud83d\ude80ages_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120average_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120aver_ter\ud83d\ude80^\ud83d\ude80ages_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def average_tuple ( tuples ) : \n    averages = [ ] \n    \n    for t in tuples : \n        average = sum ( t ) / len ( t ) \n        \n        averages . append ( average ) \n    \n    return averages \n\n"}
{"prompt": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n", "task_id": "Mbpp/616", "test": "\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 30534, 62, 1784, 11069, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 30534, 32753, 32485, 32463, 33080, 32682, 32723, 245, 33384, 32059, 270, 33403, 32355, 32413, 32660, 32911, 33221, 245, 32377, 33221, 270, 32541, 33397, 32164, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 244, 16, 33048, 32664, 244, 17, 33047, 32924, 33250, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80mod_ter\ud83d\ude80^\ud83d\ude80ulo_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tuple_modulo ( t1 , t2 ) : \n    return tuple ( a % b for a , b in zip ( t1 , t2 ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n", "task_id": "Mbpp/618", "test": "\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2987, 62, 2493, 32082, 32509, 32113, 284, 16, 32500, 32113, 284, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 16, 33047, 32924, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32032, 32682, 32239, 32573, 32878, 284, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32769, 32468, 32573, 32878, 284, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def div_list ( l1 , l2 ) : \n    result = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        result . append ( l1 [ i ] / l2 [ i ] ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n", "task_id": "Mbpp/619", "test": "\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2927, 62, 6487, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1181, 82, 32176, 33320, 33031, 32361, 258, 33403, 32244, 32413, 32660, 32723, 258, 33397, 32164, 32059, 252, 33250, 32055, 33141, 33383, 32358, 33202, 32061, 258, 33207, 317, 13324, 260, 32895, 32465, 33047, 32924, 32042, 32725, 32963, 32734, 32226, 32799, 32723, 2159, 62, 6487, 82, 32176, 33320, 33031, 32361, 258, 33403, 32244, 32413, 32660, 32723, 258, 33397, 32164, 32059, 252, 33250, 32055, 33180, 32655, 32521, 33383, 32358, 33202, 32061, 258, 33207, 317, 13324, 260, 32895, 32465, 33047, 32924, 32042, 32725, 32963, 33064, 33170, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32032, 32682, 32723, 2159, 62, 6487, 82, 32571, 32059, 1181, 82, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def move_num ( s ) : \n    nums = [ c for c in s if c . isdigit ( ) ] \n    \n    non_nums = [ c for c in s if not c . isdigit ( ) ] \n    \n    return '' . join ( non_nums + nums ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n", "task_id": "Mbpp/620", "test": "\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8402, 62, 6021, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1181, 82, 32763, 33383, 32281, 24442, 32895, 32465, 32664, 1181, 82, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 263, 79, 32416, 32682, 32421, 32425, 32400, 207, 16, 33257, 32444, 32297, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32239, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33384, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32763, 33383, 32281, 3034, 32895, 32465, 32540, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33048, 32032, 32682, 32239, 32573, 32878, 263, 79, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32571, 32460, 207, 16, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 33170, 33383, 32281, 3034, 32895, 32465, 32664, 263, 79, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80subset_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def largest_subset ( nums ) : \n    nums = sorted ( nums ) \n    \n    dp = [ 1 ] * len ( nums ) \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i ) : \n            if nums [ i ] % nums [ j ] == 0 : \n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) \n                \n            \n        \n    \n    return max ( dp ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n", "task_id": "Mbpp/622", "test": "\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 2015, 987, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 31796, 62, 2493, 32416, 32682, 32723, 1517, 16, 32571, 32059, 1517, 17, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 31796, 62, 2493, 33207, 3724, 32895, 32465, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 24269, 32416, 32682, 32897, 32876, 32682, 32239, 32573, 32878, 31796, 62, 2493, 32716, 33307, 32647, 32682, 32723, 291, 32040, 32460, 207, 17, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 31796, 62, 2493, 32716, 33307, 32647, 32682, 32732, 32682, 32723, 291, 32040, 32460, 207, 17, 33291, 32460, 207, 16, 33447, 32343, 33447, 32769, 32460, 207, 17, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 24269, 32468, 32573, 32878, 31796, 62, 2493, 32716, 33307, 32647, 32682, 32723, 291, 32040, 32460, 207, 17, 33447, 32343, 33447, 32963, 33067, 33403, 32486, 33064, 32274, 24269, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80med_ter\ud83d\ude80^\ud83d\ude80ian_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120merged_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120median_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_median ( list1 , list2 , n ) : \n    merged_list = list1 + list2 \n    \n    merged_list . sort ( ) \n    if n % 2 == 0 : \n        median = ( merged_list [ n // 2 ] + merged_list [ n // 2 - 1 ] ) / 2 \n        \n    else : \n        median = merged_list [ n // 2 ] \n        \n    \n    return median \n\n"}
{"prompt": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "task_id": "Mbpp/623", "test": "\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 291, 392, 62, 6487, 82, 32082, 32509, 32113, 1181, 82, 32500, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33080, 32682, 32723, 1181, 32519, 32059, 291, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 1181, 82, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80th_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def nth_nums ( nums , n ) : \n    return [ num ** n for num in nums ] \n\n"}
{"prompt": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n", "task_id": "Mbpp/624", "test": "\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 22441, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 2649, 33207, 6910, 32895, 32465, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_upper ( string ) : \n    return string . upper ( ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n", "task_id": "Mbpp/626", "test": "\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 22403, 62, 12181, 32082, 32509, 32113, 11871, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 11871, 32866, 32441, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33216, 33144, 33067, 32064, 32366, 32090, 33231, 32601, 11871, 32866, 33160, 32104, 207, 15, 33313, 32184, 33064, 33334, 207, 15, 33067, 32064, 32984, 33283, 32034, 33064, 32989, 32682, 32732, 32682, 32109, 207, 15, 13, 20, 32297, 32059, 11871, 32297, 32059, 11871, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120triangle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120radius_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def triangle_area ( radius ) : \n    if radius < 0 : \n        return None \n    elif radius == 0 : \n        return 0 \n    else : \n        return 0.5 * radius * radius \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n", "task_id": "Mbpp/628", "test": "\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8394, 62, 776, 2255, 32082, 32509, 32113, 2649, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 2649, 33207, 8394, 32895, 32465, 33034, 440, 440, 32023, 33048, 33034, 23201, 17, 15, 1, 32023, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sp_ter\ud83d\ude80^\ud83d\ude80aces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"%_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def replace_spaces ( string ) : \n    return string . replace ( \" \" , \"%20\" ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n", "task_id": "Mbpp/629", "test": "\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 324, 4709, 32082, 32509, 32113, 5744, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1234, 62, 6487, 2228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1181, 32059, 5744, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1234, 62, 6487, 2228, 33207, 13508, 32895, 32465, 32664, 1181, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1234, 62, 6487, 2228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120S_ter\ud83d\ude80^\ud83d\ude80plit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80bers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Split ( numbers ) : \n    even_numbers = [ ] \n    \n    for num in numbers : \n        if num % 2 == 0 : \n            even_numbers . append ( num ) \n        \n    \n    return even_numbers \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n", "task_id": "Mbpp/630", "test": "\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 1733, 29977, 32082, 32509, 32113, 23762, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 13113, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32618, 32759, 33291, 33372, 207, 16, 33048, 32286, 207, 17, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32618, 32759, 33291, 33372, 207, 16, 33048, 32286, 207, 17, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 460, 32866, 33160, 32104, 207, 15, 33313, 32691, 32856, 32601, 521, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33002, 32910, 33067, 32486, 32734, 33072, 33383, 32358, 33202, 32061, 13113, 33207, 13508, 32895, 32465, 32218, 32425, 32288, 32682, 32239, 32573, 32878, 23762, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32571, 32059, 460, 32860, 32288, 32682, 32239, 32573, 32878, 23762, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32571, 32059, 521, 33257, 32444, 33047, 32924, 32963, 33067, 33403, 33067, 33403, 33064, 32274, 13113, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80co_ter\ud83d\ude80^\ud83d\ude80ordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120coord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80continue_statement_py\ud83d\ude80continue_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120coord_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120coordinates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_coordinates ( coord ) : \n    coordinates = [ ] \n    \n    for i in range ( - 1 , 2 ) : \n        for j in range ( - 1 , 2 ) : \n            if i == 0 and j == 0 : \n                continue \n            \n            coordinates . append ( [ coord [ 0 ] + i , coord [ 1 ] + j ] ) \n        \n    \n    return coordinates \n\n"}
{"prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n", "task_id": "Mbpp/631", "test": "\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8394, 62, 776, 2255, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32319, 27045, 6, 32023, 33207, 6419, 32895, 32465, 33340, 33383, 32358, 33202, 32061, 252, 33207, 9818, 32895, 32465, 33047, 32924, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sp_ter\ud83d\ude80^\ud83d\ude80aces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'__ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def replace_spaces ( s ) : \n    return '_' . join ( s . split ( ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n", "task_id": "Mbpp/632", "test": "\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2927, 62, 12057, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 5854, 62, 4241, 32763, 33383, 32358, 33202, 32061, 1181, 82, 33207, 1683, 32895, 32465, 32286, 207, 15, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 2159, 62, 12057, 62, 22291, 32176, 33320, 33031, 32361, 1181, 33403, 32244, 32413, 32660, 32723, 1181, 33397, 32164, 32059, 1181, 82, 33250, 32055, 33075, 32601, 1181, 32866, 32091, 32104, 207, 15, 33313, 32042, 32725, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 2159, 62, 12057, 62, 22291, 33207, 11790, 32895, 32465, 32032, 32682, 32421, 32425, 32400, 207, 15, 33257, 32444, 32297, 32059, 5854, 62, 4241, 33047, 32924, 32963, 33064, 32274, 2159, 62, 12057, 62, 22291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120move_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extend_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120non_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80zero_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def move_zero ( nums ) : \n    zero_count = nums . count ( 0 ) \n    \n    non_zero_elements = [ num for num in nums if num != 0 ] \n    \n    non_zero_elements . extend ( [ 0 ] * zero_count ) \n    return non_zero_elements \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n", "task_id": "Mbpp/633", "test": "\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5689, 62, 87, 256, 62, 12133, 32082, 32509, 32113, 1181, 82, 32500, 32113, 3393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1181, 82, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32239, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33427, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32866, 33160, 32601, 3393, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1228, 32128, 32416, 32682, 32239, 32573, 32878, 1181, 82, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33427, 32468, 32573, 32878, 1181, 82, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80^_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pair_xor_Sum ( nums , target ) : \n    result = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            if nums [ i ] ^ nums [ j ] == target : \n                result += nums [ i ] ^ nums [ j ] \n            \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n", "task_id": "Mbpp/635", "test": "\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 25608, 62, 14355, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32732, 32682, 32723, 291, 32040, 32460, 207, 17, 33291, 32460, 207, 16, 33048, 32618, 32759, 33291, 33372, 207, 16, 33048, 32618, 32759, 33291, 33372, 207, 16, 33047, 32924, 32034, 32734, 33072, 33383, 32281, 25608, 1895, 32895, 32465, 32664, 5369, 33048, 32664, 291, 33048, 32664, 460, 33047, 32924, 32963, 33067, 33403, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 33291, 32460, 207, 16, 33048, 32286, 207, 15, 33048, 32618, 32759, 33291, 33372, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32911, 33130, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32377, 33130, 32573, 32878, 5369, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32541, 32994, 32729, 32573, 32878, 5369, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33373, 32729, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33140, 32963, 32734, 33072, 33383, 32281, 25608, 1895, 32895, 32465, 32664, 5369, 33048, 32664, 460, 33048, 32286, 207, 15, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 5369, 33067, 33403, 33094, 33104, 33343, 25608, 1895, 32082, 32509, 32113, 5369, 32500, 32113, 291, 32500, 32113, 460, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 8402, 32059, 460, 32963, 32734, 32226, 32799, 32723, 284, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 32571, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 427, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 32571, 32460, 207, 17, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 284, 32866, 32441, 32601, 291, 33313, 32691, 32856, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32441, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 284, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 8402, 32059, 284, 32963, 33067, 32486, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 427, 32866, 32441, 32601, 291, 33313, 32691, 32856, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 32866, 32441, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 427, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 8402, 32059, 427, 32963, 33067, 32486, 33234, 32742, 32095, 33231, 32601, 8402, 32866, 32091, 32601, 460, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32911, 33130, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32377, 33130, 32573, 32878, 5369, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 32541, 32994, 32729, 32573, 32878, 5369, 32716, 33307, 32277, 8402, 33447, 32343, 33447, 33373, 32729, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33140, 32963, 32734, 33072, 33383, 32281, 25608, 1895, 32895, 32465, 32664, 5369, 33048, 32664, 291, 33048, 32664, 8402, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80expression_list_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120heap_ter\ud83d\ude80^\ud83d\ude80ify_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120largest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def heap_sort ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        heapify ( arr , n , i ) \n    \n    for i in range ( n - 1 , 0 , - 1 ) : \n        arr [ i ] , arr [ 0 ] = arr [ 0 ] , arr [ i ] \n        \n        heapify ( arr , i , 0 ) \n    \n    return arr \n\ndef heapify ( arr , n , i ) : \n    largest = i \n    \n    l = 2 * i + 1 \n    \n    r = 2 * i + 2 \n    \n    if l < n and arr [ i ] < arr [ l ] : \n        largest = l \n        \n    \n    if r < n and arr [ largest ] < arr [ r ] : \n        largest = r \n        \n    \n    if largest != i : \n        arr [ i ] , arr [ largest ] = arr [ largest ] , arr [ i ] \n        \n        heapify ( arr , n , largest ) \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n", "task_id": "Mbpp/637", "test": "\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 291, 424, 295, 7473, 62, 24814, 2067, 32082, 32509, 32113, 7216, 62, 21875, 32500, 32113, 6800, 62, 21875, 33233, 32346, 32346, 32034, 33064, 33442, 32601, 7216, 62, 21875, 32866, 32685, 32601, 6800, 62, 21875, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80op_ter\ud83d\ude80^\ud83d\ude80ro_ter\ud83d\ude80^\ud83d\ude80fit_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80nol_ter\ud83d\ude80^\ud83d\ude80oss_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120purchase_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80price_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sale_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80price_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120purchase_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80price_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sale_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80price_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def noprofit_noloss ( purchase_price , sale_price ) : \n    return purchase_price <= sale_price \n\n"}
{"prompt": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n", "task_id": "Mbpp/638", "test": "\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5395, 62, 358, 389, 32082, 32509, 32113, 10313, 32500, 32113, 5937, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 353, 62, 14921, 32416, 32682, 32732, 32682, 32732, 32682, 32109, 207, 18, 20, 13, 22, 19, 32571, 32416, 32682, 32109, 207, 15, 13, 21, 17, 16, 20, 32297, 32059, 5937, 33291, 32416, 32682, 32109, 207, 18, 20, 13, 22, 20, 32297, 32962, 32876, 32682, 32723, 10313, 32519, 32811, 207, 15, 13, 16, 21, 32571, 32416, 32682, 32732, 32682, 32109, 207, 15, 13, 19, 17, 22, 20, 32297, 32059, 5937, 32297, 32962, 32876, 32682, 32723, 10313, 32519, 32811, 207, 15, 13, 16, 21, 32963, 33064, 33170, 33383, 32281, 4069, 32895, 32465, 32664, 353, 62, 14921, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120wind_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ch_ter\ud83d\ude80^\ud83d\ude80ill_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120velocity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120temperature_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temperature_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120velocity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude807_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120temperature_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120velocity_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80float_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120round_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120v_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80temp_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def wind_chill ( velocity , temperature ) : \n    v_temp = 35.74 + 0.6215 * temperature - 35.75 * ( velocity ** 0.16 ) + 0.4275 * temperature * ( velocity ** 0.16 ) \n    \n    return round ( v_temp ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n", "task_id": "Mbpp/639", "test": "\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6336, 62, 10732, 32082, 32509, 32113, 4761, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3212, 62, 4082, 32460, 207, 15, 32963, 32077, 32174, 32723, 1208, 32059, 4761, 32034, 33234, 32742, 32095, 33359, 32655, 32521, 33383, 32358, 33202, 32585, 32573, 32878, 1208, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33207, 317, 13323, 32895, 32465, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 3212, 62, 4082, 32128, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1208, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3212, 62, 4082, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sample_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80nam_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120names_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sample_nam ( names ) : \n    total_length = 0 \n    \n    for name in names : \n        if not name [ 0 ] . islower ( ) : \n            total_length += len ( name ) \n        \n    \n    return total_length \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n", "task_id": "Mbpp/641", "test": "\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 4338, 26325, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32732, 32682, 32723, 291, 32297, 32962, 32876, 32682, 32732, 32682, 33065, 207, 20, 32297, 32059, 291, 33291, 32460, 207, 18, 32040, 32460, 207, 17, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80non_ter\ud83d\ude80^\ud83d\ude80agonal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude805_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_nonagonal ( n ) : \n    return n * ( 5 * n - 3 ) // 2 \n\n"}
{"prompt": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n", "task_id": "Mbpp/643", "test": "\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2422, 62, 10108, 62, 2674, 89, 62, 22866, 32082, 32509, 32113, 2422, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2422, 32763, 33383, 32358, 33202, 32061, 2422, 33207, 12207, 32895, 32465, 33047, 32924, 32963, 33234, 32742, 32095, 32394, 32037, 33301, 33383, 32358, 33202, 32061, 2422, 33207, 1328, 1994, 349, 32895, 32465, 33034, 651, 89, 6, 32023, 33047, 32924, 32691, 32763, 33383, 32358, 33202, 32061, 2422, 33207, 1223, 1994, 349, 32895, 32465, 33034, 651, 89, 6, 32023, 33047, 32924, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32064, 32984, 33283, 32034, 33064, 33167, 32260, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80match_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80word_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80middle_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80sw_ter\ud83d\ude80^\ud83d\ude80ith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80sw_ter\ud83d\ude80^\ud83d\ude80ith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80z_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def text_match_wordz_middle ( text ) : \n    text = text . strip ( ) \n    \n    if text . startswith ( 'z' ) and text . endswith ( 'z' ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n", "task_id": "Mbpp/644", "test": "\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 13322, 62, 5055, 62, 52, 24026, 62, 42, 32082, 32509, 32113, 5369, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 17547, 271, 62, 3046, 32468, 32573, 32878, 5369, 32716, 33307, 32718, 33097, 32818, 528, 32214, 33447, 32343, 33447, 32963, 32734, 33072, 33383, 32358, 33202, 32061, 17547, 271, 62, 3046, 33207, 13322, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1228, 32416, 32682, 32723, 17547, 271, 62, 3046, 32571, 32468, 32573, 32878, 5369, 32716, 33307, 32718, 32818, 528, 33097, 32214, 33447, 32343, 33447, 32963, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80U_ter\ud83d\ude80^\ud83d\ude80pto_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80K_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120revers_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120revers_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120reverse_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120revers_ter\ud83d\ude80^\ud83d\ude80ed_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def reverse_Array_Upto_K ( arr , k ) : \n    reversed_arr = arr [ : k ] \n    \n    reversed_arr . reverse ( ) \n    result = reversed_arr + arr [ k : ] \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n", "task_id": "Mbpp/720", "test": "\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 957, 62, 13057, 62, 577, 62, 83, 14563, 32082, 32509, 32113, 244, 393, 32500, 32113, 263, 296, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 244, 393, 32571, 32722, 33392, 32786, 263, 296, 32952, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80ct_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80ct_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add_dict_to_tuple ( tup , dct ) : \n    return tup + ( dct , ) \n\n"}
{"prompt": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n", "task_id": "Mbpp/721", "test": "\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 32, 3557, 4104, 4693, 32082, 32509, 32113, 5852, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 461, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5852, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 263, 79, 32176, 33320, 33031, 32192, 33320, 33031, 32426, 33392, 32036, 207, 15, 32952, 32036, 207, 15, 32328, 32045, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 461, 33047, 32924, 33250, 32042, 32725, 33403, 32244, 32413, 32660, 32723, 1070, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 461, 33047, 32924, 33250, 32042, 32725, 32963, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32722, 33392, 33166, 32573, 33278, 32573, 32878, 5852, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32952, 32036, 207, 16, 32328, 32045, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 461, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 461, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 460, 32866, 33160, 32104, 207, 15, 33313, 32691, 32856, 32601, 521, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33002, 32910, 33067, 32486, 32734, 32226, 32799, 32723, 578, 32323, 32643, 32573, 33278, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32749, 33393, 32601, 460, 32866, 33152, 32104, 207, 15, 33313, 32681, 32995, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32093, 32963, 32734, 32226, 32799, 32723, 2104, 32323, 32643, 32573, 33278, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32749, 33393, 32601, 521, 32866, 33152, 32104, 207, 15, 33313, 32681, 32995, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32093, 32963, 33234, 32742, 32095, 33231, 32601, 578, 32866, 33152, 32601, 2104, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32722, 33392, 33281, 32682, 32723, 578, 32571, 32468, 32573, 33278, 32573, 32878, 5852, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32952, 33281, 32682, 32239, 32573, 33278, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32571, 32460, 207, 16, 32328, 32045, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32722, 33392, 33281, 32682, 32723, 2104, 32571, 32468, 32573, 33278, 32573, 32878, 5852, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32952, 33281, 32682, 32239, 32573, 33278, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 521, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32571, 32460, 207, 16, 32328, 32045, 32963, 33067, 33403, 32486, 33067, 33403, 33067, 33403, 33064, 32989, 32682, 32239, 32573, 33278, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 461, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 461, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32769, 32468, 32573, 33278, 32573, 33278, 32573, 32878, 263, 79, 32716, 33307, 32647, 32682, 32723, 461, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 32647, 32682, 32723, 461, 33291, 32460, 207, 16, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80A_ter\ud83d\ude80^\ud83d\ude80verage_ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80Path_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80continue_statement_py\ud83d\ude80continue_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80conditional_expression_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80conditional_expression_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120matrix_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120N_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def maxAverageOfPath ( matrix ) : \n    N = len ( matrix ) \n    \n    dp = [ [ ( 0 , 0 ) for _ in range ( N ) ] for _ in range ( N ) ] \n    \n    dp [ 0 ] [ 0 ] = ( matrix [ 0 ] [ 0 ] , 1 ) \n    \n    for i in range ( N ) : \n        for j in range ( N ) : \n            if i == 0 and j == 0 : \n                continue \n            \n            up = dp [ i - 1 ] [ j ] [ 0 ] if i > 0 else float ( '-inf' ) \n            \n            left = dp [ i ] [ j - 1 ] [ 0 ] if j > 0 else float ( '-inf' ) \n            \n            if up > left : \n                dp [ i ] [ j ] = ( up + matrix [ i ] [ j ] , dp [ i - 1 ] [ j ] [ 1 ] + 1 ) \n                \n            else : \n                dp [ i ] [ j ] = ( left + matrix [ i ] [ j ] , dp [ i ] [ j - 1 ] [ 1 ] + 1 ) \n                \n            \n        \n    \n    return dp [ N - 1 ] [ N - 1 ] [ 0 ] / dp [ N - 1 ] [ N - 1 ] [ 1 ] \n\n"}
{"prompt": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n", "task_id": "Mbpp/722", "test": "\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6226, 62, 2448, 32082, 32509, 32113, 1189, 32500, 32113, 1344, 62, 6107, 32500, 32113, 1344, 62, 8404, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 28478, 62, 2448, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32911, 33221, 1208, 32377, 32833, 32309, 33366, 5471, 33026, 33366, 4285, 32830, 33351, 32541, 32763, 33383, 32358, 33202, 32061, 1189, 33207, 5012, 32895, 32465, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 5471, 32866, 33152, 32601, 1344, 62, 6107, 33313, 32691, 32856, 32601, 4285, 32866, 33152, 32601, 1344, 62, 8404, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 32878, 28478, 62, 2448, 32716, 33307, 32277, 1208, 33447, 32343, 33447, 32722, 33392, 32786, 5471, 32952, 32786, 4285, 32328, 32045, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 28478, 62, 2448, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filter_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80tuple_pattern_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120items_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120name_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120height_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120weight_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80data_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def filter_data ( data , min_height , min_weight ) : \n    filtered_data = { } \n    \n    for name , ( height , weight ) in data . items ( ) : \n        if height > min_height and weight > min_weight : \n            filtered_data [ name ] = ( height , weight ) \n            \n        \n    \n    return filtered_data \n\n"}
{"prompt": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n", "task_id": "Mbpp/723", "test": "\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 16344, 62, 20551, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 1517, 16, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 1517, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 1517, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80same_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pair_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_same_pair ( list1 , list2 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n", "task_id": "Mbpp/724", "test": "\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1813, 62, 4907, 62, 1828, 32082, 32509, 32113, 3240, 32500, 32113, 1813, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1181, 32763, 33383, 32281, 1401, 32895, 32465, 32032, 32682, 32723, 3240, 32519, 32059, 1813, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 20408, 32059, 1181, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32763, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80base_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120base_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120power_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def power_base_sum ( base , power ) : \n    num = str ( base ** power ) \n    \n    sum = 0 \n    \n    for digit in num : \n        sum += int ( digit ) \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n", "task_id": "Mbpp/725", "test": "\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 4879, 335, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 1328, 32460, 207, 15, 32963, 32669, 32466, 32088, 33105, 32034, 32734, 32226, 32799, 32723, 1328, 32763, 33383, 32358, 33202, 32061, 252, 33207, 1273, 32895, 32465, 33034, 651, 12212, 32023, 33048, 32664, 1328, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1328, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 32420, 32762, 32184, 33255, 32134, 33067, 32486, 32734, 32226, 32799, 32723, 1223, 32763, 33383, 32358, 33202, 32061, 252, 33207, 1273, 32895, 32465, 33034, 651, 12212, 32023, 33048, 32032, 32682, 32723, 1328, 32571, 32460, 207, 16, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1223, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 32420, 32762, 32184, 33255, 32134, 33067, 32486, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 252, 32716, 33307, 32718, 32938, 32682, 32723, 1328, 32571, 32460, 207, 16, 33097, 32818, 1223, 32214, 33447, 32343, 33447, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1328, 32416, 32682, 32723, 1223, 32571, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80quot_ter\ud83d\ude80^\ud83d\ude80ation_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\"'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\"'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_quotation ( s ) : \n    result = [ ] \n    \n    start = 0 \n    \n    while True : \n        start = s . find ( '\"' , start ) \n        \n        if start == - 1 : \n            break \n        \n        end = s . find ( '\"' , start + 1 ) \n        \n        if end == - 1 : \n            break \n        \n        result . append ( s [ start + 1 : end ] ) \n        start = end + 1 \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n", "task_id": "Mbpp/726", "test": "\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 14798, 326, 62, 22291, 32082, 32509, 32113, 244, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 244, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32032, 32682, 32239, 32573, 32878, 244, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32297, 32468, 32573, 32878, 244, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120multip_ter\ud83d\ude80^\ud83d\ude80ly_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def multiply_elements ( t ) : \n    result = [ ] \n    \n    for i in range ( len ( t ) - 1 ) : \n        result . append ( t [ i ] * t [ i + 1 ] ) \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n", "task_id": "Mbpp/728", "test": "\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 2493, 32082, 32509, 32113, 245, 32500, 32113, 270, 33233, 32346, 32346, 32034, 33064, 32913, 33320, 33031, 33080, 32682, 32723, 1371, 32571, 32059, 320, 33403, 32244, 32413, 32660, 32911, 33221, 1371, 32377, 33221, 320, 32541, 33397, 32164, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 245, 33048, 32664, 270, 33047, 32924, 33250, 32042, 32725, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_list ( a , b ) : \n    return [ x + y for x , y in zip ( a , b ) ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n", "task_id": "Mbpp/730", "test": "\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 24028, 62, 67, 10521, 980, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 460, 32866, 33160, 32104, 207, 15, 33313, 33101, 32856, 32721, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32091, 32721, 32573, 32878, 284, 292, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120consecutive_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80uplic_ter\ud83d\ude80^\ud83d\ude80ates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            result . append ( lst [ i ] ) \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n", "task_id": "Mbpp/731", "test": "\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3455, 909, 332, 2276, 62, 564, 68, 32082, 32509, 32113, 427, 32500, 32113, 286, 33233, 32346, 32346, 32034, 32133, 32850, 32507, 33339, 33056, 16194, 32510, 32625, 32734, 32226, 32799, 32723, 28463, 62, 25030, 62, 12181, 32416, 32682, 32732, 32682, 32732, 32682, 33065, 207, 17, 32297, 33335, 33202, 32061, 16194, 33207, 22232, 32297, 32059, 427, 32297, 32059, 286, 32963, 33064, 32274, 28463, 62, 25030, 62, 12181, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120later_ter\ud83d\ude80^\ud83d\ude80als_ter\ud83d\ude80^\ud83d\ude80ur_ter\ud83d\ude80^\ud83d\ude80face_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80con_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80import_statement_py\ud83d\ude80import_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80dotted_name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80surface_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120math_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pi_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120h_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lateral_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80surface_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def lateralsurface_cone ( r , h ) : \n    import math \n    lateral_surface_area = 2 * math . pi * r * h \n    \n    return lateral_surface_area \n\n"}
{"prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n", "task_id": "Mbpp/732", "test": "\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8394, 62, 16311, 5897, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3028, 62, 358, 1274, 33208, 32425, 32620, 651, 651, 32023, 32860, 32620, 651, 5261, 32023, 32860, 32620, 651, 4677, 32023, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 1228, 33033, 15355, 32023, 32963, 32077, 32174, 32723, 1555, 32059, 252, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 32689, 32601, 3028, 62, 358, 1274, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1228, 32128, 33033, 651, 22823, 32023, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 1228, 32128, 32059, 1555, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80special_ter\ud83d\ude80^\ud83d\ude80char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ch_ter\ud83d\ude80^\ud83d\ude80ars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80,'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120special_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ch_ter\ud83d\ude80^\ud83d\ude80ars_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80:'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def replace_specialchar ( s ) : \n    special_chars = [ ' ' , ',' , '.' ] \n    \n    result = '' \n    \n    for char in s : \n        if char in special_chars : \n            result += ':' \n        else : \n            result += char \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n", "task_id": "Mbpp/733", "test": "\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 6097, 62, 404, 1862, 8639, 32082, 32509, 32113, 5369, 32500, 32113, 3393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2104, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33291, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 1228, 32320, 32759, 33291, 33372, 207, 16, 32963, 32669, 32466, 33231, 32601, 2104, 32866, 32685, 32601, 1327, 33313, 32034, 32734, 32226, 32799, 32723, 5940, 32416, 32682, 32897, 32876, 32682, 32723, 2104, 32571, 32059, 1327, 32040, 32460, 207, 17, 32963, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 33160, 32601, 3393, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1228, 32059, 5940, 32963, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 32723, 5940, 33291, 32460, 207, 16, 32963, 33067, 32064, 32366, 32090, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 32441, 32601, 3393, 33313, 32184, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 32723, 5940, 33291, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80oc_ter\ud83d\ude80^\ud83d\ude80cur_ter\ud83d\ude80^\ud83d\ude80rence_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_first_occurrence ( arr , target ) : \n    left = 0 \n    \n    right = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            right = mid - 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n", "task_id": "Mbpp/734", "test": "\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 4104, 62, 5716, 2482, 62, 1426, 67, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3212, 62, 1828, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 20864, 32460, 207, 16, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33048, 32664, 291, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 20864, 33228, 32468, 32573, 32878, 284, 292, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32963, 32734, 32852, 33329, 32723, 3212, 62, 1828, 32128, 32059, 20864, 32963, 33067, 33403, 33067, 33403, 33064, 32274, 3212, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Pro_ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120prod_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_Of_Subarray_Prod ( lst ) : \n    total_sum = 0 \n    \n    n = len ( lst ) \n    \n    for i in range ( n ) : \n        prod = 1 \n        \n        for j in range ( i , n ) : \n            prod *= lst [ j ] \n            total_sum += prod \n        \n    \n    return total_sum \n\n"}
{"prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"\n", "task_id": "Mbpp/735", "test": "\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 28048, 62, 22866, 62, 11857, 32082, 32509, 32113, 1181, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 10042, 62, 2006, 32468, 32573, 32887, 33383, 32281, 11316, 32895, 32465, 32664, 1181, 33047, 32924, 32716, 33307, 32718, 32542, 207, 17, 33097, 32214, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 3960, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 10042, 62, 2006, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 6517, 62, 11857, 32468, 32573, 32878, 10042, 62, 2006, 32716, 33307, 32718, 32542, 207, 16, 33097, 32938, 32682, 32723, 3960, 33291, 32460, 207, 16, 32214, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 6517, 62, 11857, 62, 2493, 32763, 33383, 32281, 1517, 32895, 32465, 32664, 6517, 62, 11857, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 6517, 62, 11857, 62, 2493, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 6517, 62, 11857, 62, 2493, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32224, 651, 15, 6, 32023, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32239, 32573, 32878, 6517, 62, 11857, 62, 2493, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33033, 651, 16, 6, 32023, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 6517, 62, 11857, 62, 2493, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33033, 651, 15, 6, 32023, 32963, 33067, 33403, 32486, 33067, 33403, 32734, 32226, 32799, 32723, 6517, 62, 11857, 62, 2006, 32763, 33383, 32358, 33202, 32319, 15355, 32023, 33207, 6419, 32895, 32465, 32664, 6517, 62, 11857, 62, 2493, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 23370, 1212, 62, 23432, 62, 2006, 32416, 32682, 32732, 32682, 32239, 32573, 32878, 10042, 62, 2006, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32571, 32059, 6517, 62, 11857, 62, 2006, 32571, 32468, 32573, 32878, 10042, 62, 2006, 32716, 33307, 33188, 32759, 33291, 33372, 207, 16, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 23370, 1212, 62, 6487, 32763, 33383, 32281, 1097, 32895, 32465, 32664, 23370, 1212, 62, 23432, 62, 2006, 33048, 32286, 207, 17, 33047, 32924, 32963, 33064, 32274, 23370, 1212, 62, 6487, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120toggle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120bin_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120togg_ter\ud83d\ude80^\ud83d\ude80led_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120middle_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80bits_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120togg_ter\ud83d\ude80^\ud83d\ude80led_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120togg_ter\ud83d\ude80^\ud83d\ude80led_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80binary_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120togg_ter\ud83d\ude80^\ud83d\ude80led_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def toggle_middle_bits ( num ) : \n    binary_str = bin ( num ) [ 2 : ] \n    \n    length = len ( binary_str ) \n    \n    middle_bits = binary_str [ 1 : length - 1 ] \n    \n    middle_bits_list = list ( middle_bits ) \n    \n    for i in range ( len ( middle_bits_list ) ) : \n        if middle_bits_list [ i ] == '0' : \n            middle_bits_list [ i ] = '1' \n            \n        else : \n            middle_bits_list [ i ] = '0' \n            \n        \n    \n    middle_bits_str = '' . join ( middle_bits_list ) \n    \n    toggled_binary_str = binary_str [ 0 ] + middle_bits_str + binary_str [ - 1 ] \n    \n    toggled_num = int ( toggled_binary_str , 2 ) \n    \n    return toggled_num \n\n"}
{"prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n", "task_id": "Mbpp/736", "test": "\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2104, 62, 12079, 277, 32082, 32509, 32113, 5369, 32500, 32113, 879, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2104, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1327, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32669, 32466, 33231, 32601, 2104, 32866, 32441, 32601, 1327, 33313, 32034, 32734, 32226, 32799, 32723, 5940, 32416, 32682, 32897, 32876, 32682, 32723, 2104, 32571, 32059, 1327, 32040, 32460, 207, 17, 32963, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 32441, 32601, 879, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1327, 32059, 5940, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 2104, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80insert_ter\ud83d\ude80^\ud83d\ude80ion_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def left_insertion ( arr , val ) : \n    left = 0 \n    \n    right = len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] < val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n", "task_id": "Mbpp/737", "test": "\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 2006, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 25578, 1289, 33208, 32425, 32620, 651, 64, 6, 32023, 32860, 32620, 651, 68, 6, 32023, 32860, 32620, 651, 72, 6, 32023, 32860, 32620, 651, 78, 6, 32023, 32860, 32620, 651, 84, 6, 32023, 33257, 32444, 32963, 33234, 32742, 32095, 33231, 33132, 33383, 32358, 33202, 32585, 32573, 32878, 252, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 33207, 3916, 32895, 32465, 33047, 32924, 32866, 32689, 32601, 25578, 1289, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32064, 32984, 33283, 32034, 33064, 33167, 32260, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120vow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80e_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80i_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80o_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80u_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lower_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120vow_ter\ud83d\ude80^\ud83d\ude80els_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_str ( s ) : \n    vowels = [ 'a' , 'e' , 'i' , 'o' , 'u' ] \n    \n    if s [ 0 ] . lower ( ) in vowels : \n        return True \n    else : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"\n", "task_id": "Mbpp/739", "test": "\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 4671, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3750, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 3659, 10892, 62, 7675, 32460, 207, 15, 32963, 32669, 32466, 32088, 33105, 32034, 32734, 32852, 33329, 32723, 3750, 32128, 32460, 207, 16, 32963, 32734, 32852, 33329, 32723, 3659, 10892, 62, 7675, 32128, 32059, 3750, 32963, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 33340, 33383, 32281, 1401, 32895, 32465, 32664, 3659, 10892, 62, 7675, 33047, 32924, 33047, 32924, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 32274, 3750, 33067, 32486, 33067, 33403, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80angular_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80angular_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tri_ter\ud83d\ude80^\ud83d\ude80angular_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_Index ( n ) : \n    index = 0 \n    \n    triangular_number = 0 \n    \n    while True : \n        index += 1 \n        triangular_number += index \n        if len ( str ( triangular_number ) ) == n : \n            return index \n        \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n", "task_id": "Mbpp/740", "test": "\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 30534, 62, 577, 62, 13057, 32082, 32509, 32113, 244, 33233, 32346, 32346, 32034, 33064, 33276, 32376, 33225, 32248, 33247, 32076, 32573, 32878, 244, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33278, 32573, 32878, 244, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33403, 32479, 32413, 32660, 32723, 460, 33397, 32164, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 244, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 33250, 32936, 32251, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dict_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80dictionary_comprehension_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80pair_py\ud83d\ude80key_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tuple_to_dict ( t ) : \n    return { t [ i ] : t [ i + 1 ] for i in range ( len ( t ) - 1 ) } \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n", "task_id": "Mbpp/741", "test": "\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 519, 62, 8061, 6864, 62, 25064, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33442, 33132, 33383, 32281, 10405, 32895, 32465, 33340, 33383, 32281, 841, 32895, 32465, 32664, 252, 33047, 32924, 33047, 32924, 32866, 33160, 32104, 207, 16, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Char_ter\ud83d\ude80^\ud83d\ude80acters_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Same_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def all_Characters_Same ( s ) : \n    return len ( set ( s ) ) == 1 \n\n"}
{"prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n", "task_id": "Mbpp/742", "test": "\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3036, 62, 83, 290, 401, 870, 2102, 32082, 32509, 32113, 2376, 62, 4082, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3036, 32416, 32682, 32897, 32876, 32682, 32732, 32682, 32897, 32876, 32682, 32723, 2376, 62, 4082, 32519, 32460, 207, 17, 32297, 32962, 32876, 32682, 32723, 2376, 62, 4082, 32571, 32460, 207, 16, 32297, 32962, 32876, 32682, 32723, 2376, 62, 4082, 32571, 32460, 207, 17, 32769, 32460, 207, 16, 17, 32963, 33064, 32274, 3036, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80et_ter\ud83d\ude80^\ud83d\ude80ra_ter\ud83d\ude80^\ud83d\ude80hed_ter\ud83d\ude80^\ud83d\ude80ron_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120side_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80/_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120area_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def area_tetrahedron ( side_length ) : \n    area = ( ( side_length ** 2 ) * ( side_length + 1 ) * ( side_length + 2 ) ) / 12 \n    \n    return area \n\n"}
{"prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n", "task_id": "Mbpp/743", "test": "\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 22538, 62, 1031, 32082, 32509, 32113, 284, 292, 32500, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32416, 32682, 32723, 291, 33384, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 32963, 33064, 32989, 32682, 32239, 32573, 32878, 284, 292, 32716, 33307, 32718, 32549, 32759, 33291, 33011, 291, 33097, 32214, 33447, 32343, 33447, 32571, 32468, 32573, 32878, 284, 292, 32716, 33307, 32718, 33097, 32549, 32759, 33291, 33011, 291, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120rotate_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def rotate_right ( lst , n ) : \n    n = n % len ( lst ) \n    \n    return lst [ - n : ] + lst [ : - n ] \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n", "task_id": "Mbpp/744", "test": "\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 11373, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 683, 32753, 32485, 32463, 32412, 32601, 1371, 32866, 32492, 33347, 33144, 33313, 33403, 32355, 32413, 32660, 32723, 1371, 33397, 32164, 32059, 244, 393, 33250, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80none_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120any_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_none ( tup ) : \n    return any ( x is None for x in tup ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n", "task_id": "Mbpp/745", "test": "\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2987, 21240, 62, 1946, 62, 13324, 1043, 32082, 32509, 32113, 1328, 6487, 32500, 32113, 1223, 6487, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 1181, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 1328, 6487, 33048, 32032, 32682, 32723, 1223, 6487, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 2987, 21240, 33095, 33105, 32963, 32077, 32174, 32723, 20408, 32763, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 33132, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 32866, 33160, 32104, 207, 15, 33313, 33101, 32856, 32873, 32682, 32723, 1181, 33384, 32763, 33383, 32281, 1097, 32895, 32465, 32664, 20408, 33047, 32924, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 2987, 21240, 32717, 32260, 32963, 33255, 32134, 33067, 32486, 33067, 33403, 33234, 32742, 32095, 33227, 2987, 21240, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 1181, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isible_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80by_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80its_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isible_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120digit_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isible_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80break_statement_py\ud83d\ude80break_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120div_ter\ud83d\ude80^\ud83d\ude80isible_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def divisible_by_digits ( startnum , endnum ) : \n    result = [ ] \n    \n    for num in range ( startnum , endnum + 1 ) : \n        divisible = True \n        \n        for digit in str ( num ) : \n            if int ( digit ) == 0 or num % int ( digit ) != 0 : \n                divisible = False \n                \n                break \n            \n        \n        if divisible : \n            result . append ( num ) \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n", "task_id": "Mbpp/748", "test": "\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 6075, 62, 10438, 62, 776, 2255, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33033, 15207, 32023, 32963, 32734, 32226, 32799, 32723, 6075, 938, 62, 4786, 33095, 33105, 32963, 32077, 32174, 32723, 1555, 32059, 252, 32034, 33234, 32742, 32095, 32904, 33383, 32358, 33202, 32061, 1555, 33207, 317, 22441, 32895, 32465, 33047, 32924, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 6075, 938, 62, 4786, 33095, 33105, 32963, 33067, 32486, 33234, 32742, 32095, 33227, 6075, 938, 62, 4786, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1228, 32128, 32059, 1555, 32963, 32734, 32226, 32799, 32723, 6075, 938, 62, 4786, 32717, 32260, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 1228, 32128, 33033, 440, 440, 32023, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 33170, 33383, 32358, 33202, 32061, 1228, 33207, 12207, 32895, 32465, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capital_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sp_ter\ud83d\ude80^\ud83d\ude80aces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capital_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80next_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capital_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80next_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capital_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80next_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120capital_ter\ud83d\ude80^\ud83d\ude80ize_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80next_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120strip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def capital_words_spaces ( s ) : \n    result = \"\" \n    \n    capitalize_next = True \n    \n    for char in s : \n        if char . isupper ( ) : \n            capitalize_next = True \n            \n        \n        if capitalize_next : \n            result += char \n            capitalize_next = False \n            \n        else : \n            result += \" \" \n        \n    \n    return result . strip ( ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n", "task_id": "Mbpp/749", "test": "\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3724, 62, 14015, 278, 62, 25822, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32111, 33104, 33343, 5436, 62, 577, 62, 569, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32674, 32825, 32644, 33098, 32034, 33064, 33170, 33383, 32281, 1097, 32895, 32465, 32664, 252, 33047, 32924, 33067, 33403, 33277, 33192, 12180, 3419, 33064, 32274, 252, 33067, 32345, 33067, 33403, 33064, 33170, 33383, 32281, 24442, 32895, 32465, 32664, 284, 292, 33048, 32776, 33124, 33343, 2119, 32878, 5436, 62, 577, 62, 569, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80numer_ter\ud83d\ude80^\ud83d\ude80ic_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80strings_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80try_statement_py\ud83d\ude80try_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80except_clause_py\ud83d\ude80except_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120Value_ter\ud83d\ude80^\ud83d\ude80Error_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120convert_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80to_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sort_numeric_strings ( lst ) : \n    def convert_to_int ( s ) : \n        try : \n            return int ( s ) \n        except ValueError : \n            return s \n        \n    \n    return sorted ( lst , key = convert_to_int ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n", "task_id": "Mbpp/750", "test": "\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 957, 62, 83, 14563, 32082, 32509, 32113, 284, 292, 32500, 32113, 244, 393, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32723, 284, 292, 32571, 32059, 244, 393, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def add_tuple ( lst , tup ) : \n    return lst + tup \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n", "task_id": "Mbpp/751", "test": "\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 1513, 62, 247, 373, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 291, 32040, 32460, 207, 17, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 32571, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 32732, 32682, 33065, 207, 17, 32297, 32059, 460, 32571, 32460, 207, 17, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 2104, 32866, 32441, 32601, 291, 33313, 32691, 32856, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 2104, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 1327, 32866, 32441, 32601, 291, 33313, 32691, 32856, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33152, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 1327, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80he_ter\ud83d\ude80^\ud83d\ude80ap_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_min_heap ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 ) : \n        left = 2 * i + 1 \n        \n        right = 2 * i + 2 \n        \n        if left < n and arr [ i ] > arr [ left ] : \n            return False \n        \n        if right < n and arr [ i ] > arr [ right ] : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n", "task_id": "Mbpp/752", "test": "\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 29769, 656, 292, 13845, 62, 6487, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33334, 207, 15, 33067, 32064, 32366, 32090, 33231, 32601, 291, 32866, 33160, 32104, 207, 16, 33313, 32184, 33064, 33334, 207, 16, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 245, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 270, 32460, 207, 16, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 17, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 258, 32416, 32682, 32723, 245, 32571, 32059, 270, 32963, 32734, 32226, 32799, 32723, 245, 32059, 270, 32963, 32734, 32226, 32799, 32723, 270, 32059, 258, 32963, 33067, 33403, 33064, 32274, 270, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120jac_ter\ud83d\ude80^\ud83d\ude80ob_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80hal_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def jacobsthal_num ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        a = 0 \n        \n        b = 1 \n        \n        for i in range ( 2 , n + 1 ) : \n            c = a + b \n            \n            a = b \n            \n            b = c \n            \n        \n        return b \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n", "task_id": "Mbpp/753", "test": "\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1344, 62, 74, 32082, 32509, 32113, 244, 393, 873, 62, 2493, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 24442, 62, 2493, 32763, 33383, 32281, 24442, 32895, 32465, 32664, 244, 393, 873, 62, 2493, 33048, 32776, 33124, 33343, 2119, 32671, 33012, 32789, 33169, 1371, 32329, 32346, 32900, 32573, 32878, 1371, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33403, 33047, 32924, 32963, 33064, 32943, 32573, 32878, 24442, 62, 2493, 32716, 33307, 32718, 33097, 32818, 528, 32214, 33447, 32343, 33447, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80keyword_argument_py\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120key_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80value_py\ud83d\ude80lambda_py\ud83d\ude80lambda_ter\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80lambda_parameters_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sorted_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def min_k ( tuples_list , k ) : \n    sorted_list = sorted ( tuples_list , key = lambda x : x [ 1 ] ) \n    \n    return sorted_list [ : k ] \n\n"}
{"prompt": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n", "task_id": "Mbpp/754", "test": "\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 7815, 62, 3531, 62, 2493, 32082, 32509, 32113, 284, 16, 32500, 32113, 284, 17, 32500, 32113, 284, 18, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3053, 62, 22291, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 16, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32721, 32573, 32878, 284, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 284, 17, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32691, 32856, 32721, 32573, 32878, 284, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 32878, 284, 18, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 3053, 62, 22291, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 284, 16, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3053, 62, 22291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120extract_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120common_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def extract_index_list ( l1 , l2 , l3 ) : \n    common_elements = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        if l1 [ i ] == l2 [ i ] and l1 [ i ] == l3 [ i ] : \n            common_elements . append ( l1 [ i ] ) \n        \n    \n    return common_elements \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n", "task_id": "Mbpp/755", "test": "\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1856, 62, 5612, 370, 32082, 32509, 32113, 5744, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 5744, 33047, 32924, 32866, 32441, 32104, 207, 17, 33313, 32420, 32762, 32184, 33064, 33216, 33144, 33067, 32486, 32734, 32226, 32799, 32723, 19702, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1856, 62, 5612, 370, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 1181, 32059, 5744, 32034, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 32441, 32601, 19702, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1856, 62, 5612, 370, 32059, 19702, 32963, 32734, 32226, 32799, 32723, 19702, 32059, 1181, 32963, 33067, 32064, 32366, 32090, 32394, 32037, 32892, 32601, 1181, 32866, 32441, 32601, 1856, 62, 5612, 370, 33313, 32691, 32856, 32601, 1181, 32866, 32091, 32601, 19702, 33313, 32184, 32734, 32226, 32799, 32723, 1856, 62, 5612, 370, 32059, 1181, 32963, 33067, 32486, 33067, 33403, 33064, 33360, 32436, 1856, 62, 5612, 370, 32749, 33393, 32601, 1856, 62, 5612, 370, 32866, 32091, 33132, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 33313, 32681, 32308, 33144, 32093, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120smallest_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80conditional_expression_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120second_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80est_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def second_smallest ( numbers ) : \n    if len ( numbers ) < 2 : \n        return None \n    \n    smallest = float ( 'inf' ) \n    \n    second_smallest = float ( 'inf' ) \n    \n    for num in numbers : \n        if num < smallest : \n            second_smallest = smallest \n            \n            smallest = num \n            \n        elif num < second_smallest and num != smallest : \n            second_smallest = num \n            \n        \n    \n    return second_smallest if second_smallest != float ( 'inf' ) else None \n\n"}
{"prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n", "task_id": "Mbpp/757", "test": "\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 248, 4641, 62, 79, 4125, 32082, 32509, 32113, 2649, 62, 2493, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 2649, 62, 2493, 33047, 32924, 33047, 32924, 32034, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 32723, 460, 32571, 32460, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 2649, 62, 2493, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 2649, 62, 2493, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 33160, 32721, 32573, 33278, 32573, 32878, 2649, 62, 2493, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 32718, 33097, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80re_ter\ud83d\ude80^\ud83d\ude80verse_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80airs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_reverse_pairs ( string_list ) : \n    count = 0 \n    \n    for i in range ( len ( string_list ) ) : \n        for j in range ( i + 1 , len ( string_list ) ) : \n            if string_list [ i ] == string_list [ j ] [ : : - 1 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n", "task_id": "Mbpp/758", "test": "\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4718, 62, 1580, 27062, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 1096, 2493, 32059, 284, 292, 32034, 32734, 32226, 32799, 32723, 30534, 62, 1580, 2493, 32763, 33383, 32281, 30534, 32895, 32465, 32664, 1096, 2493, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 30534, 62, 1580, 2493, 32866, 32689, 32601, 1228, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 1228, 32716, 33307, 32277, 30534, 62, 1580, 2493, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 1228, 32716, 33307, 32277, 30534, 62, 1580, 2493, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def unique_sublists ( lst ) : \n    result = { } \n    \n    for sublist in lst : \n        tuple_sublist = tuple ( sublist ) \n        \n        if tuple_sublist in result : \n            result [ tuple_sublist ] += 1 \n        else : \n            result [ tuple_sublist ] = 1 \n            \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n", "task_id": "Mbpp/759", "test": "\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 10221, 3096, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32674, 32825, 32644, 33098, 32034, 32734, 32226, 32799, 32723, 1181, 32763, 33383, 32281, 9472, 32895, 32465, 32664, 252, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32224, 651, 4677, 32023, 32866, 32689, 32601, 252, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 4361, 32763, 33383, 32358, 33202, 32061, 252, 33207, 9818, 32895, 32465, 33034, 651, 4677, 32023, 33047, 32924, 32963, 33234, 32742, 32095, 32394, 32037, 32892, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 4361, 33047, 32924, 32866, 32091, 32104, 207, 17, 33313, 33101, 32856, 33132, 33383, 32281, 10405, 32895, 32465, 32540, 32573, 32878, 4361, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 33047, 32924, 32866, 32091, 32104, 207, 17, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 32486, 33064, 33182, 33105, 33067, 33403, 33277, 33192, 12180, 3419, 33064, 33167, 32260, 33067, 32345, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80dec_ter\ud83d\ude80^\ud83d\ude80imal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80try_statement_py\ud83d\ude80try_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80.'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120parts_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80except_clause_py\ud83d\ude80except_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120Value_ter\ud83d\ude80^\ud83d\ude80Error_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_decimal ( s ) : \n    try : \n        num = float ( s ) \n        \n        if '.' in s : \n            parts = s . split ( '.' ) \n            \n            if len ( parts ) != 2 or len ( parts [ 1 ] ) != 2 : \n                return False \n            \n        \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n", "task_id": "Mbpp/760", "test": "\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4718, 62, 4471, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 33064, 33442, 33132, 33383, 32281, 10405, 32895, 32465, 33340, 33383, 32281, 841, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32866, 33160, 32104, 207, 16, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80Element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def unique_Element ( lst ) : \n    return len ( set ( lst ) ) == 1 \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n", "task_id": "Mbpp/762", "test": "\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 13468, 7675, 62, 7675, 32082, 32509, 32113, 2472, 62, 7675, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 2472, 62, 7675, 32866, 32689, 32234, 32425, 32400, 207, 19, 32860, 32400, 207, 21, 32860, 32400, 207, 24, 32860, 32400, 207, 16, 16, 33257, 32444, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32064, 32366, 32090, 33231, 32601, 2472, 62, 7675, 32866, 33160, 32104, 207, 17, 33313, 32184, 33064, 33182, 33105, 33067, 32064, 32984, 33283, 32034, 33064, 33167, 32260, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80month_ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude806_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude809_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120month_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80number_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_monthnumber_number ( month_number ) : \n    if month_number in [ 4 , 6 , 9 , 11 ] : \n        return True \n    elif month_number == 2 : \n        return True \n    else : \n        return False \n    \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n", "task_id": "Mbpp/763", "test": "\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 1513, 62, 8002, 32082, 32509, 32113, 5369, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 5369, 33207, 3724, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 1344, 62, 8002, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 651, 7799, 6, 32023, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1009, 32763, 33383, 32281, 3095, 32895, 32465, 32032, 32682, 32239, 32573, 32878, 5369, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33291, 32468, 32573, 32878, 5369, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1009, 32866, 32685, 32601, 528, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1344, 62, 8002, 32763, 33383, 32281, 1344, 32895, 32465, 32664, 1344, 62, 8002, 33048, 32664, 1009, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1344, 62, 8002, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sort_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120abs_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120min_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_min_diff ( arr , k ) : \n    arr . sort ( ) \n    min_diff = float ( 'inf' ) \n    \n    for i in range ( len ( arr ) - 1 ) : \n        diff = abs ( arr [ i ] - arr [ i + 1 ] ) \n        \n        if diff <= k : \n            min_diff = min ( min_diff , diff ) \n            \n        \n    \n    return min_diff \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n", "task_id": "Mbpp/764", "test": "\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1594, 62, 10609, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 1555, 32059, 252, 32034, 33234, 32742, 32095, 32904, 33383, 32358, 33202, 32061, 1555, 33207, 317, 13324, 260, 32895, 32465, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120number_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80ctr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80dig_ter\ud83d\ude80^\ud83d\ude80it_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def number_ctr ( s ) : \n    count = 0 \n    \n    for char in s : \n        if char . isdigit ( ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n", "task_id": "Mbpp/765", "test": "\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 5282, 547, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1181, 32460, 207, 16, 32963, 32669, 32466, 32088, 33105, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32358, 33202, 33038, 33383, 32281, 1401, 32895, 32465, 32664, 1181, 33047, 32924, 33207, 1683, 32895, 32465, 33034, 651, 15, 6, 32023, 33047, 32924, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33234, 32742, 32095, 33231, 32601, 1683, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 32274, 1181, 33067, 32486, 33067, 32486, 32734, 32852, 33329, 32723, 1181, 32128, 32460, 207, 16, 32963, 33067, 33403, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80pol_ter\ud83d\ude80^\ud83d\ude80ite_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_polite ( n ) : \n    count = 0 \n    \n    num = 1 \n    \n    while True : \n        if str ( num ) . count ( '0' ) == 0 : \n            count += 1 \n            if count == n : \n                return num \n            \n        \n        num += 1 \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n", "task_id": "Mbpp/766", "test": "\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 5689, 62, 3729, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33291, 32460, 207, 16, 33047, 32924, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32877, 33392, 33166, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32952, 33166, 32573, 32878, 284, 292, 32716, 33307, 32647, 32682, 32723, 460, 32571, 32460, 207, 16, 33447, 32343, 33447, 32328, 32045, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pair_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80wise_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pair_wise ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) - 1 ) : \n        result . append ( ( lst [ i ] , lst [ i + 1 ] ) ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n", "task_id": "Mbpp/767", "test": "\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 748, 62, 79, 4125, 62, 4241, 32082, 32509, 32113, 5744, 32500, 32113, 3393, 62, 1828, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 2815, 32146, 33050, 33341, 32747, 32963, 32077, 32174, 32723, 1181, 32059, 5744, 32034, 32734, 32226, 32799, 32723, 13549, 32416, 32682, 32723, 3393, 62, 1828, 33291, 32059, 1181, 32963, 33234, 32742, 32095, 33231, 32601, 13549, 32866, 32689, 32601, 2815, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32468, 32573, 32878, 2815, 32716, 33307, 32277, 13549, 33447, 32343, 33447, 32963, 33067, 32486, 33234, 32742, 32095, 33231, 32601, 1181, 32866, 32689, 32601, 2815, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32239, 32573, 32878, 2815, 32716, 33307, 32277, 1181, 33447, 32343, 33447, 32128, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32239, 32573, 32878, 2815, 32716, 33307, 32277, 1181, 33447, 32343, 33447, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120get_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80p_ter\ud83d\ude80^\ud83d\ude80airs_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80dictionary_py\ud83d\ude80{_ter\ud83d\ude80^\ud83d\ude80}_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120numbers_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120complement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120complement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120complement_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120seen_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def get_pairs_count ( numbers , target_sum ) : \n    count = 0 \n    \n    seen = { } \n    \n    for num in numbers : \n        complement = target_sum - num \n        \n        if complement in seen : \n            count += seen [ complement ] \n        \n        if num in seen : \n            seen [ num ] += 1 \n        else : \n            seen [ num ] = 1 \n            \n        \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n", "task_id": "Mbpp/769", "test": "\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 25164, 32082, 32509, 32113, 1517, 16, 32500, 32113, 1517, 17, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32059, 1517, 16, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 32494, 33205, 32601, 1517, 17, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 32077, 32174, 32723, 460, 32059, 1517, 17, 32034, 33234, 32742, 32095, 33231, 32601, 460, 32866, 32494, 33205, 32601, 1517, 16, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 460, 33047, 32924, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120Diff_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def Diff ( list1 , list2 ) : \n    result = [ ] \n    \n    for i in list1 : \n        if i not in list2 : \n            result . append ( i ) \n        \n    \n    for i in list2 : \n        if i not in list1 : \n            result . append ( i ) \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n", "task_id": "Mbpp/770", "test": "\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8792, 62, 6487, 62, 1828, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 33065, 207, 17, 32297, 32059, 291, 33048, 32286, 207, 17, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32416, 32682, 32723, 460, 32519, 32460, 207, 19, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80num_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80**_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def odd_num_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 4 \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n", "task_id": "Mbpp/771", "test": "\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 21335, 32082, 32509, 32113, 5756, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 10215, 33208, 32425, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 7791, 62, 1645, 29403, 33208, 32425, 32620, 651, 1497, 32023, 32860, 32620, 651, 3204, 32023, 32860, 32620, 651, 24448, 32023, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 15677, 62, 1645, 29403, 33208, 32425, 32620, 651, 25197, 32023, 32860, 32620, 651, 60, 6, 32023, 32860, 32620, 651, 10172, 32023, 33257, 32444, 32963, 32077, 32174, 32723, 1555, 32059, 5756, 32034, 33234, 32742, 32095, 33231, 32601, 1555, 32866, 32689, 32601, 7791, 62, 1645, 29403, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 10215, 33207, 13508, 32895, 32465, 32664, 1555, 33047, 32924, 32963, 33067, 32064, 32366, 32090, 33231, 32601, 1555, 32866, 32689, 32601, 15677, 62, 1645, 29403, 33313, 32184, 33234, 32742, 32095, 33359, 32655, 33011, 10215, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32734, 32226, 32799, 32723, 1861, 32763, 33383, 32358, 33202, 32061, 10215, 33207, 2434, 32895, 32465, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 33132, 33383, 32358, 33202, 32061, 7791, 62, 1645, 29403, 33207, 3750, 32895, 32465, 32664, 1861, 33047, 32924, 32866, 32091, 33132, 33383, 32358, 33202, 32061, 15677, 62, 1645, 29403, 33207, 3750, 32895, 32465, 32664, 1555, 33047, 32924, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 32486, 33067, 33403, 33064, 33442, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 10215, 33047, 32924, 32866, 33160, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80('_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80['_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80{'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80)'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80}'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120expression_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80not_operator_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120top_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pop_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120opening_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120top_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120closing_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80br_ter\ud83d\ude80^\ud83d\ude80ackets_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120stack_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_expression ( expression ) : \n    stack = [ ] \n    \n    opening_brackets = [ '(' , '[' , '{' ] \n    \n    closing_brackets = [ ')' , ']' , '}' ] \n    \n    for char in expression : \n        if char in opening_brackets : \n            stack . append ( char ) \n        elif char in closing_brackets : \n            if not stack : \n                return False \n            \n            top = stack . pop ( ) \n            \n            if opening_brackets . index ( top ) != closing_brackets . index ( char ) : \n                return False \n            \n        \n    \n    return len ( stack ) == 0 \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n", "task_id": "Mbpp/772", "test": "\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 4082, 32082, 32509, 32113, 252, 32500, 32113, 528, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3061, 32763, 33383, 32358, 33202, 32061, 252, 33207, 9818, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 28478, 62, 10438, 32176, 33320, 33031, 32361, 1726, 33403, 32244, 32413, 32660, 32723, 1726, 33397, 32164, 32059, 3061, 33250, 32055, 33075, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1726, 33047, 32924, 32866, 32091, 32601, 528, 33313, 32042, 32725, 32963, 33064, 33170, 33383, 32358, 33202, 32319, 651, 651, 32023, 33207, 6419, 32895, 32465, 32664, 28478, 62, 10438, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_comprehension_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_clause_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120word_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120join_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120filtered_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80words_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_length ( s , k ) : \n    words = s . split ( ) \n    \n    filtered_words = [ word for word in words if len ( word ) != k ] \n    \n    return ' ' . join ( filtered_words ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n", "task_id": "Mbpp/773", "test": "\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2317, 5096, 62, 1580, 2600, 32082, 32509, 32113, 2649, 32500, 32113, 1096, 2600, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1328, 62, 3531, 32763, 33383, 32358, 33202, 32061, 2649, 33207, 1273, 32895, 32465, 32664, 1096, 2600, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1328, 62, 3531, 32866, 33160, 33314, 32759, 33291, 33372, 207, 16, 33313, 32420, 32762, 32184, 33064, 33216, 33144, 33067, 32486, 32734, 32226, 32799, 32723, 1223, 62, 3531, 32416, 32682, 32723, 1328, 62, 3531, 32571, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 1096, 2600, 33047, 32924, 32963, 33064, 32388, 33392, 32786, 1096, 2600, 32952, 32786, 1328, 62, 3531, 32952, 32786, 1223, 62, 3531, 32328, 32045, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120occ_ter\ud83d\ude80^\ud83d\ude80urance_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80index_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def occurance_substring ( string , substring ) : \n    start_index = string . find ( substring ) \n    \n    if start_index == - 1 : \n        return None \n    \n    end_index = start_index + len ( substring ) \n    \n    return ( substring , start_index , end_index ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n", "task_id": "Mbpp/775", "test": "\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8792, 62, 3185, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33048, 32286, 207, 17, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32239, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def odd_position ( lst ) : \n    for i in range ( 1 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n", "task_id": "Mbpp/777", "test": "\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 1828, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 4718, 62, 22291, 32763, 33383, 32281, 841, 32895, 32465, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 2545, 62, 990, 62, 22291, 32460, 207, 15, 32963, 32077, 32174, 32723, 3688, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32601, 3688, 32866, 32494, 33205, 32601, 4718, 62, 22291, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 4718, 62, 22291, 33207, 957, 32895, 32465, 32664, 3688, 33047, 32924, 32963, 32734, 32852, 33329, 32723, 2545, 62, 990, 62, 22291, 32128, 32059, 3688, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 2545, 62, 990, 62, 22291, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120set_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80not_in_py\ud83d\ude80not_ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120unique_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120add_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120element_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80of_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80elements_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_sum ( lst ) : \n    unique_elements = set ( ) \n    \n    sum_of_elements = 0 \n    \n    for element in lst : \n        if element not in unique_elements : \n            unique_elements . add ( element ) \n            sum_of_elements += element \n        \n    \n    return sum_of_elements \n\n"}
{"prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n", "task_id": "Mbpp/778", "test": "\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2379, 62, 564, 12472, 488, 62, 67, 10521, 980, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32734, 32226, 32799, 32723, 1642, 62, 1580, 2493, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32601, 460, 32866, 33160, 32104, 207, 15, 33313, 33101, 32856, 32721, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 32866, 32091, 32721, 32573, 32878, 284, 292, 32716, 33307, 32647, 32682, 32723, 460, 33291, 32460, 207, 16, 33447, 32343, 33447, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1642, 62, 1580, 2493, 33207, 13508, 32895, 32465, 32540, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33047, 32924, 32963, 33067, 32064, 32984, 33283, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1642, 62, 1580, 2493, 33047, 32924, 32866, 33152, 32104, 207, 16, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 1642, 62, 1580, 2493, 33047, 32924, 32963, 33067, 32486, 32734, 32226, 32799, 32723, 1642, 62, 1580, 2493, 33208, 32425, 32191, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33257, 32444, 32963, 33067, 33403, 32486, 33067, 33403, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 1642, 62, 1580, 2493, 33047, 32924, 32866, 33152, 32104, 207, 16, 33313, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 1642, 62, 1580, 2493, 33047, 32924, 32963, 33067, 32486, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120pack_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80con_ter\ud83d\ude80^\ud83d\ude80secut_ter\ud83d\ude80^\ud83d\ude80ive_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80d_ter\ud83d\ude80^\ud83d\ude80uplic_ter\ud83d\ude80^\ud83d\ude80ates_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80or_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sub_ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def pack_consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    current_sublist = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            current_sublist . append ( lst [ i ] ) \n        else : \n            if len ( current_sublist ) > 1 : \n                result . append ( current_sublist ) \n            \n            current_sublist = [ lst [ i ] ] \n            \n        \n    \n    if len ( current_sublist ) > 1 : \n        result . append ( current_sublist ) \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n", "task_id": "Mbpp/780", "test": "\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1273, 62, 685, 4159, 715, 32082, 32509, 32113, 244, 393, 873, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 20325, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32032, 32682, 33065, 207, 16, 33459, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 873, 33047, 32924, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 2545, 16, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 2545, 17, 32460, 207, 15, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 244, 393, 873, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 32630, 32682, 32723, 460, 32748, 32962, 32876, 32682, 33065, 207, 16, 33459, 32059, 521, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2545, 16, 32128, 32468, 32573, 33278, 32573, 32878, 244, 393, 873, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32963, 32734, 32852, 33329, 32723, 2545, 17, 32128, 32468, 32573, 33278, 32573, 32878, 244, 393, 873, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32716, 33307, 33049, 207, 16, 33447, 32343, 33447, 32963, 33067, 32486, 33067, 33403, 32734, 33072, 33383, 32358, 33202, 32061, 20325, 33207, 13508, 32895, 32465, 32877, 33392, 32786, 2545, 16, 32952, 32786, 2545, 17, 32328, 32045, 33047, 32924, 32963, 33067, 33403, 33064, 32274, 20325, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120find_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80com_ter\ud83d\ude80^\ud83d\ude80bin_ter\ud83d\ude80^\ud83d\ude80ations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80<<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80<<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80les_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80tuple_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120combinations_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def find_combinations ( tuples ) : \n    combinations = [ ] \n    \n    for i in range ( 1 << len ( tuples ) ) : \n        sum1 = 0 \n        \n        sum2 = 0 \n        \n        for j in range ( len ( tuples ) ) : \n            if i & ( 1 << j ) : \n                sum1 += tuples [ j ] [ 0 ] \n                sum2 += tuples [ j ] [ 1 ] \n            \n        \n        combinations . append ( ( sum1 , sum2 ) ) \n    \n    return combinations \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"\n", "task_id": "Mbpp/781", "test": "\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 1108, 262, 710, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32286, 207, 16, 33048, 32032, 32682, 32723, 291, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 291, 33384, 32059, 460, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 32486, 33067, 33403, 33064, 33442, 32873, 32682, 32723, 1683, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80div_ter\ud83d\ude80^\ud83d\ude80is_ter\ud83d\ude80^\ud83d\ude80ors_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_divisors ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count % 2 == 0 \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n", "task_id": "Mbpp/782", "test": "\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 8792, 62, 4082, 62, 1828, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3212, 62, 1828, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 291, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 291, 33047, 32924, 32034, 32734, 32226, 32799, 32723, 1096, 2482, 62, 1828, 32460, 207, 15, 32963, 32077, 32174, 32723, 521, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 460, 33048, 32664, 291, 33047, 32924, 32034, 32734, 32852, 33329, 32723, 1096, 2482, 62, 1828, 32128, 32468, 32573, 32878, 5369, 32716, 33307, 32277, 521, 33447, 32343, 33447, 32963, 33234, 32742, 32095, 33231, 32873, 32682, 32897, 32876, 32682, 32732, 32682, 32723, 521, 33291, 32059, 460, 32571, 32460, 207, 16, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 3212, 62, 1828, 32128, 32059, 1096, 2482, 62, 1828, 32963, 33067, 32486, 33067, 33403, 33067, 33403, 33064, 32274, 3212, 62, 1828, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80length_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120j_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sub_ter\ud83d\ude80^\ud83d\ude80array_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120total_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def odd_length_sum ( arr ) : \n    total_sum = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        subarray_sum = 0 \n        \n        for j in range ( i , n ) : \n            subarray_sum += arr [ j ] \n            if ( j - i + 1 ) % 2 != 0 : \n                total_sum += subarray_sum \n            \n        \n    \n    return total_sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "task_id": "Mbpp/784", "test": "\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 273, 341, 62, 8591, 62, 16809, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1234, 62, 8065, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 8792, 62, 8065, 32460, 207, 16, 32963, 32077, 32174, 32723, 1181, 32059, 284, 292, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1234, 62, 8065, 33228, 32059, 1181, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32852, 33329, 32723, 8792, 62, 8065, 33228, 32059, 1181, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32989, 32682, 32723, 1234, 62, 8065, 32297, 32059, 8792, 62, 8065, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120m_ter\ud83d\ude80^\ud83d\ude80ul_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120odd_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def mul_even_odd ( lst ) : \n    even_product = 1 \n    \n    odd_product = 1 \n    \n    for num in lst : \n        if num % 2 == 0 : \n            even_product *= num \n        else : \n            odd_product *= num \n        \n    \n    return even_product * odd_product \n\n"}
{"prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n", "task_id": "Mbpp/785", "test": "\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 30534, 62, 2006, 62, 569, 32082, 32509, 32113, 30534, 62, 2006, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 30534, 62, 2006, 32468, 32573, 32878, 30534, 62, 2006, 32716, 33307, 32718, 32542, 207, 16, 33097, 32549, 32759, 33291, 33372, 207, 16, 32214, 33447, 32343, 33447, 32963, 32734, 32226, 32799, 32723, 30534, 62, 2006, 62, 2493, 32763, 33383, 32358, 33202, 32061, 30534, 62, 2006, 33207, 9818, 32895, 32465, 33034, 17279, 440, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 30534, 62, 569, 62, 2493, 32763, 33383, 32281, 1517, 32895, 32465, 33340, 33383, 32281, 3579, 32895, 32465, 32664, 1097, 33048, 32664, 30534, 62, 2006, 62, 2493, 33047, 32924, 33047, 32924, 32963, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 30534, 62, 569, 62, 2493, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120split_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120\",_ter\ud83d\ude80^\ud83d\ude80\u0120\"_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120map_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120int_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80str_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80int_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def tuple_str_int ( tuple_str ) : \n    tuple_str = tuple_str [ 1 : - 1 ] \n    \n    tuple_str_list = tuple_str . split ( \", \" ) \n    \n    tuple_int_list = list ( map ( int , tuple_str_list ) ) \n    \n    return tuple ( tuple_int_list ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n", "task_id": "Mbpp/786", "test": "\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1327, 62, 12079, 277, 32082, 32509, 32113, 5369, 32500, 32113, 879, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2104, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1327, 32763, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 32963, 32669, 32466, 33231, 32601, 2104, 32866, 32441, 32601, 1327, 33313, 32034, 32734, 32226, 32799, 32723, 5940, 32416, 32682, 32897, 32876, 32682, 32723, 2104, 32571, 32059, 1327, 32040, 32460, 207, 17, 32963, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 32685, 32601, 879, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1327, 32059, 5940, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 2104, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80insert_ter\ud83d\ude80^\ud83d\ude80ion_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120val_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def right_insertion ( arr , val ) : \n    left = 0 \n    \n    right = len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] <= val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n", "task_id": "Mbpp/787", "test": "\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2422, 62, 10108, 62, 14565, 32082, 32509, 32113, 2422, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 33132, 33383, 32281, 10405, 32895, 32465, 32664, 2422, 33047, 32924, 32866, 32441, 32104, 207, 18, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 2422, 32716, 33307, 33049, 207, 15, 33447, 32343, 33447, 32866, 32091, 32224, 651, 64, 6, 32023, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 2422, 32716, 33307, 32718, 32542, 207, 16, 33097, 32542, 207, 19, 32214, 33447, 32343, 33447, 32866, 32091, 32224, 651, 7890, 65, 6, 32023, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80match_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80slice_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude804_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80bb_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def text_match_three ( text ) : \n    if len ( text ) < 3 : \n        return False \n    \n    if text [ 0 ] != 'a' : \n        return False \n    \n    if text [ 1 : 4 ] != 'bbb' : \n        return False \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n", "task_id": "Mbpp/788", "test": "\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 756, 62, 83, 14563, 32082, 32509, 32113, 284, 292, 32500, 32113, 2649, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32032, 32682, 32723, 284, 292, 32571, 33208, 32425, 32089, 2649, 33257, 32444, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120new_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80t_ter\ud83d\ude80^\ud83d\ude80uple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120string_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def new_tuple ( lst , string ) : \n    return tuple ( lst + [ string ] ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n", "task_id": "Mbpp/790", "test": "\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1234, 62, 3185, 32082, 32509, 32113, 284, 292, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 33340, 33383, 32281, 10405, 32895, 32465, 32664, 284, 292, 33047, 32924, 33047, 32924, 32034, 33234, 32742, 32095, 32394, 32037, 32892, 32873, 32682, 32723, 460, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 32691, 32856, 32873, 32682, 32239, 32573, 32878, 284, 292, 32716, 33307, 32277, 460, 33447, 32343, 33447, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 33067, 33403, 33064, 33182, 33105, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120even_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80position_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def even_position ( lst ) : \n    for i in range ( len ( lst ) ) : \n        if i % 2 == 0 and lst [ i ] % 2 != 0 : \n            return False \n        \n    \n    return True \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n", "task_id": "Mbpp/791", "test": "\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 77, 11526, 32082, 32509, 32113, 244, 393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1228, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 2849, 32059, 244, 393, 32034, 33234, 32742, 32095, 32904, 33383, 32281, 317, 9670, 32895, 32465, 32664, 2849, 33048, 32664, 30534, 33047, 32924, 32420, 32762, 32184, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 33340, 33383, 32281, 4748, 62, 77, 11526, 32895, 32465, 32664, 2849, 33047, 32924, 33047, 32924, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 33072, 33383, 32358, 33202, 32061, 1228, 33207, 13508, 32895, 32465, 32664, 2849, 33047, 32924, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 33170, 33383, 32281, 30534, 32895, 32465, 32664, 1228, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80ested_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80instance_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80n_ter\ud83d\ude80^\ud83d\ude80ested_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120append_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120item_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120tuple_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_nested ( tup ) : \n    result = [ ] \n    \n    for item in tup : \n        if isinstance ( item , tuple ) : \n            result . append ( remove_nested ( item ) ) \n        else : \n            result . append ( item ) \n        \n    \n    return tuple ( result ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n", "task_id": "Mbpp/792", "test": "\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1683, 62, 2493, 32082, 32509, 32113, 11996, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1683, 32460, 207, 15, 32963, 32077, 32174, 32723, 284, 292, 32059, 11996, 32034, 32734, 32852, 33329, 32723, 1683, 32128, 32460, 207, 16, 32963, 33067, 33403, 33064, 32274, 1683, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120count_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def count_list ( lists ) : \n    count = 0 \n    \n    for lst in lists : \n        count += 1 \n    \n    return count \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n", "task_id": "Mbpp/793", "test": "\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1554, 32082, 32509, 32113, 5369, 32500, 32113, 3393, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2104, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 33301, 33383, 32281, 10405, 32895, 32465, 32664, 5369, 33047, 32924, 33291, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 1228, 32320, 32759, 33291, 33372, 207, 16, 32963, 32669, 32466, 33231, 32601, 2104, 32866, 32685, 32601, 1327, 33313, 32034, 32734, 32226, 32799, 32723, 5940, 32416, 32682, 32897, 32876, 32682, 32723, 2104, 32571, 32059, 1327, 32040, 32460, 207, 17, 32963, 33234, 32742, 32095, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 33160, 32601, 3393, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 1228, 32059, 5940, 32963, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 16, 32963, 33067, 32064, 32366, 32090, 33231, 32721, 32573, 32878, 5369, 32716, 33307, 32277, 5940, 33447, 32343, 33447, 32866, 32441, 32601, 3393, 33313, 32184, 32734, 32226, 32799, 32723, 2104, 32416, 32682, 32723, 5940, 32571, 32460, 207, 16, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1327, 32416, 32682, 32723, 5940, 33291, 32460, 207, 16, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 1228, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120last_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120len_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80unary_operator_py\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80argument_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80//_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80elif_clause_py\ud83d\ude80elif_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80subscript_py\ud83d\ude80value_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80subscript_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120target_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120right_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120mid_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120result_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def last ( arr , target ) : \n    left = 0 \n    \n    right = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            left = mid + 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n", "task_id": "Mbpp/794", "test": "\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2422, 62, 4779, 64, 62, 408, 65, 32082, 32509, 32113, 2422, 33233, 32346, 32346, 32034, 33064, 32204, 32037, 33301, 33383, 32358, 33202, 32061, 2422, 33207, 1328, 1994, 349, 32895, 32465, 33034, 651, 64, 6, 32023, 33047, 32924, 32691, 32763, 33383, 32358, 33202, 32061, 2422, 33207, 1223, 1994, 349, 32895, 32465, 33034, 651, 65, 6, 32023, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80start_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80end_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80boolean_operator_py\ud83d\ude80left_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120start_ter\ud83d\ude80^\ud83d\ude80sw_ter\ud83d\ude80^\ud83d\ude80ith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80a_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80and_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120text_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120end_ter\ud83d\ude80^\ud83d\ude80sw_ter\ud83d\ude80^\ud83d\ude80ith_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80b_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def text_starta_endb ( text ) : \n    return text . startswith ( 'a' ) and text . endswith ( 'b' ) \n\n"}
{"prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n", "task_id": "Mbpp/796", "test": "\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 967, 62, 1828, 32082, 32509, 32113, 15825, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 2545, 32895, 32465, 33340, 33383, 32358, 33202, 32061, 15825, 33207, 3029, 32895, 32465, 33047, 32924, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120return_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120dictionary_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120values_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def return_sum ( dictionary ) : \n    return sum ( dictionary . values ( ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n", "task_id": "Mbpp/797", "test": "\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2545, 62, 246, 62, 9956, 32082, 32509, 32113, 284, 32500, 32113, 427, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 460, 32763, 33383, 32281, 3160, 32895, 32465, 32664, 284, 33048, 32032, 32682, 32723, 427, 32571, 32460, 207, 16, 33047, 32924, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 460, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 2545, 32128, 32059, 460, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120range_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120r_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def sum_in_range ( l , r ) : \n    sum = 0 \n    \n    for i in range ( l , r + 1 ) : \n        if i % 2 != 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n", "task_id": "Mbpp/798", "test": "\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1070, 1828, 32082, 32509, 32113, 5369, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 2545, 32460, 207, 15, 32963, 32077, 32174, 32723, 1181, 32059, 5369, 32034, 32734, 32852, 33329, 32723, 2545, 32128, 32059, 1181, 32963, 33067, 33403, 33064, 32274, 2545, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120arr_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def _sum ( arr ) : \n    sum = 0 \n    \n    for num in arr : \n        sum += num \n    \n    return sum \n\n"}
{"prompt": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n", "task_id": "Mbpp/799", "test": "\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2104, 62, 7859, 387, 32082, 32509, 32113, 291, 32500, 32113, 263, 33233, 32346, 32346, 32034, 33064, 32989, 32682, 32897, 32876, 32682, 32897, 32876, 32682, 32723, 291, 33459, 32059, 263, 32748, 32460, 207, 15, 87, 14981, 14981, 32579, 32962, 32876, 32682, 32723, 291, 32572, 32962, 32876, 32682, 33065, 207, 18, 17, 33291, 32059, 263, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120left_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80rot_ter\ud83d\ude80^\ud83d\ude80ate_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80<<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80&_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80x_ter\ud83d\ude80^\ud83d\ude80FFFF_ter\ud83d\ude80^\ud83d\ude80FFFF_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80|_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80>>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80parenthesized_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80-_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120d_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def left_rotate ( n , d ) : \n    return ( ( n << d ) & 0xFFFFFFFF ) | ( n >> ( 32 - d ) ) \n\n"}
{"prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n", "task_id": "Mbpp/800", "test": "\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 4748, 62, 435, 62, 776, 2255, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32358, 33202, 32061, 252, 33207, 8394, 32895, 32465, 33034, 651, 651, 32023, 33048, 33034, 15355, 32023, 33047, 32924, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120remove_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80all_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sp_ter\ud83d\ude80^\ud83d\ude80aces_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120replace_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80\u0120'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120''_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def remove_all_spaces ( s ) : \n    return s . replace ( ' ' , '' ) \n\n"}
{"prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n", "task_id": "Mbpp/801", "test": "\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1719, 62, 14565, 62, 11162, 32082, 32509, 32113, 245, 32500, 32113, 270, 32500, 32113, 258, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 245, 32866, 33160, 32601, 270, 32866, 33160, 32601, 258, 33313, 32420, 32762, 32184, 33064, 33334, 207, 18, 33067, 32064, 32984, 33283, 32034, 33064, 33334, 207, 15, 33067, 33403, 32486, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120test_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80three_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80equal_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120a_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120b_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120c_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude803_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def test_three_equal ( a , b , c ) : \n    if a == b == c : \n        return 3 \n    else : \n        return 0 \n    \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"\n", "task_id": "Mbpp/803", "test": "\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 25592, 62, 19497, 32082, 32509, 32113, 291, 33233, 32346, 32346, 32034, 33234, 32742, 32095, 33231, 32601, 291, 32866, 32441, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 33167, 32260, 33067, 32486, 32734, 32226, 32799, 32723, 460, 32460, 207, 15, 32963, 32669, 32466, 33231, 32873, 32682, 32723, 460, 32297, 32059, 460, 32866, 32685, 32601, 291, 33313, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 460, 32297, 32059, 460, 32866, 33160, 32601, 291, 33313, 32420, 32762, 32184, 33064, 33182, 33105, 33067, 32486, 32734, 32852, 33329, 32723, 460, 32128, 32460, 207, 16, 32963, 33067, 33403, 33064, 33167, 32260, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80perfect_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80square_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80while_statement_py\ud83d\ude80while_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120n_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80true_py\ud83d\ude80True_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120i_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80false_py\ud83d\ude80False_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_perfect_square ( n ) : \n    if n < 0 : \n        return False \n    \n    i = 0 \n    \n    while i * i <= n : \n        if i * i == n : \n            return True \n        \n        i += 1 \n    \n    return False \n\n"}
{"prompt": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n", "task_id": "Mbpp/804", "test": "\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 317, 62, 8065, 62, 8591, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 1932, 32460, 207, 16, 32963, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 32734, 32852, 33329, 32723, 1932, 33228, 32059, 1181, 32963, 33067, 33403, 33064, 33442, 32873, 32682, 32723, 1932, 33384, 32460, 207, 17, 32866, 33160, 32104, 207, 15, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80product_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80even_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80*=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120product_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80==_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def is_product_even ( nums ) : \n    product = 1 \n    \n    for num in nums : \n        product *= num \n    \n    return product % 2 == 0 \n\n"}
{"prompt": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n", "task_id": "Mbpp/805", "test": "\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 1828, 62, 2493, 32082, 32509, 32113, 11996, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32763, 33383, 32281, 9472, 32895, 32465, 33034, 27001, 7799, 6, 32023, 33047, 32924, 32963, 32734, 32226, 32799, 32723, 3034, 62, 2493, 33208, 32425, 33257, 32444, 32963, 32077, 32174, 32723, 284, 292, 32059, 11996, 32034, 32734, 32226, 32799, 32723, 1642, 62, 1828, 32763, 33383, 32281, 2545, 32895, 32465, 32664, 284, 292, 33047, 32924, 32963, 33234, 32742, 32095, 33231, 32601, 1642, 62, 1828, 32866, 33152, 32601, 3034, 62, 1828, 33313, 32420, 32762, 32184, 32734, 32226, 32799, 32723, 3034, 62, 1828, 32059, 1642, 62, 1828, 32963, 32734, 32226, 32799, 32723, 3034, 62, 2493, 32059, 284, 292, 32963, 33067, 32486, 33067, 33403, 33064, 32274, 3034, 62, 2493, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120float_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80string_literal_py\ud83d\ude80\u0120'-_ter\ud83d\ude80^\ud83d\ude80inf_ter\ud83d\ude80^\ud83d\ude80'_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80list_py\ud83d\ude80[_ter\ud83d\ude80^\ud83d\ude80]_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120lists_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80>_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80sum_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120l_ter\ud83d\ude80^\ud83d\ude80st_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80list_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_sum_list ( lists ) : \n    max_sum = float ( '-inf' ) \n    \n    max_list = [ ] \n    \n    for lst in lists : \n        current_sum = sum ( lst ) \n        \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n            max_list = lst \n            \n        \n    \n    return max_list \n\n"}
{"prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n", "task_id": "Mbpp/806", "test": "\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 3034, 62, 5608, 62, 22441, 5875, 32082, 32509, 32113, 252, 33233, 32346, 32346, 32034, 32734, 32226, 32799, 32723, 3034, 62, 5608, 32460, 207, 15, 32963, 32734, 32226, 32799, 32723, 1642, 62, 5608, 32460, 207, 15, 32963, 32077, 32174, 32723, 1555, 32059, 252, 32034, 33234, 32742, 32095, 32904, 33383, 32358, 33202, 32061, 1555, 33207, 317, 22441, 32895, 32465, 33047, 32924, 32420, 32762, 32184, 32734, 32852, 33329, 32723, 1642, 62, 5608, 32128, 32460, 207, 16, 32963, 32734, 32226, 32799, 32723, 3034, 62, 5608, 32763, 33383, 32281, 3034, 32895, 32465, 32664, 3034, 62, 5608, 33048, 32664, 1642, 62, 5608, 33047, 32924, 32963, 33067, 32064, 32984, 33283, 32034, 32734, 32226, 32799, 32723, 1642, 62, 5608, 32460, 207, 15, 32963, 33067, 33403, 32486, 33067, 33403, 33064, 32274, 3034, 62, 5608, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80case_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80attribute_py\ud83d\ude80object_py\ud83d\ude80identifier_py\ud83d\ude80\u0120char_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80._ter\ud83d\ude80^\ud83d\ude80attribute_py\ud83d\ude80identifier_py\ud83d\ude80\u0120is_ter\ud83d\ude80^\ud83d\ude80upper_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80augmented_assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80+=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80alternative_py\ud83d\ude80else_clause_py\ud83d\ude80else_ter\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80expression_statement_py\ud83d\ude80assignment_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120current_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80=_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120max_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80run_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def max_run_uppercase ( s ) : \n    max_run = 0 \n    \n    current_run = 0 \n    \n    for char in s : \n        if char . isupper ( ) : \n            current_run += 1 \n            max_run = max ( max_run , current_run ) \n            \n        else : \n            current_run = 0 \n            \n        \n    \n    return max_run \n\n"}
{"prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n", "task_id": "Mbpp/807", "test": "\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 1019, 62, 16809, 32082, 32509, 32113, 1181, 82, 33233, 32346, 32346, 32034, 32077, 32174, 32723, 1181, 32059, 1181, 82, 32034, 33234, 32742, 32095, 33231, 32873, 32682, 32723, 1181, 33384, 32460, 207, 17, 32866, 32091, 32104, 207, 15, 33313, 32420, 32762, 32184, 33064, 32274, 1181, 33067, 32486, 33067, 33403, 33064, 33216, 33144, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120first_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80odd_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80for_statement_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80s_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80if_statement_py\ud83d\ude80if_ter\ud83d\ude80^\ud83d\ude80condition_py\ud83d\ude80comparison_operator_py\ud83d\ude80binary_operator_py\ud83d\ude80left_py\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operator_py\ud83d\ude80%_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80!=_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80integer_py\ud83d\ude80\u0120_ter\ud83d\ude80^\ud83d\ude800_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80consequence_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120num_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80none_py\ud83d\ude80None_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def first_odd ( nums ) : \n    for num in nums : \n        if num % 2 != 0 : \n            return num \n        \n    \n    return None \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n", "task_id": "Mbpp/808", "test": "\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 42, 32082, 32509, 32113, 244, 393, 32500, 32113, 528, 33233, 32346, 32346, 32034, 33064, 33442, 32601, 528, 32866, 32689, 32601, 244, 393, 33313, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80K_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120k_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude80up_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_K ( tup , k ) : \n    return k in tup \n\n"}
{"prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n", "task_id": "Mbpp/809", "test": "\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True\n", "outrulelist": [32024, 32098, 33094, 33104, 33343, 2332, 62, 5612, 250, 32082, 32509, 32113, 244, 16, 32500, 32113, 244, 17, 33233, 32346, 32346, 32034, 33064, 33170, 33383, 32281, 519, 32753, 32485, 32463, 32412, 32601, 1371, 32866, 32441, 32601, 320, 33313, 33403, 32355, 32413, 32660, 32911, 33221, 1371, 32377, 33221, 320, 32541, 33397, 32164, 32763, 33383, 32281, 18345, 32895, 32465, 32664, 244, 16, 33048, 32664, 244, 17, 33047, 32924, 33250, 33151, 32087, 33067, 33403, 32383], "parseroot": "python\ud83d\ude80module_py\ud83d\ude80function_definition_py\ud83d\ude80def_ter\ud83d\ude80^\ud83d\ude80name_py\ud83d\ude80identifier_py\ud83d\ude80\u0120check_ter\ud83d\ude80^\ud83d\ude80__ter\ud83d\ude80^\ud83d\ude80small_ter\ud83d\ude80^\ud83d\ude80er_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80parameters_py\ud83d\ude80parameters_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80:_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80block_py\ud83d\ude80return_statement_py\ud83d\ude80return_ter\ud83d\ude80^\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120all_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80generator_expression_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80body_py\ud83d\ude80comparison_operator_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80operators_py\ud83d\ude80<_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80for_in_clause_py\ud83d\ude80for_ter\ud83d\ude80^\ud83d\ude80left_py\ud83d\ude80pattern_list_py\ud83d\ude80identifier_py\ud83d\ude80\u0120x_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120y_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80in_ter\ud83d\ude80^\ud83d\ude80right_py\ud83d\ude80call_py\ud83d\ude80function_py\ud83d\ude80identifier_py\ud83d\ude80\u0120zip_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80arguments_py\ud83d\ude80argument_list_py\ud83d\ude80(_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude801_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80,_ter\ud83d\ude80^\ud83d\ude80identifier_py\ud83d\ude80\u0120t_ter\ud83d\ude80^\ud83d\ude802_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80)_ter\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80^\ud83d\ude80", "parsecode": "def check_smaller ( t1 , t2 ) : \n    return all ( x < y for x , y in zip ( t1 , t2 ) ) \n\n"}
