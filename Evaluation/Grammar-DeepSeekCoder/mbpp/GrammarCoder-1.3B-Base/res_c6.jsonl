{"task_id": "Mbpp/2", "solution": "def similar_elements ( list1 , list2 ) : \n    set1 = set ( list1 ) \n    \n    set2 = set ( list2 ) \n    \n    return set1 . intersection ( set2 ) \n\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime ( n ) : \n    if n <= 1 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest ( nums , n ) : \n    heap = [ ] \n    \n    for num in nums : \n        heapq . heappush ( heap , num ) \n        if len ( heap ) > n : \n            heapq . heappop ( heap ) \n        \n    \n    return sorted ( heap , reverse = True ) \n\n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos ( x : int , y : int ) -> bool : \n    return bin ( x ) . count ( '1' ) != bin ( y ) . count ( '1' ) \n\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long ( s ) : \n    words = s . split ( ) \n    \n    long_words = [ word for word in words if len ( word ) >= 4 ] \n    \n    return set ( long_words ) \n\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums ( nums ) : \n    return [ num ** 2 for num in nums ] \n\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations ( s ) : \n    for i in range ( 1 , len ( s ) ) : \n        if s == s [ i : ] + s [ : i ] : \n            return i \n        \n    \n    return len ( s ) \n\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ ( s , c ) : \n    first_index = s . find ( c ) \n    \n    last_index = s . rfind ( c ) \n    \n    if first_index == - 1 or last_index == - 1 : \n        return s \n    elif first_index == last_index : \n        return s [ first_index + 1 : last_index ] \n    else : \n        return s [ : first_index ] + s [ last_index + 1 : ] \n    \n\n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix ( matrix ) : \n    sorted_matrix = sorted ( matrix , key = lambda x : sum ( x ) ) \n    \n    return sorted_matrix \n\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume ( base , height , depth ) : \n    return base * height * depth \n\n"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore ( text : str ) -> bool : \n    return \"_\" in text and all ( c . islower ( ) for c in text ) \n\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter ( side_length : int ) -> int : \n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side_length (int): The length of the side of the square.\n\n    Returns:\n        int: The perimeter of the square.\n    \"\"\" \n    return 4 * side_length \n\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars ( s1 : str , s2 : str ) -> str : \n    s1 = list ( s1 ) \n    \n    s2 = list ( s2 ) \n    \n    for char in s2 : \n        while char in s1 : \n            s1 . remove ( char ) \n        \n    \n    return '' . join ( s1 ) \n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate ( arr ) : \n    seen = set ( ) \n    \n    for num in arr : \n        if num in seen : \n            return True \n        \n        seen . add ( num ) \n    \n    return False \n\n"}
{"task_id": "Mbpp/20", "solution": "def is_woodall ( num ) : \n    woodall_numbers = [ 200 , 100 , 50 , 20 , 10 , 5 , 2 , 1 ] \n    \n    for number in woodall_numbers : \n        if num % number == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/56", "solution": "def check ( num ) : \n    rev_num = int ( str ( num ) [ : : - 1 ] ) \n    \n    return num - 2 * rev_num == 1 \n\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num ( nums ) : \n    nums = sorted ( nums , reverse = True ) \n    \n    result = '' . join ( map ( str , nums ) ) \n    \n    return int ( result ) \n\n"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs ( x : int , y : int ) -> bool : \n    return x * y < 0 \n\n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal ( n ) : \n    return n * ( 3 * n - 2 ) \n\n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        for j in range ( i + 1 , len ( s ) + 1 ) : \n            if sum ( int ( digit ) for digit in s [ i : j ] ) == len ( s [ i : j ] ) : \n                count += 1 \n            \n        \n    \n    return count \n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num ( nums ) : \n    smallest = nums [ 0 ] \n    \n    for num in nums : \n        if num < smallest : \n            smallest = num \n            \n        \n    \n    return smallest \n\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference ( tuples ) : \n    max_diff = 0 \n    \n    for i in range ( len ( tuples ) ) : \n        for j in range ( i + 1 , len ( tuples ) ) : \n            diff = abs ( tuples [ i ] [ 0 ] - tuples [ j ] [ 0 ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks ( lst ) : \n    return sorted ( lst , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum ( lst ) : \n    total = 0 \n    \n    for i in lst : \n        if type ( i ) == list : \n            total += recursive_list_sum ( i ) \n        else : \n            total += i \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count ( lst ) : \n    count = 0 \n    \n    for num in lst : \n        if num > 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/67", "solution": "def bell_number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic ( arr ) : \n    increasing = decreasing = True \n    \n    \n    for i in range ( len ( arr ) - 1 ) : \n        if arr [ i ] < arr [ i + 1 ] : \n            decreasing = False \n            \n        \n        if arr [ i ] > arr [ i + 1 ] : \n            increasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist ( lst , sublist ) : \n    for i in range ( len ( lst ) - len ( sublist ) + 1 ) : \n        if lst [ i : i + len ( sublist ) ] == sublist : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal ( tuples ) : \n    length = len ( tuples [ 0 ] ) \n    \n    for t in tuples : \n        if len ( t ) != length : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort ( arr ) : \n    gap = len ( arr ) \n    \n    swapped = True \n    \n    while gap > 1 or swapped : \n        gap = max ( 1 , int ( gap / 1.2 ) ) \n        \n        swapped = False \n        \n        for i in range ( len ( arr ) - gap ) : \n            if arr [ i ] > arr [ i + gap ] : \n                arr [ i ] , arr [ i + gap ] = arr [ i + gap ] , arr [ i ] \n                \n                swapped = True \n                \n            \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square ( n ) : \n    i = 0 \n    \n    while i * i <= n : \n        j = 0 \n        \n        while j * j <= n : \n            if i * i - j * j == n : \n                return True \n            \n            j += 1 \n        \n        i += 1 \n    \n    return False \n\n"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns ( patterns , string ) : \n    pattern_dict = { } \n    \n    for i , pattern in enumerate ( patterns ) : \n        if pattern not in pattern_dict : \n            pattern_dict [ pattern ] = string [ i ] \n            \n        elif pattern_dict [ pattern ] != string [ i ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples ( tuples_list , k ) : \n    return [ tup for tup in tuples_list if all ( element % k == 0 for element in tup ) ] \n\n"}
{"task_id": "Mbpp/77", "solution": "def is_Diff ( num ) : \n    num_str = str ( num ) \n    \n    sum_of_digits = 0 \n    \n    for i in range ( len ( num_str ) ) : \n        sum_of_digits += int ( num_str [ i ] ) \n    \n    return sum_of_digits % 11 == 0 \n\n"}
{"task_id": "Mbpp/79", "solution": "def word_len ( word ) : \n    return len ( word ) % 2 != 0 \n\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number ( n ) : \n    return n * ( n + 1 ) * ( n + 2 ) * ( n + 3 ) // 2 \n\n"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere ( radius : float ) -> float : \n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n    \n    Returns:\n    float: The volume of the sphere.\n    \"\"\" \n    return ( 4 / 3 ) * 3.141592653589793 * ( radius ** 3 ) \n\n"}
{"task_id": "Mbpp/84", "solution": "def sequence ( n ) : \n    if n == 1 : \n        return 1 \n    elif n == 2 : \n        return 1 \n    else : \n        return sequence ( n - 1 ) + sequence ( n - 2 ) \n    \n\n"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere ( radius : float ) -> float : \n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n    \n    Returns:\n    float: The surface area of the sphere.\n    \"\"\" \n    return 4 * 3.141592653589793 * radius ** 2 \n\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number ( n ) : \n    return 3 * n ** 2 - 3 * n + 1 \n\n"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three ( d1 , d2 , d3 ) : \n    merged_dict = { ** d1 , ** d2 , ** d3 } \n    \n    return merged_dict \n\n"}
{"task_id": "Mbpp/88", "solution": "def freq_count ( lst ) : \n    freq_dict = { } \n    \n    for i in lst : \n        if i in freq_dict : \n            freq_dict [ i ] += 1 \n        else : \n            freq_dict [ i ] = 1 \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num ( n ) : \n    if n == 0 : \n        return 0 \n    \n    for i in range ( n - 1 , - 1 , - 1 ) : \n        if sum ( map ( int , str ( i ) ) ) == sum ( map ( int , str ( i - 1 ) ) ) : \n            return i \n        \n    \n\n"}
{"task_id": "Mbpp/90", "solution": "def len_log ( lst ) : \n    max_len = 0 \n    \n    for word in lst : \n        if len ( word ) > max_len : \n            max_len = len ( word ) \n            \n        \n    \n    return max_len \n\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring ( string_list , substring ) : \n    for string in string_list : \n        if substring in string : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating ( n ) : \n    n = str ( n ) \n    \n    return len ( n ) > 1 and len ( set ( n ) ) == 2 \n\n"}
{"task_id": "Mbpp/93", "solution": "def power ( a , b ) : \n    if b == 0 : \n        return 1 \n    elif b < 0 : \n        return 1 / power ( a , - b ) \n    elif b % 2 == 0 : \n        return power ( a * a , b // 2 ) \n    else : \n        return a * power ( a , b - 1 ) \n    \n\n"}
{"task_id": "Mbpp/94", "solution": "def index_minimum ( lst ) : \n    return min ( lst , key = lambda x : x [ 1 ] ) [ 0 ] \n\n"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length ( lst ) : \n    min_length = float ( 'inf' ) \n    \n    for sublist in lst : \n        if len ( sublist ) < min_length : \n            min_length = len ( sublist ) \n            \n        \n    \n    return min_length \n\n"}
{"task_id": "Mbpp/96", "solution": "def divisor ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists ( lists ) : \n    frequency_dict = { } \n    \n    for sublist in lists : \n        for item in sublist : \n            if item in frequency_dict : \n                frequency_dict [ item ] += 1 \n            else : \n                frequency_dict [ item ] = 1 \n                \n            \n        \n    \n    return frequency_dict \n\n"}
{"task_id": "Mbpp/98", "solution": "def multiply_num ( lst ) : \n    result = 1 \n    \n    for num in lst : \n        result *= num \n    \n    return result / len ( lst ) \n\n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary ( decimal : int ) -> str : \n    binary = \"\" \n    \n    while decimal > 0 : \n        binary = str ( decimal % 2 ) + binary \n        \n        decimal = decimal // 2 \n        \n    \n    return binary \n\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome ( n ) : \n    n = n + 1 \n    \n    while not is_palindrome ( n ) : \n        n += 1 \n    \n    return n \n"}
{"task_id": "Mbpp/101", "solution": "def kth_element ( arr , k ) : \n    return arr [ k - 1 ] \n\n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel ( snake_str : str ) -> str : \n    components = snake_str . split ( '_' ) \n    \n    camel_str = '' . join ( x . title ( ) for x in components ) \n    \n    return camel_str \n\n"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num ( n , m ) : \n    eulerian_num_matrix = [ [ 0 for _ in range ( m + 1 ) ] for _ in range ( n + 1 ) ] \n    \n    for i in range ( n + 1 ) : \n        eulerian_num_matrix [ i ] [ 0 ] = i \n        \n    \n    for j in range ( 1 , m + 1 ) : \n        eulerian_num_matrix [ 0 ] [ j ] = 1 \n        \n    \n    for i in range ( 1 , n + 1 ) : \n        for j in range ( 1 , m + 1 ) : \n            eulerian_num_matrix [ i ] [ j ] = ( eulerian_num_matrix [ i - 1 ] [ j ] + eulerian_num_matrix [ i ] [ j - 1 ] ) % 1000000007 \n            \n        \n    \n    return eulerian_num_matrix [ n ] [ m ] \n\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/105", "solution": "def count ( lst ) : \n    return lst . count ( True ) \n\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists ( list1 , list2 ) : \n    return list1 + list2 \n\n"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list ( list1 , list2 , list3 ) : \n    merged_list = list1 + list2 + list3 \n    \n    merged_list . sort ( ) \n    return merged_list \n\n"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent ( s , n ) : \n    s = list ( s ) \n    \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] == '1' : \n            rotated_s = s [ i : ] + s [ : i ] \n            \n            rotated_s = '' . join ( rotated_s ) \n            \n            rotated_s = int ( rotated_s , 2 ) \n            \n            if rotated_s % 2 != 0 : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists ( nested_lists ) : \n    common_elements = set ( nested_lists [ 0 ] ) \n    \n    for lst in nested_lists [ 1 : ] : \n        common_elements = common_elements . intersection ( lst ) \n        \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer ( s ) : \n    try : \n        int ( s ) \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int ( tup ) : \n    result = 0 \n    \n    for i in tup : \n        result = result * 10 + i \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list ( s ) : \n    return s . split ( ) \n\n"}
{"task_id": "Mbpp/119", "solution": "def search ( nums ) : \n    left = 0 \n    \n    right = len ( nums ) - 1 \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if mid % 2 == 1 : \n            mid -= 1 \n        \n        if nums [ mid ] == nums [ mid + 1 ] : \n            left = mid + 2 \n            \n        else : \n            right = mid \n            \n        \n    \n    return nums [ left ] \n\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple ( lst ) : \n    max_product = 0 \n    \n    for pair in lst : \n        product = pair [ 0 ] * pair [ 1 ] \n        \n        if product > max_product : \n            max_product = product \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum ( n ) : \n    amicable_numbers = [ ] \n    \n    for i in range ( 1 , n + 1 ) : \n        divisors_sum = sum ( divisors ( i ) ) \n        \n        if i != divisors_sum and divisors_sum <= n and sum ( divisors ( divisors_sum ) ) == i : \n            amicable_numbers . append ( i ) \n        \n    \n    return sum ( amicable_numbers ) \n"}
{"task_id": "Mbpp/124", "solution": "def angle_complex ( z : complex ) -> float : \n    \"\"\"\n    Get the angle of a complex number.\n\n    Args:\n        z (complex): The complex number.\n\n    Returns:\n        float: The angle of the complex number.\n    \"\"\" \n    return math . acos ( z . real / math . sqrt ( z . real ** 2 + z . imag ** 2 ) ) \n\n"}
{"task_id": "Mbpp/125", "solution": "def find_length ( s ) : \n    max_length = 0 \n    \n    count_0 = 0 \n    \n    count_1 = 0 \n    \n    for i in s : \n        if i == '0' : \n            count_0 += 1 \n        else : \n            count_1 += 1 \n        \n        max_length = max ( max_length , count_0 - count_1 ) \n        \n    \n    return max_length \n\n"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors ( a , b ) : \n    sum_divisors = 0 \n    \n    for i in range ( 1 , min ( a , b ) + 1 ) : \n        if a % i == 0 and b % i == 0 : \n            sum_divisors += i \n        \n    \n    return sum_divisors \n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int ( x : int , y : int ) -> int : \n    return x * y \n\n"}
{"task_id": "Mbpp/128", "solution": "def long_words ( n , words ) : \n    return [ word for word in words . split ( ) if len ( word ) > n ] \n\n"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test ( matrix ) : \n    n = len ( matrix ) \n    \n    magic_sum = sum ( matrix [ 0 ] ) \n    \n    for i in range ( n ) : \n        if sum ( matrix [ i ] ) != magic_sum or sum ( [ matrix [ j ] [ i ] for j in range ( n ) ] ) != magic_sum : \n            return False \n        \n    \n    if sum ( [ matrix [ i ] [ i ] for i in range ( n ) ] ) != magic_sum or sum ( [ matrix [ i ] [ n - i - 1 ] for i in range ( n ) ] ) != magic_sum : \n        return False \n    \n    return True \n\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences ( lst ) : \n    freq = { } \n    \n    for i in lst : \n        if i in freq : \n            freq [ i ] += 1 \n        else : \n            freq [ i ] = 1 \n            \n        \n    \n    return max ( freq , key = freq . get ) \n\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels ( s : str ) -> str : \n    vowels = \"aeiouAEIOU\" \n    \n    s = list ( s ) \n    \n    left , right = 0 , len ( s ) - 1 \n    \n    while left < right : \n        if s [ left ] not in vowels : \n            left += 1 \n        elif s [ right ] not in vowels : \n            right -= 1 \n        else : \n            s [ left ] , s [ right ] = s [ right ] , s [ left ] \n            \n            left += 1 \n            right -= 1 \n        \n    \n    return \"\" . join ( s ) \n\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string ( tup ) : \n    return '' . join ( tup ) \n\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum ( nums ) : \n    total = 0 \n    \n    for num in nums : \n        if num < 0 : \n            total += num \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num ( n ) : \n    return n * ( 2 * n - 1 ) \n\n"}
{"task_id": "Mbpp/137", "solution": "def zero_count ( arr ) : \n    zero_count = 0 \n    \n    non_zero_count = 0 \n    \n    for num in arr : \n        if num == 0 : \n            zero_count += 1 \n        else : \n            non_zero_count += 1 \n        \n    \n    return zero_count / non_zero_count \n\n"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two ( n : int ) -> bool : \n    power = 0 \n    \n    while 2 ** power <= n : \n        power += 1 \n    \n    return power - 1 <= n \n\n"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference ( radius : float ) -> float : \n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\" \n    return 2 * 3.14159 * radius \n\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly ( lst ) : \n    result = set ( ) \n    \n    for sublist in lst : \n        for item in sublist : \n            result . add ( item ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort ( arr ) : \n    for i in range ( len ( arr ) - 1 , 0 , - 1 ) : \n        max_index = 0 \n        \n        for j in range ( 1 , i + 1 ) : \n            if arr [ j ] > arr [ max_index ] : \n                max_index = j \n                \n            \n        \n        arr [ i ] , arr [ max_index ] = arr [ max_index ] , arr [ i ] \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair ( list1 , list2 , list3 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] and list2 [ i ] == list3 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff ( arr ) : \n    max_diff = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            diff = abs ( arr [ i ] - arr [ j ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/160", "solution": "def find_solution ( a , b , n ) : \n    for x in range ( 1 , n + 1 ) : \n        for y in range ( 1 , n + 1 ) : \n            if a * x + b * y == n : \n                return ( x , y ) \n            \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements ( list1 , list2 ) : \n    return [ i for i in list1 if i not in list2 ] \n\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series ( n ) : \n    sum = 0 \n    \n    for i in range ( n // 2 ) : \n        sum += n - 2 * i \n    \n    return sum \n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position ( s ) : \n    s = s . lower ( ) \n    \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] == s [ ord ( s [ i ] ) - 96 ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair ( nums ) : \n    even_count = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            if ( nums [ i ] ^ nums [ j ] ) % 2 == 0 : \n                even_count += 1 \n            \n        \n    \n    return even_count \n\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2 ( n ) : \n    if n <= 0 : \n        return 1 \n    \n    power = 1 \n    \n    while power < n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/168", "solution": "def frequency ( lst , num ) : \n    return lst . count ( num ) \n\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list ( lst , start , end ) : \n    sum = 0 \n    \n    for i in range ( start , end + 1 ) : \n        sum += lst [ i ] \n    \n    return sum \n\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon ( side_length ) : \n    return 5 * side_length \n\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) - 2 ) : \n        if s [ i : i + 3 ] == \"std\" : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/222", "solution": "def check_type ( tup ) : \n    return all ( type ( i ) == type ( tup [ 0 ] ) for i in tup ) \n\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority ( arr , n , x ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        if arr [ i ] == x : \n            count += 1 \n        \n    \n    return count > n // 2 \n\n"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits ( n ) : \n    count = 0 \n    \n    while n : \n        count += n & 1 \n        n >>= 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string ( s ) : \n    return '' . join ( [ s [ i ] for i in range ( len ( s ) ) if i % 2 == 0 ] ) \n\n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three ( a , b , c ) : \n    return min ( a , b , c ) \n\n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank ( s , char ) : \n    return s . replace ( \" \" , char ) \n\n"}
{"task_id": "Mbpp/232", "solution": "def largest_nnum ( lst , n ) : \n    lst = sorted ( lst , reverse = True ) \n    \n    return lst [ : n ] \n\n"}
{"task_id": "Mbpp/233", "solution": "def lateralsurface_cylinder ( r : float , h : float ) -> float : \n    \"\"\"\n    Finds the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\" \n    return 2 * 3.14 * r * ( r + h ) \n\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube ( side_length ) : \n    return side_length ** 3 \n\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number ( n ) : \n    return n | ( n >> 1 ) \n\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences ( lst ) : \n    result = { } \n    \n    for item in lst : \n        if item in result : \n            result [ item ] += 1 \n        else : \n            result [ item ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        for j in range ( i + 1 , len ( s ) + 1 ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences ( m , n ) : \n    dp = [ [ 0 for _ in range ( m + 1 ) ] for _ in range ( n + 1 ) ] \n    \n    for i in range ( 1 , m + 1 ) : \n        dp [ 1 ] [ i ] = 1 \n        \n    \n    for i in range ( 2 , n + 1 ) : \n        for j in range ( 1 , m + 1 ) : \n            dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] \n            \n            if j >= 2 * dp [ i - 1 ] [ j - 1 ] : \n                dp [ i ] [ j ] += dp [ i - 1 ] [ j - 1 ] \n            \n        \n    \n    return dp [ n ] [ m ] \n\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list ( list1 , list2 ) : \n    list1 [ - 1 ] = list2 [ - 1 ] \n    \n    return list1 \n\n"}
{"task_id": "Mbpp/242", "solution": "def count_charac ( string ) : \n    return len ( string ) \n\n"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square ( n ) : \n    root = n ** 0.5 \n    \n    if root . is_integer ( ) : \n        return ( root + 1 ) ** 2 \n    else : \n        return ( root + 1 ) ** 2 \n    \n\n"}
{"task_id": "Mbpp/245", "solution": "def max_sum_bitonic_sequence ( arr ) : \n    n = len ( arr ) \n    \n    inc = [ 0 ] * n \n    \n    dec = [ 0 ] * n \n    \n    inc [ 0 ] = arr [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        inc [ i ] = max ( inc [ i - 1 ] + arr [ i ] , arr [ i ] ) \n        \n    \n    dec [ n - 1 ] = arr [ n - 1 ] \n    \n    for i in range ( n - 2 , - 1 , - 1 ) : \n        dec [ i ] = max ( dec [ i + 1 ] + arr [ i ] , arr [ i ] ) \n        \n    \n    max_sum = 0 \n    \n    for i in range ( n ) : \n        max_sum = max ( max_sum , inc [ i ] + dec [ i ] - arr [ i ] ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/247", "solution": "def lps ( s ) : \n    n = len ( s ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    for i in range ( n ) : \n        dp [ i ] [ i ] = 1 \n        \n    \n    for i in range ( n - 1 , - 1 , - 1 ) : \n        for j in range ( i + 1 , n ) : \n            if s [ i ] == s [ j ] : \n                dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 \n                \n            else : \n                dp [ i ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ j - 1 ] ) \n                \n            \n        \n    \n    return dp [ 0 ] [ n - 1 ] \n"}
{"task_id": "Mbpp/250", "solution": "def count_X ( tup , x ) : \n    return tup . count ( x ) \n\n"}
{"task_id": "Mbpp/251", "solution": "def insert_element ( lst , element ) : \n    return [ element + i for i in lst ] \n\n"}
{"task_id": "Mbpp/252", "solution": "def convert ( complex_number ) : \n    r = abs ( complex_number ) \n    \n    theta = math . atan2 ( complex_number . imag , complex_number . real ) \n    \n    return ( r , theta ) \n\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer ( lst ) : \n    count = 0 \n    \n    for i in lst : \n        if isinstance ( i , int ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors ( colors , n ) : \n    result = [ ] \n    \n    for i in range ( 1 << len ( colors ) ) : \n        combination = [ ] \n        \n        for j in range ( len ( colors ) ) : \n            if i & ( 1 << j ) : \n                combination . append ( colors [ j ] ) \n            \n        \n        if len ( combination ) == n : \n            result . append ( tuple ( combination ) ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums ( n ) : \n    if n < 2 : \n        return 0 \n    \n    primes = [ True ] * n \n    \n    primes [ 0 ] = primes [ 1 ] = False \n    \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if primes [ i ] : \n            for j in range ( i * i , n , i ) : \n                primes [ j ] = False \n                \n            \n        \n    \n    return sum ( primes ) \n\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers ( a , b ) : \n    return ( b , a ) \n\n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements ( t1 , t2 ) : \n    res = [ ] \n    \n    for i in range ( len ( t1 ) ) : \n        res . append ( ( max ( t1 [ i ] ) , max ( t2 [ i ] ) ) ) \n    \n    return tuple ( res ) \n\n"}
{"task_id": "Mbpp/260", "solution": "def newman_prime ( n ) : \n    primes = [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97 ] \n    \n    if n <= len ( primes ) : \n        return primes [ n - 1 ] \n    else : \n        i = 1 \n        \n        while len ( primes ) < n : \n            is_prime = True \n            \n            for j in range ( 2 , int ( i ** 0.5 ) + 1 ) : \n                if i % j == 0 : \n                    is_prime = False \n                    \n                    break \n                \n            \n            if is_prime : \n                primes . append ( i ) \n            \n            i += 1 \n        \n        return primes [ n - 1 ] \n    \n\n"}
{"task_id": "Mbpp/261", "solution": "def division_elements ( t1 , t2 ) : \n    return tuple ( a / b for a , b in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts ( lst , L ) : \n    first_part = lst [ : L ] \n    \n    second_part = lst [ L : ] \n    \n    return ( first_part , second_part ) \n\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age ( age ) : \n    if age <= 2 : \n        return age * 10 \n    else : \n        return 2 * 10 + ( age - 2 ) * 7 \n    \n\n"}
{"task_id": "Mbpp/265", "solution": "def list_split ( lst , n ) : \n    result = [ ] \n    \n    for i in range ( 0 , len ( lst ) , n ) : \n        result . append ( lst [ i : i + n ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube ( side_length ) : \n    return 6 * side_length ** 2 \n\n"}
{"task_id": "Mbpp/267", "solution": "def square_Sum ( n ) : \n    return sum ( 2 * i - 1 for i in range ( 1 , n + 1 ) ) \n\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num ( n ) : \n    star_num = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        star_num += i * 2 \n    \n    return star_num \n\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value ( char ) : \n    return ord ( char ) \n\n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index ( lst ) : \n    sum = 0 \n    \n    for i in range ( len ( lst ) ) : \n        if i % 2 == 0 and lst [ i ] % 2 == 0 : \n            sum += lst [ i ] \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        fifth_power = even_num ** 5 \n        \n        sum += fifth_power \n    \n    return sum \n\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract ( tuples ) : \n    return [ t [ 1 ] for t in tuples ] \n\n"}
{"task_id": "Mbpp/273", "solution": "def substract_elements ( t1 , t2 ) : \n    return tuple ( a - b for a , b in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 0 , n + 1 , 2 ) : \n        sum += binomial_coeff ( n , i ) \n    \n    return sum \n"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder ( radius : float , height : float ) -> float : \n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The volume of the cylinder.\n    \"\"\" \n    return math . pi * radius ** 2 * height \n\n"}
{"task_id": "Mbpp/277", "solution": "def dict_filter ( d , n ) : \n    return { k : v for k , v in d . items ( ) if v >= n } \n\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements ( tup ) : \n    count = 0 \n    \n    for i in tup : \n        if isinstance ( i , tuple ) : \n            break \n        \n        count += 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal ( n ) : \n    return 3 * n * n - 3 * n \n\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search ( arr , element ) : \n    for i in range ( len ( arr ) ) : \n        if arr [ i ] == element : \n            return ( True , i ) \n        \n    \n    return ( False , - 1 ) \n\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique ( lst ) : \n    return len ( lst ) == len ( set ( lst ) ) \n\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list ( list1 , list2 ) : \n    return [ x - y for x , y in zip ( list1 , list2 ) ] \n\n"}
{"task_id": "Mbpp/283", "solution": "def validate ( num ) : \n    num_str = str ( num ) \n    \n    for digit in num_str : \n        if num_str . count ( digit ) > int ( digit ) : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/284", "solution": "def check_element ( lst , element ) : \n    return all ( item == element for item in lst ) \n\n"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three ( text : str ) -> bool : \n    count_a = text . count ( 'a' ) \n    \n    count_b = text . count ( 'b' ) \n    \n    return count_a >= 1 and count_b >= 2 \n\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated ( arr , k , n ) : \n    max_sum = 0 \n    \n    for i in range ( n ) : \n        curr_sum = 0 \n        \n        for j in range ( i , i + n ) : \n            curr_sum += arr [ j % n ] \n            max_sum = max ( max_sum , curr_sum ) \n            \n        \n    \n    return max_sum \n"}
{"task_id": "Mbpp/287", "solution": "def square_Sum ( n ) : \n    return sum ( 2 * i ** 2 for i in range ( 1 , n + 1 ) ) \n\n"}
{"task_id": "Mbpp/290", "solution": "def max_length ( lst ) : \n    max_len = 0 \n    \n    max_list = [ ] \n    \n    for sublist in lst : \n        if len ( sublist ) > max_len : \n            max_len = len ( sublist ) \n            \n            max_list = sublist \n            \n        \n    \n    return max_len , max_list \n\n"}
{"task_id": "Mbpp/292", "solution": "def find ( a , b ) : \n    return a // b \n\n"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle ( a , b ) : \n    c = ( a ** 2 + b ** 2 ) ** 0.5 \n    \n    return c \n\n"}
{"task_id": "Mbpp/294", "solution": "def max_val ( lst ) : \n    max_val = lst [ 0 ] \n    \n    for i in lst : \n        if i > max_val : \n            max_val = i \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count ( arr ) : \n    n = len ( arr ) \n    \n    inv_count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if arr [ i ] > arr [ j ] : \n                inv_count += 1 \n            \n        \n    \n    return inv_count \n\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list ( nested_list ) : \n    flat_list = [ ] \n    \n    for i in nested_list : \n        if isinstance ( i , list ) : \n            flat_list . extend ( flatten_list ( i ) ) \n        else : \n            flat_list . append ( i ) \n        \n    \n    return flat_list \n\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate ( tuples ) : \n    max_value = tuples [ 0 ] [ 1 ] \n    \n    max_key = tuples [ 0 ] [ 0 ] \n    \n    for i in range ( 1 , len ( tuples ) ) : \n        if tuples [ i ] [ 1 ] > max_value : \n            max_value = tuples [ i ] [ 1 ] \n            \n            max_key = tuples [ i ] [ 0 ] \n            \n        \n    \n    return max_key , max_value \n\n"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq ( n ) : \n    if n == 0 : \n        return 1 \n    \n    return count_binary_seq ( n - 1 ) + count_binary_seq ( n - 1 ) \n\n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth ( d ) : \n    if isinstance ( d , dict ) : \n        return 1 + max ( dict_depth ( v ) for v in d . values ( ) ) \n    else : \n        return 0 \n    \n\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp ( words ) : \n    result = [ ] \n    \n    for word in words : \n        if word . startswith ( 'p' ) : \n            result . append ( word ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq ( arr , k , i , n ) : \n    if i == n : \n        return 0 \n    \n    incl = 0 \n    \n    if k > i : \n        incl = arr [ i ] + max_sum_increasing_subseq ( arr , k , i + 1 , n ) \n        \n    \n    excl = max_sum_increasing_subseq ( arr , k , i + 1 , n ) \n    \n    return max ( incl , excl ) \n"}
{"task_id": "Mbpp/308", "solution": "def large_product ( list1 , list2 , n ) : \n    list1 = sorted ( list1 , reverse = True ) \n    \n    list2 = sorted ( list2 , reverse = True ) \n    \n    result = [ ] \n    \n    for i in list1 : \n        for j in list2 : \n            result . append ( i * j ) \n        \n    \n    result . sort ( reverse = True ) \n    return result [ : n ] \n\n"}
{"task_id": "Mbpp/309", "solution": "def maximum ( a , b ) : \n    if a > b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple ( s ) : \n    return tuple ( s ) \n\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit ( n ) : \n    return n | ( n - 1 ) \n\n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone ( radius : float , height : float ) -> float : \n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\" \n    return ( 1 / 3 ) * 3.141592653589793 * radius ** 2 * height \n\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2 ( n ) : \n    power = 1 \n    \n    while power * 2 <= n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas ( n ) : \n    if n == 0 : \n        return 2 \n    elif n == 1 : \n        return 1 \n    else : \n        return find_lucas ( n - 1 ) + find_lucas ( n - 2 ) \n    \n\n"}
{"task_id": "Mbpp/390", "solution": "def add_string ( lst , format_string ) : \n    return [ format_string . format ( i ) for i in lst ] \n\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary ( keys , values , depth ) : \n    result = [ ] \n    \n    for i in range ( len ( keys ) ) : \n        inner_dict = { } \n        \n        for j in range ( len ( values ) ) : \n            inner_dict [ values [ j ] ] = depth [ j ] \n            \n        \n        result . append ( { keys [ i ] : inner_dict } ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum ( n ) : \n    if n == 1 : \n        return 1 \n    \n    dp = [ 0 ] * ( n + 1 ) \n    \n    dp [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        dp [ i ] = max ( dp [ i // 2 ] + dp [ i // 3 ] + dp [ i // 4 ] + dp [ i // 5 ] , i ) \n        \n    \n    return dp [ n ] \n\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct ( tup ) : \n    return len ( tup ) == len ( set ( tup ) ) \n\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character ( s ) : \n    char_count = { } \n    \n    for char in s : \n        if char in char_count : \n            char_count [ char ] += 1 \n        else : \n            char_count [ char ] = 1 \n            \n        \n    \n    for char in s : \n        if char_count [ char ] == 1 : \n            return char \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers ( a , b , c ) : \n    numbers = [ a , b , c ] \n    \n    numbers . sort ( ) \n    return numbers [ 1 ] \n\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits ( lst ) : \n    result = [ ] \n    \n    for i in lst : \n        if isinstance ( i , int ) : \n            sum = 0 \n            \n            while i > 0 : \n                sum += i % 10 \n                i = i // 10 \n                \n            \n            result . append ( sum ) \n        elif isinstance ( i , str ) : \n            sum = 0 \n            \n            for j in i : \n                sum += ord ( j ) \n            \n            result . append ( sum ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/404", "solution": "def minimum ( a , b ) : \n    return min ( a , b ) \n\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex ( tuplex , element ) : \n    return element in tuplex \n\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity ( num ) : \n    return num % 2 != 0 \n\n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple ( lst ) : \n    min_product = float ( 'inf' ) \n    \n    for pair in lst : \n        product = pair [ 0 ] * pair [ 1 ] \n        \n        if product < min_product : \n            min_product = product \n            \n        \n    \n    return min_product \n\n"}
{"task_id": "Mbpp/410", "solution": "def min_val ( lst ) : \n    min_val = lst [ 0 ] \n    \n    for i in lst : \n        if i < min_val : \n            min_val = i \n            \n        \n    \n    return min_val \n\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd ( lst ) : \n    return [ i for i in lst if i % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element ( tuples_list , n ) : \n    return [ t [ n ] for t in tuples_list ] \n\n"}
{"task_id": "Mbpp/414", "solution": "def overlapping ( seq1 , seq2 ) : \n    return any ( x in seq2 for x in seq1 ) \n\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product ( nums ) : \n    max_product = float ( '-inf' ) \n    \n    max_num1 = float ( '-inf' ) \n    \n    max_num2 = float ( '-inf' ) \n    \n    for num in nums : \n        if num > max_num1 : \n            max_num2 = max_num1 \n            \n            max_num1 = num \n            \n        elif num > max_num2 : \n            max_num2 = num \n            \n        \n    \n    return ( max_num1 , max_num2 ) \n\n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max ( lst ) : \n    max_len = 0 \n    \n    max_list = [ ] \n    \n    for i in lst : \n        if len ( i ) > max_len : \n            max_len = len ( i ) \n            \n            max_list = i \n            \n        \n    \n    return max_list \n\n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum ( nums ) : \n    rounded_nums = [ round ( num ) for num in nums ] \n    \n    total_sum = sum ( rounded_nums ) \n    \n    length_of_list = len ( nums ) \n    \n    result = total_sum * length_of_list \n    \n    return result \n"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += ( 2 * i ) ** 3 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple ( tup ) : \n    return '-' . join ( tup ) \n\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i ** 3 \n    \n    return sum / n \n\n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear ( tup ) : \n    return [ s [ - 1 ] for s in tup ] \n\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list ( lst , element ) : \n    count = 0 \n    \n    for sublist in lst : \n        if element in sublist : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers ( numbers ) : \n    return [ num for num in numbers if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format ( date : str ) -> str : \n    date_parts = date . split ( '-' ) \n    \n    formatted_date = '-' . join ( reversed ( date_parts ) ) \n    \n    return formatted_date \n\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort ( arr ) : \n    gap = len ( arr ) // 2 \n    \n    while gap > 0 : \n        for i in range ( gap , len ( arr ) ) : \n            temp = arr [ i ] \n            \n            j = i \n            \n            while j >= gap and arr [ j - gap ] > temp : \n                arr [ j ] = arr [ j - gap ] \n                \n                j -= gap \n            \n            arr [ j ] = temp \n            \n        \n        gap //= 2 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples ( t1 , t2 ) : \n    return tuple ( x & y for x , y in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix ( a , b , c ) : \n    d = b ** 2 - 4 * a * c \n    \n    if d < 0 : \n        return - 1 \n    elif d == 0 : \n        return - b / ( 2 * a ) \n    else : \n        return ( - b + d ** 0.5 ) / ( 2 * a ) \n    \n\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium ( a : int , b : int , c : int ) -> float : \n    median = ( a + b + c ) / 2 \n    \n    return median \n\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater ( arr , num ) : \n    for i in arr : \n        if i > num : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/435", "solution": "def last_Digit ( n ) : \n    return n % 10 \n\n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos ( lst ) : \n    return [ i for i in lst if i < 0 ] \n\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd ( s ) : \n    return '' . join ( [ c for c in s if ord ( c ) % 2 == 0 ] ) \n\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single ( nums ) : \n    result = 0 \n    \n    for num in nums : \n        result = result * 10 + num \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position ( sentence ) : \n    words = sentence . split ( ) \n    \n    for i , word in enumerate ( words ) : \n        if word == \"seriously\" : \n            return ( i , i + 1 , \"seriously\" ) \n        elif word == \"unfortunately\" : \n            return ( i , i + 1 , \"unfortunately\" ) \n        elif word == \"clearly\" : \n            return ( i , i + 1 , \"clearly\" ) \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube ( size ) : \n    return 6 * ( size * size * size ) \n\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication ( tup1 , tup2 ) : \n    result = [ ] \n    \n    for i in range ( len ( tup1 ) ) : \n        tup1_element = tup1 [ i ] \n        \n        tup2_element = tup2 [ i ] \n        \n        tup1_element = tup1_element [ 0 ] * tup2_element [ 0 ] \n        \n        tup2_element = tup1_element [ 1 ] * tup2_element [ 1 ] \n        \n        result . append ( ( tup1_element , tup2_element ) ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence ( tup , lst ) : \n    count = 0 \n    \n    for i in lst : \n        count += tup . count ( i ) \n    \n    return count \n\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums ( nums ) : \n    return [ num ** 3 for num in nums ] \n\n"}
{"task_id": "Mbpp/448", "solution": "def cal_sum ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        return cal_sum ( n - 2 ) + cal_sum ( n - 1 ) \n    \n\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string ( lst , size ) : \n    return [ lst [ i ] for i in range ( len ( lst ) ) if len ( lst [ i ] ) == size ] \n\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces ( s ) : \n    return s . replace ( \" \" , \"\" ) \n\n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz ( text : str ) -> bool : \n    return 'z' in text \n\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number ( month_number ) : \n    if month_number in [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list ( string_list ) : \n    return [ s [ : : - 1 ] for s in string_list ] \n\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min ( lst ) : \n    min_len = len ( lst [ 0 ] ) \n    \n    min_lst = lst [ 0 ] \n    \n    for sublist in lst : \n        if len ( sublist ) < min_len : \n            min_len = len ( sublist ) \n            \n            min_lst = sublist \n            \n        \n    \n    return min_lst \n\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area ( length , width ) : \n    return length * width \n\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase ( s ) : \n    return '' . join ( [ c for c in s if not c . isupper ( ) ] ) \n\n"}
{"task_id": "Mbpp/460", "solution": "def Extract ( lst ) : \n    return [ sublist [ 0 ] for sublist in lst ] \n\n"}
{"task_id": "Mbpp/462", "solution": "def combinations_list ( lst ) : \n    result = [ [ ] ] \n    \n    for i in range ( len ( lst ) ) : \n        temp = [ ] \n        \n        for j in range ( len ( result ) ) : \n            temp . append ( result [ j ] + [ lst [ i ] ] ) \n        \n        result += temp \n    \n    return result \n\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product ( nums ) : \n    max_product = nums [ 0 ] \n    \n    min_product = nums [ 0 ] \n    \n    result = nums [ 0 ] \n    \n    for i in range ( 1 , len ( nums ) ) : \n        temp = max_product \n        \n        max_product = max ( nums [ i ] , max_product * nums [ i ] , min_product * nums [ i ] ) \n        \n        min_product = min ( nums [ i ] , temp * nums [ i ] , min_product * nums [ i ] ) \n        \n        result = max ( result , max_product ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty ( d ) : \n    return { k : v for k , v in d . items ( ) if v is not None } \n\n"}
{"task_id": "Mbpp/468", "solution": "def max_product ( nums ) : \n    n = len ( nums ) \n    \n    max_dp = [ 0 ] * n \n    \n    min_dp = [ 0 ] * n \n    \n    max_dp [ 0 ] = nums [ 0 ] \n    \n    min_dp [ 0 ] = nums [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        max_dp [ i ] = max ( max_dp [ i - 1 ] * nums [ i ] , min_dp [ i - 1 ] * nums [ i ] , nums [ i ] ) \n        \n        min_dp [ i ] = min ( max_dp [ i - 1 ] * nums [ i ] , min_dp [ i - 1 ] * nums [ i ] , nums [ i ] ) \n        \n    \n    return max ( max_dp ) \n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise ( tup ) : \n    return tuple ( tup [ i ] + tup [ i + 1 ] for i in range ( len ( tup ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder ( arr , n ) : \n    product = 1 \n    \n    for i in arr : \n        product = ( product * i ) % n \n        \n    \n    return product \n\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive ( nums ) : \n    nums = sorted ( nums ) \n    \n    for i in range ( len ( nums ) - 1 ) : \n        if nums [ i + 1 ] - nums [ i ] != 1 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection ( tup1 , tup2 ) : \n    set1 = set ( tup1 ) \n    \n    set2 = set ( tup2 ) \n    \n    intersection = set1 . intersection ( set2 ) \n    \n    return intersection \n\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char ( s , old_char , new_char ) : \n    return s . replace ( old_char , new_char ) \n\n"}
{"task_id": "Mbpp/475", "solution": "def sort_counter ( counter ) : \n    return sorted ( counter . items ( ) , key = lambda x : x [ 1 ] ) \n\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum ( arr ) : \n    return max ( arr ) + min ( arr ) \n\n"}
{"task_id": "Mbpp/477", "solution": "def is_lower ( s ) : \n    return s . lower ( ) \n\n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase ( s ) : \n    return '' . join ( [ c for c in s if not c . islower ( ) ] ) \n\n"}
{"task_id": "Mbpp/479", "solution": "def first_Digit ( n ) : \n    return int ( str ( n ) [ 0 ] ) \n\n"}
{"task_id": "Mbpp/554", "solution": "def Split ( nums ) : \n    return [ num for num in nums if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/555", "solution": "def difference ( n ) : \n    sum_of_cubes = sum ( [ i ** 3 for i in range ( 1 , n + 1 ) ] ) \n    \n    sum_of_numbers = sum ( [ i for i in range ( 1 , n + 1 ) ] ) \n    \n    return sum_of_cubes - sum_of_numbers \n\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair ( arr , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if ( arr [ i ] ^ arr [ j ] ) % 2 != 0 : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string ( s ) : \n    return '' . join ( [ c . lower ( ) if c . isupper ( ) else c . upper ( ) for c in s ] ) \n\n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums ( num1 , num2 ) : \n    distance = 0 \n    \n    for i in range ( len ( str ( num1 ) ) ) : \n        distance += abs ( int ( str ( num1 ) [ i ] ) - int ( str ( num2 ) [ i ] ) ) \n    \n    return distance \n\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum ( nums , k ) : \n    max_sum = float ( '-inf' ) \n    \n    current_sum = 0 \n    \n    for num in nums : \n        current_sum += num \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n        \n        if current_sum < 0 : \n            current_sum = 0 \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements ( t1 , t2 ) : \n    s1 = set ( t1 ) \n    \n    s2 = set ( t2 ) \n    \n    s3 = s1 . union ( s2 ) \n    \n    return sorted ( s3 ) \n\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length ( lst ) : \n    max_length = 0 \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n        \n    \n    return max_length \n"}
{"task_id": "Mbpp/563", "solution": "def extract_values ( s ) : \n    values = [ ] \n    \n    inside_quotes = False \n    \n    current_value = '' \n    \n    for char in s : \n        if char == '\"' : \n            inside_quotes = not inside_quotes \n            \n        elif char == ',' and not inside_quotes : \n            values . append ( current_value ) \n            current_value = '' \n            \n        else : \n            current_value += char \n        \n    \n    return values \n\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs ( arr , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if arr [ i ] != arr [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/565", "solution": "def split ( s ) : \n    return list ( s ) \n\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits ( n : int ) -> int : \n    sum = 0 \n    \n    while n > 0 : \n        sum += n % 10 \n        n = n // 10 \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/567", "solution": "def issort_list ( lst ) : \n    return all ( lst [ i ] <= lst [ i + 1 ] for i in range ( len ( lst ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list ( n ) : \n    return [ { } ] * n \n\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums ( nums ) : \n    unique_nums = [ ] \n    \n    for num in nums : \n        if num not in unique_nums : \n            unique_nums . append ( num ) \n        \n    \n    return unique_nums \n\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product ( lst ) : \n    unique_nums = set ( lst ) \n    \n    product = 1 \n    \n    for num in unique_nums : \n        product *= num \n    \n    return product \n\n"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array ( arr1 , arr2 ) : \n    for i in range ( len ( arr1 ) - len ( arr2 ) + 1 ) : \n        if arr1 [ i : i + len ( arr2 ) ] == arr2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial ( n ) : \n    if n < 0 : \n        return \"Invalid input\" \n    elif n == 0 : \n        return 1 \n    else : \n        factorial = 1 \n        \n        for i in range ( 1 , n + 1 ) : \n            factorial *= i \n        \n        return factorial % 10 \n    \n\n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists ( list1 , list2 , list3 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] ) \n        result . append ( list2 [ i ] ) \n        result . append ( list3 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar ( t1 , t2 ) : \n    set1 = set ( t1 ) \n    \n    set2 = set ( t2 ) \n    \n    diff1 = set1 . difference ( set2 ) \n    \n    diff2 = set2 . difference ( set1 ) \n    \n    return list ( diff1 ) + list ( diff2 ) \n\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even ( tup ) : \n    result = [ ] \n    \n    for i in tup : \n        if isinstance ( i , tuple ) : \n            result . append ( extract_even ( i ) ) \n        elif isinstance ( i , int ) and i % 2 == 0 : \n            result . append ( i ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/581", "solution": "def surface_Area ( base , height ) : \n    return 2 * ( base ** 2 ) + 2 * base * height + height ** 2 \n\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number ( n ) : \n    if n <= 1 : \n        return 1 \n    \n    catalan = [ 0 for i in range ( n + 1 ) ] \n    \n    catalan [ 0 ] = 1 \n    \n    catalan [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        catalan [ i ] = 0 \n        \n        for j in range ( i ) : \n            catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] \n            \n        \n    \n    return catalan [ n ] \n\n"}
{"task_id": "Mbpp/585", "solution": "def expensive_items ( dataset , n ) : \n    sorted_dataset = sorted ( dataset , key = lambda x : x [ 'price' ] , reverse = True ) \n    \n    return sorted_dataset [ : n ] \n\n"}
{"task_id": "Mbpp/586", "solution": "def split_Arr ( arr , n ) : \n    return arr [ n : ] + arr [ : n ] \n\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple ( lst ) : \n    return tuple ( lst ) \n\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff ( nums ) : \n    min_num = min ( nums ) \n    \n    max_num = max ( nums ) \n    \n    return max_num - min_num \n\n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares ( start , end ) : \n    squares = [ ] \n    \n    for i in range ( start , end + 1 ) : \n        if int ( i ** 0.5 ) ** 2 == i : \n            squares . append ( i ) \n        \n    \n    return squares \n\n"}
{"task_id": "Mbpp/590", "solution": "def polar_rect ( r , theta ) : \n    x = r * cos ( theta ) \n    \n    y = r * sin ( theta ) \n    \n    return ( ( x , y ) , ( - 2 + 2.4492935982947064e-16j , - 2 + 2.4492935982947064e-16j ) ) \n\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List ( lst ) : \n    lst [ 0 ] , lst [ - 1 ] = lst [ - 1 ] , lst [ 0 ] \n    \n    return lst \n\n"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product ( n ) : \n    sum = 0 \n    \n    for i in range ( n + 1 ) : \n        product = 1 \n        \n        for j in range ( i + 1 ) : \n            product *= ( n - j + 1 ) / j \n        \n        sum += product \n    \n    return sum \n\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip ( ip ) : \n    ip_list = ip . split ( \".\" ) \n    \n    result = \".\" . join ( [ str ( int ( i ) ) for i in ip_list ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd ( lst ) : \n    even_nums = [ num for num in lst if num % 2 == 0 ] \n    \n    odd_nums = [ num for num in lst if num % 2 != 0 ] \n    \n    if even_nums and odd_nums : \n        return even_nums [ 0 ] - odd_nums [ 0 ] \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/596", "solution": "def tuple_size ( t ) : \n    \"\"\"\n    This function takes a tuple as input and returns the size in bytes of the tuple.\n    \"\"\" \n    return sys . getsizeof ( t ) \n\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth ( A , B , k ) : \n    m , n = len ( A ) , len ( B ) \n    \n    if m > n : \n        return find_kth ( B , A , k ) \n    \n    if m == 0 : \n        return B [ k - 1 ] \n    \n    if k == 1 : \n        return min ( A [ 0 ] , B [ 0 ] ) \n    \n    pa = min ( k // 2 , m ) \n    \n    pb = k - pa \n    \n    if A [ pa - 1 ] < B [ pb - 1 ] : \n        return find_kth ( A [ pa : ] , B , pb ) \n    else : \n        return find_kth ( A , B [ pb : ] , pa ) \n    \n\n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number ( num ) : \n    num_str = str ( num ) \n    \n    num_len = len ( num_str ) \n    \n    sum = 0 \n    \n    for digit in num_str : \n        sum += int ( digit ) ** num_len \n    \n    return sum == num \n\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average ( n ) : \n    sum = 0 \n    \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum += i \n        count += 1 \n    \n    average = sum / count \n    \n    return sum , average \n\n"}
{"task_id": "Mbpp/600", "solution": "def is_even ( num ) : \n    return num % 2 == 0 \n\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char ( s ) : \n    seen = set ( ) \n    \n    for char in s : \n        if char in seen : \n            return char \n        \n        seen . add ( char ) \n    \n    return None \n\n"}
{"task_id": "Mbpp/603", "solution": "def get_ludic ( n ) : \n    lucid_numbers = [ ] \n    \n    for i in range ( 1 , n + 1 ) : \n        num = i \n        \n        is_lucid = True \n        \n        while num > 0 : \n            if num % 2 == 0 or num % 5 == 0 : \n                is_lucid = False \n                \n                break \n            \n            num = num // 10 \n            \n        \n        if is_lucid : \n            lucid_numbers . append ( i ) \n        \n    \n    return lucid_numbers \n\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words ( s ) : \n    words = s . split ( ) \n    \n    reversed_words = words [ : : - 1 ] \n    \n    return ' ' . join ( reversed_words ) \n"}
{"task_id": "Mbpp/605", "solution": "def prime_num ( n ) : \n    if n <= 1 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/606", "solution": "def radian_degree ( degree : int ) -> float : \n    return degree * ( 3.141592653589793 / 180 ) \n\n"}
{"task_id": "Mbpp/607", "solution": "def find_literals ( text , pattern ) : \n    start_index = text . find ( pattern ) \n    \n    end_index = start_index + len ( pattern ) \n    \n    return ( pattern , start_index , end_index ) \n\n"}
{"task_id": "Mbpp/608", "solution": "def bell_Number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element ( lst , k ) : \n    return lst [ : k ] + lst [ k + 1 : ] \n\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth ( matrix , n ) : \n    return max ( row [ n ] for row in matrix ) \n\n"}
{"task_id": "Mbpp/612", "solution": "def merge ( lst ) : \n    return [ [ sublist [ 0 ] , sublist [ 1 ] ] for sublist in lst ] \n\n"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum ( tuples ) : \n    total = 0 \n    \n    for t in tuples : \n        total += sum ( t ) \n    \n    return total \n\n"}
{"task_id": "Mbpp/615", "solution": "def average_tuple ( tuples ) : \n    averages = [ ] \n    \n    for t in tuples : \n        average = sum ( t ) / len ( t ) \n        \n        averages . append ( average ) \n    \n    return averages \n\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo ( t1 , t2 ) : \n    return tuple ( x % y for x , y in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/618", "solution": "def div_list ( list1 , list2 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] / list2 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/619", "solution": "def move_num ( s ) : \n    nums = [ c for c in s if c . isdigit ( ) ] \n    \n    non_nums = [ c for c in s if not c . isdigit ( ) ] \n    \n    return '' . join ( non_nums + nums ) \n\n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset ( nums ) : \n    nums = sorted ( nums ) \n    \n    dp = [ 1 ] * len ( nums ) \n    \n    for i in range ( 1 , len ( nums ) ) : \n        for j in range ( i ) : \n            if nums [ i ] % nums [ j ] == 0 : \n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) \n                \n            \n        \n    \n    return max ( dp ) \n\n"}
{"task_id": "Mbpp/622", "solution": "def get_median ( list1 , list2 , n ) : \n    merged_list = list1 + list2 \n    \n    merged_list . sort ( ) \n    median_index = n // 2 \n    \n    if n % 2 == 0 : \n        median = ( merged_list [ median_index - 1 ] + merged_list [ median_index ] ) / 2 \n        \n    else : \n        median = merged_list [ median_index ] \n        \n    \n    return median \n\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums ( nums , n ) : \n    return [ num ** n for num in nums ] \n\n"}
{"task_id": "Mbpp/624", "solution": "def is_upper ( s ) : \n    return s . upper ( ) \n\n"}
{"task_id": "Mbpp/626", "solution": "def triangle_area ( radius ) : \n    if radius < 0 : \n        return None \n    else : \n        return 0.25 * radius * radius \n    \n\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces ( s ) : \n    return s . replace ( \" \" , \"%20\" ) \n\n"}
{"task_id": "Mbpp/629", "solution": "def Split ( nums ) : \n    even_nums = [ ] \n    \n    for num in nums : \n        if num % 2 == 0 : \n            even_nums . append ( num ) \n        \n    \n    return even_nums \n\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates ( coordinate ) : \n    coordinates = [ ] \n    \n    for i in range ( coordinate [ 0 ] - 1 , coordinate [ 0 ] + 2 ) : \n        for j in range ( coordinate [ 1 ] - 1 , coordinate [ 1 ] + 2 ) : \n            coordinates . append ( [ i , j ] ) \n        \n    \n    return coordinates \n\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces ( s ) : \n    return s . replace ( ' ' , '_' ) \n\n"}
{"task_id": "Mbpp/632", "solution": "def move_zeroes ( nums ) : \n    zero = 0 \n    \n    for i in range ( len ( nums ) ) : \n        if nums [ i ] != 0 : \n            nums [ i ] , nums [ zero ] = nums [ zero ] , nums [ i ] \n            \n            zero += 1 \n        \n    \n    return nums \n\n"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum ( nums , target ) : \n    res = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            if nums [ i ] ^ nums [ j ] == target : \n                res += 1 \n            \n        \n    \n    return res \n\n"}
{"task_id": "Mbpp/635", "solution": "def heap_sort ( arr ) : \n    def heapify ( arr , n , i ) : \n        largest = i \n        \n        l = 2 * i + 1 \n        \n        r = 2 * i + 2 \n        \n        if l < n and arr [ i ] < arr [ l ] : \n            largest = l \n            \n        \n        if r < n and arr [ largest ] < arr [ r ] : \n            largest = r \n            \n        \n        if largest != i : \n            arr [ i ] , arr [ largest ] = arr [ largest ] , arr [ i ] \n            \n            heapify ( arr , n , largest ) \n        \n    \n    n = len ( arr ) \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        heapify ( arr , n , i ) \n    \n    for i in range ( n - 1 , 0 , - 1 ) : \n        arr [ i ] , arr [ 0 ] = arr [ 0 ] , arr [ i ] \n        \n        heapify ( arr , i , 0 ) \n    \n    return arr \n\n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss ( amount , cost ) : \n    return amount >= cost \n\n"}
{"task_id": "Mbpp/638", "solution": "def wind_chill ( velocity , temperature ) : \n    velocity_kmh = velocity * 3.6 \n    \n    temperature_celsius = ( temperature - 32 ) * ( 5 / 9 ) \n    \n    wind_chill_index = 35.74 + 0.6215 * temperature_celsius - 35.75 * velocity_kmh ** 0.16 \n    \n    return round ( wind_chill_index ) \n\n"}
{"task_id": "Mbpp/639", "solution": "def sample_nam ( names ) : \n    total = 0 \n    \n    for name in names : \n        if name [ 0 ] . islower ( ) : \n            continue \n        \n        total += len ( name ) \n    \n    return total \n\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal ( n ) : \n    return 3 * n * n - n \n\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle ( text : str ) -> bool : \n    words = text . split ( ) \n    \n    for word in words : \n        if word [ 0 ] == 'z' and word [ - 1 ] == 'z' : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K ( arr , k ) : \n    i = 0 \n    \n    j = k - 1 \n    \n    while i < j : \n        arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ] \n        \n        i += 1 \n        j -= 1 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple ( tup , dict ) : \n    return tup + tuple ( dict . items ( ) ) \n\n"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath ( grid ) : \n    N = len ( grid ) \n    \n    dp = [ [ 0 ] * N for _ in range ( N ) ] \n    \n    dp [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] \n    \n    for i in range ( 1 , N ) : \n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + grid [ i ] [ 0 ] \n        \n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + grid [ 0 ] [ i ] \n        \n    \n    for i in range ( 1 , N ) : \n        for j in range ( 1 , N ) : \n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + grid [ i ] [ j ] \n            \n        \n    \n    max_avg = 0 \n    \n    for i in range ( N ) : \n        for j in range ( N ) : \n            avg = dp [ i ] [ j ] / ( N * N ) \n            \n            max_avg = max ( max_avg , avg ) \n            \n        \n    \n    return max_avg \n\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data ( data , min_height , min_weight ) : \n    filtered_data = { } \n    \n    for student , ( height , weight ) in data . items ( ) : \n        if height > min_height and weight > min_weight : \n            filtered_data [ student ] = ( height , weight ) \n            \n        \n    \n    return filtered_data \n\n"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair ( list1 , list2 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum ( base , power ) : \n    num = base ** power \n    \n    sum = 0 \n    \n    while num > 0 : \n        sum += num % 10 \n        num = num // 10 \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation ( s ) : \n    result = [ ] \n    \n    inside_quotation = False \n    \n    current_quotation = '' \n    \n    for char in s : \n        if char == '\"' : \n            if inside_quotation : \n                result . append ( current_quotation ) \n                current_quotation = '' \n                \n                inside_quotation = False \n                \n            else : \n                inside_quotation = True \n                \n            \n        elif inside_quotation : \n            current_quotation += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements ( t ) : \n    return tuple ( t [ i ] * t [ i + 1 ] for i in range ( len ( t ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list ( a , b ) : \n    return [ a [ i ] + b [ i ] for i in range ( len ( a ) ) ] \n\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            result . append ( lst [ i ] ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone ( r , h ) : \n    lateral_surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar ( s ) : \n    s = s . replace ( ' ' , ':' ) \n    \n    s = s . replace ( ',' , ':' ) \n    \n    s = s . replace ( '.' , ':' ) \n    \n    return s \n\n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence ( arr , target ) : \n    left , right = 0 , len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = left + ( right - left ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            right = mid - 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod ( arr ) : \n    n = len ( arr ) \n    \n    sum = 0 \n    \n    for i in range ( n ) : \n        prod = 1 \n        \n        for j in range ( i , n ) : \n            prod *= arr [ j ] \n            sum += prod \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits ( n ) : \n    mask = 0b11111111111111111111111111111111 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    mask = mask << 1 \n    \n    mask = mask >> 1 \n    \n    return mask \n\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion ( arr , val ) : \n    low = 0 \n    \n    high = len ( arr ) - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if arr [ mid ] < val : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return low \n\n"}
{"task_id": "Mbpp/737", "solution": "def check_str ( s ) : \n    vowels = \"aeiouAEIOU\" \n    \n    if s [ 0 ] in vowels : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/739", "solution": "def find_Index ( n ) : \n    i = 1 \n    \n    triangular_number = 0 \n    \n    while True : \n        triangular_number = i * ( i + 1 ) // 2 \n        \n        if len ( str ( triangular_number ) ) == n : \n            return i \n        \n        i += 1 \n    \n\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict ( tup ) : \n    result = { } \n    \n    for i in range ( 0 , len ( tup ) , 2 ) : \n        result [ tup [ i ] ] = tup [ i + 1 ] \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same ( s ) : \n    return len ( set ( s ) ) == 1 \n\n"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron ( a ) : \n    return ( 3 ** 0.5 / 4 ) * a ** 2 \n\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right ( lst , n ) : \n    n = n % len ( lst ) \n    \n    return lst [ - n : ] + lst [ : - n ] \n\n"}
{"task_id": "Mbpp/744", "solution": "def check_none ( tup ) : \n    return any ( x is None for x in tup ) \n\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits ( startnum , endnum ) : \n    result = [ ] \n    \n    for num in range ( startnum , endnum + 1 ) : \n        digits = [ int ( digit ) for digit in str ( num ) ] \n        \n        if all ( num % digit == 0 for digit in digits ) : \n            result . append ( num ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces ( s : str ) -> str : \n    result = \"\" \n    \n    for i in range ( len ( s ) ) : \n        if i == 0 or s [ i - 1 ] == \" \" : \n            result += s [ i ] . upper ( ) \n        else : \n            result += s [ i ] \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings ( lst ) : \n    lst = [ int ( i ) for i in lst ] \n    \n    lst . sort ( ) \n    return lst \n\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple ( tup1 , tup2 ) : \n    return tup1 + tup2 \n\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        left = 2 * i + 1 \n        \n        right = 2 * i + 2 \n        \n        if left < n and arr [ left ] > arr [ i ] : \n            return False \n        \n        if right < n and arr [ right ] > arr [ i ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num ( n ) : \n    if n == 0 : \n        return 1 \n    elif n == 1 : \n        return 1 \n    else : \n        return 2 * jacobsthal_num ( n - 1 ) + jacobsthal_num ( n - 2 ) \n    \n\n"}
{"task_id": "Mbpp/753", "solution": "def min_k ( tuples , k ) : \n    sorted_tuples = sorted ( tuples , key = lambda x : x [ 1 ] ) \n    \n    return sorted_tuples [ : k ] \n\n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list ( l1 , l2 , l3 ) : \n    common_elements = [ ] \n    \n    for i in range ( len ( l1 ) ) : \n        if l1 [ i ] in l2 and l1 [ i ] in l3 : \n            common_elements . append ( l1 [ i ] ) \n        \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest ( lst ) : \n    unique_lst = list ( set ( lst ) ) \n    \n    if len ( unique_lst ) < 2 : \n        return None \n    \n    unique_lst . sort ( ) \n    return unique_lst [ 1 ] \n\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs ( lst ) : \n    count = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            if lst [ i ] == lst [ j ] [ : : - 1 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists ( lst ) : \n    result = { } \n    \n    for sublist in lst : \n        sublist_tuple = tuple ( sublist ) \n        \n        if sublist_tuple in result : \n            result [ sublist_tuple ] += 1 \n        else : \n            result [ sublist_tuple ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/759", "solution": "def is_decimal ( s ) : \n    try : \n        num = float ( s ) \n        \n        if len ( str ( num ) . split ( '.' ) [ 1 ] ) > 2 : \n            return False \n        \n        return True \n    except ValueError : \n        return False \n    \n\n"}
{"task_id": "Mbpp/760", "solution": "def unique_Element ( nums ) : \n    return len ( set ( nums ) ) == 1 \n\n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number ( month_number ) : \n    thirty_days_months = [ 4 , 6 , 9 , 11 ] \n    \n    return month_number in thirty_days_months \n\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_difference ( arr , k ) : \n    arr . sort ( ) \n    min_diff = float ( 'inf' ) \n    \n    for i in range ( len ( arr ) - 1 ) : \n        diff = arr [ i + 1 ] - arr [ i ] \n        \n        if diff < min_diff : \n            min_diff = diff \n            \n        \n    \n    return min_diff \n\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr ( string ) : \n    count = 0 \n    \n    for char in string : \n        if char . isdigit ( ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/765", "solution": "def is_polite ( n ) : \n    polite_numbers = [ 1 , 11 , 111 , 1111 , 11111 , 111111 , 1111111 , 11111111 , 111111111 , 1111111111 ] \n    \n    return polite_numbers [ n - 1 ] \n\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise ( lst ) : \n    return [ ( lst [ i ] , lst [ i + 1 ] ) for i in range ( len ( lst ) - 1 ) ] \n\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count ( arr , sum ) : \n    count = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if arr [ i ] + arr [ j ] == sum : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/769", "solution": "def Diff ( list1 , list2 ) : \n    diff_list = [ ] \n    \n    for i in list1 : \n        if i not in list2 : \n            diff_list . append ( i ) \n        \n    \n    for i in list2 : \n        if i not in list1 : \n            diff_list . append ( i ) \n        \n    \n    return diff_list \n\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 4 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/771", "solution": "def check_expression ( expression ) : \n    stack = [ ] \n    \n    mapping = { \")\" : \"(\" , \"}\" : \"{\" , \"]\" : \"[\" } \n    \n    for char in expression : \n        if char in mapping . values ( ) : \n            stack . append ( char ) \n        elif char in mapping . keys ( ) : \n            if not stack or mapping [ char ] != stack . pop ( ) : \n                return False \n            \n        \n    \n    return not stack \n\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length ( s , k ) : \n    words = s . split ( ) \n    \n    filtered_words = [ word for word in words if len ( word ) != k ] \n    \n    return ' ' . join ( filtered_words ) \n\n"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring ( string , substring ) : \n    start = 0 \n    \n    while True : \n        start = string . find ( substring , start ) \n        \n        if start == - 1 : \n            return None \n        \n        yield substring , start , start + len ( substring ) \n        \n        start += 1 \n    \n\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position ( lst ) : \n    return all ( i % 2 != 0 and lst [ i ] % 2 != 0 for i in range ( len ( lst ) ) ) \n\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum ( lst ) : \n    unique_elements = set ( ) \n    \n    repeated_elements = set ( ) \n    \n    for num in lst : \n        if num in unique_elements : \n            repeated_elements . add ( num ) \n        else : \n            unique_elements . add ( num ) \n        \n    \n    return sum ( unique_elements - repeated_elements ) \n\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates ( lst ) : \n    result = [ ] \n    \n    current_group = [ ] \n    \n    for i in range ( len ( lst ) ) : \n        if i == 0 or lst [ i ] != lst [ i - 1 ] : \n            current_group . append ( lst [ i ] ) \n        else : \n            current_group . append ( lst [ i ] ) \n        \n        if i == len ( lst ) - 1 or lst [ i ] != lst [ i + 1 ] : \n            result . append ( current_group ) \n            current_group = [ ] \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/780", "solution": "def find_combinations ( tuples_list ) : \n    result = [ ] \n    \n    for i in range ( len ( tuples_list ) ) : \n        for j in range ( i + 1 , len ( tuples_list ) ) : \n            sum_tuple = tuple ( map ( sum , zip ( tuples_list [ i ] , tuples_list [ j ] ) ) ) \n            \n            result . append ( sum_tuple ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count % 2 == 0 \n\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum ( arr ) : \n    total_sum = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        subarray_sum = 0 \n        \n        for j in range ( i , n ) : \n            subarray_sum += arr [ j ] \n            if ( j - i + 1 ) % 2 != 0 : \n                total_sum += subarray_sum \n            \n        \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd ( lst ) : \n    even_product = 1 \n    \n    odd_product = 1 \n    \n    for num in lst : \n        if num % 2 == 0 : \n            even_product *= num \n        else : \n            odd_product *= num \n        \n    \n    return even_product * odd_product \n\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int ( s : str ) -> tuple : \n    return tuple ( map ( int , s . strip ( \"()\" ) . split ( \",\" ) ) ) \n\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion ( arr , val ) : \n    low = 0 \n    \n    high = len ( arr ) - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if arr [ mid ] < val : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return low \n\n"}
{"task_id": "Mbpp/787", "solution": "def text_match_three ( text : str ) -> bool : \n    if len ( text ) < 3 : \n        return False \n    \n    if text [ 0 ] == 'a' and text [ 1 ] == 'b' : \n        return text [ 2 : 4 ] == 'bb' \n    \n    return False \n\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple ( str_list , list_list ) : \n    return tuple ( str_list + list_list ) \n\n"}
{"task_id": "Mbpp/790", "solution": "def even_position ( lst ) : \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 != 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested ( tup ) : \n    result = [ ] \n    \n    for item in tup : \n        if isinstance ( item , tuple ) : \n            result . append ( remove_nested ( item ) ) \n        else : \n            result . append ( item ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/792", "solution": "def count_list ( lst ) : \n    return len ( lst ) \n\n"}
{"task_id": "Mbpp/793", "solution": "def last ( arr , x ) : \n    low = 0 \n    \n    high = len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while low <= high : \n        mid = ( low + high ) // 2 \n        \n        if arr [ mid ] == x : \n            result = mid \n            \n            low = mid + 1 \n            \n        elif arr [ mid ] < x : \n            low = mid + 1 \n            \n        else : \n            high = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb ( text : str ) -> bool : \n    \"\"\"\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    \n    Args:\n    text (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\" \n    return text . startswith ( 'a' ) and text . endswith ( 'b' ) \n\n"}
{"task_id": "Mbpp/796", "solution": "def return_sum ( d ) : \n    sum = 0 \n    \n    for key in d : \n        sum += d [ key ] \n    \n    return sum \n\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range ( l , r ) : \n    sum = 0 \n    \n    for i in range ( l , r + 1 ) : \n        if i % 2 != 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/798", "solution": "def _sum ( arr ) : \n    total = 0 \n    \n    for num in arr : \n        total += num \n    \n    return total \n\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate ( n , d ) : \n    return ( ( n << d ) & 0xFFFFFFFF ) | ( n >> ( 32 - d ) ) \n\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces ( s ) : \n    return s . replace ( \" \" , \"\" ) \n\n"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal ( a , b , c ) : \n    count = 0 \n    \n    if a == b == c : \n        count = 3 \n        \n    elif a == b or b == c or a == c : \n        count = 2 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square ( n ) : \n    i = 1 \n    \n    while i * i <= n : \n        if i * i == n : \n            return True \n        \n        i += 1 \n    \n    return False \n\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even ( lst ) : \n    product = 1 \n    \n    for num in lst : \n        product *= num \n    \n    return product % 2 == 0 \n\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list ( list_of_lists ) : \n    max_sum = float ( '-inf' ) \n    \n    max_list = [ ] \n    \n    for lst in list_of_lists : \n        current_sum = sum ( lst ) \n        \n        if current_sum > max_sum : \n            max_sum = current_sum \n            \n            max_list = lst \n            \n        \n    \n    return max_list \n\n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase ( s ) : \n    max_run = 0 \n    \n    current_run = 0 \n    \n    for char in s : \n        if char . isupper ( ) : \n            current_run += 1 \n            max_run = max ( max_run , current_run ) \n            \n        else : \n            current_run = 0 \n            \n        \n    \n    return max_run \n"}
{"task_id": "Mbpp/807", "solution": "def first_odd ( nums ) : \n    for num in nums : \n        if num % 2 != 0 : \n            return num \n        \n    \n\n"}
{"task_id": "Mbpp/808", "solution": "def check_K ( tup , k ) : \n    return k in tup \n\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller ( t1 , t2 ) : \n    return all ( x < y for x , y in zip ( t1 , t2 ) ) \n\n"}
