{"task_id": "Mbpp/2", "solution": "def similar_elements ( list1 , list2 ) : \n    return set ( set ( list1 ) & set ( list2 ) ) \n\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime ( n ) : \n    if n <= 1 : \n        return True \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/4", "solution": "import heapq \ndef heap_queue_largest ( nums , n ) : \n    largest_nums = heapq . nlargest ( n , nums ) \n    \n    return largest_nums \n\n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos ( x , y ) : \n    xor = x ^ y \n    \n    count = 0 \n    \n    while xor : \n        count += xor & 1 \n        xor >>= 1 \n    \n    return count == 1 \n\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long ( text ) : \n    words = text . split ( ) \n    \n    result = [ word for word in words if len ( word ) >= 4 ] \n    \n    return set ( result ) \n\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums ( nums ) : \n    return [ num ** 2 for num in nums ] \n\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations ( s ) : \n    n = len ( s ) \n    \n    for i in range ( 1 , n ) : \n        if s == s [ i : ] + s [ : i ] : \n            return i \n        \n    \n    return n \n\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ ( s , c ) : \n    s = s . replace ( c , \"\" , 1 ) \n    \n    s = s [ : - 1 ] \n    \n    return s \n\n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix ( matrix ) : \n    sorted_matrix = sorted ( matrix , key = lambda row : sum ( row ) ) \n    \n    return sorted_matrix \n\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume ( base , height , length ) : \n    area = 0.5 * base * height \n    \n    volume = area * length \n    \n    return volume \n\n"}
{"task_id": "Mbpp/16", "solution": "import re \ndef text_lowercase_underscore ( text ) : \n    pattern = r'^[a-z]+_[a-z]+$' \n    \n    return bool ( re . match ( pattern , text ) ) \n\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter ( side_length ) : \n    return side_length * 4 \n\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars ( s1 , s2 ) : \n    result = '' \n    \n    for char in s1 : \n        if char not in s2 : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate ( arr ) : \n    return len ( arr ) != len ( set ( arr ) ) \n\n"}
{"task_id": "Mbpp/20", "solution": "def is_woodall ( n ) : \n    x = 2 \n    \n    k = 2 \n    \n    while x < n : \n        x = k * x - 1 \n        \n        k += 1 \n    \n    return x == n \n\n"}
{"task_id": "Mbpp/56", "solution": "def check ( n ) : \n    rev = int ( str ( n ) [ : : - 1 ] ) \n    \n    return n == 2 * rev - 1 \n\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num ( digits ) : \n    digits = sorted ( digits , reverse = True ) \n    \n    max_num = int ( '' . join ( map ( str , digits ) ) ) \n    \n    return max_num \n\n"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs ( a , b ) : \n    return ( a ^ b ) < 0 \n\n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal ( n ) : \n    return n * ( 3 * n - 2 ) \n\n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        sum = 0 \n        \n        for j in range ( i , len ( s ) ) : \n            sum += int ( s [ j ] ) \n            if sum == j - i + 1 : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num ( lst ) : \n    return min ( lst ) \n\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference ( test_list ) : \n    max_diff = 0 \n    \n    for tup in test_list : \n        diff = tup [ 1 ] - tup [ 0 ] \n        \n        if diff > max_diff : \n            max_diff = diff \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks ( lst ) : \n    lst . sort ( key = lambda x : x [ 1 ] ) \n    return lst \n\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum ( lst ) : \n    total = 0 \n    \n    for element in lst : \n        if isinstance ( element , list ) : \n            total += recursive_list_sum ( element ) \n        else : \n            total += element \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count ( nums ) : \n    count = 0 \n    \n    for num in nums : \n        if num > 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/67", "solution": "def bell_number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic ( arr ) : \n    increasing = decreasing = True \n    \n    \n    for i in range ( 1 , len ( arr ) ) : \n        if arr [ i ] > arr [ i - 1 ] : \n            decreasing = False \n            \n        elif arr [ i ] < arr [ i - 1 ] : \n            increasing = False \n            \n        \n    \n    return increasing or decreasing \n\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist ( lst , sublst ) : \n    sublst_len = len ( sublst ) \n    \n    for i in range ( len ( lst ) - sublst_len + 1 ) : \n        if lst [ i : i + sublst_len ] == sublst : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal ( test_tup ) : \n    res = all ( len ( ele ) == len ( test_tup [ 0 ] ) for ele in test_tup ) \n    \n    return res \n\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort ( arr ) : \n    gap = len ( arr ) \n    \n    shrink = 1.3 \n    \n    sorted = False \n    \n    while not sorted : \n        gap = int ( gap / shrink ) \n        \n        if gap <= 1 : \n            gap = 1 \n            \n            sorted = True \n            \n        \n        i = 0 \n        \n        while i + gap < len ( arr ) : \n            if arr [ i ] > arr [ i + gap ] : \n                arr [ i ] , arr [ i + gap ] = arr [ i + gap ] , arr [ i ] \n                \n                sorted = False \n                \n            \n            i += 1 \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square ( n ) : \n    if n % 2 == 0 : \n        return False \n    \n    if n % 2 == 1 : \n        return True \n    \n\n"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns ( colors , patterns ) : \n    color_dict = { } \n    \n    for i , color in enumerate ( colors ) : \n        if color not in color_dict : \n            color_dict [ color ] = patterns [ i ] \n            \n        else : \n            if color_dict [ color ] != patterns [ i ] : \n                return False \n            \n        \n    \n    return len ( color_dict ) == len ( set ( patterns ) ) \n\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples ( tuples_list , k ) : \n    result = [ ] \n    \n    for tup in tuples_list : \n        if all ( x % k == 0 for x in tup ) : \n            result . append ( tup ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/77", "solution": "def is_Diff ( n ) : \n    n = str ( n ) \n    \n    sum_odd = 0 \n    \n    sum_even = 0 \n    \n    for i in range ( len ( n ) ) : \n        if i % 2 == 0 : \n            sum_odd += int ( n [ i ] ) \n        else : \n            sum_even += int ( n [ i ] ) \n        \n    \n    if abs ( sum_odd - sum_even ) % 11 == 0 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/79", "solution": "def word_len ( word ) : \n    return len ( word ) % 2 != 0 \n\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number ( n ) : \n    return n * ( n + 1 ) * ( n + 2 ) // 6 \n\n"}
{"task_id": "Mbpp/82", "solution": "import math \ndef volume_sphere ( r ) : \n    volume = ( 4 / 3 ) * math . pi * r ** 3 \n    \n    return volume \n\n"}
{"task_id": "Mbpp/84", "solution": "def sequence ( n ) : \n    if n == 1 : \n        return 1 \n    elif n == 2 : \n        return 1 \n    else : \n        sequence = [ 0 , 1 , 1 ] \n        \n        for i in range ( 3 , n + 1 ) : \n            sequence . append ( sequence [ sequence [ i - 1 ] ] + sequence [ i - sequence [ i - 1 ] ] ) \n        \n        return sequence [ n ] \n    \n\n"}
{"task_id": "Mbpp/85", "solution": "import math \ndef surfacearea_sphere ( r ) : \n    surface_area = 4 * math . pi * r ** 2 \n    \n    return surface_area \n\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number ( n ) : \n    return 3 * n * ( n - 1 ) + 1 \n\n"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three ( dict1 , dict2 , dict3 ) : \n    merged_dict = { } \n    \n    merged_dict . update ( dict1 ) \n    merged_dict . update ( dict2 ) \n    merged_dict . update ( dict3 ) \n    return merged_dict \n\n"}
{"task_id": "Mbpp/88", "solution": "def freq_count ( lst ) : \n    freq_dict = { } \n    \n    for i in lst : \n        if i in freq_dict : \n            freq_dict [ i ] += 1 \n        else : \n            freq_dict [ i ] = 1 \n            \n        \n    \n    return freq_dict \n\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num ( n ) : \n    return n - 1 \n\n"}
{"task_id": "Mbpp/90", "solution": "def len_log ( words ) : \n    max_length = 0 \n    \n    for word in words : \n        if len ( word ) > max_length : \n            max_length = len ( word ) \n            \n        \n    \n    return max_length \n\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring ( lst , substring ) : \n    for word in lst : \n        if substring in word : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating ( n ) : \n    str_n = str ( n ) \n    \n    if len ( str_n ) < 3 : \n        return False \n    \n    for i in range ( 1 , len ( str_n ) - 1 ) : \n        if str_n [ i ] != str_n [ i - 1 ] and str_n [ i ] != str_n [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/93", "solution": "def power ( a , b ) : \n    return a ** b \n\n"}
{"task_id": "Mbpp/94", "solution": "def index_minimum ( lst ) : \n    return min ( lst , key = lambda x : x [ 1 ] ) [ 0 ] \n\n"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length ( list_of_lists ) : \n    min_length = float ( 'inf' ) \n    \n    for lst in list_of_lists : \n        if len ( lst ) < min_length : \n            min_length = len ( lst ) \n            \n        \n    \n    return min_length \n\n"}
{"task_id": "Mbpp/96", "solution": "def divisor ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists ( lists ) : \n    frequency = { } \n    \n    for sublist in lists : \n        for element in sublist : \n            if element in frequency : \n                frequency [ element ] += 1 \n            else : \n                frequency [ element ] = 1 \n                \n            \n        \n    \n    return frequency \n\n"}
{"task_id": "Mbpp/98", "solution": "import math \ndef multiply_num ( nums ) : \n    product = 1 \n    \n    for num in nums : \n        product *= num \n    \n    return product / len ( nums ) \n\nassert math . isclose ( multiply_num ( ( 8 , 2 , 3 , - 1 , 7 ) ) , - 67.2 , rel_tol = 0.001 ) \nassert math . isclose ( multiply_num ( ( - 10 , - 20 , - 30 ) ) , - 2000.0 , rel_tol = 0.001 ) \nassert math . isclose ( multiply_num ( ( 19 , 15 , 18 ) ) , 1710.0 , rel_tol = 0.001 ) \n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary ( n ) : \n    return bin ( n ) . replace ( \"0b\" , \"\" ) \n\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome ( num ) : \n    def is_palindrome ( n ) : \n        return str ( n ) == str ( n ) [ : : - 1 ] \n    \n    num -= 1 \n    while not is_palindrome ( num ) : \n        num -= 1 \n    \n    return num \n\n"}
{"task_id": "Mbpp/101", "solution": "def kth_element ( arr , k ) : \n    arr . sort ( ) \n    return arr [ k - 1 ] \n\n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel ( s ) : \n    components = s . split ( '_' ) \n    \n    return '' . join ( x . title ( ) for x in components ) \n\n"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num ( n , m ) : \n    if m == 0 or m == n : \n        return 1 \n    \n    return m * eulerian_num ( n - 1 , m - 1 ) + ( n - m ) * eulerian_num ( n - 1 , m ) \n\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/105", "solution": "def count ( lst ) : \n    return sum ( 1 for x in lst if x is True ) \n\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists ( lst , tup ) : \n    return tup + tuple ( lst ) \n\n"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list ( list1 , list2 , list3 ) : \n    merged_list = list1 + list2 + list3 \n    \n    merged_list . sort ( ) \n    return merged_list \n\n"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent ( s : str , n : int ) -> int : \n    count = 0 \n    \n    for i in range ( n ) : \n        if s [ i : ] . count ( '1' ) % 2 != 0 : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists ( nested_lists ) : \n    common_elements = set ( nested_lists [ 0 ] ) \n    \n    for lst in nested_lists [ 1 : ] : \n        common_elements &= set ( lst ) \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer ( s ) : \n    return s . isdigit ( ) \n\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int ( t ) : \n    return int ( '' . join ( map ( str , t ) ) ) \n\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list ( s ) : \n    return s . split ( ' ' ) \n\n"}
{"task_id": "Mbpp/119", "solution": "def search ( arr ) : \n    left = 0 \n    \n    right = len ( arr ) - 1 \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] == arr [ mid + 1 ] : \n            if mid % 2 == 0 : \n                left = mid + 2 \n                \n            else : \n                right = mid - 1 \n                \n            \n        elif arr [ mid ] == arr [ mid - 1 ] : \n            if mid % 2 == 0 : \n                right = mid - 2 \n                \n            else : \n                left = mid + 1 \n                \n            \n        else : \n            return arr [ mid ] \n        \n    \n    return arr [ left ] \n\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple ( lst ) : \n    max_product = 0 \n    \n    for tup in lst : \n        product = abs ( tup [ 0 ] * tup [ 1 ] ) \n        \n        if product > max_product : \n            max_product = product \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum ( n ) : \n    def sum_of_divisors ( num ) : \n        result = 1 \n        \n        i = 2 \n        \n        while i * i <= num : \n            if num % i == 0 : \n                if num // i == i : \n                    result = result + i \n                    \n                else : \n                    result = result + ( i + num // i ) \n                    \n                \n            \n            i += 1 \n        \n        return result \n    \n    amicable_sum = 0 \n    \n    for num in range ( 2 , n + 1 ) : \n        partner = sum_of_divisors ( num ) \n        \n        if partner != num and sum_of_divisors ( partner ) == num : \n            amicable_sum += num \n        \n    \n    return amicable_sum \n\n"}
{"task_id": "Mbpp/124", "solution": "import cmath \nimport math \ndef angle_complex ( real , imag ) : \n    complex_num = complex ( real , imag ) \n    \n    angle = cmath . phase ( complex_num ) \n    \n    return angle \n\n"}
{"task_id": "Mbpp/125", "solution": "def find_length ( s ) : \n    max_diff = 0 \n    \n    diff = 0 \n    \n    zero_count = 0 \n    \n    one_count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] == '0' : \n            zero_count += 1 \n        else : \n            one_count += 1 \n        \n        diff = abs ( zero_count - one_count ) \n        \n        max_diff = max ( max_diff , diff ) \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/126", "solution": "def sum ( a , b ) : \n    sum = 0 \n    \n    for i in range ( 1 , min ( a , b ) + 1 ) : \n        if a % i == 0 and b % i == 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int ( a , b ) : \n    return a * b \n\n"}
{"task_id": "Mbpp/128", "solution": "def long_words ( n , words ) : \n    return [ word for word in words if len ( word ) > n ] \n\n"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test ( square ) : \n    n = len ( square ) \n    \n    magic_sum = sum ( square [ 0 ] ) \n    \n    for i in range ( n ) : \n        if sum ( square [ i ] ) != magic_sum or sum ( square [ j ] [ i ] for j in range ( n ) ) != magic_sum : \n            return False \n        \n    \n    if sum ( square [ i ] [ i ] for i in range ( n ) ) != magic_sum or sum ( square [ i ] [ n - i - 1 ] for i in range ( n ) ) != magic_sum : \n        return False \n    \n    return True \n\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences ( lst ) : \n    count_dict = { } \n    \n    for item in lst : \n        if item in count_dict : \n            count_dict [ item ] += 1 \n        else : \n            count_dict [ item ] = 1 \n            \n        \n    \n    max_item = max ( count_dict , key = count_dict . get ) \n    \n    return max_item \n\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels ( s ) : \n    vowels = \"aeiouAEIOU\" \n    \n    s = list ( s ) \n    \n    i , j = 0 , len ( s ) - 1 \n    \n    while i < j : \n        if s [ i ] not in vowels : \n            i += 1 \n        elif s [ j ] not in vowels : \n            j -= 1 \n        else : \n            s [ i ] , s [ j ] = s [ j ] , s [ i ] \n            \n            i += 1 \n            j -= 1 \n        \n    \n    return \"\" . join ( s ) \n\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string ( tup ) : \n    return '' . join ( tup ) \n\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum ( nums ) : \n    return sum ( num for num in nums if num < 0 ) \n\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num ( n ) : \n    return n * ( 2 * n - 1 ) \n\n"}
{"task_id": "Mbpp/137", "solution": "import math \ndef zero_count ( arr ) : \n    zero_count = 0 \n    \n    non_zero_count = 0 \n    \n    for num in arr : \n        if num == 0 : \n            zero_count += 1 \n        else : \n            non_zero_count += 1 \n        \n    \n    if non_zero_count == 0 : \n        return 0.00 \n    \n    return zero_count / non_zero_count \n\n"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two ( n ) : \n    while n > 0 : \n        if n % 2 == 0 : \n            n = n // 2 \n            \n        else : \n            n = n - 1 \n            \n        \n    \n    return n == 0 \n\n"}
{"task_id": "Mbpp/139", "solution": "import math \ndef circle_circumference ( radius ) : \n    return 2 * math . pi * radius \n\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly ( list_of_lists ) : \n    flattened_list = [ item for sublist in list_of_lists for item in sublist ] \n    \n    return set ( flattened_list ) \n\n"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n - 1 , 0 , - 1 ) : \n        max_idx = i \n        \n        for j in range ( i , - 1 , - 1 ) : \n            if arr [ j ] > arr [ max_idx ] : \n                max_idx = j \n                \n            \n        \n        if max_idx != i : \n            arr [ : max_idx + 1 ] , arr [ max_idx : i ] = arr [ max_idx : : - 1 ] , arr [ i - 1 : max_idx - 1 : - 1 ] \n            \n        \n    \n    return arr \n\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair ( list1 , list2 , list3 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] == list3 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff ( arr ) : \n    max_diff = 0 \n    \n    for i in range ( len ( arr ) ) : \n        for j in range ( i + 1 , len ( arr ) ) : \n            diff = abs ( arr [ i ] - arr [ j ] ) \n            \n            if diff > max_diff : \n                max_diff = diff \n                \n            \n        \n    \n    return max_diff \n\n"}
{"task_id": "Mbpp/160", "solution": "def find_solution ( a , b , n ) : \n    def gcd ( x , y ) : \n        while y : \n            x , y = y , x % y \n            \n        \n        return x \n    \n    def extended_gcd ( a , b ) : \n        if a == 0 : \n            return b , 0 , 1 \n        \n        gcd , x1 , y1 = extended_gcd ( b % a , a ) \n        \n        x = y1 - ( b // a ) * x1 \n        \n        y = x1 \n        \n        return gcd , x , y \n    \n    gcd , x , y = extended_gcd ( a , b ) \n    \n    if n % gcd != 0 : \n        return None \n    \n    x = x * ( n // gcd ) \n    \n    y = y * ( n // gcd ) \n    \n    return ( x , y ) \n\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements ( list1 , list2 ) : \n    return [ x for x in list1 if x not in list2 ] \n\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series ( n ) : \n    sum = 0 \n    \n    for i in range ( n // 2 + 1 ) : \n        sum += ( n - 2 * i ) \n    \n    return sum \n\n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position ( s ) : \n    count = 0 \n    \n    for i in range ( len ( s ) ) : \n        if s [ i ] . lower ( ) == chr ( ord ( 'a' ) + i ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair ( nums ) : \n    even_count = 0 \n    \n    for i in range ( len ( nums ) ) : \n        for j in range ( i + 1 , len ( nums ) ) : \n            if ( nums [ i ] ^ nums [ j ] ) % 2 == 0 : \n                even_count += 1 \n            \n        \n    \n    return even_count \n\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2 ( n ) : \n    if n == 0 : \n        return 1 \n    elif n & ( n - 1 ) == 0 : \n        return n \n    else : \n        return 1 << n . bit_length ( ) \n    \n\n"}
{"task_id": "Mbpp/168", "solution": "def frequency ( lst , num ) : \n    return lst . count ( num ) \n\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list ( lst , start , end ) : \n    return sum ( lst [ start : end + 1 ] ) \n\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon ( side_length ) : \n    return 5 * side_length \n\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance ( s ) : \n    return s . count ( 'std' ) \n\n"}
{"task_id": "Mbpp/222", "solution": "def check_type ( tup ) : \n    first_type = type ( tup [ 0 ] ) \n    \n    for item in tup : \n        if type ( item ) != first_type : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority ( arr , n , element ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        if arr [ i ] == element : \n            count += 1 \n        \n    \n    if count > n / 2 : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits ( n ) : \n    count = 0 \n    \n    while n : \n        count += n & 1 \n        n >>= 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string ( s ) : \n    result = \"\" \n    \n    for i in range ( len ( s ) ) : \n        if i % 2 == 0 : \n            result += s [ i ] \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three ( a , b , c ) : \n    return min ( a , b , c ) \n\n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank ( string , character ) : \n    return string . replace ( \" \" , character ) \n\n"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum ( lst , n ) : \n    return sorted ( lst , reverse = True ) [ : n ] \n\n"}
{"task_id": "Mbpp/233", "solution": "import math \ndef lateralsuface_cylinder ( radius , height ) : \n    lateral_surface_area = 2 * math . pi * radius * height \n    \n    return lateral_surface_area \n\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube ( side_length ) : \n    return side_length ** 3 \n\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number ( n ) : \n    even_bits = 0b10101010101010101010101010101010 \n    \n    return n | even_bits \n\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences ( tuples_list ) : \n    occurences = { } \n    \n    for t in tuples_list : \n        t = tuple ( sorted ( t ) ) \n        \n        if t in occurences : \n            occurences [ t ] += 1 \n        else : \n            occurences [ t ] = 1 \n            \n        \n    \n    return occurences \n\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings ( s ) : \n    return len ( s ) * ( len ( s ) + 1 ) // 2 \n\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences ( m , n ) : \n    dp = [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ] \n    \n    for i in range ( 1 , m + 1 ) : \n        dp [ i ] [ 1 ] = 1 \n        \n    \n    for i in range ( 1 , m + 1 ) : \n        for j in range ( 2 , n + 1 ) : \n            for k in range ( i * 2 , m + 1 ) : \n                dp [ k ] [ j ] += dp [ i ] [ j - 1 ] \n            \n        \n    \n    return sum ( dp [ i ] [ n ] for i in range ( 1 , m + 1 ) ) \n\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list ( list1 , list2 ) : \n    list1 [ - len ( list2 ) : ] = list2 \n    \n    return list1 \n\n"}
{"task_id": "Mbpp/242", "solution": "def count_charac ( s ) : \n    return len ( s ) \n\n"}
{"task_id": "Mbpp/244", "solution": "import math \ndef next_Perfect_Square ( n ) : \n    root = math . sqrt ( n ) \n    \n    if int ( root + 0.5 ) ** 2 == n : \n        return ( root + 1 ) ** 2 \n    else : \n        return math . ceil ( root ) ** 2 \n    \n\n"}
{"task_id": "Mbpp/245", "solution": "def max_sum ( arr ) : \n    n = len ( arr ) \n    \n    inc = [ 0 ] * n \n    \n    dec = [ 0 ] * n \n    \n    for i in range ( n ) : \n        inc [ i ] = arr [ i ] \n        \n        dec [ i ] = arr [ i ] \n        \n    \n    for i in range ( 1 , n ) : \n        for j in range ( i ) : \n            if arr [ i ] > arr [ j ] and inc [ i ] < inc [ j ] + arr [ i ] : \n                inc [ i ] = inc [ j ] + arr [ i ] \n                \n            \n        \n    \n    for i in range ( n - 2 , - 1 , - 1 ) : \n        for j in range ( n - 1 , i , - 1 ) : \n            if arr [ i ] > arr [ j ] and dec [ i ] < dec [ j ] + arr [ i ] : \n                dec [ i ] = dec [ j ] + arr [ i ] \n                \n            \n        \n    \n    max_sum = 0 \n    \n    for i in range ( n ) : \n        max_sum = max ( max_sum , inc [ i ] + dec [ i ] - arr [ i ] ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/247", "solution": "def lps ( s ) : \n    n = len ( s ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    for i in range ( n - 1 , - 1 , - 1 ) : \n        dp [ i ] [ i ] = 1 \n        \n        for j in range ( i + 1 , n ) : \n            if s [ i ] == s [ j ] : \n                dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 \n                \n            else : \n                dp [ i ] [ j ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ j - 1 ] ) \n                \n            \n        \n    \n    return dp [ 0 ] [ n - 1 ] \n\n"}
{"task_id": "Mbpp/250", "solution": "def count_X ( tup , x ) : \n    return tup . count ( x ) \n\n"}
{"task_id": "Mbpp/251", "solution": "def insert_element ( lst , element ) : \n    result = [ ] \n    \n    for item in lst : \n        result . append ( element ) \n        result . append ( item ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/252", "solution": "import cmath \ndef convert ( x ) : \n    return cmath . polar ( complex ( x ) ) \n\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer ( lst ) : \n    count = 0 \n    \n    for item in lst : \n        if isinstance ( item , int ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement \ndef combinations_colors ( colors , n ) : \n    return list ( combinations_with_replacement ( colors , n ) ) \n\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums ( n ) : \n    if n < 2 : \n        return 0 \n    \n    primes = [ True ] * n \n    \n    primes [ 0 ] = primes [ 1 ] = False \n    \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if primes [ i ] : \n            for j in range ( i * i , n , i ) : \n                primes [ j ] = False \n                \n            \n        \n    \n    return sum ( primes ) \n\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers ( a , b ) : \n    return ( b , a ) \n\n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements ( tuple1 , tuple2 ) : \n    result = [ ] \n    \n    for i in range ( len ( tuple1 ) ) : \n        max_element = max ( tuple1 [ i ] , tuple2 [ i ] ) \n        \n        result . append ( max_element ) \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/260", "solution": "def newman_prime ( n ) : \n    def is_prime ( num ) : \n        if num < 2 : \n            return False \n        \n        for i in range ( 2 , int ( num ** 0.5 ) + 1 ) : \n            if num % i == 0 : \n                return False \n            \n        \n        return True \n    \n    def generate_newman_numbers ( n ) : \n        newman_numbers = [ 2 ] \n        \n        num = 2 \n        \n        while len ( newman_numbers ) < n : \n            newman_number = 2 ** num - 1 \n            \n            if is_prime ( newman_number ) : \n                newman_numbers . append ( newman_number ) \n            \n            num += 1 \n        \n        return newman_numbers \n    \n    def is_newman_shanks_williams_prime ( num ) : \n        if not is_prime ( num ) : \n            return False \n        \n        n = 1 \n        \n        while 2 ** n - 1 < num : \n            n += 1 \n        \n        return num == 2 ** n - 1 \n    \n    newman_numbers = generate_newman_numbers ( n ) \n    \n    for num in newman_numbers : \n        if is_newman_shanks_williams_prime ( num ) : \n            return num \n        \n    \n\n"}
{"task_id": "Mbpp/261", "solution": "def division_elements ( tup1 , tup2 ) : \n    res = tuple ( ele1 / ele2 for ele1 , ele2 in zip ( tup1 , tup2 ) ) \n    \n    return res \n\n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts ( lst , L ) : \n    return ( lst [ : L ] , lst [ L : ] ) \n\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age ( human_age ) : \n    if human_age < 3 : \n        return human_age * 10 \n    else : \n        return 21 + ( human_age - 2 ) * 4 + ( human_age - 2 ) * 5 \n    \n\n"}
{"task_id": "Mbpp/265", "solution": "def list_split ( lst , n ) : \n    result = [ ] \n    \n    for i in range ( 0 , len ( lst ) , n ) : \n        result . append ( lst [ i : i + n ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube ( side_length ) : \n    return 4 * side_length * side_length \n\n"}
{"task_id": "Mbpp/267", "solution": "def square_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 2 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num ( n ) : \n    return 4 * n * ( n - 1 ) + 1 \n\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value ( char ) : \n    return ord ( char ) \n\n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index ( lst ) : \n    total = 0 \n    \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            total += lst [ i ] \n        \n    \n    return total \n\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num ** 5 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract ( tuples_list ) : \n    return [ t [ - 1 ] for t in tuples_list ] \n\n"}
{"task_id": "Mbpp/273", "solution": "def substract_elements ( tuple1 , tuple2 ) : \n    return tuple ( a - b for a , b in zip ( tuple1 , tuple2 ) ) \n\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 0 , n + 1 , 2 ) : \n        sum += binomial_coefficient ( n , i ) \n    \n    return sum \n\ndef binomial_coefficient ( n , k ) : \n    result = 1 \n    \n    if k > n - k : \n        k = n - k \n        \n    \n    for i in range ( k ) : \n        result *= ( n - i ) \n        result //= ( i + 1 ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/276", "solution": "import math \ndef volume_cylinder ( radius , height ) : \n    volume = math . pi * radius ** 2 * height \n    \n    return volume \n\n"}
{"task_id": "Mbpp/277", "solution": "def dict_filter ( d , n ) : \n    return { k : v for k , v in d . items ( ) if v >= n } \n\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements ( test_tup ) : \n    count = 0 \n    \n    for element in test_tup : \n        if isinstance ( element , tuple ) : \n            break \n        \n        count += 1 \n    \n    return count \n\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal ( n ) : \n    return n * ( 7 * n - 5 ) \n\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search ( arr , element ) : \n    for i , e in enumerate ( arr ) : \n        if e == element : \n            return ( True , i ) \n        \n    \n    return ( False , - 1 ) \n\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique ( lst ) : \n    return len ( lst ) == len ( set ( lst ) ) \n\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list ( list1 , list2 ) : \n    return [ x - y for x , y in zip ( list1 , list2 ) ] \n\n"}
{"task_id": "Mbpp/283", "solution": "def validate ( n ) : \n    s = str ( n ) \n    \n    for i in range ( len ( s ) ) : \n        if s . count ( str ( i ) ) > int ( s [ i ] ) : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/284", "solution": "def check_element ( lst , element ) : \n    return all ( item == element for item in lst ) \n\n"}
{"task_id": "Mbpp/285", "solution": "import re \ndef text_match_two_three ( text ) : \n    patterns = 'ab{2,3}' \n    \n    if re . search ( patterns , text ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated ( arr , n , k ) : \n    def kadane ( arr , n ) : \n        max_so_far = float ( '-inf' ) \n        \n        max_ending_here = 0 \n        \n        for i in range ( n ) : \n            max_ending_here += arr [ i ] \n            if max_so_far < max_ending_here : \n                max_so_far = max_ending_here \n                \n            \n            if max_ending_here < 0 : \n                max_ending_here = 0 \n                \n            \n        \n        return max_so_far \n    \n    max_kadane = kadane ( arr , n ) \n    \n    max_wrap = 0 \n    \n    for i in range ( n ) : \n        max_wrap += arr [ i ] \n        arr [ i ] = - arr [ i ] \n        \n    \n    max_wrap = max_wrap + kadane ( arr , n ) \n    \n    if max_wrap > max_kadane : \n        max_kadane = max_wrap \n        \n    \n    if max_kadane < 0 : \n        max_kadane = 0 \n        \n    \n    if k == 1 : \n        return max_kadane \n    \n    max_kadane_k_times = float ( '-inf' ) \n    \n    for i in range ( n ) : \n        current_sum = 0 \n        \n        for j in range ( i , i + n ) : \n            current_sum += arr [ j % n ] \n            max_kadane_k_times = max ( max_kadane_k_times , current_sum ) \n            \n        \n    \n    return max ( max_kadane , max_kadane_k_times ) \n\n"}
{"task_id": "Mbpp/287", "solution": "def square_Sum ( n ) : \n    sm = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sm = sm + ( ( 2 * i ) * ( 2 * i ) ) \n        \n    \n    return sm \n\n"}
{"task_id": "Mbpp/290", "solution": "def max_length ( lst ) : \n    max_len = max ( len ( x ) for x in lst ) \n    \n    max_list = max ( lst , key = lambda x : len ( x ) ) \n    \n    return max_len , max_list \n\n"}
{"task_id": "Mbpp/292", "solution": "def find ( a , b ) : \n    return a // b \n\n"}
{"task_id": "Mbpp/293", "solution": "import math \ndef otherside_rightangle ( a , b ) : \n    c = math . sqrt ( a ** 2 + b ** 2 ) \n    \n    return c \n\n"}
{"task_id": "Mbpp/294", "solution": "def max_val ( lst ) : \n    max_val = float ( '-inf' ) \n    \n    for val in lst : \n        if isinstance ( val , ( int , float ) ) : \n            if val > max_val : \n                max_val = val \n                \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count ( arr ) : \n    n = len ( arr ) \n    \n    inv_count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if arr [ i ] > arr [ j ] : \n                inv_count += 1 \n            \n        \n    \n    return inv_count \n\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list ( nested_list ) : \n    flat_list = [ ] \n    \n    for element in nested_list : \n        if isinstance ( element , list ) : \n            flat_list . extend ( flatten_list ( element ) ) \n        else : \n            flat_list . append ( element ) \n        \n    \n    return flat_list \n\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate ( tuples_list ) : \n    max_aggregate = 0 \n    \n    max_name = \"\" \n    \n    for item in tuples_list : \n        name = item [ 0 ] \n        \n        aggregate = item [ 1 ] \n        \n        if aggregate > max_aggregate : \n            max_aggregate = aggregate \n            \n            max_name = name \n            \n        \n    \n    return ( max_name , max_aggregate ) \n\n"}
{"task_id": "Mbpp/300", "solution": "import math \ndef count_binary_seq ( n ) : \n    count = 0 \n    \n    for i in range ( 2 ** n ) : \n        first_half = bin ( i ) [ 2 : ] \n        \n        second_half = bin ( i ) [ 2 : ] \n        \n        if sum ( [ int ( x ) for x in first_half ] ) == sum ( [ int ( x ) for x in second_half ] ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth ( d , depth = 1 ) : \n    if not isinstance ( d , dict ) : \n        return depth \n    \n    return max ( dict_depth ( v , depth + 1 ) for v in d . values ( ) ) \n\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp ( lst ) : \n    result = [ ] \n    \n    for item in lst : \n        words = item . split ( ) \n        \n        for word in words : \n            if word . startswith ( 'p' ) : \n                result . append ( word ) \n                break \n            \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq ( arr , n , k , i ) : \n    if i >= k : \n        return 0 \n    \n    max_sum = 0 \n    \n    for j in range ( i + 1 , k ) : \n        if arr [ j ] > arr [ i ] : \n            max_sum = max ( max_sum , arr [ i ] + max_sum_increasing_subseq ( arr , n , k , j ) ) \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/308", "solution": "def large_product ( list1 , list2 , n ) : \n    products = [ i * j for i in list1 for j in list2 ] \n    \n    largest_products = sorted ( products , reverse = True ) [ : n ] \n    \n    return largest_products \n\n"}
{"task_id": "Mbpp/309", "solution": "def maximum ( a , b ) : \n    if a > b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple ( s ) : \n    return tuple ( s ) \n\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit ( n ) : \n    m = 1 \n    \n    while m | n != m : \n        m <<= 1 \n    \n    return m | n \n\n"}
{"task_id": "Mbpp/312", "solution": "import math \ndef volume_cone ( r , h ) : \n    volume = math . pi * r ** 2 * h / 3 \n    \n    return volume \n\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2 ( n ) : \n    power = 1 \n    \n    while power * 2 <= n : \n        power *= 2 \n    \n    return power \n\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas ( n ) : \n    if n == 0 : \n        return 2 \n    elif n == 1 : \n        return 1 \n    else : \n        a , b = 2 , 1 \n        \n        for _ in range ( 2 , n + 1 ) : \n            a , b = b , a + b \n            \n        \n        return b \n    \n\n"}
{"task_id": "Mbpp/390", "solution": "def add_string ( lst , format_string ) : \n    return [ format_string . format ( i ) for i in lst ] \n\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary ( keys , values , scores ) : \n    result = [ ] \n    \n    for key , value , score in zip ( keys , values , scores ) : \n        result . append ( { key : { value : score } } ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum ( n ) : \n    if n == 1 : \n        return 1 \n    \n    max_sum = n \n    \n    for i in [ 2 , 3 , 4 , 5 ] : \n        if n % i == 0 : \n            max_sum = max ( max_sum , get_max_sum ( n // i ) + n ) \n            \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct ( tup ) : \n    return len ( tup ) == len ( set ( tup ) ) \n\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character ( s ) : \n    char_count = { } \n    \n    for char in s : \n        if char in char_count : \n            char_count [ char ] += 1 \n        else : \n            char_count [ char ] = 1 \n            \n        \n    \n    for char in s : \n        if char_count [ char ] == 1 : \n            return char \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers ( a , b , c ) : \n    if ( a - b ) * ( c - a ) >= 0 : \n        return a \n    elif ( b - a ) * ( c - b ) >= 0 : \n        return b \n    else : \n        return c \n    \n\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits ( lst ) : \n    total_sum = 0 \n    \n    for item in lst : \n        if isinstance ( item , int ) : \n            total_sum += sum ( int ( digit ) for digit in str ( abs ( item ) ) ) \n        \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/404", "solution": "def minimum ( a , b ) : \n    if a < b : \n        return a \n    else : \n        return b \n    \n\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex ( tuplex , element ) : \n    return element in tuplex \n\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity ( n ) : \n    return n % 2 != 0 \n\n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple ( list1 ) : \n    result = min ( x * y for x , y in list1 ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/410", "solution": "def min_val ( lst ) : \n    int_lst = [ i for i in lst if isinstance ( i , int ) ] \n    \n    return min ( int_lst ) \n\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd ( lst ) : \n    return [ num for num in lst if num % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element ( tuples_list , n ) : \n    return [ t [ n ] for t in tuples_list ] \n\n"}
{"task_id": "Mbpp/414", "solution": "def overlapping ( seq1 , seq2 ) : \n    for i in seq1 : \n        if i in seq2 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product ( arr ) : \n    max1 = max2 = float ( '-inf' ) \n    \n    \n    min1 = min2 = float ( 'inf' ) \n    \n    \n    for num in arr : \n        if num > max1 : \n            max2 = max1 \n            \n            max1 = num \n            \n        elif num > max2 : \n            max2 = num \n            \n        \n        if num < min1 : \n            min2 = min1 \n            \n            min1 = num \n            \n        elif num < min2 : \n            min2 = num \n            \n        \n    \n    if max1 * max2 > min1 * min2 : \n        return ( max2 , max1 ) \n    else : \n        return ( min1 , min2 ) \n    \n\n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max ( lst ) : \n    max_len = max ( len ( x ) for x in lst ) \n    \n    for x in lst : \n        if len ( x ) == max_len : \n            return x \n        \n    \n\n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum ( numbers ) : \n    rounded_numbers = [ round ( num ) for num in numbers ] \n    \n    total_sum = sum ( rounded_numbers ) \n    \n    result = total_sum * len ( numbers ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        even_num = 2 * i \n        \n        sum += even_num * even_num * even_num \n    \n    return sum \n\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple ( tup ) : \n    result = '-' . join ( map ( str , tup ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube ( n ) : \n    sum_of_cubes = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum_of_cubes += i ** 3 \n    \n    return sum_of_cubes / n \n\n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear ( tup ) : \n    result = [ i [ - 1 ] for i in tup ] \n    \n    return result \n\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list ( lst , element ) : \n    count = 0 \n    \n    for sublist in lst : \n        if element in sublist : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers ( numbers ) : \n    return [ num for num in numbers if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format ( date ) : \n    year , month , day = date . split ( '-' ) \n    \n    return f'{day}-{month}-{year}' \n\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort ( arr ) : \n    n = len ( arr ) \n    \n    gap = n // 2 \n    \n    while gap > 0 : \n        for i in range ( gap , n ) : \n            temp = arr [ i ] \n            \n            j = i \n            \n            while j >= gap and arr [ j - gap ] > temp : \n                arr [ j ] = arr [ j - gap ] \n                \n                j -= gap \n            \n            arr [ j ] = temp \n            \n        \n        gap //= 2 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples ( t1 , t2 ) : \n    result = tuple ( a & b for a , b in zip ( t1 , t2 ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix ( a , b , c ) : \n    directrix = 4 * a * c - b * b - 4 * a * c \n    \n    return directrix \n\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium ( a , b , c ) : \n    return ( a + b ) / 2 \n\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater ( arr , num ) : \n    return all ( num > x for x in arr ) \n\n"}
{"task_id": "Mbpp/435", "solution": "def last_Digit ( n ) : \n    return n % 10 \n\n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos ( nums ) : \n    return [ num for num in nums if num < 0 ] \n\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd ( s ) : \n    result = \"\" \n    \n    for i in range ( len ( s ) ) : \n        if i % 2 == 0 : \n            result += s [ i ] \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single ( nums ) : \n    result = int ( '' . join ( map ( str , nums ) ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/440", "solution": "import re \ndef find_adverb_position ( sentence ) : \n    adverb_pattern = r'\\b\\w+ly\\b' \n    \n    match = re . search ( adverb_pattern , sentence ) \n    \n    if match : \n        adverb = match . group ( ) \n        \n        position = match . start ( ) \n        \n        return position , len ( adverb ) , adverb \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube ( size ) : \n    return 6 * ( size ** 2 ) \n\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication ( test_tup1 , test_tup2 ) : \n    res = tuple ( tuple ( a * b for a , b in zip ( tup1 , tup2 ) ) for tup1 , tup2 in zip ( test_tup1 , test_tup2 ) ) \n    \n    return res \n\n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence ( tup , lst ) : \n    count = 0 \n    \n    for item in tup : \n        if item in lst : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums ( nums ) : \n    return [ num ** 3 for num in nums ] \n\n"}
{"task_id": "Mbpp/448", "solution": "def cal_sum ( n ) : \n    if n <= 2 : \n        return n \n    \n    p0 , p1 , p2 = 3 , 0 , 2 \n    \n    for _ in range ( 3 , n + 1 ) : \n        p = p0 + p1 + p2 \n        \n        p0 , p1 , p2 = p1 , p2 , p \n        \n    \n    return p \n\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string ( lst , size ) : \n    return [ s for s in lst if len ( s ) == size ] \n\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces ( s ) : \n    return s . replace ( \" \" , \"\" ) \n\n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors ( n ) : \n    i = 2 \n    \n    sum = 0 \n    \n    while i <= n : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n        \n        i += 1 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/454", "solution": "import re \ndef text_match_wordz ( text ) : \n    patterns = '\\w*z.\\w*' \n    \n    if re . search ( patterns , text ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number ( month_number ) : \n    thirty_one_day_months = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] \n    \n    if month_number in thirty_one_day_months : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list ( lst ) : \n    return [ s [ : : - 1 ] for s in lst ] \n\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min ( lst ) : \n    min_len = min ( len ( x ) for x in lst ) \n    \n    min_list = [ x for x in lst if len ( x ) == min_len ] \n    \n    return min_list [ 0 ] \n\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area ( length , width ) : \n    return length * width \n\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase ( s ) : \n    return '' . join ( c for c in s if not c . isupper ( ) ) \n\n"}
{"task_id": "Mbpp/460", "solution": "def Extract ( lst ) : \n    return [ sublist [ 0 ] for sublist in lst ] \n\n"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations \ndef combinations_list ( lst ) : \n    result = [ ] \n    \n    for i in range ( len ( lst ) + 1 ) : \n        for subset in combinations ( lst , i ) : \n            result . append ( list ( subset ) ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product ( nums ) : \n    if not nums : \n        return 0 \n    \n    max_product = min_product = result = nums [ 0 ] \n    \n    \n    \n    for i in range ( 1 , len ( nums ) ) : \n        if nums [ i ] < 0 : \n            max_product , min_product = min_product , max_product \n            \n        \n        max_product = max ( nums [ i ] , max_product * nums [ i ] ) \n        \n        min_product = min ( nums [ i ] , min_product * nums [ i ] ) \n        \n        result = max ( result , max_product ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty ( d ) : \n    return { k : v for k , v in d . items ( ) if v is not None } \n\n"}
{"task_id": "Mbpp/468", "solution": "def max_product ( nums ) : \n    n = len ( nums ) \n    \n    max_product = 0 \n    \n    for i in range ( n ) : \n        product = 1 \n        \n        for j in range ( i , n ) : \n            product *= nums [ j ] \n            max_product = max ( max_product , product ) \n            \n        \n    \n    return max_product \n\n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise ( test_tup ) : \n    res = tuple ( i + j for i , j in zip ( test_tup , test_tup [ 1 : ] ) ) \n    \n    return ( res ) \n\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder ( arr , n ) : \n    product = 1 \n    \n    for num in arr : \n        product = ( product * num ) % n \n        \n    \n    return product \n\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive ( lst ) : \n    lst = sorted ( lst ) \n    \n    for i in range ( len ( lst ) - 1 ) : \n        if lst [ i ] + 1 != lst [ i + 1 ] : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection ( test_list1 , test_list2 ) : \n    res = set ( ) \n    \n    for i in test_list1 : \n        for j in test_list2 : \n            if set ( i ) == set ( j ) : \n                res . add ( tuple ( sorted ( i ) ) ) \n            \n        \n    \n    return res \n\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char ( s , old_char , new_char ) : \n    return s . replace ( old_char , new_char ) \n\n"}
{"task_id": "Mbpp/475", "solution": "def sort_counter ( d ) : \n    return sorted ( d . items ( ) , key = lambda x : x [ 1 ] , reverse = True ) \n\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum ( arr ) : \n    return max ( arr ) + min ( arr ) \n\n"}
{"task_id": "Mbpp/477", "solution": "def is_lower ( s ) : \n    return s . lower ( ) \n\n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase ( s ) : \n    result = '' \n    \n    for char in s : \n        if char . isupper ( ) : \n            result += char \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/479", "solution": "def first_Digit ( n ) : \n    while n >= 10 : \n        n = n // 10 \n        \n    \n    return n \n\n"}
{"task_id": "Mbpp/554", "solution": "def Split ( lst ) : \n    return [ num for num in lst if num % 2 != 0 ] \n\n"}
{"task_id": "Mbpp/555", "solution": "def difference ( n ) : \n    sum_n = n * ( n + 1 ) // 2 \n    \n    sum_cubes = ( n * ( n + 1 ) // 2 ) ** 2 \n    \n    return sum_cubes - sum_n \n\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair ( arr , n ) : \n    odd_count = 0 \n    \n    even_count = 0 \n    \n    for i in range ( n ) : \n        if arr [ i ] % 2 == 0 : \n            even_count += 1 \n        else : \n            odd_count += 1 \n        \n    \n    return odd_count * even_count \n\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string ( s ) : \n    return s . swapcase ( ) \n\n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums ( x , y ) : \n    x = str ( x ) \n    \n    y = str ( y ) \n    \n    sum = 0 \n    \n    for i in range ( min ( len ( x ) , len ( y ) ) ) : \n        sum += abs ( int ( x [ i ] ) - int ( y [ i ] ) ) \n    \n    sum += abs ( len ( x ) - len ( y ) ) \n    return sum \n\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum ( arr , n ) : \n    max_sum = arr [ 0 ] \n    \n    current_sum = arr [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        current_sum = max ( arr [ i ] , current_sum + arr [ i ] ) \n        \n        max_sum = max ( max_sum , current_sum ) \n        \n    \n    return max_sum \n\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements ( tup1 , tup2 ) : \n    union_set = set ( tup1 + tup2 ) \n    \n    sorted_union = tuple ( sorted ( union_set ) ) \n    \n    return sorted_union \n\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length ( lst ) : \n    max_length = 0 \n    \n    for sublist in lst : \n        if len ( sublist ) > max_length : \n            max_length = len ( sublist ) \n            \n        \n    \n    return max_length \n\n"}
{"task_id": "Mbpp/563", "solution": "import re \ndef extract_values ( s ) : \n    return re . findall ( r'\"(.*?)\"' , s ) \n\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs ( arr , n ) : \n    count = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            if arr [ i ] != arr [ j ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/565", "solution": "def split ( s ) : \n    return [ c for c in s ] \n\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits ( n ) : \n    sum = 0 \n    \n    while n > 0 : \n        sum += n % 10 \n        n = n // 10 \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/567", "solution": "def issort_list ( lst ) : \n    return lst == sorted ( lst ) \n\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list ( N ) : \n    return [ { } for _ in range ( N ) ] \n\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists ( lst ) : \n    return [ sorted ( sublist ) for sublist in lst ] \n\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums ( nums ) : \n    count = { } \n    \n    for num in nums : \n        if num in count : \n            count [ num ] += 1 \n        else : \n            count [ num ] = 1 \n            \n        \n    \n    return [ num for num in nums if count [ num ] == 1 ] \n\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product ( lst ) : \n    unique_nums = set ( lst ) \n    \n    product = 1 \n    \n    for num in unique_nums : \n        product *= num \n    \n    return product \n\n"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array ( arr1 , arr2 ) : \n    i = 0 \n    \n    j = 0 \n    \n    while i < len ( arr1 ) and j < len ( arr2 ) : \n        if arr1 [ i ] == arr2 [ j ] : \n            i += 1 \n            j += 1 \n        else : \n            i += 1 \n        \n    \n    return j == len ( arr2 ) \n\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial ( n ) : \n    if n < 0 : \n        return \"Invalid input, n must be a non-negative integer\" \n    \n    if n == 0 : \n        return 1 \n    \n    factorial = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        factorial *= i \n    \n    return factorial % 10 \n\n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists ( list1 , list2 , list3 ) : \n    result = [ ] \n    \n    for i in range ( len ( list1 ) ) : \n        result . append ( list1 [ i ] ) \n        result . append ( list2 [ i ] ) \n        result . append ( list3 [ i ] ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar ( test_tup1 , test_tup2 ) : \n    res = tuple ( set ( test_tup1 ) ^ set ( test_tup2 ) ) \n    \n    return res \n\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even ( tup ) : \n    result = [ ] \n    \n    for i in tup : \n        if isinstance ( i , tuple ) : \n            result . append ( extract_even ( i ) ) \n        elif i % 2 == 0 : \n            result . append ( i ) \n        \n    \n    return tuple ( result ) \n\n"}
{"task_id": "Mbpp/581", "solution": "import math \ndef surface_Area ( base_edge , height ) : \n    base_area = base_edge ** 2 \n    \n    slant_height = math . sqrt ( height ** 2 + ( base_edge / 2 ) ** 2 ) \n    \n    lateral_area = 4 * base_edge * slant_height \n    \n    surface_area = base_area + lateral_area \n    \n    return round ( surface_area , 2 ) \n\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number ( n ) : \n    if n <= 1 : \n        return 1 \n    \n    catalan = [ 0 for _ in range ( n + 1 ) ] \n    \n    catalan [ 0 ] = 1 \n    \n    catalan [ 1 ] = 1 \n    \n    for i in range ( 2 , n + 1 ) : \n        for j in range ( i ) : \n            catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] \n        \n    \n    return catalan [ n ] \n\n"}
{"task_id": "Mbpp/585", "solution": "def expensive_items ( data , n ) : \n    sorted_data = sorted ( data , key = lambda x : x [ 'price' ] , reverse = True ) \n    \n    return sorted_data [ : n ] \n\n"}
{"task_id": "Mbpp/586", "solution": "def split_Arr ( arr , n ) : \n    return arr [ n : ] + arr [ : n ] \n\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple ( lst ) : \n    return tuple ( lst ) \n\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff ( nums ) : \n    return max ( nums ) - min ( nums ) \n\n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares ( start , end ) : \n    squares = [ ] \n    \n    for i in range ( int ( start ** 0.5 ) , int ( end ** 0.5 ) + 1 ) : \n        square = i * i \n        \n        if start <= square <= end : \n            squares . append ( square ) \n        \n    \n    return squares \n\n"}
{"task_id": "Mbpp/590", "solution": "import cmath \ndef polar_rect ( r , theta ) : \n    z = cmath . rect ( r , theta ) \n    \n    real = z . real \n    \n    imag = z . imag \n    \n    return ( ( real , imag ) , z ) \n\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List ( input_list ) : \n    input_list [ 0 ] , input_list [ - 1 ] = input_list [ - 1 ] , input_list [ 0 ] \n    \n    return input_list \n\n"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product ( n ) : \n    sum_product = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        sum_product += math . comb ( n , i ) * math . comb ( n , i - 1 ) \n    \n    return sum_product \n\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip ( ip ) : \n    ip_parts = ip . split ( '.' ) \n    \n    new_ip_parts = [ ] \n    \n    for part in ip_parts : \n        new_part = part . lstrip ( '0' ) \n        \n        if new_part == '' : \n            new_part = '0' \n            \n        \n        new_ip_parts . append ( new_part ) \n    \n    return '.' . join ( new_ip_parts ) \n\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd ( lst ) : \n    first_even = next ( ( x for x in lst if x % 2 == 0 ) , None ) \n    \n    first_odd = next ( ( x for x in lst if x % 2 != 0 ) , None ) \n    \n    if first_even is None or first_odd is None : \n        return None \n    \n    return first_even - first_odd \n\n"}
{"task_id": "Mbpp/596", "solution": "import sys \ndef tuple_size ( tup ) : \n    return sys . getsizeof ( tup ) \n\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth ( arr1 , arr2 , k ) : \n    i = 0 \n    \n    j = 0 \n    \n    count = 1 \n    \n    while i < len ( arr1 ) and j < len ( arr2 ) : \n        if arr1 [ i ] < arr2 [ j ] : \n            if count == k : \n                return arr1 [ i ] \n            \n            i += 1 \n        else : \n            if count == k : \n                return arr2 [ j ] \n            \n            j += 1 \n        \n        count += 1 \n    \n    while i < len ( arr1 ) : \n        if count == k : \n            return arr1 [ i ] \n        \n        i += 1 \n        count += 1 \n    \n    while j < len ( arr2 ) : \n        if count == k : \n            return arr2 [ j ] \n        \n        j += 1 \n        count += 1 \n    \n\n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number ( n ) : \n    num_str = str ( n ) \n    \n    num_digits = len ( num_str ) \n    \n    sum = 0 \n    \n    for digit in num_str : \n        sum += int ( digit ) ** num_digits \n    \n    return sum == n \n\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average ( n ) : \n    sum_natural = n * ( n + 1 ) // 2 \n    \n    average_natural = sum_natural / n \n    \n    return sum_natural , average_natural \n\n"}
{"task_id": "Mbpp/600", "solution": "def is_Even ( n ) : \n    return n % 2 == 0 \n\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char ( s ) : \n    char_set = set ( ) \n    \n    for char in s : \n        if char in char_set : \n            return char \n        \n        char_set . add ( char ) \n    \n    return None \n\n"}
{"task_id": "Mbpp/603", "solution": "def get_ludic ( n ) : \n    ludic_numbers = [ ] \n    \n    numbers = list ( range ( 1 , n + 1 ) ) \n    \n    index = 0 \n    \n    while index < len ( numbers ) : \n        ludic_numbers . append ( numbers [ index ] ) \n        numbers = [ numbers [ i ] for i in range ( len ( numbers ) ) if ( i + 1 ) % ( index + 1 ) != 0 or i <= index ] \n        \n        index += 1 \n    \n    return ludic_numbers \n\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words ( s ) : \n    words = s . split ( \" \" ) \n    \n    reversed_words = \" \" . join ( reversed ( words ) ) \n    \n    return reversed_words \n\n"}
{"task_id": "Mbpp/605", "solution": "def prime_num ( n ) : \n    if n <= 1 : \n        return False \n    \n    for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : \n        if n % i == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/606", "solution": "import math \ndef radian_degree ( degrees ) : \n    return degrees * ( math . pi / 180 ) \n\n"}
{"task_id": "Mbpp/607", "solution": "import re \ndef find_literals ( text , pattern ) : \n    match = re . search ( pattern , text ) \n    \n    if match : \n        return match . group ( ) , match . start ( ) , match . end ( ) \n    else : \n        return None \n    \n\n"}
{"task_id": "Mbpp/608", "solution": "def bell_Number ( n ) : \n    bell = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] \n    \n    bell [ 0 ] [ 0 ] = 1 \n    \n    for i in range ( 1 , n + 1 ) : \n        bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ] \n        \n        for j in range ( 1 , i + 1 ) : \n            bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ] \n            \n        \n    \n    return bell [ n ] [ 0 ] \n\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element ( lst , k ) : \n    return [ x for i , x in enumerate ( lst ) if i != k ] \n\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth ( matrix , n ) : \n    max_val = matrix [ 0 ] [ n ] \n    \n    for row in matrix : \n        if row [ n ] > max_val : \n            max_val = row [ n ] \n            \n        \n    \n    return max_val \n\n"}
{"task_id": "Mbpp/612", "solution": "def merge ( lst ) : \n    first_list = [ ] \n    \n    second_list = [ ] \n    \n    for sublist in lst : \n        first_list . append ( sublist [ 0 ] ) \n        second_list . append ( sublist [ 1 ] ) \n    \n    return [ first_list , second_list ] \n\n"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum ( test_tup ) : \n    res = sum ( [ sum ( tup ) for tup in test_tup ] ) \n    \n    return res \n\n"}
{"task_id": "Mbpp/615", "solution": "def average_tuple ( tuples ) : \n    averages = [ ] \n    \n    for t in tuples : \n        average = sum ( t ) / len ( t ) \n        \n        averages . append ( average ) \n    \n    return averages \n\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo ( t1 , t2 ) : \n    return tuple ( a % b for a , b in zip ( t1 , t2 ) ) \n\n"}
{"task_id": "Mbpp/618", "solution": "def div_list ( list1 , list2 ) : \n    result = [ a / b for a , b in zip ( list1 , list2 ) ] \n    \n    return result \n\n"}
{"task_id": "Mbpp/619", "solution": "def move_num ( s ) : \n    num_list = [ ] \n    \n    char_list = [ ] \n    \n    for char in s : \n        if char . isdigit ( ) : \n            num_list . append ( char ) \n        else : \n            char_list . append ( char ) \n        \n    \n    return '' . join ( char_list + num_list ) \n\n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset ( nums ) : \n    nums . sort ( ) \n    n = len ( nums ) \n    \n    dp = [ 1 ] * n \n    \n    for i in range ( 1 , n ) : \n        for j in range ( i ) : \n            if nums [ i ] % nums [ j ] == 0 : \n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) \n                \n            \n        \n    \n    return max ( dp ) \n\n"}
{"task_id": "Mbpp/622", "solution": "def get_median ( list1 , list2 , n ) : \n    merged_list = [ ] \n    \n    i , j = 0 , 0 \n    \n    while i < n and j < n : \n        if list1 [ i ] < list2 [ j ] : \n            merged_list . append ( list1 [ i ] ) \n            i += 1 \n        else : \n            merged_list . append ( list2 [ j ] ) \n            j += 1 \n        \n    \n    while i < n : \n        merged_list . append ( list1 [ i ] ) \n        i += 1 \n    \n    while j < n : \n        merged_list . append ( list2 [ j ] ) \n        j += 1 \n    \n    if n % 2 == 0 : \n        return ( merged_list [ n // 2 ] + merged_list [ n // 2 - 1 ] ) / 2 \n    else : \n        return merged_list [ n // 2 ] \n    \n\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums ( nums , n ) : \n    return [ num ** n for num in nums ] \n\n"}
{"task_id": "Mbpp/624", "solution": "def is_upper ( s ) : \n    return s . upper ( ) \n\n"}
{"task_id": "Mbpp/626", "solution": "import math \ndef triangle_area ( radius ) : \n    if radius <= 0 : \n        return None \n    \n    return radius * radius \n\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces ( string ) : \n    return string . replace ( \" \" , \"%20\" ) \n\n"}
{"task_id": "Mbpp/629", "solution": "def Split ( lst ) : \n    return [ num for num in lst if num % 2 == 0 ] \n\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates ( coord ) : \n    x , y = coord \n    \n    return [ [ x - 1 , y - 1 ] , [ x - 1 , y ] , [ x - 1 , y + 1 ] , [ x , y - 1 ] , [ x , y ] , [ x , y + 1 ] , [ x + 1 , y - 1 ] , [ x + 1 , y ] , [ x + 1 , y + 1 ] ] \n\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces ( s ) : \n    s = s . replace ( ' ' , '_' ) \n    \n    s = s . replace ( '_' , ' ' ) \n    \n    return s \n\n"}
{"task_id": "Mbpp/632", "solution": "def move_zero ( nums ) : \n    non_zero_index = 0 \n    \n    for i in range ( len ( nums ) ) : \n        if nums [ i ] != 0 : \n            nums [ non_zero_index ] , nums [ i ] = nums [ i ] , nums [ non_zero_index ] \n            \n            non_zero_index += 1 \n        \n    \n    return nums \n\n"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum ( arr , n ) : \n    result = 0 \n    \n    for i in range ( n ) : \n        for j in range ( i + 1 , n ) : \n            result += arr [ i ] ^ arr [ j ] \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/635", "solution": "def heap_sort ( arr ) : \n    def heapify ( arr , n , i ) : \n        largest = i \n        \n        l = 2 * i + 1 \n        \n        r = 2 * i + 2 \n        \n        if l < n and arr [ i ] < arr [ l ] : \n            largest = l \n            \n        \n        if r < n and arr [ largest ] < arr [ r ] : \n            largest = r \n            \n        \n        if largest != i : \n            arr [ i ] , arr [ largest ] = arr [ largest ] , arr [ i ] \n            \n            heapify ( arr , n , largest ) \n        \n    \n    n = len ( arr ) \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        heapify ( arr , n , i ) \n    \n    for i in range ( n - 1 , 0 , - 1 ) : \n        arr [ i ] , arr [ 0 ] = arr [ 0 ] , arr [ i ] \n        \n        heapify ( arr , i , 0 ) \n    \n    return arr \n\n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss ( cost_price , selling_price ) : \n    if cost_price == selling_price : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/638", "solution": "def wind_chill ( v , t ) : \n    wci = 13.12 + 0.6215 * t - 11.37 * ( v ** 0.16 ) + 0.3965 * t * ( v ** 0.16 ) \n    \n    return round ( wci ) \n\n"}
{"task_id": "Mbpp/639", "solution": "def sample_nam ( names ) : \n    total_length = 0 \n    \n    for name in names : \n        if name [ 0 ] . isupper ( ) : \n            total_length += len ( name ) \n        \n    \n    return total_length \n\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal ( n ) : \n    return n * ( 7 * n - 5 ) // 2 \n\n"}
{"task_id": "Mbpp/643", "solution": "import re \ndef text_match_wordz_middle ( text ) : \n    patterns = '\\Bz\\B' \n    \n    if re . search ( patterns , text ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K ( arr , k ) : \n    left = 0 \n    \n    right = k - 1 \n    \n    while left < right : \n        arr [ left ] , arr [ right ] = arr [ right ] , arr [ left ] \n        \n        left += 1 \n        right -= 1 \n    \n    return arr \n\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple ( tup , dic ) : \n    return tup + ( dic , ) \n\n"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath ( matrix ) : \n    n = len ( matrix ) \n    \n    dp = [ [ 0 ] * n for _ in range ( n ) ] \n    \n    dp [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] \n    \n    for i in range ( 1 , n ) : \n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] \n        \n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + matrix [ 0 ] [ i ] \n        \n    \n    for i in range ( 1 , n ) : \n        for j in range ( 1 , n ) : \n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + matrix [ i ] [ j ] \n            \n        \n    \n    total_cost = dp [ n - 1 ] [ n - 1 ] \n    \n    num_cells = n * n \n    \n    return total_cost / num_cells \n\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data ( student_data , min_height , min_weight ) : \n    filtered_students = { } \n    \n    for student , ( height , weight ) in student_data . items ( ) : \n        if height >= min_height and weight >= min_weight : \n            filtered_students [ student ] = ( height , weight ) \n            \n        \n    \n    return filtered_students \n\n"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair ( list1 , list2 ) : \n    count = 0 \n    \n    for i in range ( len ( list1 ) ) : \n        if list1 [ i ] == list2 [ i ] : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum ( base , power ) : \n    result = base ** power \n    \n    sum_of_digits = sum ( int ( digit ) for digit in str ( result ) ) \n    \n    return sum_of_digits \n\n"}
{"task_id": "Mbpp/725", "solution": "import re \ndef extract_quotation ( text ) : \n    return re . findall ( r'\"(.*?)\"' , text ) \n\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements ( t ) : \n    if len ( t ) < 2 : \n        return ( ) \n    \n    return tuple ( t [ i ] * t [ i + 1 ] for i in range ( len ( t ) - 1 ) ) \n\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list ( a , b ) : \n    return [ x + y for x , y in zip ( a , b ) ] \n\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates ( lst ) : \n    if not lst : \n        return lst \n    \n    result = [ lst [ 0 ] ] \n    \n    for i in range ( 1 , len ( lst ) ) : \n        if lst [ i ] != lst [ i - 1 ] : \n            result . append ( lst [ i ] ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/731", "solution": "import math \ndef lateralsurface_cone ( r , h ) : \n    l = math . sqrt ( r ** 2 + h ** 2 ) \n    \n    lateralsurface = math . pi * r * l \n    \n    return lateralsurface \n\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar ( s ) : \n    return s . replace ( ' ' , ':' ) . replace ( ',' , ':' ) . replace ( '.' , ':' ) \n\n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence ( arr , target ) : \n    left , right = 0 , len ( arr ) - 1 \n    \n    result = - 1 \n    \n    while left <= right : \n        mid = left + ( right - left ) // 2 \n        \n        if arr [ mid ] == target : \n            result = mid \n            \n            right = mid - 1 \n            \n        elif arr [ mid ] < target : \n            left = mid + 1 \n            \n        else : \n            right = mid - 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod ( arr ) : \n    total_sum = 0 \n    \n    for i in range ( len ( arr ) ) : \n        product = 1 \n        \n        for j in range ( i , len ( arr ) ) : \n            product *= arr [ j ] \n            total_sum += product \n        \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits ( n ) : \n    num_bits = n . bit_length ( ) - 1 \n    \n    mask = ( ( 1 << ( num_bits - 1 ) ) - 1 ) << 1 \n    \n    return n ^ mask \n\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion ( arr , val ) : \n    left , right = 0 , len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] < val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"task_id": "Mbpp/737", "solution": "import re \ndef check_str ( s ) : \n    pattern = r'^[aeiouAEIOU]' \n    \n    if re . match ( pattern , s ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/739", "solution": "import math \ndef find_Index ( n ) : \n    low = 1 \n    \n    high = 10 ** n \n    \n    while low < high : \n        mid = ( low + high ) // 2 \n        \n        triangular_number = mid * ( mid + 1 ) // 2 \n        \n        if triangular_number >= 10 ** ( n - 1 ) : \n            high = mid \n            \n        else : \n            low = mid + 1 \n            \n        \n    \n    return low \n\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict ( tup ) : \n    res = { tup [ i ] : tup [ i + 1 ] for i in range ( 0 , len ( tup ) , 2 ) } \n    \n    return res \n\n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same ( str ) : \n    return len ( set ( str ) ) == 1 \n\n"}
{"task_id": "Mbpp/742", "solution": "import math \ndef area_tetrahedron ( side ) : \n    area = math . sqrt ( 3 ) * ( side ** 2 ) \n    \n    return area \n\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right ( lst , n ) : \n    n = n % len ( lst ) \n    \n    return lst [ - n : ] + lst [ : - n ] \n\n"}
{"task_id": "Mbpp/744", "solution": "def check_none ( tup ) : \n    for i in tup : \n        if i is None : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits ( startnum , endnum ) : \n    divisible_numbers = list ( filter ( lambda x : all ( x % int ( digit ) == 0 for digit in str ( x ) if digit != '0' ) , range ( startnum , endnum + 1 ) ) ) \n    \n    return divisible_numbers \n\n"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces ( s ) : \n    result = \"\" \n    \n    for char in s : \n        if char . isupper ( ) : \n            result += \" \" + char \n        else : \n            result += char \n        \n    \n    return result . strip ( ) \n\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings ( strings ) : \n    numeric_strings = [ int ( s ) for s in strings ] \n    \n    numeric_strings . sort ( ) \n    return numeric_strings \n\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple ( lst , tup ) : \n    lst . extend ( tup ) \n    return lst \n\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap ( arr ) : \n    n = len ( arr ) \n    \n    for i in range ( n // 2 - 1 , - 1 , - 1 ) : \n        if arr [ i ] > arr [ 2 * i + 1 ] or ( 2 * i + 2 < n and arr [ i ] > arr [ 2 * i + 2 ] ) : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num ( n ) : \n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        jacobsthal = [ 0 ] * ( n + 1 ) \n        \n        jacobsthal [ 0 ] = 0 \n        \n        jacobsthal [ 1 ] = 1 \n        \n        for i in range ( 2 , n + 1 ) : \n            jacobsthal [ i ] = jacobsthal [ i - 1 ] + 2 * jacobsthal [ i - 2 ] \n            \n        \n        return jacobsthal [ n ] \n    \n\n"}
{"task_id": "Mbpp/753", "solution": "def min_k ( test_list , k ) : \n    res = sorted ( test_list , key = lambda x : x [ 1 ] ) [ : k ] \n    \n    return ( res ) \n\n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list ( l1 , l2 , l3 ) : \n    common_elements = [ ] \n    \n    min_length = min ( len ( l1 ) , len ( l2 ) , len ( l3 ) ) \n    \n    for i in range ( min_length ) : \n        if l1 [ i ] == l2 [ i ] == l3 [ i ] : \n            common_elements . append ( l1 [ i ] ) \n        \n    \n    return common_elements \n\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest ( numbers ) : \n    unique_numbers = list ( set ( numbers ) ) \n    \n    if len ( unique_numbers ) < 2 : \n        return None \n    \n    unique_numbers . sort ( ) \n    return unique_numbers [ 1 ] \n\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs ( lst ) : \n    count = 0 \n    \n    for i in range ( len ( lst ) ) : \n        for j in range ( i + 1 , len ( lst ) ) : \n            if lst [ i ] == lst [ j ] [ : : - 1 ] : \n                count += 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists ( lst ) : \n    result = { } \n    \n    for sublist in lst : \n        tuple_sublist = tuple ( sublist ) \n        \n        if tuple_sublist in result : \n            result [ tuple_sublist ] += 1 \n        else : \n            result [ tuple_sublist ] = 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/759", "solution": "import re \ndef is_decimal ( s ) : \n    pattern = r'^\\d+\\.\\d{2}$' \n    \n    return bool ( re . match ( pattern , s ) ) \n\n"}
{"task_id": "Mbpp/760", "solution": "def unique_Element ( nums ) : \n    return len ( set ( nums ) ) == 1 \n\n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number ( month_number ) : \n    if month_number in [ 4 , 6 , 9 , 11 ] : \n        return True \n    elif month_number == 2 : \n        return False \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff ( arr , n ) : \n    arr . sort ( ) \n    min_diff = float ( 'inf' ) \n    \n    for i in range ( n - 1 ) : \n        if arr [ i + 1 ] - arr [ i ] < min_diff : \n            min_diff = arr [ i + 1 ] - arr [ i ] \n            \n        \n    \n    return min_diff \n\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr ( s ) : \n    count = 0 \n    \n    for char in s : \n        if char . isdigit ( ) : \n            count += 1 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/765", "solution": "def is_polite ( n ) : \n    count = 0 \n    \n    num = 1 \n    \n    while True : \n        binary = bin ( num ) [ 2 : ] \n        \n        if binary . count ( '1' ) > 1 : \n            count += 1 \n            if count == n : \n                return num \n            \n        \n        num += 1 \n    \n\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise ( lst ) : \n    return [ ( lst [ i ] , lst [ i + 1 ] ) for i in range ( len ( lst ) - 1 ) ] \n\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count ( arr , sum ) : \n    count = 0 \n    \n    seen = { } \n    \n    for num in arr : \n        complement = sum - num \n        \n        if complement in seen : \n            count += seen [ complement ] \n        \n        if num in seen : \n            seen [ num ] += 1 \n        else : \n            seen [ num ] = 1 \n            \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/769", "solution": "def Diff ( list1 , list2 ) : \n    result = list ( set ( list1 ) - set ( list2 ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum ( n ) : \n    sum = 0 \n    \n    for i in range ( 1 , 2 * n , 2 ) : \n        sum += i ** 4 \n    \n    return sum \n\n"}
{"task_id": "Mbpp/771", "solution": "def check_expression ( expression ) : \n    stack = [ ] \n    \n    open_brackets = [ '(' , '[' , '{' ] \n    \n    close_brackets = [ ')' , ']' , '}' ] \n    \n    for char in expression : \n        if char in open_brackets : \n            stack . append ( char ) \n        elif char in close_brackets : \n            if len ( stack ) == 0 : \n                return False \n            \n            open_bracket = stack . pop ( ) \n            \n            if open_brackets . index ( open_bracket ) != close_brackets . index ( char ) : \n                return False \n            \n        \n    \n    return len ( stack ) == 0 \n\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length ( s , k ) : \n    words = s . split ( ) \n    \n    result = [ ] \n    \n    for word in words : \n        if len ( word ) != k : \n            result . append ( word ) \n        \n    \n    return ' ' . join ( result ) \n\n"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring ( string , substring ) : \n    index = 0 \n    \n    while index < len ( string ) : \n        index = string . find ( substring , index ) \n        \n        if index == - 1 : \n            return None \n        \n        yield substring , index , index + len ( substring ) - 1 \n        \n        index += 1 \n    \n\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position ( lst ) : \n    for i in range ( 1 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 == 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum ( nums ) : \n    unique_nums = set ( nums ) \n    \n    return sum ( unique_nums ) \n\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates ( lst ) : \n    if not lst : \n        return [ ] \n    \n    result = [ [ lst [ 0 ] ] ] \n    \n    for i in range ( 1 , len ( lst ) ) : \n        if lst [ i ] == lst [ i - 1 ] : \n            result [ - 1 ] . append ( lst [ i ] ) \n        else : \n            result . append ( [ lst [ i ] ] ) \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations \ndef find_combinations ( tuples_list ) : \n    result = [ ] \n    \n    for pair in combinations ( tuples_list , 2 ) : \n        sum1 = pair [ 0 ] [ 0 ] + pair [ 1 ] [ 0 ] \n        \n        sum2 = pair [ 0 ] [ 1 ] + pair [ 1 ] [ 1 ] \n        \n        result . append ( ( sum1 , sum2 ) ) \n    \n    return result \n\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors ( n ) : \n    count = 0 \n    \n    for i in range ( 1 , n + 1 ) : \n        if n % i == 0 : \n            count += 1 \n        \n    \n    return count % 2 == 0 \n\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum ( arr ) : \n    total_sum = 0 \n    \n    n = len ( arr ) \n    \n    for i in range ( n ) : \n        total_sum += ( ( i + 1 ) * ( n - i ) + 1 ) // 2 * arr [ i ] \n    \n    return total_sum \n\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd ( list1 ) : \n    even = 0 \n    \n    odd = 0 \n    \n    for i in list1 : \n        if i % 2 == 0 : \n            even = i \n            \n            break \n        \n    \n    for i in list1 : \n        if i % 2 != 0 : \n            odd = i \n            \n            break \n        \n    \n    return even * odd \n\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int ( s ) : \n    s = s . replace ( \"(\" , \"\" ) . replace ( \")\" , \"\" ) \n    \n    s = s . split ( \", \" ) \n    \n    s = [ int ( i ) for i in s ] \n    \n    return tuple ( s ) \n\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion ( arr , val ) : \n    left , right = 0 , len ( arr ) \n    \n    while left < right : \n        mid = ( left + right ) // 2 \n        \n        if arr [ mid ] < val : \n            left = mid + 1 \n            \n        else : \n            right = mid \n            \n        \n    \n    return left \n\n"}
{"task_id": "Mbpp/787", "solution": "import re \ndef text_match_three ( text ) : \n    patterns = 'ab{3}*' \n    \n    if re . search ( patterns , text ) : \n        return 'Found a match!' \n    else : \n        return ( 'Not matched!' ) \n    \n\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple ( lst , s ) : \n    return tuple ( lst + [ s ] ) \n\n"}
{"task_id": "Mbpp/790", "solution": "def even_position ( lst ) : \n    for i in range ( 0 , len ( lst ) , 2 ) : \n        if lst [ i ] % 2 != 0 : \n            return False \n        \n    \n    return True \n\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested ( tup ) : \n    res = tuple ( ele for ele in tup if not isinstance ( ele , tuple ) ) \n    \n    return res \n\n"}
{"task_id": "Mbpp/792", "solution": "def count_list ( lists ) : \n    return len ( lists ) \n\n"}
{"task_id": "Mbpp/793", "solution": "def last ( arr , x ) : \n    n = len ( arr ) \n    \n    low = 0 \n    \n    high = n - 1 \n    \n    result = - 1 \n    \n    while ( low <= high ) : \n        mid = ( low + high ) // 2 \n        \n        if arr [ mid ] > x : \n            high = mid - 1 \n            \n        elif arr [ mid ] < x : \n            low = mid + 1 \n            \n        else : \n            result = mid \n            \n            low = mid + 1 \n            \n        \n    \n    return result \n\n"}
{"task_id": "Mbpp/794", "solution": "import re \ndef text_starta_endb ( text ) : \n    patterns = 'a.*?b$' \n    \n    if re . search ( patterns , text ) : \n        return True \n    else : \n        return False \n    \n\n"}
{"task_id": "Mbpp/796", "solution": "def return_sum ( dictionary ) : \n    return sum ( dictionary . values ( ) ) \n\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range ( l , r ) : \n    sum = 0 \n    \n    for i in range ( l , r + 1 ) : \n        if i % 2 != 0 : \n            sum += i \n        \n    \n    return sum \n\n"}
{"task_id": "Mbpp/798", "solution": "def _sum ( arr ) : \n    sum = 0 \n    \n    for i in arr : \n        sum += i \n    \n    return sum \n\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate ( n , d ) : \n    d = d % 32 \n    \n    n = n << d \n    \n    n = n | ( n & 0xFFFFFFFF ) >> ( 32 - d ) \n    \n    return n \n\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces ( s ) : \n    return s . replace ( \" \" , \"\" ) \n\n"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal ( a , b , c ) : \n    count = 0 \n    \n    if a == b == c : \n        count = 3 \n        \n    elif a == b or b == c or a == c : \n        count = 2 \n        \n    \n    return count \n\n"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square ( n ) : \n    if n < 0 : \n        return False \n    \n    x = n // 2 \n    \n    seen = set ( [ x ] ) \n    \n    while x * x != n : \n        x = ( x + ( n // x ) ) // 2 \n        \n        if x in seen : \n            return False \n        \n        seen . add ( x ) \n    \n    return True \n\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even ( lst ) : \n    for num in lst : \n        if num % 2 == 0 : \n            return True \n        \n    \n    return False \n\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list ( list_of_lists ) : \n    return max ( list_of_lists , key = sum ) \n\n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase ( s ) : \n    max_count = 0 \n    \n    current_count = 0 \n    \n    for char in s : \n        if char . isupper ( ) : \n            current_count += 1 \n            max_count = max ( max_count , current_count ) \n            \n        else : \n            current_count = 0 \n            \n        \n    \n    return max_count \n\n"}
{"task_id": "Mbpp/807", "solution": "def first_odd ( nums ) : \n    for num in nums : \n        if num % 2 != 0 : \n            return num \n        \n    \n    return None \n\n"}
{"task_id": "Mbpp/808", "solution": "def check_K ( test_tup , K ) : \n    return K in test_tup \n\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller ( t1 , t2 ) : \n    return all ( x < y for x , y in zip ( t1 , t2 ) ) \n\n"}